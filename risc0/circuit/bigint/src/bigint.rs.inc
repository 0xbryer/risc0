bigint_declare_byte_poly!(BytePoly_32, 32);
bigint_declare_byte_poly!(BytePoly_64, 64);
bigint_declare_byte_poly!(BytePoly_34, 34);
bigint_declare_byte_poly!(BytePoly_66, 66);
bigint_declare_byte_poly!(BytePoly_384, 384);
bigint_declare_byte_poly!(BytePoly_768, 768);
bigint_declare_byte_poly!(BytePoly_387, 387);
bigint_declare_byte_poly!(BytePoly_771, 771);
bigint_declare_byte_poly!(BytePoly_1, 1);
bigint_declare_byte_poly!(BytePoly_2, 2);
bigint_declare_byte_poly!(BytePoly_3, 3);
bigint_declare_byte_poly!(BytePoly_4, 4);
bigint_declare_byte_poly!(BytePoly_16, 16);
bigint_declare_byte_poly!(BytePoly_17, 17);
bigint_declare_byte_poly!(BytePoly_6, 6);
bigint_declare_byte_poly!(BytePoly_8, 8);
bigint_declare_byte_poly!(BytePoly_33, 33);
bigint_declare_byte_poly!(BytePoly_98, 98);
bigint_declare_byte_poly!(BytePoly_35, 35);
bigint_declare_byte_poly!(BytePoly_67, 67);
bigint_declare_byte_poly!(BytePoly_68, 68);
bigint_declare_byte_poly!(BytePoly_101, 101);
pub fn rsa_256_x1(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_32 = bigint_def!(ctx, 32, 0, 1);
    let x1: BytePoly_32 = bigint_def!(ctx, 32, 1, 1);
    let x2: BytePoly_32 = bigint_def!(ctx, 32, 2, 1);
    let x3: BytePoly_64 = bigint_mul!(x1, x1, 64);
    let x4: BytePoly_34 = bigint_nondet_quot!(ctx, x3, x0, 34);
    let x5: BytePoly_32 = bigint_nondet_rem!(ctx, x3, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4, x0, 66), x5, 66), x3, 66),
        276359,
        4,
    )?;
    let x6: BytePoly_64 = bigint_mul!(x5, x5, 64);
    let x7: BytePoly_34 = bigint_nondet_quot!(ctx, x6, x0, 34);
    let x8: BytePoly_32 = bigint_nondet_rem!(ctx, x6, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x7, x0, 66), x8, 66), x6, 66),
        276359,
        4,
    )?;
    let x9: BytePoly_64 = bigint_mul!(x8, x8, 64);
    let x10: BytePoly_34 = bigint_nondet_quot!(ctx, x9, x0, 34);
    let x11: BytePoly_32 = bigint_nondet_rem!(ctx, x9, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x10, x0, 66), x11, 66), x9, 66),
        276359,
        4,
    )?;
    let x12: BytePoly_64 = bigint_mul!(x11, x11, 64);
    let x13: BytePoly_34 = bigint_nondet_quot!(ctx, x12, x0, 34);
    let x14: BytePoly_32 = bigint_nondet_rem!(ctx, x12, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x13, x0, 66), x14, 66), x12, 66),
        276359,
        4,
    )?;
    let x15: BytePoly_64 = bigint_mul!(x14, x14, 64);
    let x16: BytePoly_34 = bigint_nondet_quot!(ctx, x15, x0, 34);
    let x17: BytePoly_32 = bigint_nondet_rem!(ctx, x15, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x16, x0, 66), x17, 66), x15, 66),
        276359,
        4,
    )?;
    let x18: BytePoly_64 = bigint_mul!(x17, x17, 64);
    let x19: BytePoly_34 = bigint_nondet_quot!(ctx, x18, x0, 34);
    let x20: BytePoly_32 = bigint_nondet_rem!(ctx, x18, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x19, x0, 66), x20, 66), x18, 66),
        276359,
        4,
    )?;
    let x21: BytePoly_64 = bigint_mul!(x20, x20, 64);
    let x22: BytePoly_34 = bigint_nondet_quot!(ctx, x21, x0, 34);
    let x23: BytePoly_32 = bigint_nondet_rem!(ctx, x21, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x22, x0, 66), x23, 66), x21, 66),
        276359,
        4,
    )?;
    let x24: BytePoly_64 = bigint_mul!(x23, x23, 64);
    let x25: BytePoly_34 = bigint_nondet_quot!(ctx, x24, x0, 34);
    let x26: BytePoly_32 = bigint_nondet_rem!(ctx, x24, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x25, x0, 66), x26, 66), x24, 66),
        276359,
        4,
    )?;
    let x27: BytePoly_64 = bigint_mul!(x26, x26, 64);
    let x28: BytePoly_34 = bigint_nondet_quot!(ctx, x27, x0, 34);
    let x29: BytePoly_32 = bigint_nondet_rem!(ctx, x27, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x28, x0, 66), x29, 66), x27, 66),
        276359,
        4,
    )?;
    let x30: BytePoly_64 = bigint_mul!(x29, x29, 64);
    let x31: BytePoly_34 = bigint_nondet_quot!(ctx, x30, x0, 34);
    let x32: BytePoly_32 = bigint_nondet_rem!(ctx, x30, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x31, x0, 66), x32, 66), x30, 66),
        276359,
        4,
    )?;
    let x33: BytePoly_64 = bigint_mul!(x32, x32, 64);
    let x34: BytePoly_34 = bigint_nondet_quot!(ctx, x33, x0, 34);
    let x35: BytePoly_32 = bigint_nondet_rem!(ctx, x33, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x34, x0, 66), x35, 66), x33, 66),
        276359,
        4,
    )?;
    let x36: BytePoly_64 = bigint_mul!(x35, x35, 64);
    let x37: BytePoly_34 = bigint_nondet_quot!(ctx, x36, x0, 34);
    let x38: BytePoly_32 = bigint_nondet_rem!(ctx, x36, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x37, x0, 66), x38, 66), x36, 66),
        276359,
        4,
    )?;
    let x39: BytePoly_64 = bigint_mul!(x38, x38, 64);
    let x40: BytePoly_34 = bigint_nondet_quot!(ctx, x39, x0, 34);
    let x41: BytePoly_32 = bigint_nondet_rem!(ctx, x39, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x40, x0, 66), x41, 66), x39, 66),
        276359,
        4,
    )?;
    let x42: BytePoly_64 = bigint_mul!(x41, x41, 64);
    let x43: BytePoly_34 = bigint_nondet_quot!(ctx, x42, x0, 34);
    let x44: BytePoly_32 = bigint_nondet_rem!(ctx, x42, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x43, x0, 66), x44, 66), x42, 66),
        276359,
        4,
    )?;
    let x45: BytePoly_64 = bigint_mul!(x44, x44, 64);
    let x46: BytePoly_34 = bigint_nondet_quot!(ctx, x45, x0, 34);
    let x47: BytePoly_32 = bigint_nondet_rem!(ctx, x45, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x46, x0, 66), x47, 66), x45, 66),
        276359,
        4,
    )?;
    let x48: BytePoly_64 = bigint_mul!(x47, x47, 64);
    let x49: BytePoly_34 = bigint_nondet_quot!(ctx, x48, x0, 34);
    let x50: BytePoly_32 = bigint_nondet_rem!(ctx, x48, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x49, x0, 66), x50, 66), x48, 66),
        276359,
        4,
    )?;
    let x51: BytePoly_64 = bigint_mul!(x50, x1, 64);
    let x52: BytePoly_34 = bigint_nondet_quot!(ctx, x51, x0, 34);
    let x53: BytePoly_32 = bigint_nondet_rem!(ctx, x51, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x52, x0, 66), x53, 66), x51, 66),
        276359,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x53, x2, 32), 34, 1)?;
    return Ok(());
}
pub fn rsa_256_x2(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_32 = bigint_def!(ctx, 32, 0, 1);
    let x1: BytePoly_32 = bigint_def!(ctx, 32, 1, 1);
    let x2: BytePoly_32 = bigint_def!(ctx, 32, 2, 1);
    let x3: BytePoly_64 = bigint_mul!(x1, x1, 64);
    let x4: BytePoly_34 = bigint_nondet_quot!(ctx, x3, x0, 34);
    let x5: BytePoly_32 = bigint_nondet_rem!(ctx, x3, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4, x0, 66), x5, 66), x3, 66),
        276359,
        4,
    )?;
    let x6: BytePoly_64 = bigint_mul!(x5, x5, 64);
    let x7: BytePoly_34 = bigint_nondet_quot!(ctx, x6, x0, 34);
    let x8: BytePoly_32 = bigint_nondet_rem!(ctx, x6, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x7, x0, 66), x8, 66), x6, 66),
        276359,
        4,
    )?;
    let x9: BytePoly_64 = bigint_mul!(x8, x8, 64);
    let x10: BytePoly_34 = bigint_nondet_quot!(ctx, x9, x0, 34);
    let x11: BytePoly_32 = bigint_nondet_rem!(ctx, x9, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x10, x0, 66), x11, 66), x9, 66),
        276359,
        4,
    )?;
    let x12: BytePoly_64 = bigint_mul!(x11, x11, 64);
    let x13: BytePoly_34 = bigint_nondet_quot!(ctx, x12, x0, 34);
    let x14: BytePoly_32 = bigint_nondet_rem!(ctx, x12, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x13, x0, 66), x14, 66), x12, 66),
        276359,
        4,
    )?;
    let x15: BytePoly_64 = bigint_mul!(x14, x14, 64);
    let x16: BytePoly_34 = bigint_nondet_quot!(ctx, x15, x0, 34);
    let x17: BytePoly_32 = bigint_nondet_rem!(ctx, x15, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x16, x0, 66), x17, 66), x15, 66),
        276359,
        4,
    )?;
    let x18: BytePoly_64 = bigint_mul!(x17, x17, 64);
    let x19: BytePoly_34 = bigint_nondet_quot!(ctx, x18, x0, 34);
    let x20: BytePoly_32 = bigint_nondet_rem!(ctx, x18, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x19, x0, 66), x20, 66), x18, 66),
        276359,
        4,
    )?;
    let x21: BytePoly_64 = bigint_mul!(x20, x20, 64);
    let x22: BytePoly_34 = bigint_nondet_quot!(ctx, x21, x0, 34);
    let x23: BytePoly_32 = bigint_nondet_rem!(ctx, x21, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x22, x0, 66), x23, 66), x21, 66),
        276359,
        4,
    )?;
    let x24: BytePoly_64 = bigint_mul!(x23, x23, 64);
    let x25: BytePoly_34 = bigint_nondet_quot!(ctx, x24, x0, 34);
    let x26: BytePoly_32 = bigint_nondet_rem!(ctx, x24, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x25, x0, 66), x26, 66), x24, 66),
        276359,
        4,
    )?;
    let x27: BytePoly_64 = bigint_mul!(x26, x26, 64);
    let x28: BytePoly_34 = bigint_nondet_quot!(ctx, x27, x0, 34);
    let x29: BytePoly_32 = bigint_nondet_rem!(ctx, x27, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x28, x0, 66), x29, 66), x27, 66),
        276359,
        4,
    )?;
    let x30: BytePoly_64 = bigint_mul!(x29, x29, 64);
    let x31: BytePoly_34 = bigint_nondet_quot!(ctx, x30, x0, 34);
    let x32: BytePoly_32 = bigint_nondet_rem!(ctx, x30, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x31, x0, 66), x32, 66), x30, 66),
        276359,
        4,
    )?;
    let x33: BytePoly_64 = bigint_mul!(x32, x32, 64);
    let x34: BytePoly_34 = bigint_nondet_quot!(ctx, x33, x0, 34);
    let x35: BytePoly_32 = bigint_nondet_rem!(ctx, x33, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x34, x0, 66), x35, 66), x33, 66),
        276359,
        4,
    )?;
    let x36: BytePoly_64 = bigint_mul!(x35, x35, 64);
    let x37: BytePoly_34 = bigint_nondet_quot!(ctx, x36, x0, 34);
    let x38: BytePoly_32 = bigint_nondet_rem!(ctx, x36, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x37, x0, 66), x38, 66), x36, 66),
        276359,
        4,
    )?;
    let x39: BytePoly_64 = bigint_mul!(x38, x38, 64);
    let x40: BytePoly_34 = bigint_nondet_quot!(ctx, x39, x0, 34);
    let x41: BytePoly_32 = bigint_nondet_rem!(ctx, x39, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x40, x0, 66), x41, 66), x39, 66),
        276359,
        4,
    )?;
    let x42: BytePoly_64 = bigint_mul!(x41, x41, 64);
    let x43: BytePoly_34 = bigint_nondet_quot!(ctx, x42, x0, 34);
    let x44: BytePoly_32 = bigint_nondet_rem!(ctx, x42, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x43, x0, 66), x44, 66), x42, 66),
        276359,
        4,
    )?;
    let x45: BytePoly_64 = bigint_mul!(x44, x44, 64);
    let x46: BytePoly_34 = bigint_nondet_quot!(ctx, x45, x0, 34);
    let x47: BytePoly_32 = bigint_nondet_rem!(ctx, x45, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x46, x0, 66), x47, 66), x45, 66),
        276359,
        4,
    )?;
    let x48: BytePoly_64 = bigint_mul!(x47, x47, 64);
    let x49: BytePoly_34 = bigint_nondet_quot!(ctx, x48, x0, 34);
    let x50: BytePoly_32 = bigint_nondet_rem!(ctx, x48, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x49, x0, 66), x50, 66), x48, 66),
        276359,
        4,
    )?;
    let x51: BytePoly_64 = bigint_mul!(x50, x1, 64);
    let x52: BytePoly_34 = bigint_nondet_quot!(ctx, x51, x0, 34);
    let x53: BytePoly_32 = bigint_nondet_rem!(ctx, x51, x0, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x52, x0, 66), x53, 66), x51, 66),
        276359,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x53, x2, 32), 34, 1)?;
    return Ok(());
}
pub fn rsa_3072_x15(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_384 = bigint_def!(ctx, 384, 0, 1);
    let x1: BytePoly_384 = bigint_def!(ctx, 384, 1, 1);
    let x2: BytePoly_384 = bigint_def!(ctx, 384, 2, 1);
    let x3: BytePoly_768 = bigint_mul!(x1, x1, 768);
    let x4: BytePoly_387 = bigint_nondet_quot!(ctx, x3, x0, 387);
    let x5: BytePoly_384 = bigint_nondet_rem!(ctx, x3, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4, x0, 771), x5, 771), x3, 771),
        3145587,
        4,
    )?;
    let x6: BytePoly_768 = bigint_mul!(x5, x5, 768);
    let x7: BytePoly_387 = bigint_nondet_quot!(ctx, x6, x0, 387);
    let x8: BytePoly_384 = bigint_nondet_rem!(ctx, x6, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x7, x0, 771), x8, 771), x6, 771),
        3145587,
        4,
    )?;
    let x9: BytePoly_768 = bigint_mul!(x8, x8, 768);
    let x10: BytePoly_387 = bigint_nondet_quot!(ctx, x9, x0, 387);
    let x11: BytePoly_384 = bigint_nondet_rem!(ctx, x9, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x10, x0, 771), x11, 771), x9, 771),
        3145587,
        4,
    )?;
    let x12: BytePoly_768 = bigint_mul!(x11, x11, 768);
    let x13: BytePoly_387 = bigint_nondet_quot!(ctx, x12, x0, 387);
    let x14: BytePoly_384 = bigint_nondet_rem!(ctx, x12, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x13, x0, 771), x14, 771), x12, 771),
        3145587,
        4,
    )?;
    let x15: BytePoly_768 = bigint_mul!(x14, x14, 768);
    let x16: BytePoly_387 = bigint_nondet_quot!(ctx, x15, x0, 387);
    let x17: BytePoly_384 = bigint_nondet_rem!(ctx, x15, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x16, x0, 771), x17, 771), x15, 771),
        3145587,
        4,
    )?;
    let x18: BytePoly_768 = bigint_mul!(x17, x17, 768);
    let x19: BytePoly_387 = bigint_nondet_quot!(ctx, x18, x0, 387);
    let x20: BytePoly_384 = bigint_nondet_rem!(ctx, x18, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x19, x0, 771), x20, 771), x18, 771),
        3145587,
        4,
    )?;
    let x21: BytePoly_768 = bigint_mul!(x20, x20, 768);
    let x22: BytePoly_387 = bigint_nondet_quot!(ctx, x21, x0, 387);
    let x23: BytePoly_384 = bigint_nondet_rem!(ctx, x21, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x22, x0, 771), x23, 771), x21, 771),
        3145587,
        4,
    )?;
    let x24: BytePoly_768 = bigint_mul!(x23, x23, 768);
    let x25: BytePoly_387 = bigint_nondet_quot!(ctx, x24, x0, 387);
    let x26: BytePoly_384 = bigint_nondet_rem!(ctx, x24, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x25, x0, 771), x26, 771), x24, 771),
        3145587,
        4,
    )?;
    let x27: BytePoly_768 = bigint_mul!(x26, x26, 768);
    let x28: BytePoly_387 = bigint_nondet_quot!(ctx, x27, x0, 387);
    let x29: BytePoly_384 = bigint_nondet_rem!(ctx, x27, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x28, x0, 771), x29, 771), x27, 771),
        3145587,
        4,
    )?;
    let x30: BytePoly_768 = bigint_mul!(x29, x29, 768);
    let x31: BytePoly_387 = bigint_nondet_quot!(ctx, x30, x0, 387);
    let x32: BytePoly_384 = bigint_nondet_rem!(ctx, x30, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x31, x0, 771), x32, 771), x30, 771),
        3145587,
        4,
    )?;
    let x33: BytePoly_768 = bigint_mul!(x32, x32, 768);
    let x34: BytePoly_387 = bigint_nondet_quot!(ctx, x33, x0, 387);
    let x35: BytePoly_384 = bigint_nondet_rem!(ctx, x33, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x34, x0, 771), x35, 771), x33, 771),
        3145587,
        4,
    )?;
    let x36: BytePoly_768 = bigint_mul!(x35, x35, 768);
    let x37: BytePoly_387 = bigint_nondet_quot!(ctx, x36, x0, 387);
    let x38: BytePoly_384 = bigint_nondet_rem!(ctx, x36, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x37, x0, 771), x38, 771), x36, 771),
        3145587,
        4,
    )?;
    let x39: BytePoly_768 = bigint_mul!(x38, x38, 768);
    let x40: BytePoly_387 = bigint_nondet_quot!(ctx, x39, x0, 387);
    let x41: BytePoly_384 = bigint_nondet_rem!(ctx, x39, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x40, x0, 771), x41, 771), x39, 771),
        3145587,
        4,
    )?;
    let x42: BytePoly_768 = bigint_mul!(x41, x41, 768);
    let x43: BytePoly_387 = bigint_nondet_quot!(ctx, x42, x0, 387);
    let x44: BytePoly_384 = bigint_nondet_rem!(ctx, x42, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x43, x0, 771), x44, 771), x42, 771),
        3145587,
        4,
    )?;
    let x45: BytePoly_768 = bigint_mul!(x44, x44, 768);
    let x46: BytePoly_387 = bigint_nondet_quot!(ctx, x45, x0, 387);
    let x47: BytePoly_384 = bigint_nondet_rem!(ctx, x45, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x46, x0, 771), x47, 771), x45, 771),
        3145587,
        4,
    )?;
    let x48: BytePoly_768 = bigint_mul!(x47, x47, 768);
    let x49: BytePoly_387 = bigint_nondet_quot!(ctx, x48, x0, 387);
    let x50: BytePoly_384 = bigint_nondet_rem!(ctx, x48, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x49, x0, 771), x50, 771), x48, 771),
        3145587,
        4,
    )?;
    let x51: BytePoly_768 = bigint_mul!(x50, x1, 768);
    let x52: BytePoly_387 = bigint_nondet_quot!(ctx, x51, x0, 387);
    let x53: BytePoly_384 = bigint_nondet_rem!(ctx, x51, x0, 384);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x52, x0, 771), x53, 771), x51, 771),
        3145587,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x53, x2, 384), 34, 1)?;
    return Ok(());
}
pub fn nondet_inv_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x3: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    let x4: BytePoly_1 = bigint_nondet_inv!(ctx, x1, x2, 1);
    let x5: BytePoly_2 = bigint_mul!(x1, x4, 2);
    let x6: BytePoly_3 = bigint_nondet_quot!(ctx, x5, x2, 3);
    let x7: BytePoly_1 = bigint_nondet_rem!(ctx, x5, x2, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6, x2, 4), x7, 4), x5, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x7, x0, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x4, x3, 1), 34, 1)?;
    return Ok(());
}
pub fn const_add_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_2 = bigint_const!(ctx, 71, 71);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x2: BytePoly_3 = bigint_def!(ctx, 3, 1, 1);
    eqz(ctx, &bigint_sub!(bigint_add!(x1, x0, 2), x2, 3), 34, 1)?;
    return Ok(());
}
pub fn const_add_alt_test_16(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_2 = bigint_const!(ctx, 50, 84);
    let x1: BytePoly_2 = bigint_def!(ctx, 2, 0, 1);
    let x2: BytePoly_3 = bigint_def!(ctx, 3, 1, 1);
    eqz(ctx, &bigint_sub!(bigint_add!(x1, x0, 2), x2, 3), 34, 1)?;
    return Ok(());
}
pub fn const_mul_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_2 = bigint_const!(ctx, 50, 84);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x2: BytePoly_3 = bigint_def!(ctx, 3, 1, 1);
    eqz(ctx, &bigint_sub!(bigint_mul!(x1, x0, 3), x2, 3), 16259, 2)?;
    return Ok(());
}
pub fn add_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x2: BytePoly_2 = bigint_def!(ctx, 2, 2, 1);
    eqz(ctx, &bigint_sub!(bigint_add!(x0, x1, 1), x2, 2), 34, 1)?;
    return Ok(());
}
pub fn add_test_16(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_2 = bigint_def!(ctx, 2, 0, 1);
    let x1: BytePoly_2 = bigint_def!(ctx, 2, 1, 1);
    let x2: BytePoly_3 = bigint_def!(ctx, 3, 2, 1);
    eqz(ctx, &bigint_sub!(bigint_add!(x0, x1, 2), x2, 3), 34, 1)?;
    return Ok(());
}
pub fn add_test_128(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_16 = bigint_def!(ctx, 16, 0, 1);
    let x1: BytePoly_16 = bigint_def!(ctx, 16, 1, 1);
    let x2: BytePoly_17 = bigint_def!(ctx, 17, 2, 1);
    eqz(ctx, &bigint_sub!(bigint_add!(x0, x1, 16), x2, 17), 34, 1)?;
    return Ok(());
}
pub fn const_one_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    eqz(ctx, &bigint_sub!(x0, x1, 1), 34, 1)?;
    return Ok(());
}
pub fn const_twobyte_test_16(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_2 = bigint_const!(ctx, 52, 18);
    let x1: BytePoly_2 = bigint_def!(ctx, 2, 0, 1);
    eqz(ctx, &bigint_sub!(x0, x1, 2), 34, 1)?;
    return Ok(());
}
pub fn sub_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    eqz(ctx, &bigint_sub!(bigint_sub!(x0, x1, 1), x2, 1), 34, 1)?;
    return Ok(());
}
pub fn sub_test_128(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_16 = bigint_def!(ctx, 16, 0, 1);
    let x1: BytePoly_16 = bigint_def!(ctx, 16, 1, 1);
    let x2: BytePoly_16 = bigint_def!(ctx, 16, 2, 1);
    eqz(ctx, &bigint_sub!(bigint_sub!(x0, x1, 16), x2, 16), 34, 1)?;
    return Ok(());
}
pub fn mul_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x2: BytePoly_2 = bigint_def!(ctx, 2, 2, 1);
    eqz(ctx, &bigint_sub!(bigint_mul!(x0, x1, 2), x2, 2), 8131, 2)?;
    return Ok(());
}
pub fn mul_test_128(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_16 = bigint_def!(ctx, 16, 0, 1);
    let x1: BytePoly_16 = bigint_def!(ctx, 16, 1, 1);
    let x2: BytePoly_32 = bigint_def!(ctx, 32, 2, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_mul!(x0, x1, 32), x2, 32),
        130053,
        4,
    )?;
    return Ok(());
}
pub fn reduce_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    let x3: BytePoly_1 = bigint_nondet_quot!(ctx, x0, x1, 1);
    let x4: BytePoly_1 = bigint_nondet_rem!(ctx, x0, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3, x1, 2), x4, 2), x0, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4, x2, 1), 34, 1)?;
    return Ok(());
}
pub fn reduce_test_128(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_16 = bigint_def!(ctx, 16, 0, 1);
    let x1: BytePoly_16 = bigint_def!(ctx, 16, 1, 1);
    let x2: BytePoly_16 = bigint_def!(ctx, 16, 2, 1);
    let x3: BytePoly_16 = bigint_nondet_quot!(ctx, x0, x1, 16);
    let x4: BytePoly_16 = bigint_nondet_rem!(ctx, x0, x1, 16);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3, x1, 32), x4, 32), x0, 32),
        130053,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4, x2, 16), 34, 1)?;
    return Ok(());
}
pub fn ecdsa_verify_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 3);
    let x1: BytePoly_1 = bigint_const!(ctx, 1);
    let x2: BytePoly_1 = bigint_const!(ctx, 2);
    let x3: BytePoly_1 = bigint_const!(ctx, 1);
    let x4: BytePoly_1 = bigint_const!(ctx, 3);
    let x5: BytePoly_1 = bigint_const!(ctx, 0);
    let x6: BytePoly_1 = bigint_const!(ctx, 31);
    let x7: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x8: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x9: BytePoly_2 = bigint_def!(ctx, 2, 2, 1);
    let x10: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x11: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    let x12: BytePoly_2 = bigint_def!(ctx, 2, 5, 1);
    let x13: BytePoly_2 = bigint_def!(ctx, 2, 6, 1);
    let x14: BytePoly_2 = bigint_def!(ctx, 2, 7, 1);
    let x15: BytePoly_1 = bigint_def!(ctx, 1, 8, 1);
    let x16: BytePoly_1 = bigint_def!(ctx, 1, 9, 1);
    let x17: BytePoly_2 = bigint_mul!(x11, x11, 2);
    let x18: BytePoly_3 = bigint_nondet_quot!(ctx, x17, x6, 3);
    let x19: BytePoly_1 = bigint_nondet_rem!(ctx, x17, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x18, x6, 4), x19, 4), x17, 4),
        24387,
        2,
    )?;
    let x20: BytePoly_2 = bigint_mul!(x10, x10, 2);
    let x21: BytePoly_3 = bigint_nondet_quot!(ctx, x20, x6, 3);
    let x22: BytePoly_1 = bigint_nondet_rem!(ctx, x20, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x21, x6, 4), x22, 4), x20, 4),
        24387,
        2,
    )?;
    let x23: BytePoly_2 = bigint_mul!(x10, x22, 2);
    let x24: BytePoly_3 = bigint_nondet_quot!(ctx, x23, x6, 3);
    let x25: BytePoly_1 = bigint_nondet_rem!(ctx, x23, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x24, x6, 4), x25, 4), x23, 4),
        24387,
        2,
    )?;
    let x26: BytePoly_2 = bigint_mul!(x10, x5, 2);
    let x27: BytePoly_3 = bigint_nondet_quot!(ctx, x26, x6, 3);
    let x28: BytePoly_1 = bigint_nondet_rem!(ctx, x26, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x27, x6, 4), x28, 4), x26, 4),
        24387,
        2,
    )?;
    let x29: BytePoly_1 = bigint_add!(bigint_add!(x25, x28, 1), x4, 1);
    let x30: BytePoly_1 = bigint_nondet_quot!(ctx, x29, x6, 1);
    let x31: BytePoly_1 = bigint_nondet_rem!(ctx, x29, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x30, x6, 2), x31, 2), x29, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x19, x31, 1), 34, 1)?;
    let x32: BytePoly_2 = bigint_mul!(x16, x16, 2);
    let x33: BytePoly_3 = bigint_nondet_quot!(ctx, x32, x6, 3);
    let x34: BytePoly_1 = bigint_nondet_rem!(ctx, x32, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x33, x6, 4), x34, 4), x32, 4),
        24387,
        2,
    )?;
    let x35: BytePoly_2 = bigint_mul!(x15, x15, 2);
    let x36: BytePoly_3 = bigint_nondet_quot!(ctx, x35, x6, 3);
    let x37: BytePoly_1 = bigint_nondet_rem!(ctx, x35, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x36, x6, 4), x37, 4), x35, 4),
        24387,
        2,
    )?;
    let x38: BytePoly_2 = bigint_mul!(x15, x37, 2);
    let x39: BytePoly_3 = bigint_nondet_quot!(ctx, x38, x6, 3);
    let x40: BytePoly_1 = bigint_nondet_rem!(ctx, x38, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x39, x6, 4), x40, 4), x38, 4),
        24387,
        2,
    )?;
    let x41: BytePoly_2 = bigint_mul!(x15, x5, 2);
    let x42: BytePoly_3 = bigint_nondet_quot!(ctx, x41, x6, 3);
    let x43: BytePoly_1 = bigint_nondet_rem!(ctx, x41, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x42, x6, 4), x43, 4), x41, 4),
        24387,
        2,
    )?;
    let x44: BytePoly_1 = bigint_add!(bigint_add!(x40, x43, 1), x4, 1);
    let x45: BytePoly_1 = bigint_nondet_quot!(ctx, x44, x6, 1);
    let x46: BytePoly_1 = bigint_nondet_rem!(ctx, x44, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x45, x6, 2), x46, 2), x44, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x34, x46, 1), 34, 1)?;
    let x47: BytePoly_2 = bigint_sub!(x9, x3, 2);
    let x48: BytePoly_3 = bigint_nondet_quot!(ctx, x32, x6, 3);
    let x49: BytePoly_1 = bigint_nondet_rem!(ctx, x32, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x48, x6, 4), x49, 4), x32, 4),
        24387,
        2,
    )?;
    let x50: BytePoly_3 = bigint_nondet_quot!(ctx, x35, x6, 3);
    let x51: BytePoly_1 = bigint_nondet_rem!(ctx, x35, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x50, x6, 4), x51, 4), x35, 4),
        24387,
        2,
    )?;
    let x52: BytePoly_2 = bigint_mul!(x15, x51, 2);
    let x53: BytePoly_3 = bigint_nondet_quot!(ctx, x52, x6, 3);
    let x54: BytePoly_1 = bigint_nondet_rem!(ctx, x52, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x53, x6, 4), x54, 4), x52, 4),
        24387,
        2,
    )?;
    let x55: BytePoly_3 = bigint_nondet_quot!(ctx, x41, x6, 3);
    let x56: BytePoly_1 = bigint_nondet_rem!(ctx, x41, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x55, x6, 4), x56, 4), x41, 4),
        24387,
        2,
    )?;
    let x57: BytePoly_1 = bigint_add!(bigint_add!(x54, x56, 1), x4, 1);
    let x58: BytePoly_1 = bigint_nondet_quot!(ctx, x57, x6, 1);
    let x59: BytePoly_1 = bigint_nondet_rem!(ctx, x57, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x58, x6, 2), x59, 2), x57, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x49, x59, 1), 34, 1)?;
    let x60: BytePoly_1 = bigint_nondet_rem!(ctx, x47, x2, 1);
    let x61: BytePoly_2 = bigint_nondet_quot!(ctx, x47, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x61, x2, 3), x60, 3), x47, 3),
        16259,
        2,
    )?;
    let x62: BytePoly_1 = bigint_sub!(x3, x60, 1);
    eqz(ctx, &bigint_mul!(x60, x62, 2), 8131, 2)?;
    let x63: BytePoly_1 = bigint_add!(bigint_sub!(x11, x16, 1), x6, 1);
    let x64: BytePoly_1 = bigint_add!(bigint_sub!(x10, x15, 1), x6, 1);
    let x65: BytePoly_1 = bigint_nondet_inv!(ctx, x64, x6, 1);
    let x66: BytePoly_2 = bigint_mul!(x64, x65, 2);
    let x67: BytePoly_3 = bigint_nondet_quot!(ctx, x66, x6, 3);
    let x68: BytePoly_1 = bigint_nondet_rem!(ctx, x66, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x67, x6, 4), x68, 4), x66, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x68, x1, 1), 34, 1)?;
    let x69: BytePoly_2 = bigint_mul!(x63, x65, 2);
    let x70: BytePoly_3 = bigint_nondet_quot!(ctx, x69, x6, 3);
    let x71: BytePoly_1 = bigint_nondet_rem!(ctx, x69, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x70, x6, 4), x71, 4), x69, 4),
        24387,
        2,
    )?;
    let x72: BytePoly_2 = bigint_mul!(x71, x15, 2);
    let x73: BytePoly_3 = bigint_nondet_quot!(ctx, x72, x6, 3);
    let x74: BytePoly_1 = bigint_nondet_rem!(ctx, x72, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x73, x6, 4), x74, 4), x72, 4),
        24387,
        2,
    )?;
    let x75: BytePoly_1 = bigint_add!(bigint_sub!(x16, x74, 1), x6, 1);
    let x76: BytePoly_1 = bigint_nondet_quot!(ctx, x75, x6, 1);
    let x77: BytePoly_1 = bigint_nondet_rem!(ctx, x75, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x76, x6, 2), x77, 2), x75, 2),
        8131,
        2,
    )?;
    let x78: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x71, x71, 2), x15, 2), x6, 2),
            x10,
            2
        ),
        x6,
        2
    );
    let x79: BytePoly_3 = bigint_nondet_quot!(ctx, x78, x6, 3);
    let x80: BytePoly_1 = bigint_nondet_rem!(ctx, x78, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x79, x6, 4), x80, 4), x78, 4),
        24387,
        2,
    )?;
    let x81: BytePoly_2 = bigint_mul!(x71, x80, 2);
    let x82: BytePoly_3 = bigint_nondet_quot!(ctx, x81, x6, 3);
    let x83: BytePoly_1 = bigint_nondet_rem!(ctx, x81, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x82, x6, 4), x83, 4), x81, 4),
        24387,
        2,
    )?;
    let x84: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x83, x77, 1), 1), x6, 1);
    let x85: BytePoly_1 = bigint_nondet_quot!(ctx, x84, x6, 1);
    let x86: BytePoly_1 = bigint_nondet_rem!(ctx, x84, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x85, x6, 2), x86, 2), x84, 2),
        8131,
        2,
    )?;
    let x87: BytePoly_2 = bigint_add!(bigint_mul!(x80, x60, 2), bigint_mul!(x15, x62, 2), 2);
    let x88: BytePoly_2 = bigint_add!(bigint_mul!(x86, x60, 2), bigint_mul!(x16, x62, 2), 2);
    let x89: BytePoly_3 = bigint_nondet_quot!(ctx, x87, x6, 3);
    let x90: BytePoly_1 = bigint_nondet_rem!(ctx, x87, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x89, x6, 4), x90, 4), x87, 4),
        24387,
        2,
    )?;
    let x91: BytePoly_3 = bigint_nondet_quot!(ctx, x88, x6, 3);
    let x92: BytePoly_1 = bigint_nondet_rem!(ctx, x88, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x91, x6, 4), x92, 4), x88, 4),
        24387,
        2,
    )?;
    let x93: BytePoly_3 = bigint_nondet_quot!(ctx, x20, x6, 3);
    let x94: BytePoly_1 = bigint_nondet_rem!(ctx, x20, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x93, x6, 4), x94, 4), x20, 4),
        24387,
        2,
    )?;
    let x95: BytePoly_2 = bigint_add!(bigint_mul!(x94, x0, 2), x5, 2);
    let x96: BytePoly_3 = bigint_nondet_quot!(ctx, x95, x6, 3);
    let x97: BytePoly_1 = bigint_nondet_rem!(ctx, x95, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x96, x6, 4), x97, 4), x95, 4),
        24387,
        2,
    )?;
    let x98: BytePoly_1 = bigint_add!(x11, x11, 1);
    let x99: BytePoly_1 = bigint_nondet_quot!(ctx, x98, x6, 1);
    let x100: BytePoly_1 = bigint_nondet_rem!(ctx, x98, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x99, x6, 2), x100, 2), x98, 2),
        8131,
        2,
    )?;
    let x101: BytePoly_1 = bigint_nondet_inv!(ctx, x100, x6, 1);
    let x102: BytePoly_2 = bigint_mul!(x100, x101, 2);
    let x103: BytePoly_3 = bigint_nondet_quot!(ctx, x102, x6, 3);
    let x104: BytePoly_1 = bigint_nondet_rem!(ctx, x102, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x103, x6, 4), x104, 4), x102, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x104, x3, 1), 34, 1)?;
    let x105: BytePoly_2 = bigint_mul!(x97, x101, 2);
    let x106: BytePoly_3 = bigint_nondet_quot!(ctx, x105, x6, 3);
    let x107: BytePoly_1 = bigint_nondet_rem!(ctx, x105, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x106, x6, 4), x107, 4), x105, 4),
        24387,
        2,
    )?;
    let x108: BytePoly_2 = bigint_mul!(x107, x10, 2);
    let x109: BytePoly_3 = bigint_nondet_quot!(ctx, x108, x6, 3);
    let x110: BytePoly_1 = bigint_nondet_rem!(ctx, x108, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x109, x6, 4), x110, 4), x108, 4),
        24387,
        2,
    )?;
    let x111: BytePoly_1 = bigint_add!(bigint_sub!(x11, x110, 1), x6, 1);
    let x112: BytePoly_1 = bigint_nondet_quot!(ctx, x111, x6, 1);
    let x113: BytePoly_1 = bigint_nondet_rem!(ctx, x111, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x112, x6, 2), x113, 2), x111, 2),
        8131,
        2,
    )?;
    let x114: BytePoly_2 = bigint_mul!(x107, x107, 2);
    let x115: BytePoly_3 = bigint_nondet_quot!(ctx, x114, x6, 3);
    let x116: BytePoly_1 = bigint_nondet_rem!(ctx, x114, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x115, x6, 4), x116, 4), x114, 4),
        24387,
        2,
    )?;
    let x117: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x116, x10, 1), x6, 1), x10, 1),
        x6,
        1
    );
    let x118: BytePoly_1 = bigint_nondet_quot!(ctx, x117, x6, 1);
    let x119: BytePoly_1 = bigint_nondet_rem!(ctx, x117, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x118, x6, 2), x119, 2), x117, 2),
        8131,
        2,
    )?;
    let x120: BytePoly_2 = bigint_mul!(x107, x119, 2);
    let x121: BytePoly_3 = bigint_nondet_quot!(ctx, x120, x6, 3);
    let x122: BytePoly_1 = bigint_nondet_rem!(ctx, x120, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x121, x6, 4), x122, 4), x120, 4),
        24387,
        2,
    )?;
    let x123: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x122, x113, 1), 1), x6, 1);
    let x124: BytePoly_1 = bigint_nondet_quot!(ctx, x123, x6, 1);
    let x125: BytePoly_1 = bigint_nondet_rem!(ctx, x123, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x124, x6, 2), x125, 2), x123, 2),
        8131,
        2,
    )?;
    let x126: BytePoly_1 = bigint_nondet_rem!(ctx, x61, x2, 1);
    let x127: BytePoly_2 = bigint_nondet_quot!(ctx, x61, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x127, x2, 3), x126, 3), x61, 3),
        16259,
        2,
    )?;
    let x128: BytePoly_1 = bigint_sub!(x3, x126, 1);
    eqz(ctx, &bigint_mul!(x126, x128, 2), 8131, 2)?;
    let x129: BytePoly_1 = bigint_add!(bigint_sub!(x119, x90, 1), x6, 1);
    let x130: BytePoly_1 = bigint_nondet_inv!(ctx, x129, x6, 1);
    let x131: BytePoly_2 = bigint_mul!(x129, x130, 2);
    let x132: BytePoly_3 = bigint_nondet_quot!(ctx, x131, x6, 3);
    let x133: BytePoly_1 = bigint_nondet_rem!(ctx, x131, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x132, x6, 4), x133, 4), x131, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x133, x1, 1), 34, 1)?;
    let x134: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x125, x92, 1), x6, 1), x130, 2);
    let x135: BytePoly_3 = bigint_nondet_quot!(ctx, x134, x6, 3);
    let x136: BytePoly_1 = bigint_nondet_rem!(ctx, x134, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x135, x6, 4), x136, 4), x134, 4),
        24387,
        2,
    )?;
    let x137: BytePoly_2 = bigint_mul!(x136, x90, 2);
    let x138: BytePoly_3 = bigint_nondet_quot!(ctx, x137, x6, 3);
    let x139: BytePoly_1 = bigint_nondet_rem!(ctx, x137, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x138, x6, 4), x139, 4), x137, 4),
        24387,
        2,
    )?;
    let x140: BytePoly_1 = bigint_add!(bigint_sub!(x92, x139, 1), x6, 1);
    let x141: BytePoly_1 = bigint_nondet_quot!(ctx, x140, x6, 1);
    let x142: BytePoly_1 = bigint_nondet_rem!(ctx, x140, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x141, x6, 2), x142, 2), x140, 2),
        8131,
        2,
    )?;
    let x143: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x136, x136, 2), x90, 2), x6, 2),
            x119,
            2
        ),
        x6,
        2
    );
    let x144: BytePoly_3 = bigint_nondet_quot!(ctx, x143, x6, 3);
    let x145: BytePoly_1 = bigint_nondet_rem!(ctx, x143, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x144, x6, 4), x145, 4), x143, 4),
        24387,
        2,
    )?;
    let x146: BytePoly_2 = bigint_mul!(x136, x145, 2);
    let x147: BytePoly_3 = bigint_nondet_quot!(ctx, x146, x6, 3);
    let x148: BytePoly_1 = bigint_nondet_rem!(ctx, x146, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x147, x6, 4), x148, 4), x146, 4),
        24387,
        2,
    )?;
    let x149: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x148, x142, 1), 1), x6, 1);
    let x150: BytePoly_1 = bigint_nondet_quot!(ctx, x149, x6, 1);
    let x151: BytePoly_1 = bigint_nondet_rem!(ctx, x149, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x150, x6, 2), x151, 2), x149, 2),
        8131,
        2,
    )?;
    let x152: BytePoly_2 = bigint_add!(bigint_mul!(x145, x126, 2), bigint_mul!(x90, x128, 2), 2);
    let x153: BytePoly_2 = bigint_add!(bigint_mul!(x151, x126, 2), bigint_mul!(x92, x128, 2), 2);
    let x154: BytePoly_3 = bigint_nondet_quot!(ctx, x152, x6, 3);
    let x155: BytePoly_1 = bigint_nondet_rem!(ctx, x152, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x154, x6, 4), x155, 4), x152, 4),
        24387,
        2,
    )?;
    let x156: BytePoly_3 = bigint_nondet_quot!(ctx, x153, x6, 3);
    let x157: BytePoly_1 = bigint_nondet_rem!(ctx, x153, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x156, x6, 4), x157, 4), x153, 4),
        24387,
        2,
    )?;
    let x158: BytePoly_2 = bigint_mul!(x119, x119, 2);
    let x159: BytePoly_3 = bigint_nondet_quot!(ctx, x158, x6, 3);
    let x160: BytePoly_1 = bigint_nondet_rem!(ctx, x158, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x159, x6, 4), x160, 4), x158, 4),
        24387,
        2,
    )?;
    let x161: BytePoly_2 = bigint_add!(bigint_mul!(x160, x0, 2), x5, 2);
    let x162: BytePoly_3 = bigint_nondet_quot!(ctx, x161, x6, 3);
    let x163: BytePoly_1 = bigint_nondet_rem!(ctx, x161, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x162, x6, 4), x163, 4), x161, 4),
        24387,
        2,
    )?;
    let x164: BytePoly_1 = bigint_add!(x125, x125, 1);
    let x165: BytePoly_1 = bigint_nondet_quot!(ctx, x164, x6, 1);
    let x166: BytePoly_1 = bigint_nondet_rem!(ctx, x164, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x165, x6, 2), x166, 2), x164, 2),
        8131,
        2,
    )?;
    let x167: BytePoly_1 = bigint_nondet_inv!(ctx, x166, x6, 1);
    let x168: BytePoly_2 = bigint_mul!(x166, x167, 2);
    let x169: BytePoly_3 = bigint_nondet_quot!(ctx, x168, x6, 3);
    let x170: BytePoly_1 = bigint_nondet_rem!(ctx, x168, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x169, x6, 4), x170, 4), x168, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x170, x3, 1), 34, 1)?;
    let x171: BytePoly_2 = bigint_mul!(x163, x167, 2);
    let x172: BytePoly_3 = bigint_nondet_quot!(ctx, x171, x6, 3);
    let x173: BytePoly_1 = bigint_nondet_rem!(ctx, x171, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x172, x6, 4), x173, 4), x171, 4),
        24387,
        2,
    )?;
    let x174: BytePoly_2 = bigint_mul!(x173, x119, 2);
    let x175: BytePoly_3 = bigint_nondet_quot!(ctx, x174, x6, 3);
    let x176: BytePoly_1 = bigint_nondet_rem!(ctx, x174, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x175, x6, 4), x176, 4), x174, 4),
        24387,
        2,
    )?;
    let x177: BytePoly_1 = bigint_add!(bigint_sub!(x125, x176, 1), x6, 1);
    let x178: BytePoly_1 = bigint_nondet_quot!(ctx, x177, x6, 1);
    let x179: BytePoly_1 = bigint_nondet_rem!(ctx, x177, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x178, x6, 2), x179, 2), x177, 2),
        8131,
        2,
    )?;
    let x180: BytePoly_2 = bigint_mul!(x173, x173, 2);
    let x181: BytePoly_3 = bigint_nondet_quot!(ctx, x180, x6, 3);
    let x182: BytePoly_1 = bigint_nondet_rem!(ctx, x180, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x181, x6, 4), x182, 4), x180, 4),
        24387,
        2,
    )?;
    let x183: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x182, x119, 1), x6, 1), x119, 1),
        x6,
        1
    );
    let x184: BytePoly_1 = bigint_nondet_quot!(ctx, x183, x6, 1);
    let x185: BytePoly_1 = bigint_nondet_rem!(ctx, x183, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x184, x6, 2), x185, 2), x183, 2),
        8131,
        2,
    )?;
    let x186: BytePoly_2 = bigint_mul!(x173, x185, 2);
    let x187: BytePoly_3 = bigint_nondet_quot!(ctx, x186, x6, 3);
    let x188: BytePoly_1 = bigint_nondet_rem!(ctx, x186, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x187, x6, 4), x188, 4), x186, 4),
        24387,
        2,
    )?;
    let x189: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x188, x179, 1), 1), x6, 1);
    let x190: BytePoly_1 = bigint_nondet_quot!(ctx, x189, x6, 1);
    let x191: BytePoly_1 = bigint_nondet_rem!(ctx, x189, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x190, x6, 2), x191, 2), x189, 2),
        8131,
        2,
    )?;
    let x192: BytePoly_1 = bigint_nondet_rem!(ctx, x127, x2, 1);
    let x193: BytePoly_2 = bigint_nondet_quot!(ctx, x127, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x193, x2, 3), x192, 3), x127, 3),
        16259,
        2,
    )?;
    let x194: BytePoly_1 = bigint_sub!(x3, x192, 1);
    eqz(ctx, &bigint_mul!(x192, x194, 2), 8131, 2)?;
    let x195: BytePoly_1 = bigint_add!(bigint_sub!(x185, x155, 1), x6, 1);
    let x196: BytePoly_1 = bigint_nondet_inv!(ctx, x195, x6, 1);
    let x197: BytePoly_2 = bigint_mul!(x195, x196, 2);
    let x198: BytePoly_3 = bigint_nondet_quot!(ctx, x197, x6, 3);
    let x199: BytePoly_1 = bigint_nondet_rem!(ctx, x197, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x198, x6, 4), x199, 4), x197, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x199, x1, 1), 34, 1)?;
    let x200: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x191, x157, 1), x6, 1), x196, 2);
    let x201: BytePoly_3 = bigint_nondet_quot!(ctx, x200, x6, 3);
    let x202: BytePoly_1 = bigint_nondet_rem!(ctx, x200, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x201, x6, 4), x202, 4), x200, 4),
        24387,
        2,
    )?;
    let x203: BytePoly_2 = bigint_mul!(x202, x155, 2);
    let x204: BytePoly_3 = bigint_nondet_quot!(ctx, x203, x6, 3);
    let x205: BytePoly_1 = bigint_nondet_rem!(ctx, x203, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x204, x6, 4), x205, 4), x203, 4),
        24387,
        2,
    )?;
    let x206: BytePoly_1 = bigint_add!(bigint_sub!(x157, x205, 1), x6, 1);
    let x207: BytePoly_1 = bigint_nondet_quot!(ctx, x206, x6, 1);
    let x208: BytePoly_1 = bigint_nondet_rem!(ctx, x206, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x207, x6, 2), x208, 2), x206, 2),
        8131,
        2,
    )?;
    let x209: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x202, x202, 2), x155, 2), x6, 2),
            x185,
            2
        ),
        x6,
        2
    );
    let x210: BytePoly_3 = bigint_nondet_quot!(ctx, x209, x6, 3);
    let x211: BytePoly_1 = bigint_nondet_rem!(ctx, x209, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x210, x6, 4), x211, 4), x209, 4),
        24387,
        2,
    )?;
    let x212: BytePoly_2 = bigint_mul!(x202, x211, 2);
    let x213: BytePoly_3 = bigint_nondet_quot!(ctx, x212, x6, 3);
    let x214: BytePoly_1 = bigint_nondet_rem!(ctx, x212, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x213, x6, 4), x214, 4), x212, 4),
        24387,
        2,
    )?;
    let x215: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x214, x208, 1), 1), x6, 1);
    let x216: BytePoly_1 = bigint_nondet_quot!(ctx, x215, x6, 1);
    let x217: BytePoly_1 = bigint_nondet_rem!(ctx, x215, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x216, x6, 2), x217, 2), x215, 2),
        8131,
        2,
    )?;
    let x218: BytePoly_2 = bigint_add!(bigint_mul!(x211, x192, 2), bigint_mul!(x155, x194, 2), 2);
    let x219: BytePoly_2 = bigint_add!(bigint_mul!(x217, x192, 2), bigint_mul!(x157, x194, 2), 2);
    let x220: BytePoly_3 = bigint_nondet_quot!(ctx, x218, x6, 3);
    let x221: BytePoly_1 = bigint_nondet_rem!(ctx, x218, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x220, x6, 4), x221, 4), x218, 4),
        24387,
        2,
    )?;
    let x222: BytePoly_3 = bigint_nondet_quot!(ctx, x219, x6, 3);
    let x223: BytePoly_1 = bigint_nondet_rem!(ctx, x219, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x222, x6, 4), x223, 4), x219, 4),
        24387,
        2,
    )?;
    let x224: BytePoly_2 = bigint_mul!(x185, x185, 2);
    let x225: BytePoly_3 = bigint_nondet_quot!(ctx, x224, x6, 3);
    let x226: BytePoly_1 = bigint_nondet_rem!(ctx, x224, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x225, x6, 4), x226, 4), x224, 4),
        24387,
        2,
    )?;
    let x227: BytePoly_2 = bigint_add!(bigint_mul!(x226, x0, 2), x5, 2);
    let x228: BytePoly_3 = bigint_nondet_quot!(ctx, x227, x6, 3);
    let x229: BytePoly_1 = bigint_nondet_rem!(ctx, x227, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x228, x6, 4), x229, 4), x227, 4),
        24387,
        2,
    )?;
    let x230: BytePoly_1 = bigint_add!(x191, x191, 1);
    let x231: BytePoly_1 = bigint_nondet_quot!(ctx, x230, x6, 1);
    let x232: BytePoly_1 = bigint_nondet_rem!(ctx, x230, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x231, x6, 2), x232, 2), x230, 2),
        8131,
        2,
    )?;
    let x233: BytePoly_1 = bigint_nondet_inv!(ctx, x232, x6, 1);
    let x234: BytePoly_2 = bigint_mul!(x232, x233, 2);
    let x235: BytePoly_3 = bigint_nondet_quot!(ctx, x234, x6, 3);
    let x236: BytePoly_1 = bigint_nondet_rem!(ctx, x234, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x235, x6, 4), x236, 4), x234, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x236, x3, 1), 34, 1)?;
    let x237: BytePoly_2 = bigint_mul!(x229, x233, 2);
    let x238: BytePoly_3 = bigint_nondet_quot!(ctx, x237, x6, 3);
    let x239: BytePoly_1 = bigint_nondet_rem!(ctx, x237, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x238, x6, 4), x239, 4), x237, 4),
        24387,
        2,
    )?;
    let x240: BytePoly_2 = bigint_mul!(x239, x185, 2);
    let x241: BytePoly_3 = bigint_nondet_quot!(ctx, x240, x6, 3);
    let x242: BytePoly_1 = bigint_nondet_rem!(ctx, x240, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x241, x6, 4), x242, 4), x240, 4),
        24387,
        2,
    )?;
    let x243: BytePoly_1 = bigint_add!(bigint_sub!(x191, x242, 1), x6, 1);
    let x244: BytePoly_1 = bigint_nondet_quot!(ctx, x243, x6, 1);
    let x245: BytePoly_1 = bigint_nondet_rem!(ctx, x243, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x244, x6, 2), x245, 2), x243, 2),
        8131,
        2,
    )?;
    let x246: BytePoly_2 = bigint_mul!(x239, x239, 2);
    let x247: BytePoly_3 = bigint_nondet_quot!(ctx, x246, x6, 3);
    let x248: BytePoly_1 = bigint_nondet_rem!(ctx, x246, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x247, x6, 4), x248, 4), x246, 4),
        24387,
        2,
    )?;
    let x249: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x248, x185, 1), x6, 1), x185, 1),
        x6,
        1
    );
    let x250: BytePoly_1 = bigint_nondet_quot!(ctx, x249, x6, 1);
    let x251: BytePoly_1 = bigint_nondet_rem!(ctx, x249, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x250, x6, 2), x251, 2), x249, 2),
        8131,
        2,
    )?;
    let x252: BytePoly_2 = bigint_mul!(x239, x251, 2);
    let x253: BytePoly_3 = bigint_nondet_quot!(ctx, x252, x6, 3);
    let x254: BytePoly_1 = bigint_nondet_rem!(ctx, x252, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x253, x6, 4), x254, 4), x252, 4),
        24387,
        2,
    )?;
    let x255: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x254, x245, 1), 1), x6, 1);
    let x256: BytePoly_1 = bigint_nondet_quot!(ctx, x255, x6, 1);
    let x257: BytePoly_1 = bigint_nondet_rem!(ctx, x255, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x256, x6, 2), x257, 2), x255, 2),
        8131,
        2,
    )?;
    let x258: BytePoly_1 = bigint_nondet_rem!(ctx, x193, x2, 1);
    let x259: BytePoly_2 = bigint_nondet_quot!(ctx, x193, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x259, x2, 3), x258, 3), x193, 3),
        16259,
        2,
    )?;
    let x260: BytePoly_1 = bigint_sub!(x3, x258, 1);
    eqz(ctx, &bigint_mul!(x258, x260, 2), 8131, 2)?;
    let x261: BytePoly_1 = bigint_add!(bigint_sub!(x251, x221, 1), x6, 1);
    let x262: BytePoly_1 = bigint_nondet_inv!(ctx, x261, x6, 1);
    let x263: BytePoly_2 = bigint_mul!(x261, x262, 2);
    let x264: BytePoly_3 = bigint_nondet_quot!(ctx, x263, x6, 3);
    let x265: BytePoly_1 = bigint_nondet_rem!(ctx, x263, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x264, x6, 4), x265, 4), x263, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x265, x1, 1), 34, 1)?;
    let x266: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x257, x223, 1), x6, 1), x262, 2);
    let x267: BytePoly_3 = bigint_nondet_quot!(ctx, x266, x6, 3);
    let x268: BytePoly_1 = bigint_nondet_rem!(ctx, x266, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x267, x6, 4), x268, 4), x266, 4),
        24387,
        2,
    )?;
    let x269: BytePoly_2 = bigint_mul!(x268, x221, 2);
    let x270: BytePoly_3 = bigint_nondet_quot!(ctx, x269, x6, 3);
    let x271: BytePoly_1 = bigint_nondet_rem!(ctx, x269, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x270, x6, 4), x271, 4), x269, 4),
        24387,
        2,
    )?;
    let x272: BytePoly_1 = bigint_add!(bigint_sub!(x223, x271, 1), x6, 1);
    let x273: BytePoly_1 = bigint_nondet_quot!(ctx, x272, x6, 1);
    let x274: BytePoly_1 = bigint_nondet_rem!(ctx, x272, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x273, x6, 2), x274, 2), x272, 2),
        8131,
        2,
    )?;
    let x275: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x268, x268, 2), x221, 2), x6, 2),
            x251,
            2
        ),
        x6,
        2
    );
    let x276: BytePoly_3 = bigint_nondet_quot!(ctx, x275, x6, 3);
    let x277: BytePoly_1 = bigint_nondet_rem!(ctx, x275, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x276, x6, 4), x277, 4), x275, 4),
        24387,
        2,
    )?;
    let x278: BytePoly_2 = bigint_mul!(x268, x277, 2);
    let x279: BytePoly_3 = bigint_nondet_quot!(ctx, x278, x6, 3);
    let x280: BytePoly_1 = bigint_nondet_rem!(ctx, x278, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x279, x6, 4), x280, 4), x278, 4),
        24387,
        2,
    )?;
    let x281: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x280, x274, 1), 1), x6, 1);
    let x282: BytePoly_1 = bigint_nondet_quot!(ctx, x281, x6, 1);
    let x283: BytePoly_1 = bigint_nondet_rem!(ctx, x281, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x282, x6, 2), x283, 2), x281, 2),
        8131,
        2,
    )?;
    let x284: BytePoly_2 = bigint_add!(bigint_mul!(x277, x258, 2), bigint_mul!(x221, x260, 2), 2);
    let x285: BytePoly_2 = bigint_add!(bigint_mul!(x283, x258, 2), bigint_mul!(x223, x260, 2), 2);
    let x286: BytePoly_3 = bigint_nondet_quot!(ctx, x284, x6, 3);
    let x287: BytePoly_1 = bigint_nondet_rem!(ctx, x284, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x286, x6, 4), x287, 4), x284, 4),
        24387,
        2,
    )?;
    let x288: BytePoly_3 = bigint_nondet_quot!(ctx, x285, x6, 3);
    let x289: BytePoly_1 = bigint_nondet_rem!(ctx, x285, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x288, x6, 4), x289, 4), x285, 4),
        24387,
        2,
    )?;
    let x290: BytePoly_2 = bigint_mul!(x251, x251, 2);
    let x291: BytePoly_3 = bigint_nondet_quot!(ctx, x290, x6, 3);
    let x292: BytePoly_1 = bigint_nondet_rem!(ctx, x290, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x291, x6, 4), x292, 4), x290, 4),
        24387,
        2,
    )?;
    let x293: BytePoly_2 = bigint_add!(bigint_mul!(x292, x0, 2), x5, 2);
    let x294: BytePoly_3 = bigint_nondet_quot!(ctx, x293, x6, 3);
    let x295: BytePoly_1 = bigint_nondet_rem!(ctx, x293, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x294, x6, 4), x295, 4), x293, 4),
        24387,
        2,
    )?;
    let x296: BytePoly_1 = bigint_add!(x257, x257, 1);
    let x297: BytePoly_1 = bigint_nondet_quot!(ctx, x296, x6, 1);
    let x298: BytePoly_1 = bigint_nondet_rem!(ctx, x296, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x297, x6, 2), x298, 2), x296, 2),
        8131,
        2,
    )?;
    let x299: BytePoly_1 = bigint_nondet_inv!(ctx, x298, x6, 1);
    let x300: BytePoly_2 = bigint_mul!(x298, x299, 2);
    let x301: BytePoly_3 = bigint_nondet_quot!(ctx, x300, x6, 3);
    let x302: BytePoly_1 = bigint_nondet_rem!(ctx, x300, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x301, x6, 4), x302, 4), x300, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x302, x3, 1), 34, 1)?;
    let x303: BytePoly_2 = bigint_mul!(x295, x299, 2);
    let x304: BytePoly_3 = bigint_nondet_quot!(ctx, x303, x6, 3);
    let x305: BytePoly_1 = bigint_nondet_rem!(ctx, x303, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x304, x6, 4), x305, 4), x303, 4),
        24387,
        2,
    )?;
    let x306: BytePoly_2 = bigint_mul!(x305, x251, 2);
    let x307: BytePoly_3 = bigint_nondet_quot!(ctx, x306, x6, 3);
    let x308: BytePoly_1 = bigint_nondet_rem!(ctx, x306, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x307, x6, 4), x308, 4), x306, 4),
        24387,
        2,
    )?;
    let x309: BytePoly_1 = bigint_add!(bigint_sub!(x257, x308, 1), x6, 1);
    let x310: BytePoly_1 = bigint_nondet_quot!(ctx, x309, x6, 1);
    let x311: BytePoly_1 = bigint_nondet_rem!(ctx, x309, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x310, x6, 2), x311, 2), x309, 2),
        8131,
        2,
    )?;
    let x312: BytePoly_2 = bigint_mul!(x305, x305, 2);
    let x313: BytePoly_3 = bigint_nondet_quot!(ctx, x312, x6, 3);
    let x314: BytePoly_1 = bigint_nondet_rem!(ctx, x312, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x313, x6, 4), x314, 4), x312, 4),
        24387,
        2,
    )?;
    let x315: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x314, x251, 1), x6, 1), x251, 1),
        x6,
        1
    );
    let x316: BytePoly_1 = bigint_nondet_quot!(ctx, x315, x6, 1);
    let x317: BytePoly_1 = bigint_nondet_rem!(ctx, x315, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x316, x6, 2), x317, 2), x315, 2),
        8131,
        2,
    )?;
    let x318: BytePoly_2 = bigint_mul!(x305, x317, 2);
    let x319: BytePoly_3 = bigint_nondet_quot!(ctx, x318, x6, 3);
    let x320: BytePoly_1 = bigint_nondet_rem!(ctx, x318, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x319, x6, 4), x320, 4), x318, 4),
        24387,
        2,
    )?;
    let x321: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x320, x311, 1), 1), x6, 1);
    let x322: BytePoly_1 = bigint_nondet_quot!(ctx, x321, x6, 1);
    let x323: BytePoly_1 = bigint_nondet_rem!(ctx, x321, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x322, x6, 2), x323, 2), x321, 2),
        8131,
        2,
    )?;
    let x324: BytePoly_1 = bigint_nondet_rem!(ctx, x259, x2, 1);
    let x325: BytePoly_2 = bigint_nondet_quot!(ctx, x259, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x325, x2, 3), x324, 3), x259, 3),
        16259,
        2,
    )?;
    let x326: BytePoly_1 = bigint_sub!(x3, x324, 1);
    eqz(ctx, &bigint_mul!(x324, x326, 2), 8131, 2)?;
    let x327: BytePoly_1 = bigint_add!(bigint_sub!(x317, x287, 1), x6, 1);
    let x328: BytePoly_1 = bigint_nondet_inv!(ctx, x327, x6, 1);
    let x329: BytePoly_2 = bigint_mul!(x327, x328, 2);
    let x330: BytePoly_3 = bigint_nondet_quot!(ctx, x329, x6, 3);
    let x331: BytePoly_1 = bigint_nondet_rem!(ctx, x329, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x330, x6, 4), x331, 4), x329, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x331, x1, 1), 34, 1)?;
    let x332: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x323, x289, 1), x6, 1), x328, 2);
    let x333: BytePoly_3 = bigint_nondet_quot!(ctx, x332, x6, 3);
    let x334: BytePoly_1 = bigint_nondet_rem!(ctx, x332, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x333, x6, 4), x334, 4), x332, 4),
        24387,
        2,
    )?;
    let x335: BytePoly_2 = bigint_mul!(x334, x287, 2);
    let x336: BytePoly_3 = bigint_nondet_quot!(ctx, x335, x6, 3);
    let x337: BytePoly_1 = bigint_nondet_rem!(ctx, x335, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x336, x6, 4), x337, 4), x335, 4),
        24387,
        2,
    )?;
    let x338: BytePoly_1 = bigint_add!(bigint_sub!(x289, x337, 1), x6, 1);
    let x339: BytePoly_1 = bigint_nondet_quot!(ctx, x338, x6, 1);
    let x340: BytePoly_1 = bigint_nondet_rem!(ctx, x338, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x339, x6, 2), x340, 2), x338, 2),
        8131,
        2,
    )?;
    let x341: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x334, x334, 2), x287, 2), x6, 2),
            x317,
            2
        ),
        x6,
        2
    );
    let x342: BytePoly_3 = bigint_nondet_quot!(ctx, x341, x6, 3);
    let x343: BytePoly_1 = bigint_nondet_rem!(ctx, x341, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x342, x6, 4), x343, 4), x341, 4),
        24387,
        2,
    )?;
    let x344: BytePoly_2 = bigint_mul!(x334, x343, 2);
    let x345: BytePoly_3 = bigint_nondet_quot!(ctx, x344, x6, 3);
    let x346: BytePoly_1 = bigint_nondet_rem!(ctx, x344, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x345, x6, 4), x346, 4), x344, 4),
        24387,
        2,
    )?;
    let x347: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x346, x340, 1), 1), x6, 1);
    let x348: BytePoly_1 = bigint_nondet_quot!(ctx, x347, x6, 1);
    let x349: BytePoly_1 = bigint_nondet_rem!(ctx, x347, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x348, x6, 2), x349, 2), x347, 2),
        8131,
        2,
    )?;
    let x350: BytePoly_2 = bigint_add!(bigint_mul!(x343, x324, 2), bigint_mul!(x287, x326, 2), 2);
    let x351: BytePoly_2 = bigint_add!(bigint_mul!(x349, x324, 2), bigint_mul!(x289, x326, 2), 2);
    let x352: BytePoly_3 = bigint_nondet_quot!(ctx, x350, x6, 3);
    let x353: BytePoly_1 = bigint_nondet_rem!(ctx, x350, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x352, x6, 4), x353, 4), x350, 4),
        24387,
        2,
    )?;
    let x354: BytePoly_3 = bigint_nondet_quot!(ctx, x351, x6, 3);
    let x355: BytePoly_1 = bigint_nondet_rem!(ctx, x351, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x354, x6, 4), x355, 4), x351, 4),
        24387,
        2,
    )?;
    let x356: BytePoly_2 = bigint_mul!(x317, x317, 2);
    let x357: BytePoly_3 = bigint_nondet_quot!(ctx, x356, x6, 3);
    let x358: BytePoly_1 = bigint_nondet_rem!(ctx, x356, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x357, x6, 4), x358, 4), x356, 4),
        24387,
        2,
    )?;
    let x359: BytePoly_2 = bigint_add!(bigint_mul!(x358, x0, 2), x5, 2);
    let x360: BytePoly_3 = bigint_nondet_quot!(ctx, x359, x6, 3);
    let x361: BytePoly_1 = bigint_nondet_rem!(ctx, x359, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x360, x6, 4), x361, 4), x359, 4),
        24387,
        2,
    )?;
    let x362: BytePoly_1 = bigint_add!(x323, x323, 1);
    let x363: BytePoly_1 = bigint_nondet_quot!(ctx, x362, x6, 1);
    let x364: BytePoly_1 = bigint_nondet_rem!(ctx, x362, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x363, x6, 2), x364, 2), x362, 2),
        8131,
        2,
    )?;
    let x365: BytePoly_1 = bigint_nondet_inv!(ctx, x364, x6, 1);
    let x366: BytePoly_2 = bigint_mul!(x364, x365, 2);
    let x367: BytePoly_3 = bigint_nondet_quot!(ctx, x366, x6, 3);
    let x368: BytePoly_1 = bigint_nondet_rem!(ctx, x366, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x367, x6, 4), x368, 4), x366, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x368, x3, 1), 34, 1)?;
    let x369: BytePoly_2 = bigint_mul!(x361, x365, 2);
    let x370: BytePoly_3 = bigint_nondet_quot!(ctx, x369, x6, 3);
    let x371: BytePoly_1 = bigint_nondet_rem!(ctx, x369, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x370, x6, 4), x371, 4), x369, 4),
        24387,
        2,
    )?;
    let x372: BytePoly_2 = bigint_mul!(x371, x317, 2);
    let x373: BytePoly_3 = bigint_nondet_quot!(ctx, x372, x6, 3);
    let x374: BytePoly_1 = bigint_nondet_rem!(ctx, x372, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x373, x6, 4), x374, 4), x372, 4),
        24387,
        2,
    )?;
    let x375: BytePoly_1 = bigint_add!(bigint_sub!(x323, x374, 1), x6, 1);
    let x376: BytePoly_1 = bigint_nondet_quot!(ctx, x375, x6, 1);
    let x377: BytePoly_1 = bigint_nondet_rem!(ctx, x375, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x376, x6, 2), x377, 2), x375, 2),
        8131,
        2,
    )?;
    let x378: BytePoly_2 = bigint_mul!(x371, x371, 2);
    let x379: BytePoly_3 = bigint_nondet_quot!(ctx, x378, x6, 3);
    let x380: BytePoly_1 = bigint_nondet_rem!(ctx, x378, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x379, x6, 4), x380, 4), x378, 4),
        24387,
        2,
    )?;
    let x381: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x380, x317, 1), x6, 1), x317, 1),
        x6,
        1
    );
    let x382: BytePoly_1 = bigint_nondet_quot!(ctx, x381, x6, 1);
    let x383: BytePoly_1 = bigint_nondet_rem!(ctx, x381, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x382, x6, 2), x383, 2), x381, 2),
        8131,
        2,
    )?;
    let x384: BytePoly_2 = bigint_mul!(x371, x383, 2);
    let x385: BytePoly_3 = bigint_nondet_quot!(ctx, x384, x6, 3);
    let x386: BytePoly_1 = bigint_nondet_rem!(ctx, x384, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x385, x6, 4), x386, 4), x384, 4),
        24387,
        2,
    )?;
    let x387: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x386, x377, 1), 1), x6, 1);
    let x388: BytePoly_1 = bigint_nondet_quot!(ctx, x387, x6, 1);
    let x389: BytePoly_1 = bigint_nondet_rem!(ctx, x387, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x388, x6, 2), x389, 2), x387, 2),
        8131,
        2,
    )?;
    let x390: BytePoly_1 = bigint_nondet_rem!(ctx, x325, x2, 1);
    let x391: BytePoly_2 = bigint_nondet_quot!(ctx, x325, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x391, x2, 3), x390, 3), x325, 3),
        16259,
        2,
    )?;
    let x392: BytePoly_1 = bigint_sub!(x3, x390, 1);
    eqz(ctx, &bigint_mul!(x390, x392, 2), 8131, 2)?;
    let x393: BytePoly_1 = bigint_add!(bigint_sub!(x383, x353, 1), x6, 1);
    let x394: BytePoly_1 = bigint_nondet_inv!(ctx, x393, x6, 1);
    let x395: BytePoly_2 = bigint_mul!(x393, x394, 2);
    let x396: BytePoly_3 = bigint_nondet_quot!(ctx, x395, x6, 3);
    let x397: BytePoly_1 = bigint_nondet_rem!(ctx, x395, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x396, x6, 4), x397, 4), x395, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x397, x1, 1), 34, 1)?;
    let x398: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x389, x355, 1), x6, 1), x394, 2);
    let x399: BytePoly_3 = bigint_nondet_quot!(ctx, x398, x6, 3);
    let x400: BytePoly_1 = bigint_nondet_rem!(ctx, x398, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x399, x6, 4), x400, 4), x398, 4),
        24387,
        2,
    )?;
    let x401: BytePoly_2 = bigint_mul!(x400, x353, 2);
    let x402: BytePoly_3 = bigint_nondet_quot!(ctx, x401, x6, 3);
    let x403: BytePoly_1 = bigint_nondet_rem!(ctx, x401, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x402, x6, 4), x403, 4), x401, 4),
        24387,
        2,
    )?;
    let x404: BytePoly_1 = bigint_add!(bigint_sub!(x355, x403, 1), x6, 1);
    let x405: BytePoly_1 = bigint_nondet_quot!(ctx, x404, x6, 1);
    let x406: BytePoly_1 = bigint_nondet_rem!(ctx, x404, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x405, x6, 2), x406, 2), x404, 2),
        8131,
        2,
    )?;
    let x407: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x400, x400, 2), x353, 2), x6, 2),
            x383,
            2
        ),
        x6,
        2
    );
    let x408: BytePoly_3 = bigint_nondet_quot!(ctx, x407, x6, 3);
    let x409: BytePoly_1 = bigint_nondet_rem!(ctx, x407, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x408, x6, 4), x409, 4), x407, 4),
        24387,
        2,
    )?;
    let x410: BytePoly_2 = bigint_mul!(x400, x409, 2);
    let x411: BytePoly_3 = bigint_nondet_quot!(ctx, x410, x6, 3);
    let x412: BytePoly_1 = bigint_nondet_rem!(ctx, x410, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x411, x6, 4), x412, 4), x410, 4),
        24387,
        2,
    )?;
    let x413: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x412, x406, 1), 1), x6, 1);
    let x414: BytePoly_1 = bigint_nondet_quot!(ctx, x413, x6, 1);
    let x415: BytePoly_1 = bigint_nondet_rem!(ctx, x413, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x414, x6, 2), x415, 2), x413, 2),
        8131,
        2,
    )?;
    let x416: BytePoly_2 = bigint_add!(bigint_mul!(x409, x390, 2), bigint_mul!(x353, x392, 2), 2);
    let x417: BytePoly_2 = bigint_add!(bigint_mul!(x415, x390, 2), bigint_mul!(x355, x392, 2), 2);
    let x418: BytePoly_3 = bigint_nondet_quot!(ctx, x416, x6, 3);
    let x419: BytePoly_1 = bigint_nondet_rem!(ctx, x416, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x418, x6, 4), x419, 4), x416, 4),
        24387,
        2,
    )?;
    let x420: BytePoly_3 = bigint_nondet_quot!(ctx, x417, x6, 3);
    let x421: BytePoly_1 = bigint_nondet_rem!(ctx, x417, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x420, x6, 4), x421, 4), x417, 4),
        24387,
        2,
    )?;
    let x422: BytePoly_2 = bigint_mul!(x383, x383, 2);
    let x423: BytePoly_3 = bigint_nondet_quot!(ctx, x422, x6, 3);
    let x424: BytePoly_1 = bigint_nondet_rem!(ctx, x422, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x423, x6, 4), x424, 4), x422, 4),
        24387,
        2,
    )?;
    let x425: BytePoly_2 = bigint_add!(bigint_mul!(x424, x0, 2), x5, 2);
    let x426: BytePoly_3 = bigint_nondet_quot!(ctx, x425, x6, 3);
    let x427: BytePoly_1 = bigint_nondet_rem!(ctx, x425, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x426, x6, 4), x427, 4), x425, 4),
        24387,
        2,
    )?;
    let x428: BytePoly_1 = bigint_add!(x389, x389, 1);
    let x429: BytePoly_1 = bigint_nondet_quot!(ctx, x428, x6, 1);
    let x430: BytePoly_1 = bigint_nondet_rem!(ctx, x428, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x429, x6, 2), x430, 2), x428, 2),
        8131,
        2,
    )?;
    let x431: BytePoly_1 = bigint_nondet_inv!(ctx, x430, x6, 1);
    let x432: BytePoly_2 = bigint_mul!(x430, x431, 2);
    let x433: BytePoly_3 = bigint_nondet_quot!(ctx, x432, x6, 3);
    let x434: BytePoly_1 = bigint_nondet_rem!(ctx, x432, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x433, x6, 4), x434, 4), x432, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x434, x3, 1), 34, 1)?;
    let x435: BytePoly_2 = bigint_mul!(x427, x431, 2);
    let x436: BytePoly_3 = bigint_nondet_quot!(ctx, x435, x6, 3);
    let x437: BytePoly_1 = bigint_nondet_rem!(ctx, x435, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x436, x6, 4), x437, 4), x435, 4),
        24387,
        2,
    )?;
    let x438: BytePoly_2 = bigint_mul!(x437, x383, 2);
    let x439: BytePoly_3 = bigint_nondet_quot!(ctx, x438, x6, 3);
    let x440: BytePoly_1 = bigint_nondet_rem!(ctx, x438, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x439, x6, 4), x440, 4), x438, 4),
        24387,
        2,
    )?;
    let x441: BytePoly_1 = bigint_add!(bigint_sub!(x389, x440, 1), x6, 1);
    let x442: BytePoly_1 = bigint_nondet_quot!(ctx, x441, x6, 1);
    let x443: BytePoly_1 = bigint_nondet_rem!(ctx, x441, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x442, x6, 2), x443, 2), x441, 2),
        8131,
        2,
    )?;
    let x444: BytePoly_2 = bigint_mul!(x437, x437, 2);
    let x445: BytePoly_3 = bigint_nondet_quot!(ctx, x444, x6, 3);
    let x446: BytePoly_1 = bigint_nondet_rem!(ctx, x444, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x445, x6, 4), x446, 4), x444, 4),
        24387,
        2,
    )?;
    let x447: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x446, x383, 1), x6, 1), x383, 1),
        x6,
        1
    );
    let x448: BytePoly_1 = bigint_nondet_quot!(ctx, x447, x6, 1);
    let x449: BytePoly_1 = bigint_nondet_rem!(ctx, x447, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x448, x6, 2), x449, 2), x447, 2),
        8131,
        2,
    )?;
    let x450: BytePoly_2 = bigint_mul!(x437, x449, 2);
    let x451: BytePoly_3 = bigint_nondet_quot!(ctx, x450, x6, 3);
    let x452: BytePoly_1 = bigint_nondet_rem!(ctx, x450, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x451, x6, 4), x452, 4), x450, 4),
        24387,
        2,
    )?;
    let x453: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x452, x443, 1), 1), x6, 1);
    let x454: BytePoly_1 = bigint_nondet_quot!(ctx, x453, x6, 1);
    let x455: BytePoly_1 = bigint_nondet_rem!(ctx, x453, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x454, x6, 2), x455, 2), x453, 2),
        8131,
        2,
    )?;
    let x456: BytePoly_1 = bigint_nondet_rem!(ctx, x391, x2, 1);
    let x457: BytePoly_2 = bigint_nondet_quot!(ctx, x391, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x457, x2, 3), x456, 3), x391, 3),
        16259,
        2,
    )?;
    let x458: BytePoly_1 = bigint_sub!(x3, x456, 1);
    eqz(ctx, &bigint_mul!(x456, x458, 2), 8131, 2)?;
    let x459: BytePoly_1 = bigint_add!(bigint_sub!(x449, x419, 1), x6, 1);
    let x460: BytePoly_1 = bigint_nondet_inv!(ctx, x459, x6, 1);
    let x461: BytePoly_2 = bigint_mul!(x459, x460, 2);
    let x462: BytePoly_3 = bigint_nondet_quot!(ctx, x461, x6, 3);
    let x463: BytePoly_1 = bigint_nondet_rem!(ctx, x461, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x462, x6, 4), x463, 4), x461, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x463, x1, 1), 34, 1)?;
    let x464: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x455, x421, 1), x6, 1), x460, 2);
    let x465: BytePoly_3 = bigint_nondet_quot!(ctx, x464, x6, 3);
    let x466: BytePoly_1 = bigint_nondet_rem!(ctx, x464, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x465, x6, 4), x466, 4), x464, 4),
        24387,
        2,
    )?;
    let x467: BytePoly_2 = bigint_mul!(x466, x419, 2);
    let x468: BytePoly_3 = bigint_nondet_quot!(ctx, x467, x6, 3);
    let x469: BytePoly_1 = bigint_nondet_rem!(ctx, x467, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x468, x6, 4), x469, 4), x467, 4),
        24387,
        2,
    )?;
    let x470: BytePoly_1 = bigint_add!(bigint_sub!(x421, x469, 1), x6, 1);
    let x471: BytePoly_1 = bigint_nondet_quot!(ctx, x470, x6, 1);
    let x472: BytePoly_1 = bigint_nondet_rem!(ctx, x470, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x471, x6, 2), x472, 2), x470, 2),
        8131,
        2,
    )?;
    let x473: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x466, x466, 2), x419, 2), x6, 2),
            x449,
            2
        ),
        x6,
        2
    );
    let x474: BytePoly_3 = bigint_nondet_quot!(ctx, x473, x6, 3);
    let x475: BytePoly_1 = bigint_nondet_rem!(ctx, x473, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x474, x6, 4), x475, 4), x473, 4),
        24387,
        2,
    )?;
    let x476: BytePoly_2 = bigint_mul!(x466, x475, 2);
    let x477: BytePoly_3 = bigint_nondet_quot!(ctx, x476, x6, 3);
    let x478: BytePoly_1 = bigint_nondet_rem!(ctx, x476, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x477, x6, 4), x478, 4), x476, 4),
        24387,
        2,
    )?;
    let x479: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x478, x472, 1), 1), x6, 1);
    let x480: BytePoly_1 = bigint_nondet_quot!(ctx, x479, x6, 1);
    let x481: BytePoly_1 = bigint_nondet_rem!(ctx, x479, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x480, x6, 2), x481, 2), x479, 2),
        8131,
        2,
    )?;
    let x482: BytePoly_2 = bigint_add!(bigint_mul!(x475, x456, 2), bigint_mul!(x419, x458, 2), 2);
    let x483: BytePoly_2 = bigint_add!(bigint_mul!(x481, x456, 2), bigint_mul!(x421, x458, 2), 2);
    let x484: BytePoly_3 = bigint_nondet_quot!(ctx, x482, x6, 3);
    let x485: BytePoly_1 = bigint_nondet_rem!(ctx, x482, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x484, x6, 4), x485, 4), x482, 4),
        24387,
        2,
    )?;
    let x486: BytePoly_3 = bigint_nondet_quot!(ctx, x483, x6, 3);
    let x487: BytePoly_1 = bigint_nondet_rem!(ctx, x483, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x486, x6, 4), x487, 4), x483, 4),
        24387,
        2,
    )?;
    let x488: BytePoly_2 = bigint_mul!(x449, x449, 2);
    let x489: BytePoly_3 = bigint_nondet_quot!(ctx, x488, x6, 3);
    let x490: BytePoly_1 = bigint_nondet_rem!(ctx, x488, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x489, x6, 4), x490, 4), x488, 4),
        24387,
        2,
    )?;
    let x491: BytePoly_2 = bigint_add!(bigint_mul!(x490, x0, 2), x5, 2);
    let x492: BytePoly_3 = bigint_nondet_quot!(ctx, x491, x6, 3);
    let x493: BytePoly_1 = bigint_nondet_rem!(ctx, x491, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x492, x6, 4), x493, 4), x491, 4),
        24387,
        2,
    )?;
    let x494: BytePoly_1 = bigint_add!(x455, x455, 1);
    let x495: BytePoly_1 = bigint_nondet_quot!(ctx, x494, x6, 1);
    let x496: BytePoly_1 = bigint_nondet_rem!(ctx, x494, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x495, x6, 2), x496, 2), x494, 2),
        8131,
        2,
    )?;
    let x497: BytePoly_1 = bigint_nondet_inv!(ctx, x496, x6, 1);
    let x498: BytePoly_2 = bigint_mul!(x496, x497, 2);
    let x499: BytePoly_3 = bigint_nondet_quot!(ctx, x498, x6, 3);
    let x500: BytePoly_1 = bigint_nondet_rem!(ctx, x498, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x499, x6, 4), x500, 4), x498, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x500, x3, 1), 34, 1)?;
    let x501: BytePoly_2 = bigint_mul!(x493, x497, 2);
    let x502: BytePoly_3 = bigint_nondet_quot!(ctx, x501, x6, 3);
    let x503: BytePoly_1 = bigint_nondet_rem!(ctx, x501, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x502, x6, 4), x503, 4), x501, 4),
        24387,
        2,
    )?;
    let x504: BytePoly_2 = bigint_mul!(x503, x449, 2);
    let x505: BytePoly_3 = bigint_nondet_quot!(ctx, x504, x6, 3);
    let x506: BytePoly_1 = bigint_nondet_rem!(ctx, x504, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x505, x6, 4), x506, 4), x504, 4),
        24387,
        2,
    )?;
    let x507: BytePoly_1 = bigint_add!(bigint_sub!(x455, x506, 1), x6, 1);
    let x508: BytePoly_1 = bigint_nondet_quot!(ctx, x507, x6, 1);
    let x509: BytePoly_1 = bigint_nondet_rem!(ctx, x507, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x508, x6, 2), x509, 2), x507, 2),
        8131,
        2,
    )?;
    let x510: BytePoly_2 = bigint_mul!(x503, x503, 2);
    let x511: BytePoly_3 = bigint_nondet_quot!(ctx, x510, x6, 3);
    let x512: BytePoly_1 = bigint_nondet_rem!(ctx, x510, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x511, x6, 4), x512, 4), x510, 4),
        24387,
        2,
    )?;
    let x513: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x512, x449, 1), x6, 1), x449, 1),
        x6,
        1
    );
    let x514: BytePoly_1 = bigint_nondet_quot!(ctx, x513, x6, 1);
    let x515: BytePoly_1 = bigint_nondet_rem!(ctx, x513, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x514, x6, 2), x515, 2), x513, 2),
        8131,
        2,
    )?;
    let x516: BytePoly_2 = bigint_mul!(x503, x515, 2);
    let x517: BytePoly_3 = bigint_nondet_quot!(ctx, x516, x6, 3);
    let x518: BytePoly_1 = bigint_nondet_rem!(ctx, x516, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x517, x6, 4), x518, 4), x516, 4),
        24387,
        2,
    )?;
    let x519: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x518, x509, 1), 1), x6, 1);
    let x520: BytePoly_1 = bigint_nondet_quot!(ctx, x519, x6, 1);
    let x521: BytePoly_1 = bigint_nondet_rem!(ctx, x519, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x520, x6, 2), x521, 2), x519, 2),
        8131,
        2,
    )?;
    let x522: BytePoly_1 = bigint_nondet_rem!(ctx, x457, x2, 1);
    let x523: BytePoly_2 = bigint_nondet_quot!(ctx, x457, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x523, x2, 3), x522, 3), x457, 3),
        16259,
        2,
    )?;
    let x524: BytePoly_1 = bigint_sub!(x3, x522, 1);
    eqz(ctx, &bigint_mul!(x522, x524, 2), 8131, 2)?;
    let x525: BytePoly_1 = bigint_add!(bigint_sub!(x515, x485, 1), x6, 1);
    let x526: BytePoly_1 = bigint_nondet_inv!(ctx, x525, x6, 1);
    let x527: BytePoly_2 = bigint_mul!(x525, x526, 2);
    let x528: BytePoly_3 = bigint_nondet_quot!(ctx, x527, x6, 3);
    let x529: BytePoly_1 = bigint_nondet_rem!(ctx, x527, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x528, x6, 4), x529, 4), x527, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x529, x1, 1), 34, 1)?;
    let x530: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x521, x487, 1), x6, 1), x526, 2);
    let x531: BytePoly_3 = bigint_nondet_quot!(ctx, x530, x6, 3);
    let x532: BytePoly_1 = bigint_nondet_rem!(ctx, x530, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x531, x6, 4), x532, 4), x530, 4),
        24387,
        2,
    )?;
    let x533: BytePoly_2 = bigint_mul!(x532, x485, 2);
    let x534: BytePoly_3 = bigint_nondet_quot!(ctx, x533, x6, 3);
    let x535: BytePoly_1 = bigint_nondet_rem!(ctx, x533, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x534, x6, 4), x535, 4), x533, 4),
        24387,
        2,
    )?;
    let x536: BytePoly_1 = bigint_add!(bigint_sub!(x487, x535, 1), x6, 1);
    let x537: BytePoly_1 = bigint_nondet_quot!(ctx, x536, x6, 1);
    let x538: BytePoly_1 = bigint_nondet_rem!(ctx, x536, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x537, x6, 2), x538, 2), x536, 2),
        8131,
        2,
    )?;
    let x539: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x532, x532, 2), x485, 2), x6, 2),
            x515,
            2
        ),
        x6,
        2
    );
    let x540: BytePoly_3 = bigint_nondet_quot!(ctx, x539, x6, 3);
    let x541: BytePoly_1 = bigint_nondet_rem!(ctx, x539, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x540, x6, 4), x541, 4), x539, 4),
        24387,
        2,
    )?;
    let x542: BytePoly_2 = bigint_mul!(x532, x541, 2);
    let x543: BytePoly_3 = bigint_nondet_quot!(ctx, x542, x6, 3);
    let x544: BytePoly_1 = bigint_nondet_rem!(ctx, x542, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x543, x6, 4), x544, 4), x542, 4),
        24387,
        2,
    )?;
    let x545: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x544, x538, 1), 1), x6, 1);
    let x546: BytePoly_1 = bigint_nondet_quot!(ctx, x545, x6, 1);
    let x547: BytePoly_1 = bigint_nondet_rem!(ctx, x545, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x546, x6, 2), x547, 2), x545, 2),
        8131,
        2,
    )?;
    let x548: BytePoly_2 = bigint_add!(bigint_mul!(x541, x522, 2), bigint_mul!(x485, x524, 2), 2);
    let x549: BytePoly_2 = bigint_add!(bigint_mul!(x547, x522, 2), bigint_mul!(x487, x524, 2), 2);
    let x550: BytePoly_3 = bigint_nondet_quot!(ctx, x548, x6, 3);
    let x551: BytePoly_1 = bigint_nondet_rem!(ctx, x548, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x550, x6, 4), x551, 4), x548, 4),
        24387,
        2,
    )?;
    let x552: BytePoly_3 = bigint_nondet_quot!(ctx, x549, x6, 3);
    let x553: BytePoly_1 = bigint_nondet_rem!(ctx, x549, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x552, x6, 4), x553, 4), x549, 4),
        24387,
        2,
    )?;
    let x554: BytePoly_2 = bigint_mul!(x515, x515, 2);
    let x555: BytePoly_3 = bigint_nondet_quot!(ctx, x554, x6, 3);
    let x556: BytePoly_1 = bigint_nondet_rem!(ctx, x554, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x555, x6, 4), x556, 4), x554, 4),
        24387,
        2,
    )?;
    let x557: BytePoly_2 = bigint_add!(bigint_mul!(x556, x0, 2), x5, 2);
    let x558: BytePoly_3 = bigint_nondet_quot!(ctx, x557, x6, 3);
    let x559: BytePoly_1 = bigint_nondet_rem!(ctx, x557, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x558, x6, 4), x559, 4), x557, 4),
        24387,
        2,
    )?;
    let x560: BytePoly_1 = bigint_add!(x521, x521, 1);
    let x561: BytePoly_1 = bigint_nondet_quot!(ctx, x560, x6, 1);
    let x562: BytePoly_1 = bigint_nondet_rem!(ctx, x560, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x561, x6, 2), x562, 2), x560, 2),
        8131,
        2,
    )?;
    let x563: BytePoly_1 = bigint_nondet_inv!(ctx, x562, x6, 1);
    let x564: BytePoly_2 = bigint_mul!(x562, x563, 2);
    let x565: BytePoly_3 = bigint_nondet_quot!(ctx, x564, x6, 3);
    let x566: BytePoly_1 = bigint_nondet_rem!(ctx, x564, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x565, x6, 4), x566, 4), x564, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x566, x3, 1), 34, 1)?;
    let x567: BytePoly_2 = bigint_mul!(x559, x563, 2);
    let x568: BytePoly_3 = bigint_nondet_quot!(ctx, x567, x6, 3);
    let x569: BytePoly_1 = bigint_nondet_rem!(ctx, x567, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x568, x6, 4), x569, 4), x567, 4),
        24387,
        2,
    )?;
    let x570: BytePoly_2 = bigint_mul!(x569, x515, 2);
    let x571: BytePoly_3 = bigint_nondet_quot!(ctx, x570, x6, 3);
    let x572: BytePoly_1 = bigint_nondet_rem!(ctx, x570, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x571, x6, 4), x572, 4), x570, 4),
        24387,
        2,
    )?;
    let x573: BytePoly_1 = bigint_add!(bigint_sub!(x521, x572, 1), x6, 1);
    let x574: BytePoly_1 = bigint_nondet_quot!(ctx, x573, x6, 1);
    let x575: BytePoly_1 = bigint_nondet_rem!(ctx, x573, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x574, x6, 2), x575, 2), x573, 2),
        8131,
        2,
    )?;
    let x576: BytePoly_2 = bigint_mul!(x569, x569, 2);
    let x577: BytePoly_3 = bigint_nondet_quot!(ctx, x576, x6, 3);
    let x578: BytePoly_1 = bigint_nondet_rem!(ctx, x576, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x577, x6, 4), x578, 4), x576, 4),
        24387,
        2,
    )?;
    let x579: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x578, x515, 1), x6, 1), x515, 1),
        x6,
        1
    );
    let x580: BytePoly_1 = bigint_nondet_quot!(ctx, x579, x6, 1);
    let x581: BytePoly_1 = bigint_nondet_rem!(ctx, x579, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x580, x6, 2), x581, 2), x579, 2),
        8131,
        2,
    )?;
    let x582: BytePoly_2 = bigint_mul!(x569, x581, 2);
    let x583: BytePoly_3 = bigint_nondet_quot!(ctx, x582, x6, 3);
    let x584: BytePoly_1 = bigint_nondet_rem!(ctx, x582, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x583, x6, 4), x584, 4), x582, 4),
        24387,
        2,
    )?;
    let x585: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x584, x575, 1), 1), x6, 1);
    let x586: BytePoly_1 = bigint_nondet_quot!(ctx, x585, x6, 1);
    let x587: BytePoly_1 = bigint_nondet_rem!(ctx, x585, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x586, x6, 2), x587, 2), x585, 2),
        8131,
        2,
    )?;
    let x588: BytePoly_1 = bigint_nondet_rem!(ctx, x523, x2, 1);
    let x589: BytePoly_2 = bigint_nondet_quot!(ctx, x523, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x589, x2, 3), x588, 3), x523, 3),
        16259,
        2,
    )?;
    let x590: BytePoly_1 = bigint_sub!(x3, x588, 1);
    eqz(ctx, &bigint_mul!(x588, x590, 2), 8131, 2)?;
    let x591: BytePoly_1 = bigint_add!(bigint_sub!(x581, x551, 1), x6, 1);
    let x592: BytePoly_1 = bigint_nondet_inv!(ctx, x591, x6, 1);
    let x593: BytePoly_2 = bigint_mul!(x591, x592, 2);
    let x594: BytePoly_3 = bigint_nondet_quot!(ctx, x593, x6, 3);
    let x595: BytePoly_1 = bigint_nondet_rem!(ctx, x593, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x594, x6, 4), x595, 4), x593, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x595, x1, 1), 34, 1)?;
    let x596: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x587, x553, 1), x6, 1), x592, 2);
    let x597: BytePoly_3 = bigint_nondet_quot!(ctx, x596, x6, 3);
    let x598: BytePoly_1 = bigint_nondet_rem!(ctx, x596, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x597, x6, 4), x598, 4), x596, 4),
        24387,
        2,
    )?;
    let x599: BytePoly_2 = bigint_mul!(x598, x551, 2);
    let x600: BytePoly_3 = bigint_nondet_quot!(ctx, x599, x6, 3);
    let x601: BytePoly_1 = bigint_nondet_rem!(ctx, x599, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x600, x6, 4), x601, 4), x599, 4),
        24387,
        2,
    )?;
    let x602: BytePoly_1 = bigint_add!(bigint_sub!(x553, x601, 1), x6, 1);
    let x603: BytePoly_1 = bigint_nondet_quot!(ctx, x602, x6, 1);
    let x604: BytePoly_1 = bigint_nondet_rem!(ctx, x602, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x603, x6, 2), x604, 2), x602, 2),
        8131,
        2,
    )?;
    let x605: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x598, x598, 2), x551, 2), x6, 2),
            x581,
            2
        ),
        x6,
        2
    );
    let x606: BytePoly_3 = bigint_nondet_quot!(ctx, x605, x6, 3);
    let x607: BytePoly_1 = bigint_nondet_rem!(ctx, x605, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x606, x6, 4), x607, 4), x605, 4),
        24387,
        2,
    )?;
    let x608: BytePoly_2 = bigint_mul!(x598, x607, 2);
    let x609: BytePoly_3 = bigint_nondet_quot!(ctx, x608, x6, 3);
    let x610: BytePoly_1 = bigint_nondet_rem!(ctx, x608, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x609, x6, 4), x610, 4), x608, 4),
        24387,
        2,
    )?;
    let x611: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x610, x604, 1), 1), x6, 1);
    let x612: BytePoly_1 = bigint_nondet_quot!(ctx, x611, x6, 1);
    let x613: BytePoly_1 = bigint_nondet_rem!(ctx, x611, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x612, x6, 2), x613, 2), x611, 2),
        8131,
        2,
    )?;
    let x614: BytePoly_2 = bigint_add!(bigint_mul!(x607, x588, 2), bigint_mul!(x551, x590, 2), 2);
    let x615: BytePoly_2 = bigint_add!(bigint_mul!(x613, x588, 2), bigint_mul!(x553, x590, 2), 2);
    let x616: BytePoly_3 = bigint_nondet_quot!(ctx, x614, x6, 3);
    let x617: BytePoly_1 = bigint_nondet_rem!(ctx, x614, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x616, x6, 4), x617, 4), x614, 4),
        24387,
        2,
    )?;
    let x618: BytePoly_3 = bigint_nondet_quot!(ctx, x615, x6, 3);
    let x619: BytePoly_1 = bigint_nondet_rem!(ctx, x615, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x618, x6, 4), x619, 4), x615, 4),
        24387,
        2,
    )?;
    let x620: BytePoly_2 = bigint_mul!(x581, x581, 2);
    let x621: BytePoly_3 = bigint_nondet_quot!(ctx, x620, x6, 3);
    let x622: BytePoly_1 = bigint_nondet_rem!(ctx, x620, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x621, x6, 4), x622, 4), x620, 4),
        24387,
        2,
    )?;
    let x623: BytePoly_2 = bigint_add!(bigint_mul!(x622, x0, 2), x5, 2);
    let x624: BytePoly_3 = bigint_nondet_quot!(ctx, x623, x6, 3);
    let x625: BytePoly_1 = bigint_nondet_rem!(ctx, x623, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x624, x6, 4), x625, 4), x623, 4),
        24387,
        2,
    )?;
    let x626: BytePoly_1 = bigint_add!(x587, x587, 1);
    let x627: BytePoly_1 = bigint_nondet_quot!(ctx, x626, x6, 1);
    let x628: BytePoly_1 = bigint_nondet_rem!(ctx, x626, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x627, x6, 2), x628, 2), x626, 2),
        8131,
        2,
    )?;
    let x629: BytePoly_1 = bigint_nondet_inv!(ctx, x628, x6, 1);
    let x630: BytePoly_2 = bigint_mul!(x628, x629, 2);
    let x631: BytePoly_3 = bigint_nondet_quot!(ctx, x630, x6, 3);
    let x632: BytePoly_1 = bigint_nondet_rem!(ctx, x630, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x631, x6, 4), x632, 4), x630, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x632, x3, 1), 34, 1)?;
    let x633: BytePoly_2 = bigint_mul!(x625, x629, 2);
    let x634: BytePoly_3 = bigint_nondet_quot!(ctx, x633, x6, 3);
    let x635: BytePoly_1 = bigint_nondet_rem!(ctx, x633, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x634, x6, 4), x635, 4), x633, 4),
        24387,
        2,
    )?;
    let x636: BytePoly_2 = bigint_mul!(x635, x581, 2);
    let x637: BytePoly_3 = bigint_nondet_quot!(ctx, x636, x6, 3);
    let x638: BytePoly_1 = bigint_nondet_rem!(ctx, x636, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x637, x6, 4), x638, 4), x636, 4),
        24387,
        2,
    )?;
    let x639: BytePoly_1 = bigint_add!(bigint_sub!(x587, x638, 1), x6, 1);
    let x640: BytePoly_1 = bigint_nondet_quot!(ctx, x639, x6, 1);
    let x641: BytePoly_1 = bigint_nondet_rem!(ctx, x639, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x640, x6, 2), x641, 2), x639, 2),
        8131,
        2,
    )?;
    let x642: BytePoly_2 = bigint_mul!(x635, x635, 2);
    let x643: BytePoly_3 = bigint_nondet_quot!(ctx, x642, x6, 3);
    let x644: BytePoly_1 = bigint_nondet_rem!(ctx, x642, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x643, x6, 4), x644, 4), x642, 4),
        24387,
        2,
    )?;
    let x645: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x644, x581, 1), x6, 1), x581, 1),
        x6,
        1
    );
    let x646: BytePoly_1 = bigint_nondet_quot!(ctx, x645, x6, 1);
    let x647: BytePoly_1 = bigint_nondet_rem!(ctx, x645, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x646, x6, 2), x647, 2), x645, 2),
        8131,
        2,
    )?;
    let x648: BytePoly_2 = bigint_mul!(x635, x647, 2);
    let x649: BytePoly_3 = bigint_nondet_quot!(ctx, x648, x6, 3);
    let x650: BytePoly_1 = bigint_nondet_rem!(ctx, x648, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x649, x6, 4), x650, 4), x648, 4),
        24387,
        2,
    )?;
    let x651: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x650, x641, 1), 1), x6, 1);
    let x652: BytePoly_1 = bigint_nondet_quot!(ctx, x651, x6, 1);
    let x653: BytePoly_1 = bigint_nondet_rem!(ctx, x651, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x652, x6, 2), x653, 2), x651, 2),
        8131,
        2,
    )?;
    let x654: BytePoly_1 = bigint_nondet_rem!(ctx, x589, x2, 1);
    let x655: BytePoly_2 = bigint_nondet_quot!(ctx, x589, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x655, x2, 3), x654, 3), x589, 3),
        16259,
        2,
    )?;
    let x656: BytePoly_1 = bigint_sub!(x3, x654, 1);
    eqz(ctx, &bigint_mul!(x654, x656, 2), 8131, 2)?;
    let x657: BytePoly_1 = bigint_add!(bigint_sub!(x647, x617, 1), x6, 1);
    let x658: BytePoly_1 = bigint_nondet_inv!(ctx, x657, x6, 1);
    let x659: BytePoly_2 = bigint_mul!(x657, x658, 2);
    let x660: BytePoly_3 = bigint_nondet_quot!(ctx, x659, x6, 3);
    let x661: BytePoly_1 = bigint_nondet_rem!(ctx, x659, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x660, x6, 4), x661, 4), x659, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x661, x1, 1), 34, 1)?;
    let x662: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x653, x619, 1), x6, 1), x658, 2);
    let x663: BytePoly_3 = bigint_nondet_quot!(ctx, x662, x6, 3);
    let x664: BytePoly_1 = bigint_nondet_rem!(ctx, x662, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x663, x6, 4), x664, 4), x662, 4),
        24387,
        2,
    )?;
    let x665: BytePoly_2 = bigint_mul!(x664, x617, 2);
    let x666: BytePoly_3 = bigint_nondet_quot!(ctx, x665, x6, 3);
    let x667: BytePoly_1 = bigint_nondet_rem!(ctx, x665, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x666, x6, 4), x667, 4), x665, 4),
        24387,
        2,
    )?;
    let x668: BytePoly_1 = bigint_add!(bigint_sub!(x619, x667, 1), x6, 1);
    let x669: BytePoly_1 = bigint_nondet_quot!(ctx, x668, x6, 1);
    let x670: BytePoly_1 = bigint_nondet_rem!(ctx, x668, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x669, x6, 2), x670, 2), x668, 2),
        8131,
        2,
    )?;
    let x671: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x664, x664, 2), x617, 2), x6, 2),
            x647,
            2
        ),
        x6,
        2
    );
    let x672: BytePoly_3 = bigint_nondet_quot!(ctx, x671, x6, 3);
    let x673: BytePoly_1 = bigint_nondet_rem!(ctx, x671, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x672, x6, 4), x673, 4), x671, 4),
        24387,
        2,
    )?;
    let x674: BytePoly_2 = bigint_mul!(x664, x673, 2);
    let x675: BytePoly_3 = bigint_nondet_quot!(ctx, x674, x6, 3);
    let x676: BytePoly_1 = bigint_nondet_rem!(ctx, x674, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x675, x6, 4), x676, 4), x674, 4),
        24387,
        2,
    )?;
    let x677: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x676, x670, 1), 1), x6, 1);
    let x678: BytePoly_1 = bigint_nondet_quot!(ctx, x677, x6, 1);
    let x679: BytePoly_1 = bigint_nondet_rem!(ctx, x677, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x678, x6, 2), x679, 2), x677, 2),
        8131,
        2,
    )?;
    let x680: BytePoly_2 = bigint_add!(bigint_mul!(x673, x654, 2), bigint_mul!(x617, x656, 2), 2);
    let x681: BytePoly_2 = bigint_add!(bigint_mul!(x679, x654, 2), bigint_mul!(x619, x656, 2), 2);
    let x682: BytePoly_3 = bigint_nondet_quot!(ctx, x680, x6, 3);
    let x683: BytePoly_1 = bigint_nondet_rem!(ctx, x680, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x682, x6, 4), x683, 4), x680, 4),
        24387,
        2,
    )?;
    let x684: BytePoly_3 = bigint_nondet_quot!(ctx, x681, x6, 3);
    let x685: BytePoly_1 = bigint_nondet_rem!(ctx, x681, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x684, x6, 4), x685, 4), x681, 4),
        24387,
        2,
    )?;
    let x686: BytePoly_2 = bigint_mul!(x647, x647, 2);
    let x687: BytePoly_3 = bigint_nondet_quot!(ctx, x686, x6, 3);
    let x688: BytePoly_1 = bigint_nondet_rem!(ctx, x686, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x687, x6, 4), x688, 4), x686, 4),
        24387,
        2,
    )?;
    let x689: BytePoly_2 = bigint_add!(bigint_mul!(x688, x0, 2), x5, 2);
    let x690: BytePoly_3 = bigint_nondet_quot!(ctx, x689, x6, 3);
    let x691: BytePoly_1 = bigint_nondet_rem!(ctx, x689, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x690, x6, 4), x691, 4), x689, 4),
        24387,
        2,
    )?;
    let x692: BytePoly_1 = bigint_add!(x653, x653, 1);
    let x693: BytePoly_1 = bigint_nondet_quot!(ctx, x692, x6, 1);
    let x694: BytePoly_1 = bigint_nondet_rem!(ctx, x692, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x693, x6, 2), x694, 2), x692, 2),
        8131,
        2,
    )?;
    let x695: BytePoly_1 = bigint_nondet_inv!(ctx, x694, x6, 1);
    let x696: BytePoly_2 = bigint_mul!(x694, x695, 2);
    let x697: BytePoly_3 = bigint_nondet_quot!(ctx, x696, x6, 3);
    let x698: BytePoly_1 = bigint_nondet_rem!(ctx, x696, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x697, x6, 4), x698, 4), x696, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x698, x3, 1), 34, 1)?;
    let x699: BytePoly_2 = bigint_mul!(x691, x695, 2);
    let x700: BytePoly_3 = bigint_nondet_quot!(ctx, x699, x6, 3);
    let x701: BytePoly_1 = bigint_nondet_rem!(ctx, x699, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x700, x6, 4), x701, 4), x699, 4),
        24387,
        2,
    )?;
    let x702: BytePoly_2 = bigint_mul!(x701, x647, 2);
    let x703: BytePoly_3 = bigint_nondet_quot!(ctx, x702, x6, 3);
    let x704: BytePoly_1 = bigint_nondet_rem!(ctx, x702, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x703, x6, 4), x704, 4), x702, 4),
        24387,
        2,
    )?;
    let x705: BytePoly_1 = bigint_add!(bigint_sub!(x653, x704, 1), x6, 1);
    let x706: BytePoly_1 = bigint_nondet_quot!(ctx, x705, x6, 1);
    let x707: BytePoly_1 = bigint_nondet_rem!(ctx, x705, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x706, x6, 2), x707, 2), x705, 2),
        8131,
        2,
    )?;
    let x708: BytePoly_2 = bigint_mul!(x701, x701, 2);
    let x709: BytePoly_3 = bigint_nondet_quot!(ctx, x708, x6, 3);
    let x710: BytePoly_1 = bigint_nondet_rem!(ctx, x708, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x709, x6, 4), x710, 4), x708, 4),
        24387,
        2,
    )?;
    let x711: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x710, x647, 1), x6, 1), x647, 1),
        x6,
        1
    );
    let x712: BytePoly_1 = bigint_nondet_quot!(ctx, x711, x6, 1);
    let x713: BytePoly_1 = bigint_nondet_rem!(ctx, x711, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x712, x6, 2), x713, 2), x711, 2),
        8131,
        2,
    )?;
    let x714: BytePoly_2 = bigint_mul!(x701, x713, 2);
    let x715: BytePoly_3 = bigint_nondet_quot!(ctx, x714, x6, 3);
    let x716: BytePoly_1 = bigint_nondet_rem!(ctx, x714, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x715, x6, 4), x716, 4), x714, 4),
        24387,
        2,
    )?;
    let x717: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x716, x707, 1), 1), x6, 1);
    let x718: BytePoly_1 = bigint_nondet_quot!(ctx, x717, x6, 1);
    let x719: BytePoly_1 = bigint_nondet_rem!(ctx, x717, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x718, x6, 2), x719, 2), x717, 2),
        8131,
        2,
    )?;
    let x720: BytePoly_1 = bigint_nondet_rem!(ctx, x655, x2, 1);
    let x721: BytePoly_2 = bigint_nondet_quot!(ctx, x655, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x721, x2, 3), x720, 3), x655, 3),
        16259,
        2,
    )?;
    let x722: BytePoly_1 = bigint_sub!(x3, x720, 1);
    eqz(ctx, &bigint_mul!(x720, x722, 2), 8131, 2)?;
    let x723: BytePoly_1 = bigint_add!(bigint_sub!(x713, x683, 1), x6, 1);
    let x724: BytePoly_1 = bigint_nondet_inv!(ctx, x723, x6, 1);
    let x725: BytePoly_2 = bigint_mul!(x723, x724, 2);
    let x726: BytePoly_3 = bigint_nondet_quot!(ctx, x725, x6, 3);
    let x727: BytePoly_1 = bigint_nondet_rem!(ctx, x725, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x726, x6, 4), x727, 4), x725, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x727, x1, 1), 34, 1)?;
    let x728: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x719, x685, 1), x6, 1), x724, 2);
    let x729: BytePoly_3 = bigint_nondet_quot!(ctx, x728, x6, 3);
    let x730: BytePoly_1 = bigint_nondet_rem!(ctx, x728, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x729, x6, 4), x730, 4), x728, 4),
        24387,
        2,
    )?;
    let x731: BytePoly_2 = bigint_mul!(x730, x683, 2);
    let x732: BytePoly_3 = bigint_nondet_quot!(ctx, x731, x6, 3);
    let x733: BytePoly_1 = bigint_nondet_rem!(ctx, x731, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x732, x6, 4), x733, 4), x731, 4),
        24387,
        2,
    )?;
    let x734: BytePoly_1 = bigint_add!(bigint_sub!(x685, x733, 1), x6, 1);
    let x735: BytePoly_1 = bigint_nondet_quot!(ctx, x734, x6, 1);
    let x736: BytePoly_1 = bigint_nondet_rem!(ctx, x734, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x735, x6, 2), x736, 2), x734, 2),
        8131,
        2,
    )?;
    let x737: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x730, x730, 2), x683, 2), x6, 2),
            x713,
            2
        ),
        x6,
        2
    );
    let x738: BytePoly_3 = bigint_nondet_quot!(ctx, x737, x6, 3);
    let x739: BytePoly_1 = bigint_nondet_rem!(ctx, x737, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x738, x6, 4), x739, 4), x737, 4),
        24387,
        2,
    )?;
    let x740: BytePoly_2 = bigint_mul!(x730, x739, 2);
    let x741: BytePoly_3 = bigint_nondet_quot!(ctx, x740, x6, 3);
    let x742: BytePoly_1 = bigint_nondet_rem!(ctx, x740, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x741, x6, 4), x742, 4), x740, 4),
        24387,
        2,
    )?;
    let x743: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x742, x736, 1), 1), x6, 1);
    let x744: BytePoly_1 = bigint_nondet_quot!(ctx, x743, x6, 1);
    let x745: BytePoly_1 = bigint_nondet_rem!(ctx, x743, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x744, x6, 2), x745, 2), x743, 2),
        8131,
        2,
    )?;
    let x746: BytePoly_2 = bigint_add!(bigint_mul!(x739, x720, 2), bigint_mul!(x683, x722, 2), 2);
    let x747: BytePoly_2 = bigint_add!(bigint_mul!(x745, x720, 2), bigint_mul!(x685, x722, 2), 2);
    let x748: BytePoly_3 = bigint_nondet_quot!(ctx, x746, x6, 3);
    let x749: BytePoly_1 = bigint_nondet_rem!(ctx, x746, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x748, x6, 4), x749, 4), x746, 4),
        24387,
        2,
    )?;
    let x750: BytePoly_3 = bigint_nondet_quot!(ctx, x747, x6, 3);
    let x751: BytePoly_1 = bigint_nondet_rem!(ctx, x747, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x750, x6, 4), x751, 4), x747, 4),
        24387,
        2,
    )?;
    let x752: BytePoly_2 = bigint_mul!(x713, x713, 2);
    let x753: BytePoly_3 = bigint_nondet_quot!(ctx, x752, x6, 3);
    let x754: BytePoly_1 = bigint_nondet_rem!(ctx, x752, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x753, x6, 4), x754, 4), x752, 4),
        24387,
        2,
    )?;
    let x755: BytePoly_2 = bigint_add!(bigint_mul!(x754, x0, 2), x5, 2);
    let x756: BytePoly_3 = bigint_nondet_quot!(ctx, x755, x6, 3);
    let x757: BytePoly_1 = bigint_nondet_rem!(ctx, x755, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x756, x6, 4), x757, 4), x755, 4),
        24387,
        2,
    )?;
    let x758: BytePoly_1 = bigint_add!(x719, x719, 1);
    let x759: BytePoly_1 = bigint_nondet_quot!(ctx, x758, x6, 1);
    let x760: BytePoly_1 = bigint_nondet_rem!(ctx, x758, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x759, x6, 2), x760, 2), x758, 2),
        8131,
        2,
    )?;
    let x761: BytePoly_1 = bigint_nondet_inv!(ctx, x760, x6, 1);
    let x762: BytePoly_2 = bigint_mul!(x760, x761, 2);
    let x763: BytePoly_3 = bigint_nondet_quot!(ctx, x762, x6, 3);
    let x764: BytePoly_1 = bigint_nondet_rem!(ctx, x762, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x763, x6, 4), x764, 4), x762, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x764, x3, 1), 34, 1)?;
    let x765: BytePoly_2 = bigint_mul!(x757, x761, 2);
    let x766: BytePoly_3 = bigint_nondet_quot!(ctx, x765, x6, 3);
    let x767: BytePoly_1 = bigint_nondet_rem!(ctx, x765, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x766, x6, 4), x767, 4), x765, 4),
        24387,
        2,
    )?;
    let x768: BytePoly_2 = bigint_mul!(x767, x713, 2);
    let x769: BytePoly_3 = bigint_nondet_quot!(ctx, x768, x6, 3);
    let x770: BytePoly_1 = bigint_nondet_rem!(ctx, x768, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x769, x6, 4), x770, 4), x768, 4),
        24387,
        2,
    )?;
    let x771: BytePoly_1 = bigint_add!(bigint_sub!(x719, x770, 1), x6, 1);
    let x772: BytePoly_1 = bigint_nondet_quot!(ctx, x771, x6, 1);
    let x773: BytePoly_1 = bigint_nondet_rem!(ctx, x771, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x772, x6, 2), x773, 2), x771, 2),
        8131,
        2,
    )?;
    let x774: BytePoly_2 = bigint_mul!(x767, x767, 2);
    let x775: BytePoly_3 = bigint_nondet_quot!(ctx, x774, x6, 3);
    let x776: BytePoly_1 = bigint_nondet_rem!(ctx, x774, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x775, x6, 4), x776, 4), x774, 4),
        24387,
        2,
    )?;
    let x777: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x776, x713, 1), x6, 1), x713, 1),
        x6,
        1
    );
    let x778: BytePoly_1 = bigint_nondet_quot!(ctx, x777, x6, 1);
    let x779: BytePoly_1 = bigint_nondet_rem!(ctx, x777, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x778, x6, 2), x779, 2), x777, 2),
        8131,
        2,
    )?;
    let x780: BytePoly_2 = bigint_mul!(x767, x779, 2);
    let x781: BytePoly_3 = bigint_nondet_quot!(ctx, x780, x6, 3);
    let x782: BytePoly_1 = bigint_nondet_rem!(ctx, x780, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x781, x6, 4), x782, 4), x780, 4),
        24387,
        2,
    )?;
    let x783: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x782, x773, 1), 1), x6, 1);
    let x784: BytePoly_1 = bigint_nondet_quot!(ctx, x783, x6, 1);
    let x785: BytePoly_1 = bigint_nondet_rem!(ctx, x783, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x784, x6, 2), x785, 2), x783, 2),
        8131,
        2,
    )?;
    let x786: BytePoly_1 = bigint_nondet_rem!(ctx, x721, x2, 1);
    let x787: BytePoly_2 = bigint_nondet_quot!(ctx, x721, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x787, x2, 3), x786, 3), x721, 3),
        16259,
        2,
    )?;
    let x788: BytePoly_1 = bigint_sub!(x3, x786, 1);
    eqz(ctx, &bigint_mul!(x786, x788, 2), 8131, 2)?;
    let x789: BytePoly_1 = bigint_add!(bigint_sub!(x779, x749, 1), x6, 1);
    let x790: BytePoly_1 = bigint_nondet_inv!(ctx, x789, x6, 1);
    let x791: BytePoly_2 = bigint_mul!(x789, x790, 2);
    let x792: BytePoly_3 = bigint_nondet_quot!(ctx, x791, x6, 3);
    let x793: BytePoly_1 = bigint_nondet_rem!(ctx, x791, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x792, x6, 4), x793, 4), x791, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x793, x1, 1), 34, 1)?;
    let x794: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x785, x751, 1), x6, 1), x790, 2);
    let x795: BytePoly_3 = bigint_nondet_quot!(ctx, x794, x6, 3);
    let x796: BytePoly_1 = bigint_nondet_rem!(ctx, x794, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x795, x6, 4), x796, 4), x794, 4),
        24387,
        2,
    )?;
    let x797: BytePoly_2 = bigint_mul!(x796, x749, 2);
    let x798: BytePoly_3 = bigint_nondet_quot!(ctx, x797, x6, 3);
    let x799: BytePoly_1 = bigint_nondet_rem!(ctx, x797, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x798, x6, 4), x799, 4), x797, 4),
        24387,
        2,
    )?;
    let x800: BytePoly_1 = bigint_add!(bigint_sub!(x751, x799, 1), x6, 1);
    let x801: BytePoly_1 = bigint_nondet_quot!(ctx, x800, x6, 1);
    let x802: BytePoly_1 = bigint_nondet_rem!(ctx, x800, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x801, x6, 2), x802, 2), x800, 2),
        8131,
        2,
    )?;
    let x803: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x796, x796, 2), x749, 2), x6, 2),
            x779,
            2
        ),
        x6,
        2
    );
    let x804: BytePoly_3 = bigint_nondet_quot!(ctx, x803, x6, 3);
    let x805: BytePoly_1 = bigint_nondet_rem!(ctx, x803, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x804, x6, 4), x805, 4), x803, 4),
        24387,
        2,
    )?;
    let x806: BytePoly_2 = bigint_mul!(x796, x805, 2);
    let x807: BytePoly_3 = bigint_nondet_quot!(ctx, x806, x6, 3);
    let x808: BytePoly_1 = bigint_nondet_rem!(ctx, x806, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x807, x6, 4), x808, 4), x806, 4),
        24387,
        2,
    )?;
    let x809: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x808, x802, 1), 1), x6, 1);
    let x810: BytePoly_1 = bigint_nondet_quot!(ctx, x809, x6, 1);
    let x811: BytePoly_1 = bigint_nondet_rem!(ctx, x809, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x810, x6, 2), x811, 2), x809, 2),
        8131,
        2,
    )?;
    let x812: BytePoly_2 = bigint_add!(bigint_mul!(x805, x786, 2), bigint_mul!(x749, x788, 2), 2);
    let x813: BytePoly_2 = bigint_add!(bigint_mul!(x811, x786, 2), bigint_mul!(x751, x788, 2), 2);
    let x814: BytePoly_3 = bigint_nondet_quot!(ctx, x812, x6, 3);
    let x815: BytePoly_1 = bigint_nondet_rem!(ctx, x812, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x814, x6, 4), x815, 4), x812, 4),
        24387,
        2,
    )?;
    let x816: BytePoly_3 = bigint_nondet_quot!(ctx, x813, x6, 3);
    let x817: BytePoly_1 = bigint_nondet_rem!(ctx, x813, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x816, x6, 4), x817, 4), x813, 4),
        24387,
        2,
    )?;
    let x818: BytePoly_2 = bigint_mul!(x779, x779, 2);
    let x819: BytePoly_3 = bigint_nondet_quot!(ctx, x818, x6, 3);
    let x820: BytePoly_1 = bigint_nondet_rem!(ctx, x818, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x819, x6, 4), x820, 4), x818, 4),
        24387,
        2,
    )?;
    let x821: BytePoly_2 = bigint_add!(bigint_mul!(x820, x0, 2), x5, 2);
    let x822: BytePoly_3 = bigint_nondet_quot!(ctx, x821, x6, 3);
    let x823: BytePoly_1 = bigint_nondet_rem!(ctx, x821, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x822, x6, 4), x823, 4), x821, 4),
        24387,
        2,
    )?;
    let x824: BytePoly_1 = bigint_add!(x785, x785, 1);
    let x825: BytePoly_1 = bigint_nondet_quot!(ctx, x824, x6, 1);
    let x826: BytePoly_1 = bigint_nondet_rem!(ctx, x824, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x825, x6, 2), x826, 2), x824, 2),
        8131,
        2,
    )?;
    let x827: BytePoly_1 = bigint_nondet_inv!(ctx, x826, x6, 1);
    let x828: BytePoly_2 = bigint_mul!(x826, x827, 2);
    let x829: BytePoly_3 = bigint_nondet_quot!(ctx, x828, x6, 3);
    let x830: BytePoly_1 = bigint_nondet_rem!(ctx, x828, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x829, x6, 4), x830, 4), x828, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x830, x3, 1), 34, 1)?;
    let x831: BytePoly_2 = bigint_mul!(x823, x827, 2);
    let x832: BytePoly_3 = bigint_nondet_quot!(ctx, x831, x6, 3);
    let x833: BytePoly_1 = bigint_nondet_rem!(ctx, x831, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x832, x6, 4), x833, 4), x831, 4),
        24387,
        2,
    )?;
    let x834: BytePoly_2 = bigint_mul!(x833, x779, 2);
    let x835: BytePoly_3 = bigint_nondet_quot!(ctx, x834, x6, 3);
    let x836: BytePoly_1 = bigint_nondet_rem!(ctx, x834, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x835, x6, 4), x836, 4), x834, 4),
        24387,
        2,
    )?;
    let x837: BytePoly_1 = bigint_add!(bigint_sub!(x785, x836, 1), x6, 1);
    let x838: BytePoly_1 = bigint_nondet_quot!(ctx, x837, x6, 1);
    let x839: BytePoly_1 = bigint_nondet_rem!(ctx, x837, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x838, x6, 2), x839, 2), x837, 2),
        8131,
        2,
    )?;
    let x840: BytePoly_2 = bigint_mul!(x833, x833, 2);
    let x841: BytePoly_3 = bigint_nondet_quot!(ctx, x840, x6, 3);
    let x842: BytePoly_1 = bigint_nondet_rem!(ctx, x840, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x841, x6, 4), x842, 4), x840, 4),
        24387,
        2,
    )?;
    let x843: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x842, x779, 1), x6, 1), x779, 1),
        x6,
        1
    );
    let x844: BytePoly_1 = bigint_nondet_quot!(ctx, x843, x6, 1);
    let x845: BytePoly_1 = bigint_nondet_rem!(ctx, x843, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x844, x6, 2), x845, 2), x843, 2),
        8131,
        2,
    )?;
    let x846: BytePoly_2 = bigint_mul!(x833, x845, 2);
    let x847: BytePoly_3 = bigint_nondet_quot!(ctx, x846, x6, 3);
    let x848: BytePoly_1 = bigint_nondet_rem!(ctx, x846, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x847, x6, 4), x848, 4), x846, 4),
        24387,
        2,
    )?;
    let x849: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x848, x839, 1), 1), x6, 1);
    let x850: BytePoly_1 = bigint_nondet_quot!(ctx, x849, x6, 1);
    let x851: BytePoly_1 = bigint_nondet_rem!(ctx, x849, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x850, x6, 2), x851, 2), x849, 2),
        8131,
        2,
    )?;
    let x852: BytePoly_1 = bigint_nondet_rem!(ctx, x787, x2, 1);
    let x853: BytePoly_2 = bigint_nondet_quot!(ctx, x787, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x853, x2, 3), x852, 3), x787, 3),
        16259,
        2,
    )?;
    let x854: BytePoly_1 = bigint_sub!(x3, x852, 1);
    eqz(ctx, &bigint_mul!(x852, x854, 2), 8131, 2)?;
    let x855: BytePoly_1 = bigint_add!(bigint_sub!(x845, x815, 1), x6, 1);
    let x856: BytePoly_1 = bigint_nondet_inv!(ctx, x855, x6, 1);
    let x857: BytePoly_2 = bigint_mul!(x855, x856, 2);
    let x858: BytePoly_3 = bigint_nondet_quot!(ctx, x857, x6, 3);
    let x859: BytePoly_1 = bigint_nondet_rem!(ctx, x857, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x858, x6, 4), x859, 4), x857, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x859, x1, 1), 34, 1)?;
    let x860: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x851, x817, 1), x6, 1), x856, 2);
    let x861: BytePoly_3 = bigint_nondet_quot!(ctx, x860, x6, 3);
    let x862: BytePoly_1 = bigint_nondet_rem!(ctx, x860, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x861, x6, 4), x862, 4), x860, 4),
        24387,
        2,
    )?;
    let x863: BytePoly_2 = bigint_mul!(x862, x815, 2);
    let x864: BytePoly_3 = bigint_nondet_quot!(ctx, x863, x6, 3);
    let x865: BytePoly_1 = bigint_nondet_rem!(ctx, x863, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x864, x6, 4), x865, 4), x863, 4),
        24387,
        2,
    )?;
    let x866: BytePoly_1 = bigint_add!(bigint_sub!(x817, x865, 1), x6, 1);
    let x867: BytePoly_1 = bigint_nondet_quot!(ctx, x866, x6, 1);
    let x868: BytePoly_1 = bigint_nondet_rem!(ctx, x866, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x867, x6, 2), x868, 2), x866, 2),
        8131,
        2,
    )?;
    let x869: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x862, x862, 2), x815, 2), x6, 2),
            x845,
            2
        ),
        x6,
        2
    );
    let x870: BytePoly_3 = bigint_nondet_quot!(ctx, x869, x6, 3);
    let x871: BytePoly_1 = bigint_nondet_rem!(ctx, x869, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x870, x6, 4), x871, 4), x869, 4),
        24387,
        2,
    )?;
    let x872: BytePoly_2 = bigint_mul!(x862, x871, 2);
    let x873: BytePoly_3 = bigint_nondet_quot!(ctx, x872, x6, 3);
    let x874: BytePoly_1 = bigint_nondet_rem!(ctx, x872, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x873, x6, 4), x874, 4), x872, 4),
        24387,
        2,
    )?;
    let x875: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x874, x868, 1), 1), x6, 1);
    let x876: BytePoly_1 = bigint_nondet_quot!(ctx, x875, x6, 1);
    let x877: BytePoly_1 = bigint_nondet_rem!(ctx, x875, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x876, x6, 2), x877, 2), x875, 2),
        8131,
        2,
    )?;
    let x878: BytePoly_2 = bigint_add!(bigint_mul!(x871, x852, 2), bigint_mul!(x815, x854, 2), 2);
    let x879: BytePoly_2 = bigint_add!(bigint_mul!(x877, x852, 2), bigint_mul!(x817, x854, 2), 2);
    let x880: BytePoly_3 = bigint_nondet_quot!(ctx, x878, x6, 3);
    let x881: BytePoly_1 = bigint_nondet_rem!(ctx, x878, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x880, x6, 4), x881, 4), x878, 4),
        24387,
        2,
    )?;
    let x882: BytePoly_3 = bigint_nondet_quot!(ctx, x879, x6, 3);
    let x883: BytePoly_1 = bigint_nondet_rem!(ctx, x879, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x882, x6, 4), x883, 4), x879, 4),
        24387,
        2,
    )?;
    let x884: BytePoly_2 = bigint_mul!(x845, x845, 2);
    let x885: BytePoly_3 = bigint_nondet_quot!(ctx, x884, x6, 3);
    let x886: BytePoly_1 = bigint_nondet_rem!(ctx, x884, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x885, x6, 4), x886, 4), x884, 4),
        24387,
        2,
    )?;
    let x887: BytePoly_2 = bigint_add!(bigint_mul!(x886, x0, 2), x5, 2);
    let x888: BytePoly_3 = bigint_nondet_quot!(ctx, x887, x6, 3);
    let x889: BytePoly_1 = bigint_nondet_rem!(ctx, x887, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x888, x6, 4), x889, 4), x887, 4),
        24387,
        2,
    )?;
    let x890: BytePoly_1 = bigint_add!(x851, x851, 1);
    let x891: BytePoly_1 = bigint_nondet_quot!(ctx, x890, x6, 1);
    let x892: BytePoly_1 = bigint_nondet_rem!(ctx, x890, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x891, x6, 2), x892, 2), x890, 2),
        8131,
        2,
    )?;
    let x893: BytePoly_1 = bigint_nondet_inv!(ctx, x892, x6, 1);
    let x894: BytePoly_2 = bigint_mul!(x892, x893, 2);
    let x895: BytePoly_3 = bigint_nondet_quot!(ctx, x894, x6, 3);
    let x896: BytePoly_1 = bigint_nondet_rem!(ctx, x894, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x895, x6, 4), x896, 4), x894, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x896, x3, 1), 34, 1)?;
    let x897: BytePoly_2 = bigint_mul!(x889, x893, 2);
    let x898: BytePoly_3 = bigint_nondet_quot!(ctx, x897, x6, 3);
    let x899: BytePoly_1 = bigint_nondet_rem!(ctx, x897, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x898, x6, 4), x899, 4), x897, 4),
        24387,
        2,
    )?;
    let x900: BytePoly_2 = bigint_mul!(x899, x845, 2);
    let x901: BytePoly_3 = bigint_nondet_quot!(ctx, x900, x6, 3);
    let x902: BytePoly_1 = bigint_nondet_rem!(ctx, x900, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x901, x6, 4), x902, 4), x900, 4),
        24387,
        2,
    )?;
    let x903: BytePoly_1 = bigint_add!(bigint_sub!(x851, x902, 1), x6, 1);
    let x904: BytePoly_1 = bigint_nondet_quot!(ctx, x903, x6, 1);
    let x905: BytePoly_1 = bigint_nondet_rem!(ctx, x903, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x904, x6, 2), x905, 2), x903, 2),
        8131,
        2,
    )?;
    let x906: BytePoly_2 = bigint_mul!(x899, x899, 2);
    let x907: BytePoly_3 = bigint_nondet_quot!(ctx, x906, x6, 3);
    let x908: BytePoly_1 = bigint_nondet_rem!(ctx, x906, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x907, x6, 4), x908, 4), x906, 4),
        24387,
        2,
    )?;
    let x909: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x908, x845, 1), x6, 1), x845, 1),
        x6,
        1
    );
    let x910: BytePoly_1 = bigint_nondet_quot!(ctx, x909, x6, 1);
    let x911: BytePoly_1 = bigint_nondet_rem!(ctx, x909, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x910, x6, 2), x911, 2), x909, 2),
        8131,
        2,
    )?;
    let x912: BytePoly_2 = bigint_mul!(x899, x911, 2);
    let x913: BytePoly_3 = bigint_nondet_quot!(ctx, x912, x6, 3);
    let x914: BytePoly_1 = bigint_nondet_rem!(ctx, x912, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x913, x6, 4), x914, 4), x912, 4),
        24387,
        2,
    )?;
    let x915: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x914, x905, 1), 1), x6, 1);
    let x916: BytePoly_1 = bigint_nondet_quot!(ctx, x915, x6, 1);
    let x917: BytePoly_1 = bigint_nondet_rem!(ctx, x915, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x916, x6, 2), x917, 2), x915, 2),
        8131,
        2,
    )?;
    let x918: BytePoly_1 = bigint_nondet_rem!(ctx, x853, x2, 1);
    let x919: BytePoly_2 = bigint_nondet_quot!(ctx, x853, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x919, x2, 3), x918, 3), x853, 3),
        16259,
        2,
    )?;
    let x920: BytePoly_1 = bigint_sub!(x3, x918, 1);
    eqz(ctx, &bigint_mul!(x918, x920, 2), 8131, 2)?;
    let x921: BytePoly_1 = bigint_add!(bigint_sub!(x911, x881, 1), x6, 1);
    let x922: BytePoly_1 = bigint_nondet_inv!(ctx, x921, x6, 1);
    let x923: BytePoly_2 = bigint_mul!(x921, x922, 2);
    let x924: BytePoly_3 = bigint_nondet_quot!(ctx, x923, x6, 3);
    let x925: BytePoly_1 = bigint_nondet_rem!(ctx, x923, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x924, x6, 4), x925, 4), x923, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x925, x1, 1), 34, 1)?;
    let x926: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x917, x883, 1), x6, 1), x922, 2);
    let x927: BytePoly_3 = bigint_nondet_quot!(ctx, x926, x6, 3);
    let x928: BytePoly_1 = bigint_nondet_rem!(ctx, x926, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x927, x6, 4), x928, 4), x926, 4),
        24387,
        2,
    )?;
    let x929: BytePoly_2 = bigint_mul!(x928, x881, 2);
    let x930: BytePoly_3 = bigint_nondet_quot!(ctx, x929, x6, 3);
    let x931: BytePoly_1 = bigint_nondet_rem!(ctx, x929, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x930, x6, 4), x931, 4), x929, 4),
        24387,
        2,
    )?;
    let x932: BytePoly_1 = bigint_add!(bigint_sub!(x883, x931, 1), x6, 1);
    let x933: BytePoly_1 = bigint_nondet_quot!(ctx, x932, x6, 1);
    let x934: BytePoly_1 = bigint_nondet_rem!(ctx, x932, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x933, x6, 2), x934, 2), x932, 2),
        8131,
        2,
    )?;
    let x935: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x928, x928, 2), x881, 2), x6, 2),
            x911,
            2
        ),
        x6,
        2
    );
    let x936: BytePoly_3 = bigint_nondet_quot!(ctx, x935, x6, 3);
    let x937: BytePoly_1 = bigint_nondet_rem!(ctx, x935, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x936, x6, 4), x937, 4), x935, 4),
        24387,
        2,
    )?;
    let x938: BytePoly_2 = bigint_mul!(x928, x937, 2);
    let x939: BytePoly_3 = bigint_nondet_quot!(ctx, x938, x6, 3);
    let x940: BytePoly_1 = bigint_nondet_rem!(ctx, x938, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x939, x6, 4), x940, 4), x938, 4),
        24387,
        2,
    )?;
    let x941: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x940, x934, 1), 1), x6, 1);
    let x942: BytePoly_1 = bigint_nondet_quot!(ctx, x941, x6, 1);
    let x943: BytePoly_1 = bigint_nondet_rem!(ctx, x941, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x942, x6, 2), x943, 2), x941, 2),
        8131,
        2,
    )?;
    let x944: BytePoly_2 = bigint_add!(bigint_mul!(x937, x918, 2), bigint_mul!(x881, x920, 2), 2);
    let x945: BytePoly_2 = bigint_add!(bigint_mul!(x943, x918, 2), bigint_mul!(x883, x920, 2), 2);
    let x946: BytePoly_3 = bigint_nondet_quot!(ctx, x944, x6, 3);
    let x947: BytePoly_1 = bigint_nondet_rem!(ctx, x944, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x946, x6, 4), x947, 4), x944, 4),
        24387,
        2,
    )?;
    let x948: BytePoly_3 = bigint_nondet_quot!(ctx, x945, x6, 3);
    let x949: BytePoly_1 = bigint_nondet_rem!(ctx, x945, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x948, x6, 4), x949, 4), x945, 4),
        24387,
        2,
    )?;
    let x950: BytePoly_2 = bigint_mul!(x911, x911, 2);
    let x951: BytePoly_3 = bigint_nondet_quot!(ctx, x950, x6, 3);
    let x952: BytePoly_1 = bigint_nondet_rem!(ctx, x950, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x951, x6, 4), x952, 4), x950, 4),
        24387,
        2,
    )?;
    let x953: BytePoly_2 = bigint_add!(bigint_mul!(x952, x0, 2), x5, 2);
    let x954: BytePoly_3 = bigint_nondet_quot!(ctx, x953, x6, 3);
    let x955: BytePoly_1 = bigint_nondet_rem!(ctx, x953, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x954, x6, 4), x955, 4), x953, 4),
        24387,
        2,
    )?;
    let x956: BytePoly_1 = bigint_add!(x917, x917, 1);
    let x957: BytePoly_1 = bigint_nondet_quot!(ctx, x956, x6, 1);
    let x958: BytePoly_1 = bigint_nondet_rem!(ctx, x956, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x957, x6, 2), x958, 2), x956, 2),
        8131,
        2,
    )?;
    let x959: BytePoly_1 = bigint_nondet_inv!(ctx, x958, x6, 1);
    let x960: BytePoly_2 = bigint_mul!(x958, x959, 2);
    let x961: BytePoly_3 = bigint_nondet_quot!(ctx, x960, x6, 3);
    let x962: BytePoly_1 = bigint_nondet_rem!(ctx, x960, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x961, x6, 4), x962, 4), x960, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x962, x3, 1), 34, 1)?;
    let x963: BytePoly_2 = bigint_mul!(x955, x959, 2);
    let x964: BytePoly_3 = bigint_nondet_quot!(ctx, x963, x6, 3);
    let x965: BytePoly_1 = bigint_nondet_rem!(ctx, x963, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x964, x6, 4), x965, 4), x963, 4),
        24387,
        2,
    )?;
    let x966: BytePoly_2 = bigint_mul!(x965, x911, 2);
    let x967: BytePoly_3 = bigint_nondet_quot!(ctx, x966, x6, 3);
    let x968: BytePoly_1 = bigint_nondet_rem!(ctx, x966, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x967, x6, 4), x968, 4), x966, 4),
        24387,
        2,
    )?;
    let x969: BytePoly_1 = bigint_add!(bigint_sub!(x917, x968, 1), x6, 1);
    let x970: BytePoly_1 = bigint_nondet_quot!(ctx, x969, x6, 1);
    let x971: BytePoly_1 = bigint_nondet_rem!(ctx, x969, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x970, x6, 2), x971, 2), x969, 2),
        8131,
        2,
    )?;
    let x972: BytePoly_2 = bigint_mul!(x965, x965, 2);
    let x973: BytePoly_3 = bigint_nondet_quot!(ctx, x972, x6, 3);
    let x974: BytePoly_1 = bigint_nondet_rem!(ctx, x972, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x973, x6, 4), x974, 4), x972, 4),
        24387,
        2,
    )?;
    let x975: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x974, x911, 1), x6, 1), x911, 1),
        x6,
        1
    );
    let x976: BytePoly_1 = bigint_nondet_quot!(ctx, x975, x6, 1);
    let x977: BytePoly_1 = bigint_nondet_rem!(ctx, x975, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x976, x6, 2), x977, 2), x975, 2),
        8131,
        2,
    )?;
    let x978: BytePoly_2 = bigint_mul!(x965, x977, 2);
    let x979: BytePoly_3 = bigint_nondet_quot!(ctx, x978, x6, 3);
    let x980: BytePoly_1 = bigint_nondet_rem!(ctx, x978, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x979, x6, 4), x980, 4), x978, 4),
        24387,
        2,
    )?;
    let x981: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x980, x971, 1), 1), x6, 1);
    let x982: BytePoly_1 = bigint_nondet_quot!(ctx, x981, x6, 1);
    let x983: BytePoly_1 = bigint_nondet_rem!(ctx, x981, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x982, x6, 2), x983, 2), x981, 2),
        8131,
        2,
    )?;
    let x984: BytePoly_1 = bigint_nondet_rem!(ctx, x919, x2, 1);
    let x985: BytePoly_2 = bigint_nondet_quot!(ctx, x919, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x985, x2, 3), x984, 3), x919, 3),
        16259,
        2,
    )?;
    let x986: BytePoly_1 = bigint_sub!(x3, x984, 1);
    eqz(ctx, &bigint_mul!(x984, x986, 2), 8131, 2)?;
    let x987: BytePoly_1 = bigint_add!(bigint_sub!(x977, x947, 1), x6, 1);
    let x988: BytePoly_1 = bigint_nondet_inv!(ctx, x987, x6, 1);
    let x989: BytePoly_2 = bigint_mul!(x987, x988, 2);
    let x990: BytePoly_3 = bigint_nondet_quot!(ctx, x989, x6, 3);
    let x991: BytePoly_1 = bigint_nondet_rem!(ctx, x989, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x990, x6, 4), x991, 4), x989, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x991, x1, 1), 34, 1)?;
    let x992: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x983, x949, 1), x6, 1), x988, 2);
    let x993: BytePoly_3 = bigint_nondet_quot!(ctx, x992, x6, 3);
    let x994: BytePoly_1 = bigint_nondet_rem!(ctx, x992, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x993, x6, 4), x994, 4), x992, 4),
        24387,
        2,
    )?;
    let x995: BytePoly_2 = bigint_mul!(x994, x947, 2);
    let x996: BytePoly_3 = bigint_nondet_quot!(ctx, x995, x6, 3);
    let x997: BytePoly_1 = bigint_nondet_rem!(ctx, x995, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x996, x6, 4), x997, 4), x995, 4),
        24387,
        2,
    )?;
    let x998: BytePoly_1 = bigint_add!(bigint_sub!(x949, x997, 1), x6, 1);
    let x999: BytePoly_1 = bigint_nondet_quot!(ctx, x998, x6, 1);
    let x1000: BytePoly_1 = bigint_nondet_rem!(ctx, x998, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x999, x6, 2), x1000, 2), x998, 2),
        8131,
        2,
    )?;
    let x1001: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x994, x994, 2), x947, 2), x6, 2),
            x977,
            2
        ),
        x6,
        2
    );
    let x1002: BytePoly_3 = bigint_nondet_quot!(ctx, x1001, x6, 3);
    let x1003: BytePoly_1 = bigint_nondet_rem!(ctx, x1001, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1002, x6, 4), x1003, 4), x1001, 4),
        24387,
        2,
    )?;
    let x1004: BytePoly_2 = bigint_mul!(x994, x1003, 2);
    let x1005: BytePoly_3 = bigint_nondet_quot!(ctx, x1004, x6, 3);
    let x1006: BytePoly_1 = bigint_nondet_rem!(ctx, x1004, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1005, x6, 4), x1006, 4), x1004, 4),
        24387,
        2,
    )?;
    let x1007: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1006, x1000, 1), 1), x6, 1);
    let x1008: BytePoly_1 = bigint_nondet_quot!(ctx, x1007, x6, 1);
    let x1009: BytePoly_1 = bigint_nondet_rem!(ctx, x1007, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1008, x6, 2), x1009, 2), x1007, 2),
        8131,
        2,
    )?;
    let x1010: BytePoly_2 = bigint_add!(bigint_mul!(x1003, x984, 2), bigint_mul!(x947, x986, 2), 2);
    let x1011: BytePoly_2 = bigint_add!(bigint_mul!(x1009, x984, 2), bigint_mul!(x949, x986, 2), 2);
    let x1012: BytePoly_3 = bigint_nondet_quot!(ctx, x1010, x6, 3);
    let x1013: BytePoly_1 = bigint_nondet_rem!(ctx, x1010, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1012, x6, 4), x1013, 4), x1010, 4),
        24387,
        2,
    )?;
    let x1014: BytePoly_3 = bigint_nondet_quot!(ctx, x1011, x6, 3);
    let x1015: BytePoly_1 = bigint_nondet_rem!(ctx, x1011, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1014, x6, 4), x1015, 4), x1011, 4),
        24387,
        2,
    )?;
    let x1016: BytePoly_2 = bigint_mul!(x977, x977, 2);
    let x1017: BytePoly_3 = bigint_nondet_quot!(ctx, x1016, x6, 3);
    let x1018: BytePoly_1 = bigint_nondet_rem!(ctx, x1016, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1017, x6, 4), x1018, 4), x1016, 4),
        24387,
        2,
    )?;
    let x1019: BytePoly_2 = bigint_add!(bigint_mul!(x1018, x0, 2), x5, 2);
    let x1020: BytePoly_3 = bigint_nondet_quot!(ctx, x1019, x6, 3);
    let x1021: BytePoly_1 = bigint_nondet_rem!(ctx, x1019, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1020, x6, 4), x1021, 4), x1019, 4),
        24387,
        2,
    )?;
    let x1022: BytePoly_1 = bigint_add!(x983, x983, 1);
    let x1023: BytePoly_1 = bigint_nondet_quot!(ctx, x1022, x6, 1);
    let x1024: BytePoly_1 = bigint_nondet_rem!(ctx, x1022, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1023, x6, 2), x1024, 2), x1022, 2),
        8131,
        2,
    )?;
    let x1025: BytePoly_1 = bigint_nondet_inv!(ctx, x1024, x6, 1);
    let x1026: BytePoly_2 = bigint_mul!(x1024, x1025, 2);
    let x1027: BytePoly_3 = bigint_nondet_quot!(ctx, x1026, x6, 3);
    let x1028: BytePoly_1 = bigint_nondet_rem!(ctx, x1026, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1027, x6, 4), x1028, 4), x1026, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1028, x3, 1), 34, 1)?;
    let x1029: BytePoly_2 = bigint_mul!(x1021, x1025, 2);
    let x1030: BytePoly_3 = bigint_nondet_quot!(ctx, x1029, x6, 3);
    let x1031: BytePoly_1 = bigint_nondet_rem!(ctx, x1029, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1030, x6, 4), x1031, 4), x1029, 4),
        24387,
        2,
    )?;
    let x1032: BytePoly_2 = bigint_mul!(x1031, x977, 2);
    let x1033: BytePoly_3 = bigint_nondet_quot!(ctx, x1032, x6, 3);
    let x1034: BytePoly_1 = bigint_nondet_rem!(ctx, x1032, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1033, x6, 4), x1034, 4), x1032, 4),
        24387,
        2,
    )?;
    let x1035: BytePoly_1 = bigint_add!(bigint_sub!(x983, x1034, 1), x6, 1);
    let x1036: BytePoly_1 = bigint_nondet_quot!(ctx, x1035, x6, 1);
    let x1037: BytePoly_1 = bigint_nondet_rem!(ctx, x1035, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1036, x6, 2), x1037, 2), x1035, 2),
        8131,
        2,
    )?;
    let x1038: BytePoly_2 = bigint_mul!(x1031, x1031, 2);
    let x1039: BytePoly_3 = bigint_nondet_quot!(ctx, x1038, x6, 3);
    let x1040: BytePoly_1 = bigint_nondet_rem!(ctx, x1038, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1039, x6, 4), x1040, 4), x1038, 4),
        24387,
        2,
    )?;
    let x1041: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1040, x977, 1), x6, 1), x977, 1),
        x6,
        1
    );
    let x1042: BytePoly_1 = bigint_nondet_quot!(ctx, x1041, x6, 1);
    let x1043: BytePoly_1 = bigint_nondet_rem!(ctx, x1041, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1042, x6, 2), x1043, 2), x1041, 2),
        8131,
        2,
    )?;
    let x1044: BytePoly_2 = bigint_mul!(x1031, x1043, 2);
    let x1045: BytePoly_3 = bigint_nondet_quot!(ctx, x1044, x6, 3);
    let x1046: BytePoly_1 = bigint_nondet_rem!(ctx, x1044, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1045, x6, 4), x1046, 4), x1044, 4),
        24387,
        2,
    )?;
    let x1047: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1046, x1037, 1), 1), x6, 1);
    let x1048: BytePoly_1 = bigint_nondet_quot!(ctx, x1047, x6, 1);
    let x1049: BytePoly_1 = bigint_nondet_rem!(ctx, x1047, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1048, x6, 2), x1049, 2), x1047, 2),
        8131,
        2,
    )?;
    let x1050: BytePoly_1 = bigint_nondet_rem!(ctx, x985, x2, 1);
    let x1051: BytePoly_2 = bigint_nondet_quot!(ctx, x985, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1051, x2, 3), x1050, 3), x985, 3),
        16259,
        2,
    )?;
    let x1052: BytePoly_1 = bigint_sub!(x3, x1050, 1);
    eqz(ctx, &bigint_mul!(x1050, x1052, 2), 8131, 2)?;
    let x1053: BytePoly_1 = bigint_add!(bigint_sub!(x1043, x1013, 1), x6, 1);
    let x1054: BytePoly_1 = bigint_nondet_inv!(ctx, x1053, x6, 1);
    let x1055: BytePoly_2 = bigint_mul!(x1053, x1054, 2);
    let x1056: BytePoly_3 = bigint_nondet_quot!(ctx, x1055, x6, 3);
    let x1057: BytePoly_1 = bigint_nondet_rem!(ctx, x1055, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1056, x6, 4), x1057, 4), x1055, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1057, x1, 1), 34, 1)?;
    let x1058: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1049, x1015, 1), x6, 1), x1054, 2);
    let x1059: BytePoly_3 = bigint_nondet_quot!(ctx, x1058, x6, 3);
    let x1060: BytePoly_1 = bigint_nondet_rem!(ctx, x1058, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1059, x6, 4), x1060, 4), x1058, 4),
        24387,
        2,
    )?;
    let x1061: BytePoly_2 = bigint_mul!(x1060, x1013, 2);
    let x1062: BytePoly_3 = bigint_nondet_quot!(ctx, x1061, x6, 3);
    let x1063: BytePoly_1 = bigint_nondet_rem!(ctx, x1061, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1062, x6, 4), x1063, 4), x1061, 4),
        24387,
        2,
    )?;
    let x1064: BytePoly_1 = bigint_add!(bigint_sub!(x1015, x1063, 1), x6, 1);
    let x1065: BytePoly_1 = bigint_nondet_quot!(ctx, x1064, x6, 1);
    let x1066: BytePoly_1 = bigint_nondet_rem!(ctx, x1064, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1065, x6, 2), x1066, 2), x1064, 2),
        8131,
        2,
    )?;
    let x1067: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1060, x1060, 2), x1013, 2), x6, 2),
            x1043,
            2
        ),
        x6,
        2
    );
    let x1068: BytePoly_3 = bigint_nondet_quot!(ctx, x1067, x6, 3);
    let x1069: BytePoly_1 = bigint_nondet_rem!(ctx, x1067, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1068, x6, 4), x1069, 4), x1067, 4),
        24387,
        2,
    )?;
    let x1070: BytePoly_2 = bigint_mul!(x1060, x1069, 2);
    let x1071: BytePoly_3 = bigint_nondet_quot!(ctx, x1070, x6, 3);
    let x1072: BytePoly_1 = bigint_nondet_rem!(ctx, x1070, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1071, x6, 4), x1072, 4), x1070, 4),
        24387,
        2,
    )?;
    let x1073: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1072, x1066, 1), 1), x6, 1);
    let x1074: BytePoly_1 = bigint_nondet_quot!(ctx, x1073, x6, 1);
    let x1075: BytePoly_1 = bigint_nondet_rem!(ctx, x1073, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1074, x6, 2), x1075, 2), x1073, 2),
        8131,
        2,
    )?;
    let x1076: BytePoly_2 = bigint_add!(
        bigint_mul!(x1069, x1050, 2),
        bigint_mul!(x1013, x1052, 2),
        2
    );
    let x1077: BytePoly_2 = bigint_add!(
        bigint_mul!(x1075, x1050, 2),
        bigint_mul!(x1015, x1052, 2),
        2
    );
    let x1078: BytePoly_3 = bigint_nondet_quot!(ctx, x1076, x6, 3);
    let x1079: BytePoly_1 = bigint_nondet_rem!(ctx, x1076, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1078, x6, 4), x1079, 4), x1076, 4),
        24387,
        2,
    )?;
    let x1080: BytePoly_3 = bigint_nondet_quot!(ctx, x1077, x6, 3);
    let x1081: BytePoly_1 = bigint_nondet_rem!(ctx, x1077, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1080, x6, 4), x1081, 4), x1077, 4),
        24387,
        2,
    )?;
    let x1082: BytePoly_2 = bigint_mul!(x1043, x1043, 2);
    let x1083: BytePoly_3 = bigint_nondet_quot!(ctx, x1082, x6, 3);
    let x1084: BytePoly_1 = bigint_nondet_rem!(ctx, x1082, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1083, x6, 4), x1084, 4), x1082, 4),
        24387,
        2,
    )?;
    let x1085: BytePoly_2 = bigint_add!(bigint_mul!(x1084, x0, 2), x5, 2);
    let x1086: BytePoly_3 = bigint_nondet_quot!(ctx, x1085, x6, 3);
    let x1087: BytePoly_1 = bigint_nondet_rem!(ctx, x1085, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1086, x6, 4), x1087, 4), x1085, 4),
        24387,
        2,
    )?;
    let x1088: BytePoly_1 = bigint_add!(x1049, x1049, 1);
    let x1089: BytePoly_1 = bigint_nondet_quot!(ctx, x1088, x6, 1);
    let x1090: BytePoly_1 = bigint_nondet_rem!(ctx, x1088, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1089, x6, 2), x1090, 2), x1088, 2),
        8131,
        2,
    )?;
    let x1091: BytePoly_1 = bigint_nondet_inv!(ctx, x1090, x6, 1);
    let x1092: BytePoly_2 = bigint_mul!(x1090, x1091, 2);
    let x1093: BytePoly_3 = bigint_nondet_quot!(ctx, x1092, x6, 3);
    let x1094: BytePoly_1 = bigint_nondet_rem!(ctx, x1092, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1093, x6, 4), x1094, 4), x1092, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1094, x3, 1), 34, 1)?;
    let x1095: BytePoly_2 = bigint_mul!(x1087, x1091, 2);
    let x1096: BytePoly_3 = bigint_nondet_quot!(ctx, x1095, x6, 3);
    let x1097: BytePoly_1 = bigint_nondet_rem!(ctx, x1095, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1096, x6, 4), x1097, 4), x1095, 4),
        24387,
        2,
    )?;
    let x1098: BytePoly_2 = bigint_mul!(x1097, x1043, 2);
    let x1099: BytePoly_3 = bigint_nondet_quot!(ctx, x1098, x6, 3);
    let x1100: BytePoly_1 = bigint_nondet_rem!(ctx, x1098, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1099, x6, 4), x1100, 4), x1098, 4),
        24387,
        2,
    )?;
    let x1101: BytePoly_1 = bigint_add!(bigint_sub!(x1049, x1100, 1), x6, 1);
    let x1102: BytePoly_1 = bigint_nondet_quot!(ctx, x1101, x6, 1);
    let x1103: BytePoly_1 = bigint_nondet_rem!(ctx, x1101, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1102, x6, 2), x1103, 2), x1101, 2),
        8131,
        2,
    )?;
    let x1104: BytePoly_2 = bigint_mul!(x1097, x1097, 2);
    let x1105: BytePoly_3 = bigint_nondet_quot!(ctx, x1104, x6, 3);
    let x1106: BytePoly_1 = bigint_nondet_rem!(ctx, x1104, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1105, x6, 4), x1106, 4), x1104, 4),
        24387,
        2,
    )?;
    let x1107: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1106, x1043, 1), x6, 1), x1043, 1),
        x6,
        1
    );
    let x1108: BytePoly_1 = bigint_nondet_quot!(ctx, x1107, x6, 1);
    let x1109: BytePoly_1 = bigint_nondet_rem!(ctx, x1107, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1108, x6, 2), x1109, 2), x1107, 2),
        8131,
        2,
    )?;
    let x1110: BytePoly_2 = bigint_mul!(x1097, x1109, 2);
    let x1111: BytePoly_3 = bigint_nondet_quot!(ctx, x1110, x6, 3);
    let x1112: BytePoly_1 = bigint_nondet_rem!(ctx, x1110, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1111, x6, 4), x1112, 4), x1110, 4),
        24387,
        2,
    )?;
    let x1113: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1112, x1103, 1), 1), x6, 1);
    let x1114: BytePoly_1 = bigint_nondet_quot!(ctx, x1113, x6, 1);
    let x1115: BytePoly_1 = bigint_nondet_rem!(ctx, x1113, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1114, x6, 2), x1115, 2), x1113, 2),
        8131,
        2,
    )?;
    let x1116: BytePoly_1 = bigint_nondet_rem!(ctx, x1051, x2, 1);
    let x1117: BytePoly_2 = bigint_nondet_quot!(ctx, x1051, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1117, x2, 3), x1116, 3), x1051, 3),
        16259,
        2,
    )?;
    let x1118: BytePoly_1 = bigint_sub!(x3, x1116, 1);
    eqz(ctx, &bigint_mul!(x1116, x1118, 2), 8131, 2)?;
    let x1119: BytePoly_1 = bigint_add!(bigint_sub!(x1109, x1079, 1), x6, 1);
    let x1120: BytePoly_1 = bigint_nondet_inv!(ctx, x1119, x6, 1);
    let x1121: BytePoly_2 = bigint_mul!(x1119, x1120, 2);
    let x1122: BytePoly_3 = bigint_nondet_quot!(ctx, x1121, x6, 3);
    let x1123: BytePoly_1 = bigint_nondet_rem!(ctx, x1121, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1122, x6, 4), x1123, 4), x1121, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1123, x1, 1), 34, 1)?;
    let x1124: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1115, x1081, 1), x6, 1), x1120, 2);
    let x1125: BytePoly_3 = bigint_nondet_quot!(ctx, x1124, x6, 3);
    let x1126: BytePoly_1 = bigint_nondet_rem!(ctx, x1124, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1125, x6, 4), x1126, 4), x1124, 4),
        24387,
        2,
    )?;
    let x1127: BytePoly_2 = bigint_mul!(x1126, x1079, 2);
    let x1128: BytePoly_3 = bigint_nondet_quot!(ctx, x1127, x6, 3);
    let x1129: BytePoly_1 = bigint_nondet_rem!(ctx, x1127, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1128, x6, 4), x1129, 4), x1127, 4),
        24387,
        2,
    )?;
    let x1130: BytePoly_1 = bigint_add!(bigint_sub!(x1081, x1129, 1), x6, 1);
    let x1131: BytePoly_1 = bigint_nondet_quot!(ctx, x1130, x6, 1);
    let x1132: BytePoly_1 = bigint_nondet_rem!(ctx, x1130, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1131, x6, 2), x1132, 2), x1130, 2),
        8131,
        2,
    )?;
    let x1133: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1126, x1126, 2), x1079, 2), x6, 2),
            x1109,
            2
        ),
        x6,
        2
    );
    let x1134: BytePoly_3 = bigint_nondet_quot!(ctx, x1133, x6, 3);
    let x1135: BytePoly_1 = bigint_nondet_rem!(ctx, x1133, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1134, x6, 4), x1135, 4), x1133, 4),
        24387,
        2,
    )?;
    let x1136: BytePoly_2 = bigint_mul!(x1126, x1135, 2);
    let x1137: BytePoly_3 = bigint_nondet_quot!(ctx, x1136, x6, 3);
    let x1138: BytePoly_1 = bigint_nondet_rem!(ctx, x1136, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1137, x6, 4), x1138, 4), x1136, 4),
        24387,
        2,
    )?;
    let x1139: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1138, x1132, 1), 1), x6, 1);
    let x1140: BytePoly_1 = bigint_nondet_quot!(ctx, x1139, x6, 1);
    let x1141: BytePoly_1 = bigint_nondet_rem!(ctx, x1139, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1140, x6, 2), x1141, 2), x1139, 2),
        8131,
        2,
    )?;
    let x1142: BytePoly_2 = bigint_add!(
        bigint_mul!(x1135, x1116, 2),
        bigint_mul!(x1079, x1118, 2),
        2
    );
    let x1143: BytePoly_2 = bigint_add!(
        bigint_mul!(x1141, x1116, 2),
        bigint_mul!(x1081, x1118, 2),
        2
    );
    let x1144: BytePoly_3 = bigint_nondet_quot!(ctx, x1142, x6, 3);
    let x1145: BytePoly_1 = bigint_nondet_rem!(ctx, x1142, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1144, x6, 4), x1145, 4), x1142, 4),
        24387,
        2,
    )?;
    let x1146: BytePoly_3 = bigint_nondet_quot!(ctx, x1143, x6, 3);
    let x1147: BytePoly_1 = bigint_nondet_rem!(ctx, x1143, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1146, x6, 4), x1147, 4), x1143, 4),
        24387,
        2,
    )?;
    let x1148: BytePoly_2 = bigint_mul!(x1109, x1109, 2);
    let x1149: BytePoly_3 = bigint_nondet_quot!(ctx, x1148, x6, 3);
    let x1150: BytePoly_1 = bigint_nondet_rem!(ctx, x1148, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1149, x6, 4), x1150, 4), x1148, 4),
        24387,
        2,
    )?;
    let x1151: BytePoly_2 = bigint_add!(bigint_mul!(x1150, x0, 2), x5, 2);
    let x1152: BytePoly_3 = bigint_nondet_quot!(ctx, x1151, x6, 3);
    let x1153: BytePoly_1 = bigint_nondet_rem!(ctx, x1151, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1152, x6, 4), x1153, 4), x1151, 4),
        24387,
        2,
    )?;
    let x1154: BytePoly_1 = bigint_add!(x1115, x1115, 1);
    let x1155: BytePoly_1 = bigint_nondet_quot!(ctx, x1154, x6, 1);
    let x1156: BytePoly_1 = bigint_nondet_rem!(ctx, x1154, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1155, x6, 2), x1156, 2), x1154, 2),
        8131,
        2,
    )?;
    let x1157: BytePoly_1 = bigint_nondet_inv!(ctx, x1156, x6, 1);
    let x1158: BytePoly_2 = bigint_mul!(x1156, x1157, 2);
    let x1159: BytePoly_3 = bigint_nondet_quot!(ctx, x1158, x6, 3);
    let x1160: BytePoly_1 = bigint_nondet_rem!(ctx, x1158, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1159, x6, 4), x1160, 4), x1158, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1160, x3, 1), 34, 1)?;
    let x1161: BytePoly_2 = bigint_mul!(x1153, x1157, 2);
    let x1162: BytePoly_3 = bigint_nondet_quot!(ctx, x1161, x6, 3);
    let x1163: BytePoly_1 = bigint_nondet_rem!(ctx, x1161, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1162, x6, 4), x1163, 4), x1161, 4),
        24387,
        2,
    )?;
    let x1164: BytePoly_2 = bigint_mul!(x1163, x1109, 2);
    let x1165: BytePoly_3 = bigint_nondet_quot!(ctx, x1164, x6, 3);
    let x1166: BytePoly_1 = bigint_nondet_rem!(ctx, x1164, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1165, x6, 4), x1166, 4), x1164, 4),
        24387,
        2,
    )?;
    let x1167: BytePoly_1 = bigint_add!(bigint_sub!(x1115, x1166, 1), x6, 1);
    let x1168: BytePoly_1 = bigint_nondet_quot!(ctx, x1167, x6, 1);
    let x1169: BytePoly_1 = bigint_nondet_rem!(ctx, x1167, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1168, x6, 2), x1169, 2), x1167, 2),
        8131,
        2,
    )?;
    let x1170: BytePoly_2 = bigint_mul!(x1163, x1163, 2);
    let x1171: BytePoly_3 = bigint_nondet_quot!(ctx, x1170, x6, 3);
    let x1172: BytePoly_1 = bigint_nondet_rem!(ctx, x1170, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1171, x6, 4), x1172, 4), x1170, 4),
        24387,
        2,
    )?;
    let x1173: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1172, x1109, 1), x6, 1), x1109, 1),
        x6,
        1
    );
    let x1174: BytePoly_1 = bigint_nondet_quot!(ctx, x1173, x6, 1);
    let x1175: BytePoly_1 = bigint_nondet_rem!(ctx, x1173, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1174, x6, 2), x1175, 2), x1173, 2),
        8131,
        2,
    )?;
    let x1176: BytePoly_2 = bigint_mul!(x1163, x1175, 2);
    let x1177: BytePoly_3 = bigint_nondet_quot!(ctx, x1176, x6, 3);
    let x1178: BytePoly_1 = bigint_nondet_rem!(ctx, x1176, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1177, x6, 4), x1178, 4), x1176, 4),
        24387,
        2,
    )?;
    let x1179: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1178, x1169, 1), 1), x6, 1);
    let x1180: BytePoly_1 = bigint_nondet_quot!(ctx, x1179, x6, 1);
    let x1181: BytePoly_1 = bigint_nondet_rem!(ctx, x1179, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1180, x6, 2), x1181, 2), x1179, 2),
        8131,
        2,
    )?;
    let x1182: BytePoly_1 = bigint_nondet_rem!(ctx, x1117, x2, 1);
    let x1183: BytePoly_2 = bigint_nondet_quot!(ctx, x1117, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1183, x2, 3), x1182, 3), x1117, 3),
        16259,
        2,
    )?;
    let x1184: BytePoly_1 = bigint_sub!(x3, x1182, 1);
    eqz(ctx, &bigint_mul!(x1182, x1184, 2), 8131, 2)?;
    let x1185: BytePoly_1 = bigint_add!(bigint_sub!(x1175, x1145, 1), x6, 1);
    let x1186: BytePoly_1 = bigint_nondet_inv!(ctx, x1185, x6, 1);
    let x1187: BytePoly_2 = bigint_mul!(x1185, x1186, 2);
    let x1188: BytePoly_3 = bigint_nondet_quot!(ctx, x1187, x6, 3);
    let x1189: BytePoly_1 = bigint_nondet_rem!(ctx, x1187, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1188, x6, 4), x1189, 4), x1187, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1189, x1, 1), 34, 1)?;
    let x1190: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1181, x1147, 1), x6, 1), x1186, 2);
    let x1191: BytePoly_3 = bigint_nondet_quot!(ctx, x1190, x6, 3);
    let x1192: BytePoly_1 = bigint_nondet_rem!(ctx, x1190, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1191, x6, 4), x1192, 4), x1190, 4),
        24387,
        2,
    )?;
    let x1193: BytePoly_2 = bigint_mul!(x1192, x1145, 2);
    let x1194: BytePoly_3 = bigint_nondet_quot!(ctx, x1193, x6, 3);
    let x1195: BytePoly_1 = bigint_nondet_rem!(ctx, x1193, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1194, x6, 4), x1195, 4), x1193, 4),
        24387,
        2,
    )?;
    let x1196: BytePoly_1 = bigint_add!(bigint_sub!(x1147, x1195, 1), x6, 1);
    let x1197: BytePoly_1 = bigint_nondet_quot!(ctx, x1196, x6, 1);
    let x1198: BytePoly_1 = bigint_nondet_rem!(ctx, x1196, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1197, x6, 2), x1198, 2), x1196, 2),
        8131,
        2,
    )?;
    let x1199: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1192, x1192, 2), x1145, 2), x6, 2),
            x1175,
            2
        ),
        x6,
        2
    );
    let x1200: BytePoly_3 = bigint_nondet_quot!(ctx, x1199, x6, 3);
    let x1201: BytePoly_1 = bigint_nondet_rem!(ctx, x1199, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1200, x6, 4), x1201, 4), x1199, 4),
        24387,
        2,
    )?;
    let x1202: BytePoly_2 = bigint_mul!(x1192, x1201, 2);
    let x1203: BytePoly_3 = bigint_nondet_quot!(ctx, x1202, x6, 3);
    let x1204: BytePoly_1 = bigint_nondet_rem!(ctx, x1202, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1203, x6, 4), x1204, 4), x1202, 4),
        24387,
        2,
    )?;
    let x1205: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1204, x1198, 1), 1), x6, 1);
    let x1206: BytePoly_1 = bigint_nondet_quot!(ctx, x1205, x6, 1);
    let x1207: BytePoly_1 = bigint_nondet_rem!(ctx, x1205, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1206, x6, 2), x1207, 2), x1205, 2),
        8131,
        2,
    )?;
    let x1208: BytePoly_2 = bigint_add!(
        bigint_mul!(x1201, x1182, 2),
        bigint_mul!(x1145, x1184, 2),
        2
    );
    let x1209: BytePoly_2 = bigint_add!(
        bigint_mul!(x1207, x1182, 2),
        bigint_mul!(x1147, x1184, 2),
        2
    );
    let x1210: BytePoly_3 = bigint_nondet_quot!(ctx, x1208, x6, 3);
    let x1211: BytePoly_1 = bigint_nondet_rem!(ctx, x1208, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1210, x6, 4), x1211, 4), x1208, 4),
        24387,
        2,
    )?;
    let x1212: BytePoly_3 = bigint_nondet_quot!(ctx, x1209, x6, 3);
    let x1213: BytePoly_1 = bigint_nondet_rem!(ctx, x1209, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1212, x6, 4), x1213, 4), x1209, 4),
        24387,
        2,
    )?;
    let x1214: BytePoly_2 = bigint_mul!(x1175, x1175, 2);
    let x1215: BytePoly_3 = bigint_nondet_quot!(ctx, x1214, x6, 3);
    let x1216: BytePoly_1 = bigint_nondet_rem!(ctx, x1214, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1215, x6, 4), x1216, 4), x1214, 4),
        24387,
        2,
    )?;
    let x1217: BytePoly_2 = bigint_add!(bigint_mul!(x1216, x0, 2), x5, 2);
    let x1218: BytePoly_3 = bigint_nondet_quot!(ctx, x1217, x6, 3);
    let x1219: BytePoly_1 = bigint_nondet_rem!(ctx, x1217, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1218, x6, 4), x1219, 4), x1217, 4),
        24387,
        2,
    )?;
    let x1220: BytePoly_1 = bigint_add!(x1181, x1181, 1);
    let x1221: BytePoly_1 = bigint_nondet_quot!(ctx, x1220, x6, 1);
    let x1222: BytePoly_1 = bigint_nondet_rem!(ctx, x1220, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1221, x6, 2), x1222, 2), x1220, 2),
        8131,
        2,
    )?;
    let x1223: BytePoly_1 = bigint_nondet_inv!(ctx, x1222, x6, 1);
    let x1224: BytePoly_2 = bigint_mul!(x1222, x1223, 2);
    let x1225: BytePoly_3 = bigint_nondet_quot!(ctx, x1224, x6, 3);
    let x1226: BytePoly_1 = bigint_nondet_rem!(ctx, x1224, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1225, x6, 4), x1226, 4), x1224, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1226, x3, 1), 34, 1)?;
    let x1227: BytePoly_2 = bigint_mul!(x1219, x1223, 2);
    let x1228: BytePoly_3 = bigint_nondet_quot!(ctx, x1227, x6, 3);
    let x1229: BytePoly_1 = bigint_nondet_rem!(ctx, x1227, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1228, x6, 4), x1229, 4), x1227, 4),
        24387,
        2,
    )?;
    let x1230: BytePoly_2 = bigint_mul!(x1229, x1175, 2);
    let x1231: BytePoly_3 = bigint_nondet_quot!(ctx, x1230, x6, 3);
    let x1232: BytePoly_1 = bigint_nondet_rem!(ctx, x1230, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1231, x6, 4), x1232, 4), x1230, 4),
        24387,
        2,
    )?;
    let x1233: BytePoly_1 = bigint_add!(bigint_sub!(x1181, x1232, 1), x6, 1);
    let x1234: BytePoly_1 = bigint_nondet_quot!(ctx, x1233, x6, 1);
    let x1235: BytePoly_1 = bigint_nondet_rem!(ctx, x1233, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1234, x6, 2), x1235, 2), x1233, 2),
        8131,
        2,
    )?;
    let x1236: BytePoly_2 = bigint_mul!(x1229, x1229, 2);
    let x1237: BytePoly_3 = bigint_nondet_quot!(ctx, x1236, x6, 3);
    let x1238: BytePoly_1 = bigint_nondet_rem!(ctx, x1236, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1237, x6, 4), x1238, 4), x1236, 4),
        24387,
        2,
    )?;
    let x1239: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1238, x1175, 1), x6, 1), x1175, 1),
        x6,
        1
    );
    let x1240: BytePoly_1 = bigint_nondet_quot!(ctx, x1239, x6, 1);
    let x1241: BytePoly_1 = bigint_nondet_rem!(ctx, x1239, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1240, x6, 2), x1241, 2), x1239, 2),
        8131,
        2,
    )?;
    let x1242: BytePoly_2 = bigint_mul!(x1229, x1241, 2);
    let x1243: BytePoly_3 = bigint_nondet_quot!(ctx, x1242, x6, 3);
    let x1244: BytePoly_1 = bigint_nondet_rem!(ctx, x1242, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1243, x6, 4), x1244, 4), x1242, 4),
        24387,
        2,
    )?;
    let x1245: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1244, x1235, 1), 1), x6, 1);
    let x1246: BytePoly_1 = bigint_nondet_quot!(ctx, x1245, x6, 1);
    let x1247: BytePoly_1 = bigint_nondet_rem!(ctx, x1245, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1246, x6, 2), x1247, 2), x1245, 2),
        8131,
        2,
    )?;
    let x1248: BytePoly_1 = bigint_nondet_rem!(ctx, x1183, x2, 1);
    let x1249: BytePoly_2 = bigint_nondet_quot!(ctx, x1183, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1249, x2, 3), x1248, 3), x1183, 3),
        16259,
        2,
    )?;
    let x1250: BytePoly_1 = bigint_sub!(x3, x1248, 1);
    eqz(ctx, &bigint_mul!(x1248, x1250, 2), 8131, 2)?;
    let x1251: BytePoly_1 = bigint_add!(bigint_sub!(x1241, x1211, 1), x6, 1);
    let x1252: BytePoly_1 = bigint_nondet_inv!(ctx, x1251, x6, 1);
    let x1253: BytePoly_2 = bigint_mul!(x1251, x1252, 2);
    let x1254: BytePoly_3 = bigint_nondet_quot!(ctx, x1253, x6, 3);
    let x1255: BytePoly_1 = bigint_nondet_rem!(ctx, x1253, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1254, x6, 4), x1255, 4), x1253, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1255, x1, 1), 34, 1)?;
    let x1256: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1247, x1213, 1), x6, 1), x1252, 2);
    let x1257: BytePoly_3 = bigint_nondet_quot!(ctx, x1256, x6, 3);
    let x1258: BytePoly_1 = bigint_nondet_rem!(ctx, x1256, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1257, x6, 4), x1258, 4), x1256, 4),
        24387,
        2,
    )?;
    let x1259: BytePoly_2 = bigint_mul!(x1258, x1211, 2);
    let x1260: BytePoly_3 = bigint_nondet_quot!(ctx, x1259, x6, 3);
    let x1261: BytePoly_1 = bigint_nondet_rem!(ctx, x1259, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1260, x6, 4), x1261, 4), x1259, 4),
        24387,
        2,
    )?;
    let x1262: BytePoly_1 = bigint_add!(bigint_sub!(x1213, x1261, 1), x6, 1);
    let x1263: BytePoly_1 = bigint_nondet_quot!(ctx, x1262, x6, 1);
    let x1264: BytePoly_1 = bigint_nondet_rem!(ctx, x1262, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1263, x6, 2), x1264, 2), x1262, 2),
        8131,
        2,
    )?;
    let x1265: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1258, x1258, 2), x1211, 2), x6, 2),
            x1241,
            2
        ),
        x6,
        2
    );
    let x1266: BytePoly_3 = bigint_nondet_quot!(ctx, x1265, x6, 3);
    let x1267: BytePoly_1 = bigint_nondet_rem!(ctx, x1265, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1266, x6, 4), x1267, 4), x1265, 4),
        24387,
        2,
    )?;
    let x1268: BytePoly_2 = bigint_mul!(x1258, x1267, 2);
    let x1269: BytePoly_3 = bigint_nondet_quot!(ctx, x1268, x6, 3);
    let x1270: BytePoly_1 = bigint_nondet_rem!(ctx, x1268, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1269, x6, 4), x1270, 4), x1268, 4),
        24387,
        2,
    )?;
    let x1271: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1270, x1264, 1), 1), x6, 1);
    let x1272: BytePoly_1 = bigint_nondet_quot!(ctx, x1271, x6, 1);
    let x1273: BytePoly_1 = bigint_nondet_rem!(ctx, x1271, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1272, x6, 2), x1273, 2), x1271, 2),
        8131,
        2,
    )?;
    let x1274: BytePoly_2 = bigint_add!(
        bigint_mul!(x1267, x1248, 2),
        bigint_mul!(x1211, x1250, 2),
        2
    );
    let x1275: BytePoly_2 = bigint_add!(
        bigint_mul!(x1273, x1248, 2),
        bigint_mul!(x1213, x1250, 2),
        2
    );
    let x1276: BytePoly_3 = bigint_nondet_quot!(ctx, x1274, x6, 3);
    let x1277: BytePoly_1 = bigint_nondet_rem!(ctx, x1274, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1276, x6, 4), x1277, 4), x1274, 4),
        24387,
        2,
    )?;
    let x1278: BytePoly_3 = bigint_nondet_quot!(ctx, x1275, x6, 3);
    let x1279: BytePoly_1 = bigint_nondet_rem!(ctx, x1275, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1278, x6, 4), x1279, 4), x1275, 4),
        24387,
        2,
    )?;
    let x1280: BytePoly_2 = bigint_mul!(x1241, x1241, 2);
    let x1281: BytePoly_3 = bigint_nondet_quot!(ctx, x1280, x6, 3);
    let x1282: BytePoly_1 = bigint_nondet_rem!(ctx, x1280, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1281, x6, 4), x1282, 4), x1280, 4),
        24387,
        2,
    )?;
    let x1283: BytePoly_2 = bigint_add!(bigint_mul!(x1282, x0, 2), x5, 2);
    let x1284: BytePoly_3 = bigint_nondet_quot!(ctx, x1283, x6, 3);
    let x1285: BytePoly_1 = bigint_nondet_rem!(ctx, x1283, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1284, x6, 4), x1285, 4), x1283, 4),
        24387,
        2,
    )?;
    let x1286: BytePoly_1 = bigint_add!(x1247, x1247, 1);
    let x1287: BytePoly_1 = bigint_nondet_quot!(ctx, x1286, x6, 1);
    let x1288: BytePoly_1 = bigint_nondet_rem!(ctx, x1286, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1287, x6, 2), x1288, 2), x1286, 2),
        8131,
        2,
    )?;
    let x1289: BytePoly_1 = bigint_nondet_inv!(ctx, x1288, x6, 1);
    let x1290: BytePoly_2 = bigint_mul!(x1288, x1289, 2);
    let x1291: BytePoly_3 = bigint_nondet_quot!(ctx, x1290, x6, 3);
    let x1292: BytePoly_1 = bigint_nondet_rem!(ctx, x1290, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1291, x6, 4), x1292, 4), x1290, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1292, x3, 1), 34, 1)?;
    let x1293: BytePoly_2 = bigint_mul!(x1285, x1289, 2);
    let x1294: BytePoly_3 = bigint_nondet_quot!(ctx, x1293, x6, 3);
    let x1295: BytePoly_1 = bigint_nondet_rem!(ctx, x1293, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1294, x6, 4), x1295, 4), x1293, 4),
        24387,
        2,
    )?;
    let x1296: BytePoly_2 = bigint_mul!(x1295, x1241, 2);
    let x1297: BytePoly_3 = bigint_nondet_quot!(ctx, x1296, x6, 3);
    let x1298: BytePoly_1 = bigint_nondet_rem!(ctx, x1296, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1297, x6, 4), x1298, 4), x1296, 4),
        24387,
        2,
    )?;
    let x1299: BytePoly_1 = bigint_add!(bigint_sub!(x1247, x1298, 1), x6, 1);
    let x1300: BytePoly_1 = bigint_nondet_quot!(ctx, x1299, x6, 1);
    let x1301: BytePoly_1 = bigint_nondet_rem!(ctx, x1299, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1300, x6, 2), x1301, 2), x1299, 2),
        8131,
        2,
    )?;
    let x1302: BytePoly_2 = bigint_mul!(x1295, x1295, 2);
    let x1303: BytePoly_3 = bigint_nondet_quot!(ctx, x1302, x6, 3);
    let x1304: BytePoly_1 = bigint_nondet_rem!(ctx, x1302, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1303, x6, 4), x1304, 4), x1302, 4),
        24387,
        2,
    )?;
    let x1305: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1304, x1241, 1), x6, 1), x1241, 1),
        x6,
        1
    );
    let x1306: BytePoly_1 = bigint_nondet_quot!(ctx, x1305, x6, 1);
    let x1307: BytePoly_1 = bigint_nondet_rem!(ctx, x1305, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1306, x6, 2), x1307, 2), x1305, 2),
        8131,
        2,
    )?;
    let x1308: BytePoly_2 = bigint_mul!(x1295, x1307, 2);
    let x1309: BytePoly_3 = bigint_nondet_quot!(ctx, x1308, x6, 3);
    let x1310: BytePoly_1 = bigint_nondet_rem!(ctx, x1308, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1309, x6, 4), x1310, 4), x1308, 4),
        24387,
        2,
    )?;
    let x1311: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1310, x1301, 1), 1), x6, 1);
    let x1312: BytePoly_1 = bigint_nondet_quot!(ctx, x1311, x6, 1);
    let x1313: BytePoly_1 = bigint_nondet_rem!(ctx, x1311, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1312, x6, 2), x1313, 2), x1311, 2),
        8131,
        2,
    )?;
    let x1314: BytePoly_1 = bigint_nondet_rem!(ctx, x1249, x2, 1);
    let x1315: BytePoly_2 = bigint_nondet_quot!(ctx, x1249, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1315, x2, 3), x1314, 3), x1249, 3),
        16259,
        2,
    )?;
    let x1316: BytePoly_1 = bigint_sub!(x3, x1314, 1);
    eqz(ctx, &bigint_mul!(x1314, x1316, 2), 8131, 2)?;
    let x1317: BytePoly_1 = bigint_add!(bigint_sub!(x1307, x1277, 1), x6, 1);
    let x1318: BytePoly_1 = bigint_nondet_inv!(ctx, x1317, x6, 1);
    let x1319: BytePoly_2 = bigint_mul!(x1317, x1318, 2);
    let x1320: BytePoly_3 = bigint_nondet_quot!(ctx, x1319, x6, 3);
    let x1321: BytePoly_1 = bigint_nondet_rem!(ctx, x1319, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1320, x6, 4), x1321, 4), x1319, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1321, x1, 1), 34, 1)?;
    let x1322: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1313, x1279, 1), x6, 1), x1318, 2);
    let x1323: BytePoly_3 = bigint_nondet_quot!(ctx, x1322, x6, 3);
    let x1324: BytePoly_1 = bigint_nondet_rem!(ctx, x1322, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1323, x6, 4), x1324, 4), x1322, 4),
        24387,
        2,
    )?;
    let x1325: BytePoly_2 = bigint_mul!(x1324, x1277, 2);
    let x1326: BytePoly_3 = bigint_nondet_quot!(ctx, x1325, x6, 3);
    let x1327: BytePoly_1 = bigint_nondet_rem!(ctx, x1325, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1326, x6, 4), x1327, 4), x1325, 4),
        24387,
        2,
    )?;
    let x1328: BytePoly_1 = bigint_add!(bigint_sub!(x1279, x1327, 1), x6, 1);
    let x1329: BytePoly_1 = bigint_nondet_quot!(ctx, x1328, x6, 1);
    let x1330: BytePoly_1 = bigint_nondet_rem!(ctx, x1328, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1329, x6, 2), x1330, 2), x1328, 2),
        8131,
        2,
    )?;
    let x1331: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1324, x1324, 2), x1277, 2), x6, 2),
            x1307,
            2
        ),
        x6,
        2
    );
    let x1332: BytePoly_3 = bigint_nondet_quot!(ctx, x1331, x6, 3);
    let x1333: BytePoly_1 = bigint_nondet_rem!(ctx, x1331, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1332, x6, 4), x1333, 4), x1331, 4),
        24387,
        2,
    )?;
    let x1334: BytePoly_2 = bigint_mul!(x1324, x1333, 2);
    let x1335: BytePoly_3 = bigint_nondet_quot!(ctx, x1334, x6, 3);
    let x1336: BytePoly_1 = bigint_nondet_rem!(ctx, x1334, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1335, x6, 4), x1336, 4), x1334, 4),
        24387,
        2,
    )?;
    let x1337: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1336, x1330, 1), 1), x6, 1);
    let x1338: BytePoly_1 = bigint_nondet_quot!(ctx, x1337, x6, 1);
    let x1339: BytePoly_1 = bigint_nondet_rem!(ctx, x1337, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1338, x6, 2), x1339, 2), x1337, 2),
        8131,
        2,
    )?;
    let x1340: BytePoly_2 = bigint_add!(
        bigint_mul!(x1333, x1314, 2),
        bigint_mul!(x1277, x1316, 2),
        2
    );
    let x1341: BytePoly_2 = bigint_add!(
        bigint_mul!(x1339, x1314, 2),
        bigint_mul!(x1279, x1316, 2),
        2
    );
    let x1342: BytePoly_3 = bigint_nondet_quot!(ctx, x1340, x6, 3);
    let x1343: BytePoly_1 = bigint_nondet_rem!(ctx, x1340, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1342, x6, 4), x1343, 4), x1340, 4),
        24387,
        2,
    )?;
    let x1344: BytePoly_3 = bigint_nondet_quot!(ctx, x1341, x6, 3);
    let x1345: BytePoly_1 = bigint_nondet_rem!(ctx, x1341, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1344, x6, 4), x1345, 4), x1341, 4),
        24387,
        2,
    )?;
    let x1346: BytePoly_2 = bigint_mul!(x1307, x1307, 2);
    let x1347: BytePoly_3 = bigint_nondet_quot!(ctx, x1346, x6, 3);
    let x1348: BytePoly_1 = bigint_nondet_rem!(ctx, x1346, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1347, x6, 4), x1348, 4), x1346, 4),
        24387,
        2,
    )?;
    let x1349: BytePoly_2 = bigint_add!(bigint_mul!(x1348, x0, 2), x5, 2);
    let x1350: BytePoly_3 = bigint_nondet_quot!(ctx, x1349, x6, 3);
    let x1351: BytePoly_1 = bigint_nondet_rem!(ctx, x1349, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1350, x6, 4), x1351, 4), x1349, 4),
        24387,
        2,
    )?;
    let x1352: BytePoly_1 = bigint_add!(x1313, x1313, 1);
    let x1353: BytePoly_1 = bigint_nondet_quot!(ctx, x1352, x6, 1);
    let x1354: BytePoly_1 = bigint_nondet_rem!(ctx, x1352, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1353, x6, 2), x1354, 2), x1352, 2),
        8131,
        2,
    )?;
    let x1355: BytePoly_1 = bigint_nondet_inv!(ctx, x1354, x6, 1);
    let x1356: BytePoly_2 = bigint_mul!(x1354, x1355, 2);
    let x1357: BytePoly_3 = bigint_nondet_quot!(ctx, x1356, x6, 3);
    let x1358: BytePoly_1 = bigint_nondet_rem!(ctx, x1356, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1357, x6, 4), x1358, 4), x1356, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1358, x3, 1), 34, 1)?;
    let x1359: BytePoly_2 = bigint_mul!(x1351, x1355, 2);
    let x1360: BytePoly_3 = bigint_nondet_quot!(ctx, x1359, x6, 3);
    let x1361: BytePoly_1 = bigint_nondet_rem!(ctx, x1359, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1360, x6, 4), x1361, 4), x1359, 4),
        24387,
        2,
    )?;
    let x1362: BytePoly_2 = bigint_mul!(x1361, x1307, 2);
    let x1363: BytePoly_3 = bigint_nondet_quot!(ctx, x1362, x6, 3);
    let x1364: BytePoly_1 = bigint_nondet_rem!(ctx, x1362, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1363, x6, 4), x1364, 4), x1362, 4),
        24387,
        2,
    )?;
    let x1365: BytePoly_1 = bigint_add!(bigint_sub!(x1313, x1364, 1), x6, 1);
    let x1366: BytePoly_1 = bigint_nondet_quot!(ctx, x1365, x6, 1);
    let x1367: BytePoly_1 = bigint_nondet_rem!(ctx, x1365, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1366, x6, 2), x1367, 2), x1365, 2),
        8131,
        2,
    )?;
    let x1368: BytePoly_2 = bigint_mul!(x1361, x1361, 2);
    let x1369: BytePoly_3 = bigint_nondet_quot!(ctx, x1368, x6, 3);
    let x1370: BytePoly_1 = bigint_nondet_rem!(ctx, x1368, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1369, x6, 4), x1370, 4), x1368, 4),
        24387,
        2,
    )?;
    let x1371: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1370, x1307, 1), x6, 1), x1307, 1),
        x6,
        1
    );
    let x1372: BytePoly_1 = bigint_nondet_quot!(ctx, x1371, x6, 1);
    let x1373: BytePoly_1 = bigint_nondet_rem!(ctx, x1371, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1372, x6, 2), x1373, 2), x1371, 2),
        8131,
        2,
    )?;
    let x1374: BytePoly_2 = bigint_mul!(x1361, x1373, 2);
    let x1375: BytePoly_3 = bigint_nondet_quot!(ctx, x1374, x6, 3);
    let x1376: BytePoly_1 = bigint_nondet_rem!(ctx, x1374, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1375, x6, 4), x1376, 4), x1374, 4),
        24387,
        2,
    )?;
    let x1377: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1376, x1367, 1), 1), x6, 1);
    let x1378: BytePoly_1 = bigint_nondet_quot!(ctx, x1377, x6, 1);
    let x1379: BytePoly_1 = bigint_nondet_rem!(ctx, x1377, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1378, x6, 2), x1379, 2), x1377, 2),
        8131,
        2,
    )?;
    let x1380: BytePoly_1 = bigint_nondet_rem!(ctx, x1315, x2, 1);
    let x1381: BytePoly_2 = bigint_nondet_quot!(ctx, x1315, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1381, x2, 3), x1380, 3), x1315, 3),
        16259,
        2,
    )?;
    let x1382: BytePoly_1 = bigint_sub!(x3, x1380, 1);
    eqz(ctx, &bigint_mul!(x1380, x1382, 2), 8131, 2)?;
    let x1383: BytePoly_1 = bigint_add!(bigint_sub!(x1373, x1343, 1), x6, 1);
    let x1384: BytePoly_1 = bigint_nondet_inv!(ctx, x1383, x6, 1);
    let x1385: BytePoly_2 = bigint_mul!(x1383, x1384, 2);
    let x1386: BytePoly_3 = bigint_nondet_quot!(ctx, x1385, x6, 3);
    let x1387: BytePoly_1 = bigint_nondet_rem!(ctx, x1385, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1386, x6, 4), x1387, 4), x1385, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1387, x1, 1), 34, 1)?;
    let x1388: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1379, x1345, 1), x6, 1), x1384, 2);
    let x1389: BytePoly_3 = bigint_nondet_quot!(ctx, x1388, x6, 3);
    let x1390: BytePoly_1 = bigint_nondet_rem!(ctx, x1388, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1389, x6, 4), x1390, 4), x1388, 4),
        24387,
        2,
    )?;
    let x1391: BytePoly_2 = bigint_mul!(x1390, x1343, 2);
    let x1392: BytePoly_3 = bigint_nondet_quot!(ctx, x1391, x6, 3);
    let x1393: BytePoly_1 = bigint_nondet_rem!(ctx, x1391, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1392, x6, 4), x1393, 4), x1391, 4),
        24387,
        2,
    )?;
    let x1394: BytePoly_1 = bigint_add!(bigint_sub!(x1345, x1393, 1), x6, 1);
    let x1395: BytePoly_1 = bigint_nondet_quot!(ctx, x1394, x6, 1);
    let x1396: BytePoly_1 = bigint_nondet_rem!(ctx, x1394, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1395, x6, 2), x1396, 2), x1394, 2),
        8131,
        2,
    )?;
    let x1397: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1390, x1390, 2), x1343, 2), x6, 2),
            x1373,
            2
        ),
        x6,
        2
    );
    let x1398: BytePoly_3 = bigint_nondet_quot!(ctx, x1397, x6, 3);
    let x1399: BytePoly_1 = bigint_nondet_rem!(ctx, x1397, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1398, x6, 4), x1399, 4), x1397, 4),
        24387,
        2,
    )?;
    let x1400: BytePoly_2 = bigint_mul!(x1390, x1399, 2);
    let x1401: BytePoly_3 = bigint_nondet_quot!(ctx, x1400, x6, 3);
    let x1402: BytePoly_1 = bigint_nondet_rem!(ctx, x1400, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1401, x6, 4), x1402, 4), x1400, 4),
        24387,
        2,
    )?;
    let x1403: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1402, x1396, 1), 1), x6, 1);
    let x1404: BytePoly_1 = bigint_nondet_quot!(ctx, x1403, x6, 1);
    let x1405: BytePoly_1 = bigint_nondet_rem!(ctx, x1403, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1404, x6, 2), x1405, 2), x1403, 2),
        8131,
        2,
    )?;
    let x1406: BytePoly_2 = bigint_add!(
        bigint_mul!(x1399, x1380, 2),
        bigint_mul!(x1343, x1382, 2),
        2
    );
    let x1407: BytePoly_2 = bigint_add!(
        bigint_mul!(x1405, x1380, 2),
        bigint_mul!(x1345, x1382, 2),
        2
    );
    let x1408: BytePoly_3 = bigint_nondet_quot!(ctx, x1406, x6, 3);
    let x1409: BytePoly_1 = bigint_nondet_rem!(ctx, x1406, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1408, x6, 4), x1409, 4), x1406, 4),
        24387,
        2,
    )?;
    let x1410: BytePoly_3 = bigint_nondet_quot!(ctx, x1407, x6, 3);
    let x1411: BytePoly_1 = bigint_nondet_rem!(ctx, x1407, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1410, x6, 4), x1411, 4), x1407, 4),
        24387,
        2,
    )?;
    let x1412: BytePoly_2 = bigint_mul!(x1373, x1373, 2);
    let x1413: BytePoly_3 = bigint_nondet_quot!(ctx, x1412, x6, 3);
    let x1414: BytePoly_1 = bigint_nondet_rem!(ctx, x1412, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1413, x6, 4), x1414, 4), x1412, 4),
        24387,
        2,
    )?;
    let x1415: BytePoly_2 = bigint_add!(bigint_mul!(x1414, x0, 2), x5, 2);
    let x1416: BytePoly_3 = bigint_nondet_quot!(ctx, x1415, x6, 3);
    let x1417: BytePoly_1 = bigint_nondet_rem!(ctx, x1415, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1416, x6, 4), x1417, 4), x1415, 4),
        24387,
        2,
    )?;
    let x1418: BytePoly_1 = bigint_add!(x1379, x1379, 1);
    let x1419: BytePoly_1 = bigint_nondet_quot!(ctx, x1418, x6, 1);
    let x1420: BytePoly_1 = bigint_nondet_rem!(ctx, x1418, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1419, x6, 2), x1420, 2), x1418, 2),
        8131,
        2,
    )?;
    let x1421: BytePoly_1 = bigint_nondet_inv!(ctx, x1420, x6, 1);
    let x1422: BytePoly_2 = bigint_mul!(x1420, x1421, 2);
    let x1423: BytePoly_3 = bigint_nondet_quot!(ctx, x1422, x6, 3);
    let x1424: BytePoly_1 = bigint_nondet_rem!(ctx, x1422, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1423, x6, 4), x1424, 4), x1422, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1424, x3, 1), 34, 1)?;
    let x1425: BytePoly_2 = bigint_mul!(x1417, x1421, 2);
    let x1426: BytePoly_3 = bigint_nondet_quot!(ctx, x1425, x6, 3);
    let x1427: BytePoly_1 = bigint_nondet_rem!(ctx, x1425, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1426, x6, 4), x1427, 4), x1425, 4),
        24387,
        2,
    )?;
    let x1428: BytePoly_2 = bigint_mul!(x1427, x1373, 2);
    let x1429: BytePoly_3 = bigint_nondet_quot!(ctx, x1428, x6, 3);
    let x1430: BytePoly_1 = bigint_nondet_rem!(ctx, x1428, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1429, x6, 4), x1430, 4), x1428, 4),
        24387,
        2,
    )?;
    let x1431: BytePoly_1 = bigint_add!(bigint_sub!(x1379, x1430, 1), x6, 1);
    let x1432: BytePoly_1 = bigint_nondet_quot!(ctx, x1431, x6, 1);
    let x1433: BytePoly_1 = bigint_nondet_rem!(ctx, x1431, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1432, x6, 2), x1433, 2), x1431, 2),
        8131,
        2,
    )?;
    let x1434: BytePoly_2 = bigint_mul!(x1427, x1427, 2);
    let x1435: BytePoly_3 = bigint_nondet_quot!(ctx, x1434, x6, 3);
    let x1436: BytePoly_1 = bigint_nondet_rem!(ctx, x1434, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1435, x6, 4), x1436, 4), x1434, 4),
        24387,
        2,
    )?;
    let x1437: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1436, x1373, 1), x6, 1), x1373, 1),
        x6,
        1
    );
    let x1438: BytePoly_1 = bigint_nondet_quot!(ctx, x1437, x6, 1);
    let x1439: BytePoly_1 = bigint_nondet_rem!(ctx, x1437, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1438, x6, 2), x1439, 2), x1437, 2),
        8131,
        2,
    )?;
    let x1440: BytePoly_2 = bigint_mul!(x1427, x1439, 2);
    let x1441: BytePoly_3 = bigint_nondet_quot!(ctx, x1440, x6, 3);
    let x1442: BytePoly_1 = bigint_nondet_rem!(ctx, x1440, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1441, x6, 4), x1442, 4), x1440, 4),
        24387,
        2,
    )?;
    let x1443: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1442, x1433, 1), 1), x6, 1);
    let x1444: BytePoly_1 = bigint_nondet_quot!(ctx, x1443, x6, 1);
    let x1445: BytePoly_1 = bigint_nondet_rem!(ctx, x1443, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1444, x6, 2), x1445, 2), x1443, 2),
        8131,
        2,
    )?;
    let x1446: BytePoly_1 = bigint_nondet_rem!(ctx, x1381, x2, 1);
    let x1447: BytePoly_2 = bigint_nondet_quot!(ctx, x1381, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1447, x2, 3), x1446, 3), x1381, 3),
        16259,
        2,
    )?;
    let x1448: BytePoly_1 = bigint_sub!(x3, x1446, 1);
    eqz(ctx, &bigint_mul!(x1446, x1448, 2), 8131, 2)?;
    let x1449: BytePoly_1 = bigint_add!(bigint_sub!(x1439, x1409, 1), x6, 1);
    let x1450: BytePoly_1 = bigint_nondet_inv!(ctx, x1449, x6, 1);
    let x1451: BytePoly_2 = bigint_mul!(x1449, x1450, 2);
    let x1452: BytePoly_3 = bigint_nondet_quot!(ctx, x1451, x6, 3);
    let x1453: BytePoly_1 = bigint_nondet_rem!(ctx, x1451, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1452, x6, 4), x1453, 4), x1451, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1453, x1, 1), 34, 1)?;
    let x1454: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1445, x1411, 1), x6, 1), x1450, 2);
    let x1455: BytePoly_3 = bigint_nondet_quot!(ctx, x1454, x6, 3);
    let x1456: BytePoly_1 = bigint_nondet_rem!(ctx, x1454, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1455, x6, 4), x1456, 4), x1454, 4),
        24387,
        2,
    )?;
    let x1457: BytePoly_2 = bigint_mul!(x1456, x1409, 2);
    let x1458: BytePoly_3 = bigint_nondet_quot!(ctx, x1457, x6, 3);
    let x1459: BytePoly_1 = bigint_nondet_rem!(ctx, x1457, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1458, x6, 4), x1459, 4), x1457, 4),
        24387,
        2,
    )?;
    let x1460: BytePoly_1 = bigint_add!(bigint_sub!(x1411, x1459, 1), x6, 1);
    let x1461: BytePoly_1 = bigint_nondet_quot!(ctx, x1460, x6, 1);
    let x1462: BytePoly_1 = bigint_nondet_rem!(ctx, x1460, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1461, x6, 2), x1462, 2), x1460, 2),
        8131,
        2,
    )?;
    let x1463: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1456, x1456, 2), x1409, 2), x6, 2),
            x1439,
            2
        ),
        x6,
        2
    );
    let x1464: BytePoly_3 = bigint_nondet_quot!(ctx, x1463, x6, 3);
    let x1465: BytePoly_1 = bigint_nondet_rem!(ctx, x1463, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1464, x6, 4), x1465, 4), x1463, 4),
        24387,
        2,
    )?;
    let x1466: BytePoly_2 = bigint_mul!(x1456, x1465, 2);
    let x1467: BytePoly_3 = bigint_nondet_quot!(ctx, x1466, x6, 3);
    let x1468: BytePoly_1 = bigint_nondet_rem!(ctx, x1466, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1467, x6, 4), x1468, 4), x1466, 4),
        24387,
        2,
    )?;
    let x1469: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1468, x1462, 1), 1), x6, 1);
    let x1470: BytePoly_1 = bigint_nondet_quot!(ctx, x1469, x6, 1);
    let x1471: BytePoly_1 = bigint_nondet_rem!(ctx, x1469, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1470, x6, 2), x1471, 2), x1469, 2),
        8131,
        2,
    )?;
    let x1472: BytePoly_2 = bigint_add!(
        bigint_mul!(x1465, x1446, 2),
        bigint_mul!(x1409, x1448, 2),
        2
    );
    let x1473: BytePoly_2 = bigint_add!(
        bigint_mul!(x1471, x1446, 2),
        bigint_mul!(x1411, x1448, 2),
        2
    );
    let x1474: BytePoly_3 = bigint_nondet_quot!(ctx, x1472, x6, 3);
    let x1475: BytePoly_1 = bigint_nondet_rem!(ctx, x1472, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1474, x6, 4), x1475, 4), x1472, 4),
        24387,
        2,
    )?;
    let x1476: BytePoly_3 = bigint_nondet_quot!(ctx, x1473, x6, 3);
    let x1477: BytePoly_1 = bigint_nondet_rem!(ctx, x1473, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1476, x6, 4), x1477, 4), x1473, 4),
        24387,
        2,
    )?;
    let x1478: BytePoly_2 = bigint_mul!(x1439, x1439, 2);
    let x1479: BytePoly_3 = bigint_nondet_quot!(ctx, x1478, x6, 3);
    let x1480: BytePoly_1 = bigint_nondet_rem!(ctx, x1478, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1479, x6, 4), x1480, 4), x1478, 4),
        24387,
        2,
    )?;
    let x1481: BytePoly_2 = bigint_add!(bigint_mul!(x1480, x0, 2), x5, 2);
    let x1482: BytePoly_3 = bigint_nondet_quot!(ctx, x1481, x6, 3);
    let x1483: BytePoly_1 = bigint_nondet_rem!(ctx, x1481, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1482, x6, 4), x1483, 4), x1481, 4),
        24387,
        2,
    )?;
    let x1484: BytePoly_1 = bigint_add!(x1445, x1445, 1);
    let x1485: BytePoly_1 = bigint_nondet_quot!(ctx, x1484, x6, 1);
    let x1486: BytePoly_1 = bigint_nondet_rem!(ctx, x1484, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1485, x6, 2), x1486, 2), x1484, 2),
        8131,
        2,
    )?;
    let x1487: BytePoly_1 = bigint_nondet_inv!(ctx, x1486, x6, 1);
    let x1488: BytePoly_2 = bigint_mul!(x1486, x1487, 2);
    let x1489: BytePoly_3 = bigint_nondet_quot!(ctx, x1488, x6, 3);
    let x1490: BytePoly_1 = bigint_nondet_rem!(ctx, x1488, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1489, x6, 4), x1490, 4), x1488, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1490, x3, 1), 34, 1)?;
    let x1491: BytePoly_2 = bigint_mul!(x1483, x1487, 2);
    let x1492: BytePoly_3 = bigint_nondet_quot!(ctx, x1491, x6, 3);
    let x1493: BytePoly_1 = bigint_nondet_rem!(ctx, x1491, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1492, x6, 4), x1493, 4), x1491, 4),
        24387,
        2,
    )?;
    let x1494: BytePoly_2 = bigint_mul!(x1493, x1439, 2);
    let x1495: BytePoly_3 = bigint_nondet_quot!(ctx, x1494, x6, 3);
    let x1496: BytePoly_1 = bigint_nondet_rem!(ctx, x1494, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1495, x6, 4), x1496, 4), x1494, 4),
        24387,
        2,
    )?;
    let x1497: BytePoly_1 = bigint_add!(bigint_sub!(x1445, x1496, 1), x6, 1);
    let x1498: BytePoly_1 = bigint_nondet_quot!(ctx, x1497, x6, 1);
    let x1499: BytePoly_1 = bigint_nondet_rem!(ctx, x1497, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1498, x6, 2), x1499, 2), x1497, 2),
        8131,
        2,
    )?;
    let x1500: BytePoly_2 = bigint_mul!(x1493, x1493, 2);
    let x1501: BytePoly_3 = bigint_nondet_quot!(ctx, x1500, x6, 3);
    let x1502: BytePoly_1 = bigint_nondet_rem!(ctx, x1500, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1501, x6, 4), x1502, 4), x1500, 4),
        24387,
        2,
    )?;
    let x1503: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1502, x1439, 1), x6, 1), x1439, 1),
        x6,
        1
    );
    let x1504: BytePoly_1 = bigint_nondet_quot!(ctx, x1503, x6, 1);
    let x1505: BytePoly_1 = bigint_nondet_rem!(ctx, x1503, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1504, x6, 2), x1505, 2), x1503, 2),
        8131,
        2,
    )?;
    let x1506: BytePoly_2 = bigint_mul!(x1493, x1505, 2);
    let x1507: BytePoly_3 = bigint_nondet_quot!(ctx, x1506, x6, 3);
    let x1508: BytePoly_1 = bigint_nondet_rem!(ctx, x1506, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1507, x6, 4), x1508, 4), x1506, 4),
        24387,
        2,
    )?;
    let x1509: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1508, x1499, 1), 1), x6, 1);
    let x1510: BytePoly_1 = bigint_nondet_quot!(ctx, x1509, x6, 1);
    let x1511: BytePoly_1 = bigint_nondet_rem!(ctx, x1509, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1510, x6, 2), x1511, 2), x1509, 2),
        8131,
        2,
    )?;
    let x1512: BytePoly_1 = bigint_nondet_rem!(ctx, x1447, x2, 1);
    let x1513: BytePoly_2 = bigint_nondet_quot!(ctx, x1447, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1513, x2, 3), x1512, 3), x1447, 3),
        16259,
        2,
    )?;
    let x1514: BytePoly_1 = bigint_sub!(x3, x1512, 1);
    eqz(ctx, &bigint_mul!(x1512, x1514, 2), 8131, 2)?;
    let x1515: BytePoly_1 = bigint_add!(bigint_sub!(x1505, x1475, 1), x6, 1);
    let x1516: BytePoly_1 = bigint_nondet_inv!(ctx, x1515, x6, 1);
    let x1517: BytePoly_2 = bigint_mul!(x1515, x1516, 2);
    let x1518: BytePoly_3 = bigint_nondet_quot!(ctx, x1517, x6, 3);
    let x1519: BytePoly_1 = bigint_nondet_rem!(ctx, x1517, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1518, x6, 4), x1519, 4), x1517, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1519, x1, 1), 34, 1)?;
    let x1520: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1511, x1477, 1), x6, 1), x1516, 2);
    let x1521: BytePoly_3 = bigint_nondet_quot!(ctx, x1520, x6, 3);
    let x1522: BytePoly_1 = bigint_nondet_rem!(ctx, x1520, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1521, x6, 4), x1522, 4), x1520, 4),
        24387,
        2,
    )?;
    let x1523: BytePoly_2 = bigint_mul!(x1522, x1475, 2);
    let x1524: BytePoly_3 = bigint_nondet_quot!(ctx, x1523, x6, 3);
    let x1525: BytePoly_1 = bigint_nondet_rem!(ctx, x1523, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1524, x6, 4), x1525, 4), x1523, 4),
        24387,
        2,
    )?;
    let x1526: BytePoly_1 = bigint_add!(bigint_sub!(x1477, x1525, 1), x6, 1);
    let x1527: BytePoly_1 = bigint_nondet_quot!(ctx, x1526, x6, 1);
    let x1528: BytePoly_1 = bigint_nondet_rem!(ctx, x1526, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1527, x6, 2), x1528, 2), x1526, 2),
        8131,
        2,
    )?;
    let x1529: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1522, x1522, 2), x1475, 2), x6, 2),
            x1505,
            2
        ),
        x6,
        2
    );
    let x1530: BytePoly_3 = bigint_nondet_quot!(ctx, x1529, x6, 3);
    let x1531: BytePoly_1 = bigint_nondet_rem!(ctx, x1529, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1530, x6, 4), x1531, 4), x1529, 4),
        24387,
        2,
    )?;
    let x1532: BytePoly_2 = bigint_mul!(x1522, x1531, 2);
    let x1533: BytePoly_3 = bigint_nondet_quot!(ctx, x1532, x6, 3);
    let x1534: BytePoly_1 = bigint_nondet_rem!(ctx, x1532, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1533, x6, 4), x1534, 4), x1532, 4),
        24387,
        2,
    )?;
    let x1535: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1534, x1528, 1), 1), x6, 1);
    let x1536: BytePoly_1 = bigint_nondet_quot!(ctx, x1535, x6, 1);
    let x1537: BytePoly_1 = bigint_nondet_rem!(ctx, x1535, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1536, x6, 2), x1537, 2), x1535, 2),
        8131,
        2,
    )?;
    let x1538: BytePoly_2 = bigint_add!(
        bigint_mul!(x1531, x1512, 2),
        bigint_mul!(x1475, x1514, 2),
        2
    );
    let x1539: BytePoly_2 = bigint_add!(
        bigint_mul!(x1537, x1512, 2),
        bigint_mul!(x1477, x1514, 2),
        2
    );
    let x1540: BytePoly_3 = bigint_nondet_quot!(ctx, x1538, x6, 3);
    let x1541: BytePoly_1 = bigint_nondet_rem!(ctx, x1538, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1540, x6, 4), x1541, 4), x1538, 4),
        24387,
        2,
    )?;
    let x1542: BytePoly_3 = bigint_nondet_quot!(ctx, x1539, x6, 3);
    let x1543: BytePoly_1 = bigint_nondet_rem!(ctx, x1539, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1542, x6, 4), x1543, 4), x1539, 4),
        24387,
        2,
    )?;
    let x1544: BytePoly_2 = bigint_mul!(x1505, x1505, 2);
    let x1545: BytePoly_3 = bigint_nondet_quot!(ctx, x1544, x6, 3);
    let x1546: BytePoly_1 = bigint_nondet_rem!(ctx, x1544, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1545, x6, 4), x1546, 4), x1544, 4),
        24387,
        2,
    )?;
    let x1547: BytePoly_2 = bigint_add!(bigint_mul!(x1546, x0, 2), x5, 2);
    let x1548: BytePoly_3 = bigint_nondet_quot!(ctx, x1547, x6, 3);
    let x1549: BytePoly_1 = bigint_nondet_rem!(ctx, x1547, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1548, x6, 4), x1549, 4), x1547, 4),
        24387,
        2,
    )?;
    let x1550: BytePoly_1 = bigint_add!(x1511, x1511, 1);
    let x1551: BytePoly_1 = bigint_nondet_quot!(ctx, x1550, x6, 1);
    let x1552: BytePoly_1 = bigint_nondet_rem!(ctx, x1550, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1551, x6, 2), x1552, 2), x1550, 2),
        8131,
        2,
    )?;
    let x1553: BytePoly_1 = bigint_nondet_inv!(ctx, x1552, x6, 1);
    let x1554: BytePoly_2 = bigint_mul!(x1552, x1553, 2);
    let x1555: BytePoly_3 = bigint_nondet_quot!(ctx, x1554, x6, 3);
    let x1556: BytePoly_1 = bigint_nondet_rem!(ctx, x1554, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1555, x6, 4), x1556, 4), x1554, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1556, x3, 1), 34, 1)?;
    let x1557: BytePoly_2 = bigint_mul!(x1549, x1553, 2);
    let x1558: BytePoly_3 = bigint_nondet_quot!(ctx, x1557, x6, 3);
    let x1559: BytePoly_1 = bigint_nondet_rem!(ctx, x1557, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1558, x6, 4), x1559, 4), x1557, 4),
        24387,
        2,
    )?;
    let x1560: BytePoly_2 = bigint_mul!(x1559, x1505, 2);
    let x1561: BytePoly_3 = bigint_nondet_quot!(ctx, x1560, x6, 3);
    let x1562: BytePoly_1 = bigint_nondet_rem!(ctx, x1560, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1561, x6, 4), x1562, 4), x1560, 4),
        24387,
        2,
    )?;
    let x1563: BytePoly_1 = bigint_add!(bigint_sub!(x1511, x1562, 1), x6, 1);
    let x1564: BytePoly_1 = bigint_nondet_quot!(ctx, x1563, x6, 1);
    let x1565: BytePoly_1 = bigint_nondet_rem!(ctx, x1563, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1564, x6, 2), x1565, 2), x1563, 2),
        8131,
        2,
    )?;
    let x1566: BytePoly_2 = bigint_mul!(x1559, x1559, 2);
    let x1567: BytePoly_3 = bigint_nondet_quot!(ctx, x1566, x6, 3);
    let x1568: BytePoly_1 = bigint_nondet_rem!(ctx, x1566, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1567, x6, 4), x1568, 4), x1566, 4),
        24387,
        2,
    )?;
    let x1569: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1568, x1505, 1), x6, 1), x1505, 1),
        x6,
        1
    );
    let x1570: BytePoly_1 = bigint_nondet_quot!(ctx, x1569, x6, 1);
    let x1571: BytePoly_1 = bigint_nondet_rem!(ctx, x1569, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1570, x6, 2), x1571, 2), x1569, 2),
        8131,
        2,
    )?;
    let x1572: BytePoly_2 = bigint_mul!(x1559, x1571, 2);
    let x1573: BytePoly_3 = bigint_nondet_quot!(ctx, x1572, x6, 3);
    let x1574: BytePoly_1 = bigint_nondet_rem!(ctx, x1572, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1573, x6, 4), x1574, 4), x1572, 4),
        24387,
        2,
    )?;
    let x1575: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1574, x1565, 1), 1), x6, 1);
    let x1576: BytePoly_1 = bigint_nondet_quot!(ctx, x1575, x6, 1);
    let x1577: BytePoly_1 = bigint_nondet_rem!(ctx, x1575, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1576, x6, 2), x1577, 2), x1575, 2),
        8131,
        2,
    )?;
    let x1578: BytePoly_1 = bigint_nondet_rem!(ctx, x1513, x2, 1);
    let x1579: BytePoly_2 = bigint_nondet_quot!(ctx, x1513, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1579, x2, 3), x1578, 3), x1513, 3),
        16259,
        2,
    )?;
    let x1580: BytePoly_1 = bigint_sub!(x3, x1578, 1);
    eqz(ctx, &bigint_mul!(x1578, x1580, 2), 8131, 2)?;
    let x1581: BytePoly_1 = bigint_add!(bigint_sub!(x1571, x1541, 1), x6, 1);
    let x1582: BytePoly_1 = bigint_nondet_inv!(ctx, x1581, x6, 1);
    let x1583: BytePoly_2 = bigint_mul!(x1581, x1582, 2);
    let x1584: BytePoly_3 = bigint_nondet_quot!(ctx, x1583, x6, 3);
    let x1585: BytePoly_1 = bigint_nondet_rem!(ctx, x1583, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1584, x6, 4), x1585, 4), x1583, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1585, x1, 1), 34, 1)?;
    let x1586: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1577, x1543, 1), x6, 1), x1582, 2);
    let x1587: BytePoly_3 = bigint_nondet_quot!(ctx, x1586, x6, 3);
    let x1588: BytePoly_1 = bigint_nondet_rem!(ctx, x1586, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1587, x6, 4), x1588, 4), x1586, 4),
        24387,
        2,
    )?;
    let x1589: BytePoly_2 = bigint_mul!(x1588, x1541, 2);
    let x1590: BytePoly_3 = bigint_nondet_quot!(ctx, x1589, x6, 3);
    let x1591: BytePoly_1 = bigint_nondet_rem!(ctx, x1589, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1590, x6, 4), x1591, 4), x1589, 4),
        24387,
        2,
    )?;
    let x1592: BytePoly_1 = bigint_add!(bigint_sub!(x1543, x1591, 1), x6, 1);
    let x1593: BytePoly_1 = bigint_nondet_quot!(ctx, x1592, x6, 1);
    let x1594: BytePoly_1 = bigint_nondet_rem!(ctx, x1592, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1593, x6, 2), x1594, 2), x1592, 2),
        8131,
        2,
    )?;
    let x1595: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1588, x1588, 2), x1541, 2), x6, 2),
            x1571,
            2
        ),
        x6,
        2
    );
    let x1596: BytePoly_3 = bigint_nondet_quot!(ctx, x1595, x6, 3);
    let x1597: BytePoly_1 = bigint_nondet_rem!(ctx, x1595, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1596, x6, 4), x1597, 4), x1595, 4),
        24387,
        2,
    )?;
    let x1598: BytePoly_2 = bigint_mul!(x1588, x1597, 2);
    let x1599: BytePoly_3 = bigint_nondet_quot!(ctx, x1598, x6, 3);
    let x1600: BytePoly_1 = bigint_nondet_rem!(ctx, x1598, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1599, x6, 4), x1600, 4), x1598, 4),
        24387,
        2,
    )?;
    let x1601: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1600, x1594, 1), 1), x6, 1);
    let x1602: BytePoly_1 = bigint_nondet_quot!(ctx, x1601, x6, 1);
    let x1603: BytePoly_1 = bigint_nondet_rem!(ctx, x1601, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1602, x6, 2), x1603, 2), x1601, 2),
        8131,
        2,
    )?;
    let x1604: BytePoly_2 = bigint_add!(
        bigint_mul!(x1597, x1578, 2),
        bigint_mul!(x1541, x1580, 2),
        2
    );
    let x1605: BytePoly_2 = bigint_add!(
        bigint_mul!(x1603, x1578, 2),
        bigint_mul!(x1543, x1580, 2),
        2
    );
    let x1606: BytePoly_3 = bigint_nondet_quot!(ctx, x1604, x6, 3);
    let x1607: BytePoly_1 = bigint_nondet_rem!(ctx, x1604, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1606, x6, 4), x1607, 4), x1604, 4),
        24387,
        2,
    )?;
    let x1608: BytePoly_3 = bigint_nondet_quot!(ctx, x1605, x6, 3);
    let x1609: BytePoly_1 = bigint_nondet_rem!(ctx, x1605, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1608, x6, 4), x1609, 4), x1605, 4),
        24387,
        2,
    )?;
    let x1610: BytePoly_2 = bigint_mul!(x1571, x1571, 2);
    let x1611: BytePoly_3 = bigint_nondet_quot!(ctx, x1610, x6, 3);
    let x1612: BytePoly_1 = bigint_nondet_rem!(ctx, x1610, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1611, x6, 4), x1612, 4), x1610, 4),
        24387,
        2,
    )?;
    let x1613: BytePoly_2 = bigint_add!(bigint_mul!(x1612, x0, 2), x5, 2);
    let x1614: BytePoly_3 = bigint_nondet_quot!(ctx, x1613, x6, 3);
    let x1615: BytePoly_1 = bigint_nondet_rem!(ctx, x1613, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1614, x6, 4), x1615, 4), x1613, 4),
        24387,
        2,
    )?;
    let x1616: BytePoly_1 = bigint_add!(x1577, x1577, 1);
    let x1617: BytePoly_1 = bigint_nondet_quot!(ctx, x1616, x6, 1);
    let x1618: BytePoly_1 = bigint_nondet_rem!(ctx, x1616, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1617, x6, 2), x1618, 2), x1616, 2),
        8131,
        2,
    )?;
    let x1619: BytePoly_1 = bigint_nondet_inv!(ctx, x1618, x6, 1);
    let x1620: BytePoly_2 = bigint_mul!(x1618, x1619, 2);
    let x1621: BytePoly_3 = bigint_nondet_quot!(ctx, x1620, x6, 3);
    let x1622: BytePoly_1 = bigint_nondet_rem!(ctx, x1620, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1621, x6, 4), x1622, 4), x1620, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1622, x3, 1), 34, 1)?;
    let x1623: BytePoly_2 = bigint_mul!(x1615, x1619, 2);
    let x1624: BytePoly_3 = bigint_nondet_quot!(ctx, x1623, x6, 3);
    let x1625: BytePoly_1 = bigint_nondet_rem!(ctx, x1623, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1624, x6, 4), x1625, 4), x1623, 4),
        24387,
        2,
    )?;
    let x1626: BytePoly_2 = bigint_mul!(x1625, x1571, 2);
    let x1627: BytePoly_3 = bigint_nondet_quot!(ctx, x1626, x6, 3);
    let x1628: BytePoly_1 = bigint_nondet_rem!(ctx, x1626, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1627, x6, 4), x1628, 4), x1626, 4),
        24387,
        2,
    )?;
    let x1629: BytePoly_1 = bigint_add!(bigint_sub!(x1577, x1628, 1), x6, 1);
    let x1630: BytePoly_1 = bigint_nondet_quot!(ctx, x1629, x6, 1);
    let x1631: BytePoly_1 = bigint_nondet_rem!(ctx, x1629, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1630, x6, 2), x1631, 2), x1629, 2),
        8131,
        2,
    )?;
    let x1632: BytePoly_2 = bigint_mul!(x1625, x1625, 2);
    let x1633: BytePoly_3 = bigint_nondet_quot!(ctx, x1632, x6, 3);
    let x1634: BytePoly_1 = bigint_nondet_rem!(ctx, x1632, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1633, x6, 4), x1634, 4), x1632, 4),
        24387,
        2,
    )?;
    let x1635: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1634, x1571, 1), x6, 1), x1571, 1),
        x6,
        1
    );
    let x1636: BytePoly_1 = bigint_nondet_quot!(ctx, x1635, x6, 1);
    let x1637: BytePoly_1 = bigint_nondet_rem!(ctx, x1635, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1636, x6, 2), x1637, 2), x1635, 2),
        8131,
        2,
    )?;
    let x1638: BytePoly_2 = bigint_mul!(x1625, x1637, 2);
    let x1639: BytePoly_3 = bigint_nondet_quot!(ctx, x1638, x6, 3);
    let x1640: BytePoly_1 = bigint_nondet_rem!(ctx, x1638, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1639, x6, 4), x1640, 4), x1638, 4),
        24387,
        2,
    )?;
    let x1641: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1640, x1631, 1), 1), x6, 1);
    let x1642: BytePoly_1 = bigint_nondet_quot!(ctx, x1641, x6, 1);
    let x1643: BytePoly_1 = bigint_nondet_rem!(ctx, x1641, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1642, x6, 2), x1643, 2), x1641, 2),
        8131,
        2,
    )?;
    let x1644: BytePoly_1 = bigint_nondet_rem!(ctx, x1579, x2, 1);
    let x1645: BytePoly_2 = bigint_nondet_quot!(ctx, x1579, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1645, x2, 3), x1644, 3), x1579, 3),
        16259,
        2,
    )?;
    let x1646: BytePoly_1 = bigint_sub!(x3, x1644, 1);
    eqz(ctx, &bigint_mul!(x1644, x1646, 2), 8131, 2)?;
    let x1647: BytePoly_1 = bigint_add!(bigint_sub!(x1637, x1607, 1), x6, 1);
    let x1648: BytePoly_1 = bigint_nondet_inv!(ctx, x1647, x6, 1);
    let x1649: BytePoly_2 = bigint_mul!(x1647, x1648, 2);
    let x1650: BytePoly_3 = bigint_nondet_quot!(ctx, x1649, x6, 3);
    let x1651: BytePoly_1 = bigint_nondet_rem!(ctx, x1649, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1650, x6, 4), x1651, 4), x1649, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1651, x1, 1), 34, 1)?;
    let x1652: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1643, x1609, 1), x6, 1), x1648, 2);
    let x1653: BytePoly_3 = bigint_nondet_quot!(ctx, x1652, x6, 3);
    let x1654: BytePoly_1 = bigint_nondet_rem!(ctx, x1652, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1653, x6, 4), x1654, 4), x1652, 4),
        24387,
        2,
    )?;
    let x1655: BytePoly_2 = bigint_mul!(x1654, x1607, 2);
    let x1656: BytePoly_3 = bigint_nondet_quot!(ctx, x1655, x6, 3);
    let x1657: BytePoly_1 = bigint_nondet_rem!(ctx, x1655, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1656, x6, 4), x1657, 4), x1655, 4),
        24387,
        2,
    )?;
    let x1658: BytePoly_1 = bigint_add!(bigint_sub!(x1609, x1657, 1), x6, 1);
    let x1659: BytePoly_1 = bigint_nondet_quot!(ctx, x1658, x6, 1);
    let x1660: BytePoly_1 = bigint_nondet_rem!(ctx, x1658, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1659, x6, 2), x1660, 2), x1658, 2),
        8131,
        2,
    )?;
    let x1661: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1654, x1654, 2), x1607, 2), x6, 2),
            x1637,
            2
        ),
        x6,
        2
    );
    let x1662: BytePoly_3 = bigint_nondet_quot!(ctx, x1661, x6, 3);
    let x1663: BytePoly_1 = bigint_nondet_rem!(ctx, x1661, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1662, x6, 4), x1663, 4), x1661, 4),
        24387,
        2,
    )?;
    let x1664: BytePoly_2 = bigint_mul!(x1654, x1663, 2);
    let x1665: BytePoly_3 = bigint_nondet_quot!(ctx, x1664, x6, 3);
    let x1666: BytePoly_1 = bigint_nondet_rem!(ctx, x1664, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1665, x6, 4), x1666, 4), x1664, 4),
        24387,
        2,
    )?;
    let x1667: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1666, x1660, 1), 1), x6, 1);
    let x1668: BytePoly_1 = bigint_nondet_quot!(ctx, x1667, x6, 1);
    let x1669: BytePoly_1 = bigint_nondet_rem!(ctx, x1667, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1668, x6, 2), x1669, 2), x1667, 2),
        8131,
        2,
    )?;
    let x1670: BytePoly_2 = bigint_add!(
        bigint_mul!(x1663, x1644, 2),
        bigint_mul!(x1607, x1646, 2),
        2
    );
    let x1671: BytePoly_2 = bigint_add!(
        bigint_mul!(x1669, x1644, 2),
        bigint_mul!(x1609, x1646, 2),
        2
    );
    let x1672: BytePoly_3 = bigint_nondet_quot!(ctx, x1670, x6, 3);
    let x1673: BytePoly_1 = bigint_nondet_rem!(ctx, x1670, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1672, x6, 4), x1673, 4), x1670, 4),
        24387,
        2,
    )?;
    let x1674: BytePoly_3 = bigint_nondet_quot!(ctx, x1671, x6, 3);
    let x1675: BytePoly_1 = bigint_nondet_rem!(ctx, x1671, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1674, x6, 4), x1675, 4), x1671, 4),
        24387,
        2,
    )?;
    let x1676: BytePoly_2 = bigint_mul!(x1637, x1637, 2);
    let x1677: BytePoly_3 = bigint_nondet_quot!(ctx, x1676, x6, 3);
    let x1678: BytePoly_1 = bigint_nondet_rem!(ctx, x1676, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1677, x6, 4), x1678, 4), x1676, 4),
        24387,
        2,
    )?;
    let x1679: BytePoly_2 = bigint_add!(bigint_mul!(x1678, x0, 2), x5, 2);
    let x1680: BytePoly_3 = bigint_nondet_quot!(ctx, x1679, x6, 3);
    let x1681: BytePoly_1 = bigint_nondet_rem!(ctx, x1679, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1680, x6, 4), x1681, 4), x1679, 4),
        24387,
        2,
    )?;
    let x1682: BytePoly_1 = bigint_add!(x1643, x1643, 1);
    let x1683: BytePoly_1 = bigint_nondet_quot!(ctx, x1682, x6, 1);
    let x1684: BytePoly_1 = bigint_nondet_rem!(ctx, x1682, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1683, x6, 2), x1684, 2), x1682, 2),
        8131,
        2,
    )?;
    let x1685: BytePoly_1 = bigint_nondet_inv!(ctx, x1684, x6, 1);
    let x1686: BytePoly_2 = bigint_mul!(x1684, x1685, 2);
    let x1687: BytePoly_3 = bigint_nondet_quot!(ctx, x1686, x6, 3);
    let x1688: BytePoly_1 = bigint_nondet_rem!(ctx, x1686, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1687, x6, 4), x1688, 4), x1686, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1688, x3, 1), 34, 1)?;
    let x1689: BytePoly_2 = bigint_mul!(x1681, x1685, 2);
    let x1690: BytePoly_3 = bigint_nondet_quot!(ctx, x1689, x6, 3);
    let x1691: BytePoly_1 = bigint_nondet_rem!(ctx, x1689, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1690, x6, 4), x1691, 4), x1689, 4),
        24387,
        2,
    )?;
    let x1692: BytePoly_2 = bigint_mul!(x1691, x1637, 2);
    let x1693: BytePoly_3 = bigint_nondet_quot!(ctx, x1692, x6, 3);
    let x1694: BytePoly_1 = bigint_nondet_rem!(ctx, x1692, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1693, x6, 4), x1694, 4), x1692, 4),
        24387,
        2,
    )?;
    let x1695: BytePoly_1 = bigint_add!(bigint_sub!(x1643, x1694, 1), x6, 1);
    let x1696: BytePoly_1 = bigint_nondet_quot!(ctx, x1695, x6, 1);
    let x1697: BytePoly_1 = bigint_nondet_rem!(ctx, x1695, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1696, x6, 2), x1697, 2), x1695, 2),
        8131,
        2,
    )?;
    let x1698: BytePoly_2 = bigint_mul!(x1691, x1691, 2);
    let x1699: BytePoly_3 = bigint_nondet_quot!(ctx, x1698, x6, 3);
    let x1700: BytePoly_1 = bigint_nondet_rem!(ctx, x1698, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1699, x6, 4), x1700, 4), x1698, 4),
        24387,
        2,
    )?;
    let x1701: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1700, x1637, 1), x6, 1), x1637, 1),
        x6,
        1
    );
    let x1702: BytePoly_1 = bigint_nondet_quot!(ctx, x1701, x6, 1);
    let x1703: BytePoly_1 = bigint_nondet_rem!(ctx, x1701, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1702, x6, 2), x1703, 2), x1701, 2),
        8131,
        2,
    )?;
    let x1704: BytePoly_2 = bigint_mul!(x1691, x1703, 2);
    let x1705: BytePoly_3 = bigint_nondet_quot!(ctx, x1704, x6, 3);
    let x1706: BytePoly_1 = bigint_nondet_rem!(ctx, x1704, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1705, x6, 4), x1706, 4), x1704, 4),
        24387,
        2,
    )?;
    let x1707: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1706, x1697, 1), 1), x6, 1);
    let x1708: BytePoly_1 = bigint_nondet_quot!(ctx, x1707, x6, 1);
    let x1709: BytePoly_1 = bigint_nondet_rem!(ctx, x1707, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1708, x6, 2), x1709, 2), x1707, 2),
        8131,
        2,
    )?;
    let x1710: BytePoly_1 = bigint_nondet_rem!(ctx, x1645, x2, 1);
    let x1711: BytePoly_2 = bigint_nondet_quot!(ctx, x1645, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1711, x2, 3), x1710, 3), x1645, 3),
        16259,
        2,
    )?;
    let x1712: BytePoly_1 = bigint_sub!(x3, x1710, 1);
    eqz(ctx, &bigint_mul!(x1710, x1712, 2), 8131, 2)?;
    let x1713: BytePoly_1 = bigint_add!(bigint_sub!(x1703, x1673, 1), x6, 1);
    let x1714: BytePoly_1 = bigint_nondet_inv!(ctx, x1713, x6, 1);
    let x1715: BytePoly_2 = bigint_mul!(x1713, x1714, 2);
    let x1716: BytePoly_3 = bigint_nondet_quot!(ctx, x1715, x6, 3);
    let x1717: BytePoly_1 = bigint_nondet_rem!(ctx, x1715, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1716, x6, 4), x1717, 4), x1715, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1717, x1, 1), 34, 1)?;
    let x1718: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1709, x1675, 1), x6, 1), x1714, 2);
    let x1719: BytePoly_3 = bigint_nondet_quot!(ctx, x1718, x6, 3);
    let x1720: BytePoly_1 = bigint_nondet_rem!(ctx, x1718, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1719, x6, 4), x1720, 4), x1718, 4),
        24387,
        2,
    )?;
    let x1721: BytePoly_2 = bigint_mul!(x1720, x1673, 2);
    let x1722: BytePoly_3 = bigint_nondet_quot!(ctx, x1721, x6, 3);
    let x1723: BytePoly_1 = bigint_nondet_rem!(ctx, x1721, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1722, x6, 4), x1723, 4), x1721, 4),
        24387,
        2,
    )?;
    let x1724: BytePoly_1 = bigint_add!(bigint_sub!(x1675, x1723, 1), x6, 1);
    let x1725: BytePoly_1 = bigint_nondet_quot!(ctx, x1724, x6, 1);
    let x1726: BytePoly_1 = bigint_nondet_rem!(ctx, x1724, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1725, x6, 2), x1726, 2), x1724, 2),
        8131,
        2,
    )?;
    let x1727: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1720, x1720, 2), x1673, 2), x6, 2),
            x1703,
            2
        ),
        x6,
        2
    );
    let x1728: BytePoly_3 = bigint_nondet_quot!(ctx, x1727, x6, 3);
    let x1729: BytePoly_1 = bigint_nondet_rem!(ctx, x1727, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1728, x6, 4), x1729, 4), x1727, 4),
        24387,
        2,
    )?;
    let x1730: BytePoly_2 = bigint_mul!(x1720, x1729, 2);
    let x1731: BytePoly_3 = bigint_nondet_quot!(ctx, x1730, x6, 3);
    let x1732: BytePoly_1 = bigint_nondet_rem!(ctx, x1730, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1731, x6, 4), x1732, 4), x1730, 4),
        24387,
        2,
    )?;
    let x1733: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1732, x1726, 1), 1), x6, 1);
    let x1734: BytePoly_1 = bigint_nondet_quot!(ctx, x1733, x6, 1);
    let x1735: BytePoly_1 = bigint_nondet_rem!(ctx, x1733, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1734, x6, 2), x1735, 2), x1733, 2),
        8131,
        2,
    )?;
    let x1736: BytePoly_2 = bigint_add!(
        bigint_mul!(x1729, x1710, 2),
        bigint_mul!(x1673, x1712, 2),
        2
    );
    let x1737: BytePoly_2 = bigint_add!(
        bigint_mul!(x1735, x1710, 2),
        bigint_mul!(x1675, x1712, 2),
        2
    );
    let x1738: BytePoly_3 = bigint_nondet_quot!(ctx, x1736, x6, 3);
    let x1739: BytePoly_1 = bigint_nondet_rem!(ctx, x1736, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1738, x6, 4), x1739, 4), x1736, 4),
        24387,
        2,
    )?;
    let x1740: BytePoly_3 = bigint_nondet_quot!(ctx, x1737, x6, 3);
    let x1741: BytePoly_1 = bigint_nondet_rem!(ctx, x1737, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1740, x6, 4), x1741, 4), x1737, 4),
        24387,
        2,
    )?;
    let x1742: BytePoly_2 = bigint_mul!(x1703, x1703, 2);
    let x1743: BytePoly_3 = bigint_nondet_quot!(ctx, x1742, x6, 3);
    let x1744: BytePoly_1 = bigint_nondet_rem!(ctx, x1742, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1743, x6, 4), x1744, 4), x1742, 4),
        24387,
        2,
    )?;
    let x1745: BytePoly_2 = bigint_add!(bigint_mul!(x1744, x0, 2), x5, 2);
    let x1746: BytePoly_3 = bigint_nondet_quot!(ctx, x1745, x6, 3);
    let x1747: BytePoly_1 = bigint_nondet_rem!(ctx, x1745, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1746, x6, 4), x1747, 4), x1745, 4),
        24387,
        2,
    )?;
    let x1748: BytePoly_1 = bigint_add!(x1709, x1709, 1);
    let x1749: BytePoly_1 = bigint_nondet_quot!(ctx, x1748, x6, 1);
    let x1750: BytePoly_1 = bigint_nondet_rem!(ctx, x1748, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1749, x6, 2), x1750, 2), x1748, 2),
        8131,
        2,
    )?;
    let x1751: BytePoly_1 = bigint_nondet_inv!(ctx, x1750, x6, 1);
    let x1752: BytePoly_2 = bigint_mul!(x1750, x1751, 2);
    let x1753: BytePoly_3 = bigint_nondet_quot!(ctx, x1752, x6, 3);
    let x1754: BytePoly_1 = bigint_nondet_rem!(ctx, x1752, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1753, x6, 4), x1754, 4), x1752, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1754, x3, 1), 34, 1)?;
    let x1755: BytePoly_2 = bigint_mul!(x1747, x1751, 2);
    let x1756: BytePoly_3 = bigint_nondet_quot!(ctx, x1755, x6, 3);
    let x1757: BytePoly_1 = bigint_nondet_rem!(ctx, x1755, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1756, x6, 4), x1757, 4), x1755, 4),
        24387,
        2,
    )?;
    let x1758: BytePoly_2 = bigint_mul!(x1757, x1703, 2);
    let x1759: BytePoly_3 = bigint_nondet_quot!(ctx, x1758, x6, 3);
    let x1760: BytePoly_1 = bigint_nondet_rem!(ctx, x1758, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1759, x6, 4), x1760, 4), x1758, 4),
        24387,
        2,
    )?;
    let x1761: BytePoly_1 = bigint_add!(bigint_sub!(x1709, x1760, 1), x6, 1);
    let x1762: BytePoly_1 = bigint_nondet_quot!(ctx, x1761, x6, 1);
    let x1763: BytePoly_1 = bigint_nondet_rem!(ctx, x1761, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1762, x6, 2), x1763, 2), x1761, 2),
        8131,
        2,
    )?;
    let x1764: BytePoly_2 = bigint_mul!(x1757, x1757, 2);
    let x1765: BytePoly_3 = bigint_nondet_quot!(ctx, x1764, x6, 3);
    let x1766: BytePoly_1 = bigint_nondet_rem!(ctx, x1764, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1765, x6, 4), x1766, 4), x1764, 4),
        24387,
        2,
    )?;
    let x1767: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1766, x1703, 1), x6, 1), x1703, 1),
        x6,
        1
    );
    let x1768: BytePoly_1 = bigint_nondet_quot!(ctx, x1767, x6, 1);
    let x1769: BytePoly_1 = bigint_nondet_rem!(ctx, x1767, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1768, x6, 2), x1769, 2), x1767, 2),
        8131,
        2,
    )?;
    let x1770: BytePoly_2 = bigint_mul!(x1757, x1769, 2);
    let x1771: BytePoly_3 = bigint_nondet_quot!(ctx, x1770, x6, 3);
    let x1772: BytePoly_1 = bigint_nondet_rem!(ctx, x1770, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1771, x6, 4), x1772, 4), x1770, 4),
        24387,
        2,
    )?;
    let x1773: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1772, x1763, 1), 1), x6, 1);
    let x1774: BytePoly_1 = bigint_nondet_quot!(ctx, x1773, x6, 1);
    let x1775: BytePoly_1 = bigint_nondet_rem!(ctx, x1773, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1774, x6, 2), x1775, 2), x1773, 2),
        8131,
        2,
    )?;
    let x1776: BytePoly_1 = bigint_nondet_rem!(ctx, x1711, x2, 1);
    let x1777: BytePoly_2 = bigint_nondet_quot!(ctx, x1711, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1777, x2, 3), x1776, 3), x1711, 3),
        16259,
        2,
    )?;
    let x1778: BytePoly_1 = bigint_sub!(x3, x1776, 1);
    eqz(ctx, &bigint_mul!(x1776, x1778, 2), 8131, 2)?;
    let x1779: BytePoly_1 = bigint_add!(bigint_sub!(x1769, x1739, 1), x6, 1);
    let x1780: BytePoly_1 = bigint_nondet_inv!(ctx, x1779, x6, 1);
    let x1781: BytePoly_2 = bigint_mul!(x1779, x1780, 2);
    let x1782: BytePoly_3 = bigint_nondet_quot!(ctx, x1781, x6, 3);
    let x1783: BytePoly_1 = bigint_nondet_rem!(ctx, x1781, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1782, x6, 4), x1783, 4), x1781, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1783, x1, 1), 34, 1)?;
    let x1784: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1775, x1741, 1), x6, 1), x1780, 2);
    let x1785: BytePoly_3 = bigint_nondet_quot!(ctx, x1784, x6, 3);
    let x1786: BytePoly_1 = bigint_nondet_rem!(ctx, x1784, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1785, x6, 4), x1786, 4), x1784, 4),
        24387,
        2,
    )?;
    let x1787: BytePoly_2 = bigint_mul!(x1786, x1739, 2);
    let x1788: BytePoly_3 = bigint_nondet_quot!(ctx, x1787, x6, 3);
    let x1789: BytePoly_1 = bigint_nondet_rem!(ctx, x1787, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1788, x6, 4), x1789, 4), x1787, 4),
        24387,
        2,
    )?;
    let x1790: BytePoly_1 = bigint_add!(bigint_sub!(x1741, x1789, 1), x6, 1);
    let x1791: BytePoly_1 = bigint_nondet_quot!(ctx, x1790, x6, 1);
    let x1792: BytePoly_1 = bigint_nondet_rem!(ctx, x1790, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1791, x6, 2), x1792, 2), x1790, 2),
        8131,
        2,
    )?;
    let x1793: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1786, x1786, 2), x1739, 2), x6, 2),
            x1769,
            2
        ),
        x6,
        2
    );
    let x1794: BytePoly_3 = bigint_nondet_quot!(ctx, x1793, x6, 3);
    let x1795: BytePoly_1 = bigint_nondet_rem!(ctx, x1793, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1794, x6, 4), x1795, 4), x1793, 4),
        24387,
        2,
    )?;
    let x1796: BytePoly_2 = bigint_mul!(x1786, x1795, 2);
    let x1797: BytePoly_3 = bigint_nondet_quot!(ctx, x1796, x6, 3);
    let x1798: BytePoly_1 = bigint_nondet_rem!(ctx, x1796, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1797, x6, 4), x1798, 4), x1796, 4),
        24387,
        2,
    )?;
    let x1799: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1798, x1792, 1), 1), x6, 1);
    let x1800: BytePoly_1 = bigint_nondet_quot!(ctx, x1799, x6, 1);
    let x1801: BytePoly_1 = bigint_nondet_rem!(ctx, x1799, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1800, x6, 2), x1801, 2), x1799, 2),
        8131,
        2,
    )?;
    let x1802: BytePoly_2 = bigint_add!(
        bigint_mul!(x1795, x1776, 2),
        bigint_mul!(x1739, x1778, 2),
        2
    );
    let x1803: BytePoly_2 = bigint_add!(
        bigint_mul!(x1801, x1776, 2),
        bigint_mul!(x1741, x1778, 2),
        2
    );
    let x1804: BytePoly_3 = bigint_nondet_quot!(ctx, x1802, x6, 3);
    let x1805: BytePoly_1 = bigint_nondet_rem!(ctx, x1802, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1804, x6, 4), x1805, 4), x1802, 4),
        24387,
        2,
    )?;
    let x1806: BytePoly_3 = bigint_nondet_quot!(ctx, x1803, x6, 3);
    let x1807: BytePoly_1 = bigint_nondet_rem!(ctx, x1803, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1806, x6, 4), x1807, 4), x1803, 4),
        24387,
        2,
    )?;
    let x1808: BytePoly_2 = bigint_mul!(x1769, x1769, 2);
    let x1809: BytePoly_3 = bigint_nondet_quot!(ctx, x1808, x6, 3);
    let x1810: BytePoly_1 = bigint_nondet_rem!(ctx, x1808, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1809, x6, 4), x1810, 4), x1808, 4),
        24387,
        2,
    )?;
    let x1811: BytePoly_2 = bigint_add!(bigint_mul!(x1810, x0, 2), x5, 2);
    let x1812: BytePoly_3 = bigint_nondet_quot!(ctx, x1811, x6, 3);
    let x1813: BytePoly_1 = bigint_nondet_rem!(ctx, x1811, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1812, x6, 4), x1813, 4), x1811, 4),
        24387,
        2,
    )?;
    let x1814: BytePoly_1 = bigint_add!(x1775, x1775, 1);
    let x1815: BytePoly_1 = bigint_nondet_quot!(ctx, x1814, x6, 1);
    let x1816: BytePoly_1 = bigint_nondet_rem!(ctx, x1814, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1815, x6, 2), x1816, 2), x1814, 2),
        8131,
        2,
    )?;
    let x1817: BytePoly_1 = bigint_nondet_inv!(ctx, x1816, x6, 1);
    let x1818: BytePoly_2 = bigint_mul!(x1816, x1817, 2);
    let x1819: BytePoly_3 = bigint_nondet_quot!(ctx, x1818, x6, 3);
    let x1820: BytePoly_1 = bigint_nondet_rem!(ctx, x1818, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1819, x6, 4), x1820, 4), x1818, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1820, x3, 1), 34, 1)?;
    let x1821: BytePoly_2 = bigint_mul!(x1813, x1817, 2);
    let x1822: BytePoly_3 = bigint_nondet_quot!(ctx, x1821, x6, 3);
    let x1823: BytePoly_1 = bigint_nondet_rem!(ctx, x1821, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1822, x6, 4), x1823, 4), x1821, 4),
        24387,
        2,
    )?;
    let x1824: BytePoly_2 = bigint_mul!(x1823, x1769, 2);
    let x1825: BytePoly_3 = bigint_nondet_quot!(ctx, x1824, x6, 3);
    let x1826: BytePoly_1 = bigint_nondet_rem!(ctx, x1824, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1825, x6, 4), x1826, 4), x1824, 4),
        24387,
        2,
    )?;
    let x1827: BytePoly_1 = bigint_add!(bigint_sub!(x1775, x1826, 1), x6, 1);
    let x1828: BytePoly_1 = bigint_nondet_quot!(ctx, x1827, x6, 1);
    let x1829: BytePoly_1 = bigint_nondet_rem!(ctx, x1827, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1828, x6, 2), x1829, 2), x1827, 2),
        8131,
        2,
    )?;
    let x1830: BytePoly_2 = bigint_mul!(x1823, x1823, 2);
    let x1831: BytePoly_3 = bigint_nondet_quot!(ctx, x1830, x6, 3);
    let x1832: BytePoly_1 = bigint_nondet_rem!(ctx, x1830, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1831, x6, 4), x1832, 4), x1830, 4),
        24387,
        2,
    )?;
    let x1833: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1832, x1769, 1), x6, 1), x1769, 1),
        x6,
        1
    );
    let x1834: BytePoly_1 = bigint_nondet_quot!(ctx, x1833, x6, 1);
    let x1835: BytePoly_1 = bigint_nondet_rem!(ctx, x1833, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1834, x6, 2), x1835, 2), x1833, 2),
        8131,
        2,
    )?;
    let x1836: BytePoly_2 = bigint_mul!(x1823, x1835, 2);
    let x1837: BytePoly_3 = bigint_nondet_quot!(ctx, x1836, x6, 3);
    let x1838: BytePoly_1 = bigint_nondet_rem!(ctx, x1836, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1837, x6, 4), x1838, 4), x1836, 4),
        24387,
        2,
    )?;
    let x1839: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1838, x1829, 1), 1), x6, 1);
    let x1840: BytePoly_1 = bigint_nondet_quot!(ctx, x1839, x6, 1);
    let x1841: BytePoly_1 = bigint_nondet_rem!(ctx, x1839, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1840, x6, 2), x1841, 2), x1839, 2),
        8131,
        2,
    )?;
    let x1842: BytePoly_1 = bigint_nondet_rem!(ctx, x1777, x2, 1);
    let x1843: BytePoly_2 = bigint_nondet_quot!(ctx, x1777, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1843, x2, 3), x1842, 3), x1777, 3),
        16259,
        2,
    )?;
    let x1844: BytePoly_1 = bigint_sub!(x3, x1842, 1);
    eqz(ctx, &bigint_mul!(x1842, x1844, 2), 8131, 2)?;
    let x1845: BytePoly_1 = bigint_add!(bigint_sub!(x1835, x1805, 1), x6, 1);
    let x1846: BytePoly_1 = bigint_nondet_inv!(ctx, x1845, x6, 1);
    let x1847: BytePoly_2 = bigint_mul!(x1845, x1846, 2);
    let x1848: BytePoly_3 = bigint_nondet_quot!(ctx, x1847, x6, 3);
    let x1849: BytePoly_1 = bigint_nondet_rem!(ctx, x1847, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1848, x6, 4), x1849, 4), x1847, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1849, x1, 1), 34, 1)?;
    let x1850: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1841, x1807, 1), x6, 1), x1846, 2);
    let x1851: BytePoly_3 = bigint_nondet_quot!(ctx, x1850, x6, 3);
    let x1852: BytePoly_1 = bigint_nondet_rem!(ctx, x1850, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1851, x6, 4), x1852, 4), x1850, 4),
        24387,
        2,
    )?;
    let x1853: BytePoly_2 = bigint_mul!(x1852, x1805, 2);
    let x1854: BytePoly_3 = bigint_nondet_quot!(ctx, x1853, x6, 3);
    let x1855: BytePoly_1 = bigint_nondet_rem!(ctx, x1853, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1854, x6, 4), x1855, 4), x1853, 4),
        24387,
        2,
    )?;
    let x1856: BytePoly_1 = bigint_add!(bigint_sub!(x1807, x1855, 1), x6, 1);
    let x1857: BytePoly_1 = bigint_nondet_quot!(ctx, x1856, x6, 1);
    let x1858: BytePoly_1 = bigint_nondet_rem!(ctx, x1856, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1857, x6, 2), x1858, 2), x1856, 2),
        8131,
        2,
    )?;
    let x1859: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1852, x1852, 2), x1805, 2), x6, 2),
            x1835,
            2
        ),
        x6,
        2
    );
    let x1860: BytePoly_3 = bigint_nondet_quot!(ctx, x1859, x6, 3);
    let x1861: BytePoly_1 = bigint_nondet_rem!(ctx, x1859, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1860, x6, 4), x1861, 4), x1859, 4),
        24387,
        2,
    )?;
    let x1862: BytePoly_2 = bigint_mul!(x1852, x1861, 2);
    let x1863: BytePoly_3 = bigint_nondet_quot!(ctx, x1862, x6, 3);
    let x1864: BytePoly_1 = bigint_nondet_rem!(ctx, x1862, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1863, x6, 4), x1864, 4), x1862, 4),
        24387,
        2,
    )?;
    let x1865: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1864, x1858, 1), 1), x6, 1);
    let x1866: BytePoly_1 = bigint_nondet_quot!(ctx, x1865, x6, 1);
    let x1867: BytePoly_1 = bigint_nondet_rem!(ctx, x1865, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1866, x6, 2), x1867, 2), x1865, 2),
        8131,
        2,
    )?;
    let x1868: BytePoly_2 = bigint_add!(
        bigint_mul!(x1861, x1842, 2),
        bigint_mul!(x1805, x1844, 2),
        2
    );
    let x1869: BytePoly_2 = bigint_add!(
        bigint_mul!(x1867, x1842, 2),
        bigint_mul!(x1807, x1844, 2),
        2
    );
    let x1870: BytePoly_3 = bigint_nondet_quot!(ctx, x1868, x6, 3);
    let x1871: BytePoly_1 = bigint_nondet_rem!(ctx, x1868, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1870, x6, 4), x1871, 4), x1868, 4),
        24387,
        2,
    )?;
    let x1872: BytePoly_3 = bigint_nondet_quot!(ctx, x1869, x6, 3);
    let x1873: BytePoly_1 = bigint_nondet_rem!(ctx, x1869, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1872, x6, 4), x1873, 4), x1869, 4),
        24387,
        2,
    )?;
    let x1874: BytePoly_2 = bigint_mul!(x1835, x1835, 2);
    let x1875: BytePoly_3 = bigint_nondet_quot!(ctx, x1874, x6, 3);
    let x1876: BytePoly_1 = bigint_nondet_rem!(ctx, x1874, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1875, x6, 4), x1876, 4), x1874, 4),
        24387,
        2,
    )?;
    let x1877: BytePoly_2 = bigint_add!(bigint_mul!(x1876, x0, 2), x5, 2);
    let x1878: BytePoly_3 = bigint_nondet_quot!(ctx, x1877, x6, 3);
    let x1879: BytePoly_1 = bigint_nondet_rem!(ctx, x1877, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1878, x6, 4), x1879, 4), x1877, 4),
        24387,
        2,
    )?;
    let x1880: BytePoly_1 = bigint_add!(x1841, x1841, 1);
    let x1881: BytePoly_1 = bigint_nondet_quot!(ctx, x1880, x6, 1);
    let x1882: BytePoly_1 = bigint_nondet_rem!(ctx, x1880, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1881, x6, 2), x1882, 2), x1880, 2),
        8131,
        2,
    )?;
    let x1883: BytePoly_1 = bigint_nondet_inv!(ctx, x1882, x6, 1);
    let x1884: BytePoly_2 = bigint_mul!(x1882, x1883, 2);
    let x1885: BytePoly_3 = bigint_nondet_quot!(ctx, x1884, x6, 3);
    let x1886: BytePoly_1 = bigint_nondet_rem!(ctx, x1884, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1885, x6, 4), x1886, 4), x1884, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1886, x3, 1), 34, 1)?;
    let x1887: BytePoly_2 = bigint_mul!(x1879, x1883, 2);
    let x1888: BytePoly_3 = bigint_nondet_quot!(ctx, x1887, x6, 3);
    let x1889: BytePoly_1 = bigint_nondet_rem!(ctx, x1887, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1888, x6, 4), x1889, 4), x1887, 4),
        24387,
        2,
    )?;
    let x1890: BytePoly_2 = bigint_mul!(x1889, x1835, 2);
    let x1891: BytePoly_3 = bigint_nondet_quot!(ctx, x1890, x6, 3);
    let x1892: BytePoly_1 = bigint_nondet_rem!(ctx, x1890, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1891, x6, 4), x1892, 4), x1890, 4),
        24387,
        2,
    )?;
    let x1893: BytePoly_1 = bigint_add!(bigint_sub!(x1841, x1892, 1), x6, 1);
    let x1894: BytePoly_1 = bigint_nondet_quot!(ctx, x1893, x6, 1);
    let x1895: BytePoly_1 = bigint_nondet_rem!(ctx, x1893, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1894, x6, 2), x1895, 2), x1893, 2),
        8131,
        2,
    )?;
    let x1896: BytePoly_2 = bigint_mul!(x1889, x1889, 2);
    let x1897: BytePoly_3 = bigint_nondet_quot!(ctx, x1896, x6, 3);
    let x1898: BytePoly_1 = bigint_nondet_rem!(ctx, x1896, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1897, x6, 4), x1898, 4), x1896, 4),
        24387,
        2,
    )?;
    let x1899: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1898, x1835, 1), x6, 1), x1835, 1),
        x6,
        1
    );
    let x1900: BytePoly_1 = bigint_nondet_quot!(ctx, x1899, x6, 1);
    let x1901: BytePoly_1 = bigint_nondet_rem!(ctx, x1899, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1900, x6, 2), x1901, 2), x1899, 2),
        8131,
        2,
    )?;
    let x1902: BytePoly_2 = bigint_mul!(x1889, x1901, 2);
    let x1903: BytePoly_3 = bigint_nondet_quot!(ctx, x1902, x6, 3);
    let x1904: BytePoly_1 = bigint_nondet_rem!(ctx, x1902, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1903, x6, 4), x1904, 4), x1902, 4),
        24387,
        2,
    )?;
    let x1905: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1904, x1895, 1), 1), x6, 1);
    let x1906: BytePoly_1 = bigint_nondet_quot!(ctx, x1905, x6, 1);
    let x1907: BytePoly_1 = bigint_nondet_rem!(ctx, x1905, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1906, x6, 2), x1907, 2), x1905, 2),
        8131,
        2,
    )?;
    let x1908: BytePoly_1 = bigint_nondet_rem!(ctx, x1843, x2, 1);
    let x1909: BytePoly_2 = bigint_nondet_quot!(ctx, x1843, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1909, x2, 3), x1908, 3), x1843, 3),
        16259,
        2,
    )?;
    let x1910: BytePoly_1 = bigint_sub!(x3, x1908, 1);
    eqz(ctx, &bigint_mul!(x1908, x1910, 2), 8131, 2)?;
    let x1911: BytePoly_1 = bigint_add!(bigint_sub!(x1901, x1871, 1), x6, 1);
    let x1912: BytePoly_1 = bigint_nondet_inv!(ctx, x1911, x6, 1);
    let x1913: BytePoly_2 = bigint_mul!(x1911, x1912, 2);
    let x1914: BytePoly_3 = bigint_nondet_quot!(ctx, x1913, x6, 3);
    let x1915: BytePoly_1 = bigint_nondet_rem!(ctx, x1913, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1914, x6, 4), x1915, 4), x1913, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1915, x1, 1), 34, 1)?;
    let x1916: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1907, x1873, 1), x6, 1), x1912, 2);
    let x1917: BytePoly_3 = bigint_nondet_quot!(ctx, x1916, x6, 3);
    let x1918: BytePoly_1 = bigint_nondet_rem!(ctx, x1916, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1917, x6, 4), x1918, 4), x1916, 4),
        24387,
        2,
    )?;
    let x1919: BytePoly_2 = bigint_mul!(x1918, x1871, 2);
    let x1920: BytePoly_3 = bigint_nondet_quot!(ctx, x1919, x6, 3);
    let x1921: BytePoly_1 = bigint_nondet_rem!(ctx, x1919, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1920, x6, 4), x1921, 4), x1919, 4),
        24387,
        2,
    )?;
    let x1922: BytePoly_1 = bigint_add!(bigint_sub!(x1873, x1921, 1), x6, 1);
    let x1923: BytePoly_1 = bigint_nondet_quot!(ctx, x1922, x6, 1);
    let x1924: BytePoly_1 = bigint_nondet_rem!(ctx, x1922, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1923, x6, 2), x1924, 2), x1922, 2),
        8131,
        2,
    )?;
    let x1925: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1918, x1918, 2), x1871, 2), x6, 2),
            x1901,
            2
        ),
        x6,
        2
    );
    let x1926: BytePoly_3 = bigint_nondet_quot!(ctx, x1925, x6, 3);
    let x1927: BytePoly_1 = bigint_nondet_rem!(ctx, x1925, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1926, x6, 4), x1927, 4), x1925, 4),
        24387,
        2,
    )?;
    let x1928: BytePoly_2 = bigint_mul!(x1918, x1927, 2);
    let x1929: BytePoly_3 = bigint_nondet_quot!(ctx, x1928, x6, 3);
    let x1930: BytePoly_1 = bigint_nondet_rem!(ctx, x1928, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1929, x6, 4), x1930, 4), x1928, 4),
        24387,
        2,
    )?;
    let x1931: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1930, x1924, 1), 1), x6, 1);
    let x1932: BytePoly_1 = bigint_nondet_quot!(ctx, x1931, x6, 1);
    let x1933: BytePoly_1 = bigint_nondet_rem!(ctx, x1931, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1932, x6, 2), x1933, 2), x1931, 2),
        8131,
        2,
    )?;
    let x1934: BytePoly_2 = bigint_add!(
        bigint_mul!(x1927, x1908, 2),
        bigint_mul!(x1871, x1910, 2),
        2
    );
    let x1935: BytePoly_2 = bigint_add!(
        bigint_mul!(x1933, x1908, 2),
        bigint_mul!(x1873, x1910, 2),
        2
    );
    let x1936: BytePoly_3 = bigint_nondet_quot!(ctx, x1934, x6, 3);
    let x1937: BytePoly_1 = bigint_nondet_rem!(ctx, x1934, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1936, x6, 4), x1937, 4), x1934, 4),
        24387,
        2,
    )?;
    let x1938: BytePoly_3 = bigint_nondet_quot!(ctx, x1935, x6, 3);
    let x1939: BytePoly_1 = bigint_nondet_rem!(ctx, x1935, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1938, x6, 4), x1939, 4), x1935, 4),
        24387,
        2,
    )?;
    let x1940: BytePoly_2 = bigint_mul!(x1901, x1901, 2);
    let x1941: BytePoly_3 = bigint_nondet_quot!(ctx, x1940, x6, 3);
    let x1942: BytePoly_1 = bigint_nondet_rem!(ctx, x1940, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1941, x6, 4), x1942, 4), x1940, 4),
        24387,
        2,
    )?;
    let x1943: BytePoly_2 = bigint_add!(bigint_mul!(x1942, x0, 2), x5, 2);
    let x1944: BytePoly_3 = bigint_nondet_quot!(ctx, x1943, x6, 3);
    let x1945: BytePoly_1 = bigint_nondet_rem!(ctx, x1943, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1944, x6, 4), x1945, 4), x1943, 4),
        24387,
        2,
    )?;
    let x1946: BytePoly_1 = bigint_add!(x1907, x1907, 1);
    let x1947: BytePoly_1 = bigint_nondet_quot!(ctx, x1946, x6, 1);
    let x1948: BytePoly_1 = bigint_nondet_rem!(ctx, x1946, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1947, x6, 2), x1948, 2), x1946, 2),
        8131,
        2,
    )?;
    let x1949: BytePoly_1 = bigint_nondet_inv!(ctx, x1948, x6, 1);
    let x1950: BytePoly_2 = bigint_mul!(x1948, x1949, 2);
    let x1951: BytePoly_3 = bigint_nondet_quot!(ctx, x1950, x6, 3);
    let x1952: BytePoly_1 = bigint_nondet_rem!(ctx, x1950, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1951, x6, 4), x1952, 4), x1950, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1952, x3, 1), 34, 1)?;
    let x1953: BytePoly_2 = bigint_mul!(x1945, x1949, 2);
    let x1954: BytePoly_3 = bigint_nondet_quot!(ctx, x1953, x6, 3);
    let x1955: BytePoly_1 = bigint_nondet_rem!(ctx, x1953, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1954, x6, 4), x1955, 4), x1953, 4),
        24387,
        2,
    )?;
    let x1956: BytePoly_2 = bigint_mul!(x1955, x1901, 2);
    let x1957: BytePoly_3 = bigint_nondet_quot!(ctx, x1956, x6, 3);
    let x1958: BytePoly_1 = bigint_nondet_rem!(ctx, x1956, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1957, x6, 4), x1958, 4), x1956, 4),
        24387,
        2,
    )?;
    let x1959: BytePoly_1 = bigint_add!(bigint_sub!(x1907, x1958, 1), x6, 1);
    let x1960: BytePoly_1 = bigint_nondet_quot!(ctx, x1959, x6, 1);
    let x1961: BytePoly_1 = bigint_nondet_rem!(ctx, x1959, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1960, x6, 2), x1961, 2), x1959, 2),
        8131,
        2,
    )?;
    let x1962: BytePoly_2 = bigint_mul!(x1955, x1955, 2);
    let x1963: BytePoly_3 = bigint_nondet_quot!(ctx, x1962, x6, 3);
    let x1964: BytePoly_1 = bigint_nondet_rem!(ctx, x1962, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1963, x6, 4), x1964, 4), x1962, 4),
        24387,
        2,
    )?;
    let x1965: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1964, x1901, 1), x6, 1), x1901, 1),
        x6,
        1
    );
    let x1966: BytePoly_1 = bigint_nondet_quot!(ctx, x1965, x6, 1);
    let x1967: BytePoly_1 = bigint_nondet_rem!(ctx, x1965, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1966, x6, 2), x1967, 2), x1965, 2),
        8131,
        2,
    )?;
    let x1968: BytePoly_2 = bigint_mul!(x1955, x1967, 2);
    let x1969: BytePoly_3 = bigint_nondet_quot!(ctx, x1968, x6, 3);
    let x1970: BytePoly_1 = bigint_nondet_rem!(ctx, x1968, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1969, x6, 4), x1970, 4), x1968, 4),
        24387,
        2,
    )?;
    let x1971: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1970, x1961, 1), 1), x6, 1);
    let x1972: BytePoly_1 = bigint_nondet_quot!(ctx, x1971, x6, 1);
    let x1973: BytePoly_1 = bigint_nondet_rem!(ctx, x1971, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1972, x6, 2), x1973, 2), x1971, 2),
        8131,
        2,
    )?;
    let x1974: BytePoly_1 = bigint_nondet_rem!(ctx, x1909, x2, 1);
    let x1975: BytePoly_2 = bigint_nondet_quot!(ctx, x1909, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1975, x2, 3), x1974, 3), x1909, 3),
        16259,
        2,
    )?;
    let x1976: BytePoly_1 = bigint_sub!(x3, x1974, 1);
    eqz(ctx, &bigint_mul!(x1974, x1976, 2), 8131, 2)?;
    let x1977: BytePoly_1 = bigint_add!(bigint_sub!(x1967, x1937, 1), x6, 1);
    let x1978: BytePoly_1 = bigint_nondet_inv!(ctx, x1977, x6, 1);
    let x1979: BytePoly_2 = bigint_mul!(x1977, x1978, 2);
    let x1980: BytePoly_3 = bigint_nondet_quot!(ctx, x1979, x6, 3);
    let x1981: BytePoly_1 = bigint_nondet_rem!(ctx, x1979, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1980, x6, 4), x1981, 4), x1979, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1981, x1, 1), 34, 1)?;
    let x1982: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1973, x1939, 1), x6, 1), x1978, 2);
    let x1983: BytePoly_3 = bigint_nondet_quot!(ctx, x1982, x6, 3);
    let x1984: BytePoly_1 = bigint_nondet_rem!(ctx, x1982, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1983, x6, 4), x1984, 4), x1982, 4),
        24387,
        2,
    )?;
    let x1985: BytePoly_2 = bigint_mul!(x1984, x1937, 2);
    let x1986: BytePoly_3 = bigint_nondet_quot!(ctx, x1985, x6, 3);
    let x1987: BytePoly_1 = bigint_nondet_rem!(ctx, x1985, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1986, x6, 4), x1987, 4), x1985, 4),
        24387,
        2,
    )?;
    let x1988: BytePoly_1 = bigint_add!(bigint_sub!(x1939, x1987, 1), x6, 1);
    let x1989: BytePoly_1 = bigint_nondet_quot!(ctx, x1988, x6, 1);
    let x1990: BytePoly_1 = bigint_nondet_rem!(ctx, x1988, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1989, x6, 2), x1990, 2), x1988, 2),
        8131,
        2,
    )?;
    let x1991: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1984, x1984, 2), x1937, 2), x6, 2),
            x1967,
            2
        ),
        x6,
        2
    );
    let x1992: BytePoly_3 = bigint_nondet_quot!(ctx, x1991, x6, 3);
    let x1993: BytePoly_1 = bigint_nondet_rem!(ctx, x1991, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1992, x6, 4), x1993, 4), x1991, 4),
        24387,
        2,
    )?;
    let x1994: BytePoly_2 = bigint_mul!(x1984, x1993, 2);
    let x1995: BytePoly_3 = bigint_nondet_quot!(ctx, x1994, x6, 3);
    let x1996: BytePoly_1 = bigint_nondet_rem!(ctx, x1994, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1995, x6, 4), x1996, 4), x1994, 4),
        24387,
        2,
    )?;
    let x1997: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x1996, x1990, 1), 1), x6, 1);
    let x1998: BytePoly_1 = bigint_nondet_quot!(ctx, x1997, x6, 1);
    let x1999: BytePoly_1 = bigint_nondet_rem!(ctx, x1997, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1998, x6, 2), x1999, 2), x1997, 2),
        8131,
        2,
    )?;
    let x2000: BytePoly_2 = bigint_add!(
        bigint_mul!(x1993, x1974, 2),
        bigint_mul!(x1937, x1976, 2),
        2
    );
    let x2001: BytePoly_2 = bigint_add!(
        bigint_mul!(x1999, x1974, 2),
        bigint_mul!(x1939, x1976, 2),
        2
    );
    let x2002: BytePoly_3 = bigint_nondet_quot!(ctx, x2000, x6, 3);
    let x2003: BytePoly_1 = bigint_nondet_rem!(ctx, x2000, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2002, x6, 4), x2003, 4), x2000, 4),
        24387,
        2,
    )?;
    let x2004: BytePoly_3 = bigint_nondet_quot!(ctx, x2001, x6, 3);
    let x2005: BytePoly_1 = bigint_nondet_rem!(ctx, x2001, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2004, x6, 4), x2005, 4), x2001, 4),
        24387,
        2,
    )?;
    let x2006: BytePoly_2 = bigint_mul!(x1967, x1967, 2);
    let x2007: BytePoly_3 = bigint_nondet_quot!(ctx, x2006, x6, 3);
    let x2008: BytePoly_1 = bigint_nondet_rem!(ctx, x2006, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2007, x6, 4), x2008, 4), x2006, 4),
        24387,
        2,
    )?;
    let x2009: BytePoly_2 = bigint_add!(bigint_mul!(x2008, x0, 2), x5, 2);
    let x2010: BytePoly_3 = bigint_nondet_quot!(ctx, x2009, x6, 3);
    let x2011: BytePoly_1 = bigint_nondet_rem!(ctx, x2009, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2010, x6, 4), x2011, 4), x2009, 4),
        24387,
        2,
    )?;
    let x2012: BytePoly_1 = bigint_add!(x1973, x1973, 1);
    let x2013: BytePoly_1 = bigint_nondet_quot!(ctx, x2012, x6, 1);
    let x2014: BytePoly_1 = bigint_nondet_rem!(ctx, x2012, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2013, x6, 2), x2014, 2), x2012, 2),
        8131,
        2,
    )?;
    let x2015: BytePoly_1 = bigint_nondet_inv!(ctx, x2014, x6, 1);
    let x2016: BytePoly_2 = bigint_mul!(x2014, x2015, 2);
    let x2017: BytePoly_3 = bigint_nondet_quot!(ctx, x2016, x6, 3);
    let x2018: BytePoly_1 = bigint_nondet_rem!(ctx, x2016, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2017, x6, 4), x2018, 4), x2016, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2018, x3, 1), 34, 1)?;
    let x2019: BytePoly_2 = bigint_mul!(x2011, x2015, 2);
    let x2020: BytePoly_3 = bigint_nondet_quot!(ctx, x2019, x6, 3);
    let x2021: BytePoly_1 = bigint_nondet_rem!(ctx, x2019, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2020, x6, 4), x2021, 4), x2019, 4),
        24387,
        2,
    )?;
    let x2022: BytePoly_2 = bigint_mul!(x2021, x1967, 2);
    let x2023: BytePoly_3 = bigint_nondet_quot!(ctx, x2022, x6, 3);
    let x2024: BytePoly_1 = bigint_nondet_rem!(ctx, x2022, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2023, x6, 4), x2024, 4), x2022, 4),
        24387,
        2,
    )?;
    let x2025: BytePoly_1 = bigint_add!(bigint_sub!(x1973, x2024, 1), x6, 1);
    let x2026: BytePoly_1 = bigint_nondet_quot!(ctx, x2025, x6, 1);
    let x2027: BytePoly_1 = bigint_nondet_rem!(ctx, x2025, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2026, x6, 2), x2027, 2), x2025, 2),
        8131,
        2,
    )?;
    let x2028: BytePoly_2 = bigint_mul!(x2021, x2021, 2);
    let x2029: BytePoly_3 = bigint_nondet_quot!(ctx, x2028, x6, 3);
    let x2030: BytePoly_1 = bigint_nondet_rem!(ctx, x2028, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2029, x6, 4), x2030, 4), x2028, 4),
        24387,
        2,
    )?;
    let x2031: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2030, x1967, 1), x6, 1), x1967, 1),
        x6,
        1
    );
    let x2032: BytePoly_1 = bigint_nondet_quot!(ctx, x2031, x6, 1);
    let x2033: BytePoly_1 = bigint_nondet_rem!(ctx, x2031, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2032, x6, 2), x2033, 2), x2031, 2),
        8131,
        2,
    )?;
    let x2034: BytePoly_2 = bigint_mul!(x2021, x2033, 2);
    let x2035: BytePoly_3 = bigint_nondet_quot!(ctx, x2034, x6, 3);
    let x2036: BytePoly_1 = bigint_nondet_rem!(ctx, x2034, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2035, x6, 4), x2036, 4), x2034, 4),
        24387,
        2,
    )?;
    let x2037: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2036, x2027, 1), 1), x6, 1);
    let x2038: BytePoly_1 = bigint_nondet_quot!(ctx, x2037, x6, 1);
    let x2039: BytePoly_1 = bigint_nondet_rem!(ctx, x2037, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2038, x6, 2), x2039, 2), x2037, 2),
        8131,
        2,
    )?;
    let x2040: BytePoly_1 = bigint_nondet_rem!(ctx, x1975, x2, 1);
    let x2041: BytePoly_2 = bigint_nondet_quot!(ctx, x1975, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2041, x2, 3), x2040, 3), x1975, 3),
        16259,
        2,
    )?;
    let x2042: BytePoly_1 = bigint_sub!(x3, x2040, 1);
    eqz(ctx, &bigint_mul!(x2040, x2042, 2), 8131, 2)?;
    let x2043: BytePoly_1 = bigint_add!(bigint_sub!(x2033, x2003, 1), x6, 1);
    let x2044: BytePoly_1 = bigint_nondet_inv!(ctx, x2043, x6, 1);
    let x2045: BytePoly_2 = bigint_mul!(x2043, x2044, 2);
    let x2046: BytePoly_3 = bigint_nondet_quot!(ctx, x2045, x6, 3);
    let x2047: BytePoly_1 = bigint_nondet_rem!(ctx, x2045, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2046, x6, 4), x2047, 4), x2045, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2047, x1, 1), 34, 1)?;
    let x2048: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2039, x2005, 1), x6, 1), x2044, 2);
    let x2049: BytePoly_3 = bigint_nondet_quot!(ctx, x2048, x6, 3);
    let x2050: BytePoly_1 = bigint_nondet_rem!(ctx, x2048, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2049, x6, 4), x2050, 4), x2048, 4),
        24387,
        2,
    )?;
    let x2051: BytePoly_2 = bigint_mul!(x2050, x2003, 2);
    let x2052: BytePoly_3 = bigint_nondet_quot!(ctx, x2051, x6, 3);
    let x2053: BytePoly_1 = bigint_nondet_rem!(ctx, x2051, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2052, x6, 4), x2053, 4), x2051, 4),
        24387,
        2,
    )?;
    let x2054: BytePoly_1 = bigint_add!(bigint_sub!(x2005, x2053, 1), x6, 1);
    let x2055: BytePoly_1 = bigint_nondet_quot!(ctx, x2054, x6, 1);
    let x2056: BytePoly_1 = bigint_nondet_rem!(ctx, x2054, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2055, x6, 2), x2056, 2), x2054, 2),
        8131,
        2,
    )?;
    let x2057: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2050, x2050, 2), x2003, 2), x6, 2),
            x2033,
            2
        ),
        x6,
        2
    );
    let x2058: BytePoly_3 = bigint_nondet_quot!(ctx, x2057, x6, 3);
    let x2059: BytePoly_1 = bigint_nondet_rem!(ctx, x2057, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2058, x6, 4), x2059, 4), x2057, 4),
        24387,
        2,
    )?;
    let x2060: BytePoly_2 = bigint_mul!(x2050, x2059, 2);
    let x2061: BytePoly_3 = bigint_nondet_quot!(ctx, x2060, x6, 3);
    let x2062: BytePoly_1 = bigint_nondet_rem!(ctx, x2060, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2061, x6, 4), x2062, 4), x2060, 4),
        24387,
        2,
    )?;
    let x2063: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2062, x2056, 1), 1), x6, 1);
    let x2064: BytePoly_1 = bigint_nondet_quot!(ctx, x2063, x6, 1);
    let x2065: BytePoly_1 = bigint_nondet_rem!(ctx, x2063, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2064, x6, 2), x2065, 2), x2063, 2),
        8131,
        2,
    )?;
    let x2066: BytePoly_2 = bigint_add!(
        bigint_mul!(x2059, x2040, 2),
        bigint_mul!(x2003, x2042, 2),
        2
    );
    let x2067: BytePoly_2 = bigint_add!(
        bigint_mul!(x2065, x2040, 2),
        bigint_mul!(x2005, x2042, 2),
        2
    );
    let x2068: BytePoly_3 = bigint_nondet_quot!(ctx, x2066, x6, 3);
    let x2069: BytePoly_1 = bigint_nondet_rem!(ctx, x2066, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2068, x6, 4), x2069, 4), x2066, 4),
        24387,
        2,
    )?;
    let x2070: BytePoly_3 = bigint_nondet_quot!(ctx, x2067, x6, 3);
    let x2071: BytePoly_1 = bigint_nondet_rem!(ctx, x2067, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2070, x6, 4), x2071, 4), x2067, 4),
        24387,
        2,
    )?;
    let x2072: BytePoly_2 = bigint_mul!(x2033, x2033, 2);
    let x2073: BytePoly_3 = bigint_nondet_quot!(ctx, x2072, x6, 3);
    let x2074: BytePoly_1 = bigint_nondet_rem!(ctx, x2072, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2073, x6, 4), x2074, 4), x2072, 4),
        24387,
        2,
    )?;
    let x2075: BytePoly_2 = bigint_add!(bigint_mul!(x2074, x0, 2), x5, 2);
    let x2076: BytePoly_3 = bigint_nondet_quot!(ctx, x2075, x6, 3);
    let x2077: BytePoly_1 = bigint_nondet_rem!(ctx, x2075, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2076, x6, 4), x2077, 4), x2075, 4),
        24387,
        2,
    )?;
    let x2078: BytePoly_1 = bigint_add!(x2039, x2039, 1);
    let x2079: BytePoly_1 = bigint_nondet_quot!(ctx, x2078, x6, 1);
    let x2080: BytePoly_1 = bigint_nondet_rem!(ctx, x2078, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2079, x6, 2), x2080, 2), x2078, 2),
        8131,
        2,
    )?;
    let x2081: BytePoly_1 = bigint_nondet_inv!(ctx, x2080, x6, 1);
    let x2082: BytePoly_2 = bigint_mul!(x2080, x2081, 2);
    let x2083: BytePoly_3 = bigint_nondet_quot!(ctx, x2082, x6, 3);
    let x2084: BytePoly_1 = bigint_nondet_rem!(ctx, x2082, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2083, x6, 4), x2084, 4), x2082, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2084, x3, 1), 34, 1)?;
    let x2085: BytePoly_2 = bigint_mul!(x2077, x2081, 2);
    let x2086: BytePoly_3 = bigint_nondet_quot!(ctx, x2085, x6, 3);
    let x2087: BytePoly_1 = bigint_nondet_rem!(ctx, x2085, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2086, x6, 4), x2087, 4), x2085, 4),
        24387,
        2,
    )?;
    let x2088: BytePoly_2 = bigint_mul!(x2087, x2033, 2);
    let x2089: BytePoly_3 = bigint_nondet_quot!(ctx, x2088, x6, 3);
    let x2090: BytePoly_1 = bigint_nondet_rem!(ctx, x2088, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2089, x6, 4), x2090, 4), x2088, 4),
        24387,
        2,
    )?;
    let x2091: BytePoly_1 = bigint_add!(bigint_sub!(x2039, x2090, 1), x6, 1);
    let x2092: BytePoly_1 = bigint_nondet_quot!(ctx, x2091, x6, 1);
    let x2093: BytePoly_1 = bigint_nondet_rem!(ctx, x2091, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2092, x6, 2), x2093, 2), x2091, 2),
        8131,
        2,
    )?;
    let x2094: BytePoly_2 = bigint_mul!(x2087, x2087, 2);
    let x2095: BytePoly_3 = bigint_nondet_quot!(ctx, x2094, x6, 3);
    let x2096: BytePoly_1 = bigint_nondet_rem!(ctx, x2094, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2095, x6, 4), x2096, 4), x2094, 4),
        24387,
        2,
    )?;
    let x2097: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2096, x2033, 1), x6, 1), x2033, 1),
        x6,
        1
    );
    let x2098: BytePoly_1 = bigint_nondet_quot!(ctx, x2097, x6, 1);
    let x2099: BytePoly_1 = bigint_nondet_rem!(ctx, x2097, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2098, x6, 2), x2099, 2), x2097, 2),
        8131,
        2,
    )?;
    let x2100: BytePoly_2 = bigint_mul!(x2087, x2099, 2);
    let x2101: BytePoly_3 = bigint_nondet_quot!(ctx, x2100, x6, 3);
    let x2102: BytePoly_1 = bigint_nondet_rem!(ctx, x2100, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2101, x6, 4), x2102, 4), x2100, 4),
        24387,
        2,
    )?;
    let x2103: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2102, x2093, 1), 1), x6, 1);
    let x2104: BytePoly_1 = bigint_nondet_quot!(ctx, x2103, x6, 1);
    let x2105: BytePoly_1 = bigint_nondet_rem!(ctx, x2103, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2104, x6, 2), x2105, 2), x2103, 2),
        8131,
        2,
    )?;
    let x2106: BytePoly_1 = bigint_nondet_rem!(ctx, x2041, x2, 1);
    let x2107: BytePoly_2 = bigint_nondet_quot!(ctx, x2041, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2107, x2, 3), x2106, 3), x2041, 3),
        16259,
        2,
    )?;
    let x2108: BytePoly_1 = bigint_sub!(x3, x2106, 1);
    eqz(ctx, &bigint_mul!(x2106, x2108, 2), 8131, 2)?;
    let x2109: BytePoly_1 = bigint_add!(bigint_sub!(x2099, x2069, 1), x6, 1);
    let x2110: BytePoly_1 = bigint_nondet_inv!(ctx, x2109, x6, 1);
    let x2111: BytePoly_2 = bigint_mul!(x2109, x2110, 2);
    let x2112: BytePoly_3 = bigint_nondet_quot!(ctx, x2111, x6, 3);
    let x2113: BytePoly_1 = bigint_nondet_rem!(ctx, x2111, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2112, x6, 4), x2113, 4), x2111, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2113, x1, 1), 34, 1)?;
    let x2114: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2105, x2071, 1), x6, 1), x2110, 2);
    let x2115: BytePoly_3 = bigint_nondet_quot!(ctx, x2114, x6, 3);
    let x2116: BytePoly_1 = bigint_nondet_rem!(ctx, x2114, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2115, x6, 4), x2116, 4), x2114, 4),
        24387,
        2,
    )?;
    let x2117: BytePoly_2 = bigint_mul!(x2116, x2069, 2);
    let x2118: BytePoly_3 = bigint_nondet_quot!(ctx, x2117, x6, 3);
    let x2119: BytePoly_1 = bigint_nondet_rem!(ctx, x2117, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2118, x6, 4), x2119, 4), x2117, 4),
        24387,
        2,
    )?;
    let x2120: BytePoly_1 = bigint_add!(bigint_sub!(x2071, x2119, 1), x6, 1);
    let x2121: BytePoly_1 = bigint_nondet_quot!(ctx, x2120, x6, 1);
    let x2122: BytePoly_1 = bigint_nondet_rem!(ctx, x2120, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2121, x6, 2), x2122, 2), x2120, 2),
        8131,
        2,
    )?;
    let x2123: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2116, x2116, 2), x2069, 2), x6, 2),
            x2099,
            2
        ),
        x6,
        2
    );
    let x2124: BytePoly_3 = bigint_nondet_quot!(ctx, x2123, x6, 3);
    let x2125: BytePoly_1 = bigint_nondet_rem!(ctx, x2123, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2124, x6, 4), x2125, 4), x2123, 4),
        24387,
        2,
    )?;
    let x2126: BytePoly_2 = bigint_mul!(x2116, x2125, 2);
    let x2127: BytePoly_3 = bigint_nondet_quot!(ctx, x2126, x6, 3);
    let x2128: BytePoly_1 = bigint_nondet_rem!(ctx, x2126, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2127, x6, 4), x2128, 4), x2126, 4),
        24387,
        2,
    )?;
    let x2129: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2128, x2122, 1), 1), x6, 1);
    let x2130: BytePoly_1 = bigint_nondet_quot!(ctx, x2129, x6, 1);
    let x2131: BytePoly_1 = bigint_nondet_rem!(ctx, x2129, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2130, x6, 2), x2131, 2), x2129, 2),
        8131,
        2,
    )?;
    let x2132: BytePoly_2 = bigint_add!(
        bigint_mul!(x2125, x2106, 2),
        bigint_mul!(x2069, x2108, 2),
        2
    );
    let x2133: BytePoly_2 = bigint_add!(
        bigint_mul!(x2131, x2106, 2),
        bigint_mul!(x2071, x2108, 2),
        2
    );
    let x2134: BytePoly_3 = bigint_nondet_quot!(ctx, x2132, x6, 3);
    let x2135: BytePoly_1 = bigint_nondet_rem!(ctx, x2132, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2134, x6, 4), x2135, 4), x2132, 4),
        24387,
        2,
    )?;
    let x2136: BytePoly_3 = bigint_nondet_quot!(ctx, x2133, x6, 3);
    let x2137: BytePoly_1 = bigint_nondet_rem!(ctx, x2133, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2136, x6, 4), x2137, 4), x2133, 4),
        24387,
        2,
    )?;
    let x2138: BytePoly_2 = bigint_mul!(x2099, x2099, 2);
    let x2139: BytePoly_3 = bigint_nondet_quot!(ctx, x2138, x6, 3);
    let x2140: BytePoly_1 = bigint_nondet_rem!(ctx, x2138, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2139, x6, 4), x2140, 4), x2138, 4),
        24387,
        2,
    )?;
    let x2141: BytePoly_2 = bigint_add!(bigint_mul!(x2140, x0, 2), x5, 2);
    let x2142: BytePoly_3 = bigint_nondet_quot!(ctx, x2141, x6, 3);
    let x2143: BytePoly_1 = bigint_nondet_rem!(ctx, x2141, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2142, x6, 4), x2143, 4), x2141, 4),
        24387,
        2,
    )?;
    let x2144: BytePoly_1 = bigint_add!(x2105, x2105, 1);
    let x2145: BytePoly_1 = bigint_nondet_quot!(ctx, x2144, x6, 1);
    let x2146: BytePoly_1 = bigint_nondet_rem!(ctx, x2144, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2145, x6, 2), x2146, 2), x2144, 2),
        8131,
        2,
    )?;
    let x2147: BytePoly_1 = bigint_nondet_inv!(ctx, x2146, x6, 1);
    let x2148: BytePoly_2 = bigint_mul!(x2146, x2147, 2);
    let x2149: BytePoly_3 = bigint_nondet_quot!(ctx, x2148, x6, 3);
    let x2150: BytePoly_1 = bigint_nondet_rem!(ctx, x2148, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2149, x6, 4), x2150, 4), x2148, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2150, x3, 1), 34, 1)?;
    let x2151: BytePoly_2 = bigint_mul!(x2143, x2147, 2);
    let x2152: BytePoly_3 = bigint_nondet_quot!(ctx, x2151, x6, 3);
    let x2153: BytePoly_1 = bigint_nondet_rem!(ctx, x2151, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2152, x6, 4), x2153, 4), x2151, 4),
        24387,
        2,
    )?;
    let x2154: BytePoly_2 = bigint_mul!(x2153, x2099, 2);
    let x2155: BytePoly_3 = bigint_nondet_quot!(ctx, x2154, x6, 3);
    let x2156: BytePoly_1 = bigint_nondet_rem!(ctx, x2154, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2155, x6, 4), x2156, 4), x2154, 4),
        24387,
        2,
    )?;
    let x2157: BytePoly_1 = bigint_add!(bigint_sub!(x2105, x2156, 1), x6, 1);
    let x2158: BytePoly_1 = bigint_nondet_quot!(ctx, x2157, x6, 1);
    let x2159: BytePoly_1 = bigint_nondet_rem!(ctx, x2157, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2158, x6, 2), x2159, 2), x2157, 2),
        8131,
        2,
    )?;
    let x2160: BytePoly_2 = bigint_mul!(x2153, x2153, 2);
    let x2161: BytePoly_3 = bigint_nondet_quot!(ctx, x2160, x6, 3);
    let x2162: BytePoly_1 = bigint_nondet_rem!(ctx, x2160, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2161, x6, 4), x2162, 4), x2160, 4),
        24387,
        2,
    )?;
    let x2163: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2162, x2099, 1), x6, 1), x2099, 1),
        x6,
        1
    );
    let x2164: BytePoly_1 = bigint_nondet_quot!(ctx, x2163, x6, 1);
    let x2165: BytePoly_1 = bigint_nondet_rem!(ctx, x2163, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2164, x6, 2), x2165, 2), x2163, 2),
        8131,
        2,
    )?;
    let x2166: BytePoly_2 = bigint_mul!(x2153, x2165, 2);
    let x2167: BytePoly_3 = bigint_nondet_quot!(ctx, x2166, x6, 3);
    let x2168: BytePoly_1 = bigint_nondet_rem!(ctx, x2166, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2167, x6, 4), x2168, 4), x2166, 4),
        24387,
        2,
    )?;
    let x2169: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2168, x2159, 1), 1), x6, 1);
    let x2170: BytePoly_1 = bigint_nondet_quot!(ctx, x2169, x6, 1);
    let x2171: BytePoly_1 = bigint_nondet_rem!(ctx, x2169, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2170, x6, 2), x2171, 2), x2169, 2),
        8131,
        2,
    )?;
    let x2172: BytePoly_1 = bigint_sub!(x6, x16, 1);
    let x2173: BytePoly_1 = bigint_add!(bigint_sub!(x15, x2135, 1), x6, 1);
    let x2174: BytePoly_1 = bigint_nondet_inv!(ctx, x2173, x6, 1);
    let x2175: BytePoly_2 = bigint_mul!(x2173, x2174, 2);
    let x2176: BytePoly_3 = bigint_nondet_quot!(ctx, x2175, x6, 3);
    let x2177: BytePoly_1 = bigint_nondet_rem!(ctx, x2175, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2176, x6, 4), x2177, 4), x2175, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2177, x1, 1), 34, 1)?;
    let x2178: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2172, x2137, 1), x6, 1), x2174, 2);
    let x2179: BytePoly_3 = bigint_nondet_quot!(ctx, x2178, x6, 3);
    let x2180: BytePoly_1 = bigint_nondet_rem!(ctx, x2178, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2179, x6, 4), x2180, 4), x2178, 4),
        24387,
        2,
    )?;
    let x2181: BytePoly_2 = bigint_mul!(x2180, x2135, 2);
    let x2182: BytePoly_3 = bigint_nondet_quot!(ctx, x2181, x6, 3);
    let x2183: BytePoly_1 = bigint_nondet_rem!(ctx, x2181, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2182, x6, 4), x2183, 4), x2181, 4),
        24387,
        2,
    )?;
    let x2184: BytePoly_1 = bigint_add!(bigint_sub!(x2137, x2183, 1), x6, 1);
    let x2185: BytePoly_1 = bigint_nondet_quot!(ctx, x2184, x6, 1);
    let x2186: BytePoly_1 = bigint_nondet_rem!(ctx, x2184, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2185, x6, 2), x2186, 2), x2184, 2),
        8131,
        2,
    )?;
    let x2187: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2180, x2180, 2), x2135, 2), x6, 2),
            x15,
            2
        ),
        x6,
        2
    );
    let x2188: BytePoly_3 = bigint_nondet_quot!(ctx, x2187, x6, 3);
    let x2189: BytePoly_1 = bigint_nondet_rem!(ctx, x2187, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2188, x6, 4), x2189, 4), x2187, 4),
        24387,
        2,
    )?;
    let x2190: BytePoly_2 = bigint_mul!(x2180, x2189, 2);
    let x2191: BytePoly_3 = bigint_nondet_quot!(ctx, x2190, x6, 3);
    let x2192: BytePoly_1 = bigint_nondet_rem!(ctx, x2190, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2191, x6, 4), x2192, 4), x2190, 4),
        24387,
        2,
    )?;
    let x2193: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2192, x2186, 1), 1), x6, 1);
    let x2194: BytePoly_1 = bigint_nondet_quot!(ctx, x2193, x6, 1);
    let x2195: BytePoly_1 = bigint_nondet_rem!(ctx, x2193, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2194, x6, 2), x2195, 2), x2193, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2189, x10, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x2195, bigint_sub!(x6, x11, 1), 1), 34, 1)?;
    let x2196: BytePoly_2 = bigint_nondet_inv!(ctx, x14, x9, 2);
    let x2197: BytePoly_4 = bigint_mul!(x14, x2196, 4);
    let x2198: BytePoly_6 = bigint_nondet_quot!(ctx, x2197, x9, 6);
    let x2199: BytePoly_2 = bigint_nondet_rem!(ctx, x2197, x9, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2198, x9, 8), x2199, 8), x2197, 8),
        48771,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2199, x3, 2), 34, 1)?;
    let x2200: BytePoly_4 = bigint_mul!(x12, x2196, 4);
    let x2201: BytePoly_6 = bigint_nondet_quot!(ctx, x2200, x9, 6);
    let x2202: BytePoly_2 = bigint_nondet_rem!(ctx, x2200, x9, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2201, x9, 8), x2202, 8), x2200, 8),
        48771,
        4,
    )?;
    let x2203: BytePoly_4 = bigint_mul!(x13, x2196, 4);
    let x2204: BytePoly_6 = bigint_nondet_quot!(ctx, x2203, x9, 6);
    let x2205: BytePoly_2 = bigint_nondet_rem!(ctx, x2203, x9, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2204, x9, 8), x2205, 8), x2203, 8),
        48771,
        4,
    )?;
    let x2206: BytePoly_3 = bigint_nondet_quot!(ctx, x32, x6, 3);
    let x2207: BytePoly_1 = bigint_nondet_rem!(ctx, x32, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2206, x6, 4), x2207, 4), x32, 4),
        24387,
        2,
    )?;
    let x2208: BytePoly_3 = bigint_nondet_quot!(ctx, x35, x6, 3);
    let x2209: BytePoly_1 = bigint_nondet_rem!(ctx, x35, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2208, x6, 4), x2209, 4), x35, 4),
        24387,
        2,
    )?;
    let x2210: BytePoly_2 = bigint_mul!(x15, x2209, 2);
    let x2211: BytePoly_3 = bigint_nondet_quot!(ctx, x2210, x6, 3);
    let x2212: BytePoly_1 = bigint_nondet_rem!(ctx, x2210, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2211, x6, 4), x2212, 4), x2210, 4),
        24387,
        2,
    )?;
    let x2213: BytePoly_3 = bigint_nondet_quot!(ctx, x41, x6, 3);
    let x2214: BytePoly_1 = bigint_nondet_rem!(ctx, x41, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2213, x6, 4), x2214, 4), x41, 4),
        24387,
        2,
    )?;
    let x2215: BytePoly_1 = bigint_add!(bigint_add!(x2212, x2214, 1), x4, 1);
    let x2216: BytePoly_1 = bigint_nondet_quot!(ctx, x2215, x6, 1);
    let x2217: BytePoly_1 = bigint_nondet_rem!(ctx, x2215, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2216, x6, 2), x2217, 2), x2215, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2207, x2217, 1), 34, 1)?;
    let x2218: BytePoly_1 = bigint_nondet_rem!(ctx, x2202, x2, 1);
    let x2219: BytePoly_2 = bigint_nondet_quot!(ctx, x2202, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2219, x2, 3), x2218, 3), x2202, 3),
        16259,
        2,
    )?;
    let x2220: BytePoly_1 = bigint_sub!(x3, x2218, 1);
    eqz(ctx, &bigint_mul!(x2218, x2220, 2), 8131, 2)?;
    let x2221: BytePoly_1 = bigint_add!(bigint_sub!(x7, x15, 1), x6, 1);
    let x2222: BytePoly_1 = bigint_nondet_inv!(ctx, x2221, x6, 1);
    let x2223: BytePoly_2 = bigint_mul!(x2221, x2222, 2);
    let x2224: BytePoly_3 = bigint_nondet_quot!(ctx, x2223, x6, 3);
    let x2225: BytePoly_1 = bigint_nondet_rem!(ctx, x2223, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2224, x6, 4), x2225, 4), x2223, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2225, x1, 1), 34, 1)?;
    let x2226: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x8, x16, 1), x6, 1), x2222, 2);
    let x2227: BytePoly_3 = bigint_nondet_quot!(ctx, x2226, x6, 3);
    let x2228: BytePoly_1 = bigint_nondet_rem!(ctx, x2226, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2227, x6, 4), x2228, 4), x2226, 4),
        24387,
        2,
    )?;
    let x2229: BytePoly_2 = bigint_mul!(x2228, x15, 2);
    let x2230: BytePoly_3 = bigint_nondet_quot!(ctx, x2229, x6, 3);
    let x2231: BytePoly_1 = bigint_nondet_rem!(ctx, x2229, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2230, x6, 4), x2231, 4), x2229, 4),
        24387,
        2,
    )?;
    let x2232: BytePoly_1 = bigint_add!(bigint_sub!(x16, x2231, 1), x6, 1);
    let x2233: BytePoly_1 = bigint_nondet_quot!(ctx, x2232, x6, 1);
    let x2234: BytePoly_1 = bigint_nondet_rem!(ctx, x2232, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2233, x6, 2), x2234, 2), x2232, 2),
        8131,
        2,
    )?;
    let x2235: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2228, x2228, 2), x15, 2), x6, 2),
            x7,
            2
        ),
        x6,
        2
    );
    let x2236: BytePoly_3 = bigint_nondet_quot!(ctx, x2235, x6, 3);
    let x2237: BytePoly_1 = bigint_nondet_rem!(ctx, x2235, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2236, x6, 4), x2237, 4), x2235, 4),
        24387,
        2,
    )?;
    let x2238: BytePoly_2 = bigint_mul!(x2228, x2237, 2);
    let x2239: BytePoly_3 = bigint_nondet_quot!(ctx, x2238, x6, 3);
    let x2240: BytePoly_1 = bigint_nondet_rem!(ctx, x2238, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2239, x6, 4), x2240, 4), x2238, 4),
        24387,
        2,
    )?;
    let x2241: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2240, x2234, 1), 1), x6, 1);
    let x2242: BytePoly_1 = bigint_nondet_quot!(ctx, x2241, x6, 1);
    let x2243: BytePoly_1 = bigint_nondet_rem!(ctx, x2241, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2242, x6, 2), x2243, 2), x2241, 2),
        8131,
        2,
    )?;
    let x2244: BytePoly_2 =
        bigint_add!(bigint_mul!(x2237, x2218, 2), bigint_mul!(x15, x2220, 2), 2);
    let x2245: BytePoly_2 =
        bigint_add!(bigint_mul!(x2243, x2218, 2), bigint_mul!(x16, x2220, 2), 2);
    let x2246: BytePoly_3 = bigint_nondet_quot!(ctx, x2244, x6, 3);
    let x2247: BytePoly_1 = bigint_nondet_rem!(ctx, x2244, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2246, x6, 4), x2247, 4), x2244, 4),
        24387,
        2,
    )?;
    let x2248: BytePoly_3 = bigint_nondet_quot!(ctx, x2245, x6, 3);
    let x2249: BytePoly_1 = bigint_nondet_rem!(ctx, x2245, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2248, x6, 4), x2249, 4), x2245, 4),
        24387,
        2,
    )?;
    let x2250: BytePoly_2 = bigint_mul!(x7, x7, 2);
    let x2251: BytePoly_3 = bigint_nondet_quot!(ctx, x2250, x6, 3);
    let x2252: BytePoly_1 = bigint_nondet_rem!(ctx, x2250, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2251, x6, 4), x2252, 4), x2250, 4),
        24387,
        2,
    )?;
    let x2253: BytePoly_2 = bigint_add!(bigint_mul!(x2252, x0, 2), x5, 2);
    let x2254: BytePoly_3 = bigint_nondet_quot!(ctx, x2253, x6, 3);
    let x2255: BytePoly_1 = bigint_nondet_rem!(ctx, x2253, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2254, x6, 4), x2255, 4), x2253, 4),
        24387,
        2,
    )?;
    let x2256: BytePoly_1 = bigint_add!(x8, x8, 1);
    let x2257: BytePoly_1 = bigint_nondet_quot!(ctx, x2256, x6, 1);
    let x2258: BytePoly_1 = bigint_nondet_rem!(ctx, x2256, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2257, x6, 2), x2258, 2), x2256, 2),
        8131,
        2,
    )?;
    let x2259: BytePoly_1 = bigint_nondet_inv!(ctx, x2258, x6, 1);
    let x2260: BytePoly_2 = bigint_mul!(x2258, x2259, 2);
    let x2261: BytePoly_3 = bigint_nondet_quot!(ctx, x2260, x6, 3);
    let x2262: BytePoly_1 = bigint_nondet_rem!(ctx, x2260, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2261, x6, 4), x2262, 4), x2260, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2262, x3, 1), 34, 1)?;
    let x2263: BytePoly_2 = bigint_mul!(x2255, x2259, 2);
    let x2264: BytePoly_3 = bigint_nondet_quot!(ctx, x2263, x6, 3);
    let x2265: BytePoly_1 = bigint_nondet_rem!(ctx, x2263, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2264, x6, 4), x2265, 4), x2263, 4),
        24387,
        2,
    )?;
    let x2266: BytePoly_2 = bigint_mul!(x2265, x7, 2);
    let x2267: BytePoly_3 = bigint_nondet_quot!(ctx, x2266, x6, 3);
    let x2268: BytePoly_1 = bigint_nondet_rem!(ctx, x2266, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2267, x6, 4), x2268, 4), x2266, 4),
        24387,
        2,
    )?;
    let x2269: BytePoly_1 = bigint_add!(bigint_sub!(x8, x2268, 1), x6, 1);
    let x2270: BytePoly_1 = bigint_nondet_quot!(ctx, x2269, x6, 1);
    let x2271: BytePoly_1 = bigint_nondet_rem!(ctx, x2269, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2270, x6, 2), x2271, 2), x2269, 2),
        8131,
        2,
    )?;
    let x2272: BytePoly_2 = bigint_mul!(x2265, x2265, 2);
    let x2273: BytePoly_3 = bigint_nondet_quot!(ctx, x2272, x6, 3);
    let x2274: BytePoly_1 = bigint_nondet_rem!(ctx, x2272, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2273, x6, 4), x2274, 4), x2272, 4),
        24387,
        2,
    )?;
    let x2275: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2274, x7, 1), x6, 1), x7, 1),
        x6,
        1
    );
    let x2276: BytePoly_1 = bigint_nondet_quot!(ctx, x2275, x6, 1);
    let x2277: BytePoly_1 = bigint_nondet_rem!(ctx, x2275, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2276, x6, 2), x2277, 2), x2275, 2),
        8131,
        2,
    )?;
    let x2278: BytePoly_2 = bigint_mul!(x2265, x2277, 2);
    let x2279: BytePoly_3 = bigint_nondet_quot!(ctx, x2278, x6, 3);
    let x2280: BytePoly_1 = bigint_nondet_rem!(ctx, x2278, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2279, x6, 4), x2280, 4), x2278, 4),
        24387,
        2,
    )?;
    let x2281: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2280, x2271, 1), 1), x6, 1);
    let x2282: BytePoly_1 = bigint_nondet_quot!(ctx, x2281, x6, 1);
    let x2283: BytePoly_1 = bigint_nondet_rem!(ctx, x2281, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2282, x6, 2), x2283, 2), x2281, 2),
        8131,
        2,
    )?;
    let x2284: BytePoly_1 = bigint_nondet_rem!(ctx, x2219, x2, 1);
    let x2285: BytePoly_2 = bigint_nondet_quot!(ctx, x2219, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2285, x2, 3), x2284, 3), x2219, 3),
        16259,
        2,
    )?;
    let x2286: BytePoly_1 = bigint_sub!(x3, x2284, 1);
    eqz(ctx, &bigint_mul!(x2284, x2286, 2), 8131, 2)?;
    let x2287: BytePoly_1 = bigint_add!(bigint_sub!(x2277, x2247, 1), x6, 1);
    let x2288: BytePoly_1 = bigint_nondet_inv!(ctx, x2287, x6, 1);
    let x2289: BytePoly_2 = bigint_mul!(x2287, x2288, 2);
    let x2290: BytePoly_3 = bigint_nondet_quot!(ctx, x2289, x6, 3);
    let x2291: BytePoly_1 = bigint_nondet_rem!(ctx, x2289, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2290, x6, 4), x2291, 4), x2289, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2291, x1, 1), 34, 1)?;
    let x2292: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2283, x2249, 1), x6, 1), x2288, 2);
    let x2293: BytePoly_3 = bigint_nondet_quot!(ctx, x2292, x6, 3);
    let x2294: BytePoly_1 = bigint_nondet_rem!(ctx, x2292, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2293, x6, 4), x2294, 4), x2292, 4),
        24387,
        2,
    )?;
    let x2295: BytePoly_2 = bigint_mul!(x2294, x2247, 2);
    let x2296: BytePoly_3 = bigint_nondet_quot!(ctx, x2295, x6, 3);
    let x2297: BytePoly_1 = bigint_nondet_rem!(ctx, x2295, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2296, x6, 4), x2297, 4), x2295, 4),
        24387,
        2,
    )?;
    let x2298: BytePoly_1 = bigint_add!(bigint_sub!(x2249, x2297, 1), x6, 1);
    let x2299: BytePoly_1 = bigint_nondet_quot!(ctx, x2298, x6, 1);
    let x2300: BytePoly_1 = bigint_nondet_rem!(ctx, x2298, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2299, x6, 2), x2300, 2), x2298, 2),
        8131,
        2,
    )?;
    let x2301: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2294, x2294, 2), x2247, 2), x6, 2),
            x2277,
            2
        ),
        x6,
        2
    );
    let x2302: BytePoly_3 = bigint_nondet_quot!(ctx, x2301, x6, 3);
    let x2303: BytePoly_1 = bigint_nondet_rem!(ctx, x2301, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2302, x6, 4), x2303, 4), x2301, 4),
        24387,
        2,
    )?;
    let x2304: BytePoly_2 = bigint_mul!(x2294, x2303, 2);
    let x2305: BytePoly_3 = bigint_nondet_quot!(ctx, x2304, x6, 3);
    let x2306: BytePoly_1 = bigint_nondet_rem!(ctx, x2304, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2305, x6, 4), x2306, 4), x2304, 4),
        24387,
        2,
    )?;
    let x2307: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2306, x2300, 1), 1), x6, 1);
    let x2308: BytePoly_1 = bigint_nondet_quot!(ctx, x2307, x6, 1);
    let x2309: BytePoly_1 = bigint_nondet_rem!(ctx, x2307, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2308, x6, 2), x2309, 2), x2307, 2),
        8131,
        2,
    )?;
    let x2310: BytePoly_2 = bigint_add!(
        bigint_mul!(x2303, x2284, 2),
        bigint_mul!(x2247, x2286, 2),
        2
    );
    let x2311: BytePoly_2 = bigint_add!(
        bigint_mul!(x2309, x2284, 2),
        bigint_mul!(x2249, x2286, 2),
        2
    );
    let x2312: BytePoly_3 = bigint_nondet_quot!(ctx, x2310, x6, 3);
    let x2313: BytePoly_1 = bigint_nondet_rem!(ctx, x2310, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2312, x6, 4), x2313, 4), x2310, 4),
        24387,
        2,
    )?;
    let x2314: BytePoly_3 = bigint_nondet_quot!(ctx, x2311, x6, 3);
    let x2315: BytePoly_1 = bigint_nondet_rem!(ctx, x2311, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2314, x6, 4), x2315, 4), x2311, 4),
        24387,
        2,
    )?;
    let x2316: BytePoly_2 = bigint_mul!(x2277, x2277, 2);
    let x2317: BytePoly_3 = bigint_nondet_quot!(ctx, x2316, x6, 3);
    let x2318: BytePoly_1 = bigint_nondet_rem!(ctx, x2316, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2317, x6, 4), x2318, 4), x2316, 4),
        24387,
        2,
    )?;
    let x2319: BytePoly_2 = bigint_add!(bigint_mul!(x2318, x0, 2), x5, 2);
    let x2320: BytePoly_3 = bigint_nondet_quot!(ctx, x2319, x6, 3);
    let x2321: BytePoly_1 = bigint_nondet_rem!(ctx, x2319, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2320, x6, 4), x2321, 4), x2319, 4),
        24387,
        2,
    )?;
    let x2322: BytePoly_1 = bigint_add!(x2283, x2283, 1);
    let x2323: BytePoly_1 = bigint_nondet_quot!(ctx, x2322, x6, 1);
    let x2324: BytePoly_1 = bigint_nondet_rem!(ctx, x2322, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2323, x6, 2), x2324, 2), x2322, 2),
        8131,
        2,
    )?;
    let x2325: BytePoly_1 = bigint_nondet_inv!(ctx, x2324, x6, 1);
    let x2326: BytePoly_2 = bigint_mul!(x2324, x2325, 2);
    let x2327: BytePoly_3 = bigint_nondet_quot!(ctx, x2326, x6, 3);
    let x2328: BytePoly_1 = bigint_nondet_rem!(ctx, x2326, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2327, x6, 4), x2328, 4), x2326, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2328, x3, 1), 34, 1)?;
    let x2329: BytePoly_2 = bigint_mul!(x2321, x2325, 2);
    let x2330: BytePoly_3 = bigint_nondet_quot!(ctx, x2329, x6, 3);
    let x2331: BytePoly_1 = bigint_nondet_rem!(ctx, x2329, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2330, x6, 4), x2331, 4), x2329, 4),
        24387,
        2,
    )?;
    let x2332: BytePoly_2 = bigint_mul!(x2331, x2277, 2);
    let x2333: BytePoly_3 = bigint_nondet_quot!(ctx, x2332, x6, 3);
    let x2334: BytePoly_1 = bigint_nondet_rem!(ctx, x2332, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2333, x6, 4), x2334, 4), x2332, 4),
        24387,
        2,
    )?;
    let x2335: BytePoly_1 = bigint_add!(bigint_sub!(x2283, x2334, 1), x6, 1);
    let x2336: BytePoly_1 = bigint_nondet_quot!(ctx, x2335, x6, 1);
    let x2337: BytePoly_1 = bigint_nondet_rem!(ctx, x2335, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2336, x6, 2), x2337, 2), x2335, 2),
        8131,
        2,
    )?;
    let x2338: BytePoly_2 = bigint_mul!(x2331, x2331, 2);
    let x2339: BytePoly_3 = bigint_nondet_quot!(ctx, x2338, x6, 3);
    let x2340: BytePoly_1 = bigint_nondet_rem!(ctx, x2338, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2339, x6, 4), x2340, 4), x2338, 4),
        24387,
        2,
    )?;
    let x2341: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2340, x2277, 1), x6, 1), x2277, 1),
        x6,
        1
    );
    let x2342: BytePoly_1 = bigint_nondet_quot!(ctx, x2341, x6, 1);
    let x2343: BytePoly_1 = bigint_nondet_rem!(ctx, x2341, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2342, x6, 2), x2343, 2), x2341, 2),
        8131,
        2,
    )?;
    let x2344: BytePoly_2 = bigint_mul!(x2331, x2343, 2);
    let x2345: BytePoly_3 = bigint_nondet_quot!(ctx, x2344, x6, 3);
    let x2346: BytePoly_1 = bigint_nondet_rem!(ctx, x2344, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2345, x6, 4), x2346, 4), x2344, 4),
        24387,
        2,
    )?;
    let x2347: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2346, x2337, 1), 1), x6, 1);
    let x2348: BytePoly_1 = bigint_nondet_quot!(ctx, x2347, x6, 1);
    let x2349: BytePoly_1 = bigint_nondet_rem!(ctx, x2347, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2348, x6, 2), x2349, 2), x2347, 2),
        8131,
        2,
    )?;
    let x2350: BytePoly_1 = bigint_nondet_rem!(ctx, x2285, x2, 1);
    let x2351: BytePoly_2 = bigint_nondet_quot!(ctx, x2285, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2351, x2, 3), x2350, 3), x2285, 3),
        16259,
        2,
    )?;
    let x2352: BytePoly_1 = bigint_sub!(x3, x2350, 1);
    eqz(ctx, &bigint_mul!(x2350, x2352, 2), 8131, 2)?;
    let x2353: BytePoly_1 = bigint_add!(bigint_sub!(x2343, x2313, 1), x6, 1);
    let x2354: BytePoly_1 = bigint_nondet_inv!(ctx, x2353, x6, 1);
    let x2355: BytePoly_2 = bigint_mul!(x2353, x2354, 2);
    let x2356: BytePoly_3 = bigint_nondet_quot!(ctx, x2355, x6, 3);
    let x2357: BytePoly_1 = bigint_nondet_rem!(ctx, x2355, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2356, x6, 4), x2357, 4), x2355, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2357, x1, 1), 34, 1)?;
    let x2358: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2349, x2315, 1), x6, 1), x2354, 2);
    let x2359: BytePoly_3 = bigint_nondet_quot!(ctx, x2358, x6, 3);
    let x2360: BytePoly_1 = bigint_nondet_rem!(ctx, x2358, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2359, x6, 4), x2360, 4), x2358, 4),
        24387,
        2,
    )?;
    let x2361: BytePoly_2 = bigint_mul!(x2360, x2313, 2);
    let x2362: BytePoly_3 = bigint_nondet_quot!(ctx, x2361, x6, 3);
    let x2363: BytePoly_1 = bigint_nondet_rem!(ctx, x2361, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2362, x6, 4), x2363, 4), x2361, 4),
        24387,
        2,
    )?;
    let x2364: BytePoly_1 = bigint_add!(bigint_sub!(x2315, x2363, 1), x6, 1);
    let x2365: BytePoly_1 = bigint_nondet_quot!(ctx, x2364, x6, 1);
    let x2366: BytePoly_1 = bigint_nondet_rem!(ctx, x2364, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2365, x6, 2), x2366, 2), x2364, 2),
        8131,
        2,
    )?;
    let x2367: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2360, x2360, 2), x2313, 2), x6, 2),
            x2343,
            2
        ),
        x6,
        2
    );
    let x2368: BytePoly_3 = bigint_nondet_quot!(ctx, x2367, x6, 3);
    let x2369: BytePoly_1 = bigint_nondet_rem!(ctx, x2367, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2368, x6, 4), x2369, 4), x2367, 4),
        24387,
        2,
    )?;
    let x2370: BytePoly_2 = bigint_mul!(x2360, x2369, 2);
    let x2371: BytePoly_3 = bigint_nondet_quot!(ctx, x2370, x6, 3);
    let x2372: BytePoly_1 = bigint_nondet_rem!(ctx, x2370, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2371, x6, 4), x2372, 4), x2370, 4),
        24387,
        2,
    )?;
    let x2373: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2372, x2366, 1), 1), x6, 1);
    let x2374: BytePoly_1 = bigint_nondet_quot!(ctx, x2373, x6, 1);
    let x2375: BytePoly_1 = bigint_nondet_rem!(ctx, x2373, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2374, x6, 2), x2375, 2), x2373, 2),
        8131,
        2,
    )?;
    let x2376: BytePoly_2 = bigint_add!(
        bigint_mul!(x2369, x2350, 2),
        bigint_mul!(x2313, x2352, 2),
        2
    );
    let x2377: BytePoly_2 = bigint_add!(
        bigint_mul!(x2375, x2350, 2),
        bigint_mul!(x2315, x2352, 2),
        2
    );
    let x2378: BytePoly_3 = bigint_nondet_quot!(ctx, x2376, x6, 3);
    let x2379: BytePoly_1 = bigint_nondet_rem!(ctx, x2376, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2378, x6, 4), x2379, 4), x2376, 4),
        24387,
        2,
    )?;
    let x2380: BytePoly_3 = bigint_nondet_quot!(ctx, x2377, x6, 3);
    let x2381: BytePoly_1 = bigint_nondet_rem!(ctx, x2377, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2380, x6, 4), x2381, 4), x2377, 4),
        24387,
        2,
    )?;
    let x2382: BytePoly_2 = bigint_mul!(x2343, x2343, 2);
    let x2383: BytePoly_3 = bigint_nondet_quot!(ctx, x2382, x6, 3);
    let x2384: BytePoly_1 = bigint_nondet_rem!(ctx, x2382, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2383, x6, 4), x2384, 4), x2382, 4),
        24387,
        2,
    )?;
    let x2385: BytePoly_2 = bigint_add!(bigint_mul!(x2384, x0, 2), x5, 2);
    let x2386: BytePoly_3 = bigint_nondet_quot!(ctx, x2385, x6, 3);
    let x2387: BytePoly_1 = bigint_nondet_rem!(ctx, x2385, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2386, x6, 4), x2387, 4), x2385, 4),
        24387,
        2,
    )?;
    let x2388: BytePoly_1 = bigint_add!(x2349, x2349, 1);
    let x2389: BytePoly_1 = bigint_nondet_quot!(ctx, x2388, x6, 1);
    let x2390: BytePoly_1 = bigint_nondet_rem!(ctx, x2388, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2389, x6, 2), x2390, 2), x2388, 2),
        8131,
        2,
    )?;
    let x2391: BytePoly_1 = bigint_nondet_inv!(ctx, x2390, x6, 1);
    let x2392: BytePoly_2 = bigint_mul!(x2390, x2391, 2);
    let x2393: BytePoly_3 = bigint_nondet_quot!(ctx, x2392, x6, 3);
    let x2394: BytePoly_1 = bigint_nondet_rem!(ctx, x2392, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2393, x6, 4), x2394, 4), x2392, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2394, x3, 1), 34, 1)?;
    let x2395: BytePoly_2 = bigint_mul!(x2387, x2391, 2);
    let x2396: BytePoly_3 = bigint_nondet_quot!(ctx, x2395, x6, 3);
    let x2397: BytePoly_1 = bigint_nondet_rem!(ctx, x2395, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2396, x6, 4), x2397, 4), x2395, 4),
        24387,
        2,
    )?;
    let x2398: BytePoly_2 = bigint_mul!(x2397, x2343, 2);
    let x2399: BytePoly_3 = bigint_nondet_quot!(ctx, x2398, x6, 3);
    let x2400: BytePoly_1 = bigint_nondet_rem!(ctx, x2398, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2399, x6, 4), x2400, 4), x2398, 4),
        24387,
        2,
    )?;
    let x2401: BytePoly_1 = bigint_add!(bigint_sub!(x2349, x2400, 1), x6, 1);
    let x2402: BytePoly_1 = bigint_nondet_quot!(ctx, x2401, x6, 1);
    let x2403: BytePoly_1 = bigint_nondet_rem!(ctx, x2401, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2402, x6, 2), x2403, 2), x2401, 2),
        8131,
        2,
    )?;
    let x2404: BytePoly_2 = bigint_mul!(x2397, x2397, 2);
    let x2405: BytePoly_3 = bigint_nondet_quot!(ctx, x2404, x6, 3);
    let x2406: BytePoly_1 = bigint_nondet_rem!(ctx, x2404, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2405, x6, 4), x2406, 4), x2404, 4),
        24387,
        2,
    )?;
    let x2407: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2406, x2343, 1), x6, 1), x2343, 1),
        x6,
        1
    );
    let x2408: BytePoly_1 = bigint_nondet_quot!(ctx, x2407, x6, 1);
    let x2409: BytePoly_1 = bigint_nondet_rem!(ctx, x2407, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2408, x6, 2), x2409, 2), x2407, 2),
        8131,
        2,
    )?;
    let x2410: BytePoly_2 = bigint_mul!(x2397, x2409, 2);
    let x2411: BytePoly_3 = bigint_nondet_quot!(ctx, x2410, x6, 3);
    let x2412: BytePoly_1 = bigint_nondet_rem!(ctx, x2410, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2411, x6, 4), x2412, 4), x2410, 4),
        24387,
        2,
    )?;
    let x2413: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2412, x2403, 1), 1), x6, 1);
    let x2414: BytePoly_1 = bigint_nondet_quot!(ctx, x2413, x6, 1);
    let x2415: BytePoly_1 = bigint_nondet_rem!(ctx, x2413, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2414, x6, 2), x2415, 2), x2413, 2),
        8131,
        2,
    )?;
    let x2416: BytePoly_1 = bigint_nondet_rem!(ctx, x2351, x2, 1);
    let x2417: BytePoly_2 = bigint_nondet_quot!(ctx, x2351, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2417, x2, 3), x2416, 3), x2351, 3),
        16259,
        2,
    )?;
    let x2418: BytePoly_1 = bigint_sub!(x3, x2416, 1);
    eqz(ctx, &bigint_mul!(x2416, x2418, 2), 8131, 2)?;
    let x2419: BytePoly_1 = bigint_add!(bigint_sub!(x2409, x2379, 1), x6, 1);
    let x2420: BytePoly_1 = bigint_nondet_inv!(ctx, x2419, x6, 1);
    let x2421: BytePoly_2 = bigint_mul!(x2419, x2420, 2);
    let x2422: BytePoly_3 = bigint_nondet_quot!(ctx, x2421, x6, 3);
    let x2423: BytePoly_1 = bigint_nondet_rem!(ctx, x2421, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2422, x6, 4), x2423, 4), x2421, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2423, x1, 1), 34, 1)?;
    let x2424: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2415, x2381, 1), x6, 1), x2420, 2);
    let x2425: BytePoly_3 = bigint_nondet_quot!(ctx, x2424, x6, 3);
    let x2426: BytePoly_1 = bigint_nondet_rem!(ctx, x2424, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2425, x6, 4), x2426, 4), x2424, 4),
        24387,
        2,
    )?;
    let x2427: BytePoly_2 = bigint_mul!(x2426, x2379, 2);
    let x2428: BytePoly_3 = bigint_nondet_quot!(ctx, x2427, x6, 3);
    let x2429: BytePoly_1 = bigint_nondet_rem!(ctx, x2427, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2428, x6, 4), x2429, 4), x2427, 4),
        24387,
        2,
    )?;
    let x2430: BytePoly_1 = bigint_add!(bigint_sub!(x2381, x2429, 1), x6, 1);
    let x2431: BytePoly_1 = bigint_nondet_quot!(ctx, x2430, x6, 1);
    let x2432: BytePoly_1 = bigint_nondet_rem!(ctx, x2430, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2431, x6, 2), x2432, 2), x2430, 2),
        8131,
        2,
    )?;
    let x2433: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2426, x2426, 2), x2379, 2), x6, 2),
            x2409,
            2
        ),
        x6,
        2
    );
    let x2434: BytePoly_3 = bigint_nondet_quot!(ctx, x2433, x6, 3);
    let x2435: BytePoly_1 = bigint_nondet_rem!(ctx, x2433, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2434, x6, 4), x2435, 4), x2433, 4),
        24387,
        2,
    )?;
    let x2436: BytePoly_2 = bigint_mul!(x2426, x2435, 2);
    let x2437: BytePoly_3 = bigint_nondet_quot!(ctx, x2436, x6, 3);
    let x2438: BytePoly_1 = bigint_nondet_rem!(ctx, x2436, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2437, x6, 4), x2438, 4), x2436, 4),
        24387,
        2,
    )?;
    let x2439: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2438, x2432, 1), 1), x6, 1);
    let x2440: BytePoly_1 = bigint_nondet_quot!(ctx, x2439, x6, 1);
    let x2441: BytePoly_1 = bigint_nondet_rem!(ctx, x2439, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2440, x6, 2), x2441, 2), x2439, 2),
        8131,
        2,
    )?;
    let x2442: BytePoly_2 = bigint_add!(
        bigint_mul!(x2435, x2416, 2),
        bigint_mul!(x2379, x2418, 2),
        2
    );
    let x2443: BytePoly_2 = bigint_add!(
        bigint_mul!(x2441, x2416, 2),
        bigint_mul!(x2381, x2418, 2),
        2
    );
    let x2444: BytePoly_3 = bigint_nondet_quot!(ctx, x2442, x6, 3);
    let x2445: BytePoly_1 = bigint_nondet_rem!(ctx, x2442, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2444, x6, 4), x2445, 4), x2442, 4),
        24387,
        2,
    )?;
    let x2446: BytePoly_3 = bigint_nondet_quot!(ctx, x2443, x6, 3);
    let x2447: BytePoly_1 = bigint_nondet_rem!(ctx, x2443, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2446, x6, 4), x2447, 4), x2443, 4),
        24387,
        2,
    )?;
    let x2448: BytePoly_2 = bigint_mul!(x2409, x2409, 2);
    let x2449: BytePoly_3 = bigint_nondet_quot!(ctx, x2448, x6, 3);
    let x2450: BytePoly_1 = bigint_nondet_rem!(ctx, x2448, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2449, x6, 4), x2450, 4), x2448, 4),
        24387,
        2,
    )?;
    let x2451: BytePoly_2 = bigint_add!(bigint_mul!(x2450, x0, 2), x5, 2);
    let x2452: BytePoly_3 = bigint_nondet_quot!(ctx, x2451, x6, 3);
    let x2453: BytePoly_1 = bigint_nondet_rem!(ctx, x2451, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2452, x6, 4), x2453, 4), x2451, 4),
        24387,
        2,
    )?;
    let x2454: BytePoly_1 = bigint_add!(x2415, x2415, 1);
    let x2455: BytePoly_1 = bigint_nondet_quot!(ctx, x2454, x6, 1);
    let x2456: BytePoly_1 = bigint_nondet_rem!(ctx, x2454, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2455, x6, 2), x2456, 2), x2454, 2),
        8131,
        2,
    )?;
    let x2457: BytePoly_1 = bigint_nondet_inv!(ctx, x2456, x6, 1);
    let x2458: BytePoly_2 = bigint_mul!(x2456, x2457, 2);
    let x2459: BytePoly_3 = bigint_nondet_quot!(ctx, x2458, x6, 3);
    let x2460: BytePoly_1 = bigint_nondet_rem!(ctx, x2458, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2459, x6, 4), x2460, 4), x2458, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2460, x3, 1), 34, 1)?;
    let x2461: BytePoly_2 = bigint_mul!(x2453, x2457, 2);
    let x2462: BytePoly_3 = bigint_nondet_quot!(ctx, x2461, x6, 3);
    let x2463: BytePoly_1 = bigint_nondet_rem!(ctx, x2461, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2462, x6, 4), x2463, 4), x2461, 4),
        24387,
        2,
    )?;
    let x2464: BytePoly_2 = bigint_mul!(x2463, x2409, 2);
    let x2465: BytePoly_3 = bigint_nondet_quot!(ctx, x2464, x6, 3);
    let x2466: BytePoly_1 = bigint_nondet_rem!(ctx, x2464, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2465, x6, 4), x2466, 4), x2464, 4),
        24387,
        2,
    )?;
    let x2467: BytePoly_1 = bigint_add!(bigint_sub!(x2415, x2466, 1), x6, 1);
    let x2468: BytePoly_1 = bigint_nondet_quot!(ctx, x2467, x6, 1);
    let x2469: BytePoly_1 = bigint_nondet_rem!(ctx, x2467, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2468, x6, 2), x2469, 2), x2467, 2),
        8131,
        2,
    )?;
    let x2470: BytePoly_2 = bigint_mul!(x2463, x2463, 2);
    let x2471: BytePoly_3 = bigint_nondet_quot!(ctx, x2470, x6, 3);
    let x2472: BytePoly_1 = bigint_nondet_rem!(ctx, x2470, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2471, x6, 4), x2472, 4), x2470, 4),
        24387,
        2,
    )?;
    let x2473: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2472, x2409, 1), x6, 1), x2409, 1),
        x6,
        1
    );
    let x2474: BytePoly_1 = bigint_nondet_quot!(ctx, x2473, x6, 1);
    let x2475: BytePoly_1 = bigint_nondet_rem!(ctx, x2473, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2474, x6, 2), x2475, 2), x2473, 2),
        8131,
        2,
    )?;
    let x2476: BytePoly_2 = bigint_mul!(x2463, x2475, 2);
    let x2477: BytePoly_3 = bigint_nondet_quot!(ctx, x2476, x6, 3);
    let x2478: BytePoly_1 = bigint_nondet_rem!(ctx, x2476, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2477, x6, 4), x2478, 4), x2476, 4),
        24387,
        2,
    )?;
    let x2479: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2478, x2469, 1), 1), x6, 1);
    let x2480: BytePoly_1 = bigint_nondet_quot!(ctx, x2479, x6, 1);
    let x2481: BytePoly_1 = bigint_nondet_rem!(ctx, x2479, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2480, x6, 2), x2481, 2), x2479, 2),
        8131,
        2,
    )?;
    let x2482: BytePoly_1 = bigint_nondet_rem!(ctx, x2417, x2, 1);
    let x2483: BytePoly_2 = bigint_nondet_quot!(ctx, x2417, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2483, x2, 3), x2482, 3), x2417, 3),
        16259,
        2,
    )?;
    let x2484: BytePoly_1 = bigint_sub!(x3, x2482, 1);
    eqz(ctx, &bigint_mul!(x2482, x2484, 2), 8131, 2)?;
    let x2485: BytePoly_1 = bigint_add!(bigint_sub!(x2475, x2445, 1), x6, 1);
    let x2486: BytePoly_1 = bigint_nondet_inv!(ctx, x2485, x6, 1);
    let x2487: BytePoly_2 = bigint_mul!(x2485, x2486, 2);
    let x2488: BytePoly_3 = bigint_nondet_quot!(ctx, x2487, x6, 3);
    let x2489: BytePoly_1 = bigint_nondet_rem!(ctx, x2487, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2488, x6, 4), x2489, 4), x2487, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2489, x1, 1), 34, 1)?;
    let x2490: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2481, x2447, 1), x6, 1), x2486, 2);
    let x2491: BytePoly_3 = bigint_nondet_quot!(ctx, x2490, x6, 3);
    let x2492: BytePoly_1 = bigint_nondet_rem!(ctx, x2490, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2491, x6, 4), x2492, 4), x2490, 4),
        24387,
        2,
    )?;
    let x2493: BytePoly_2 = bigint_mul!(x2492, x2445, 2);
    let x2494: BytePoly_3 = bigint_nondet_quot!(ctx, x2493, x6, 3);
    let x2495: BytePoly_1 = bigint_nondet_rem!(ctx, x2493, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2494, x6, 4), x2495, 4), x2493, 4),
        24387,
        2,
    )?;
    let x2496: BytePoly_1 = bigint_add!(bigint_sub!(x2447, x2495, 1), x6, 1);
    let x2497: BytePoly_1 = bigint_nondet_quot!(ctx, x2496, x6, 1);
    let x2498: BytePoly_1 = bigint_nondet_rem!(ctx, x2496, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2497, x6, 2), x2498, 2), x2496, 2),
        8131,
        2,
    )?;
    let x2499: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2492, x2492, 2), x2445, 2), x6, 2),
            x2475,
            2
        ),
        x6,
        2
    );
    let x2500: BytePoly_3 = bigint_nondet_quot!(ctx, x2499, x6, 3);
    let x2501: BytePoly_1 = bigint_nondet_rem!(ctx, x2499, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2500, x6, 4), x2501, 4), x2499, 4),
        24387,
        2,
    )?;
    let x2502: BytePoly_2 = bigint_mul!(x2492, x2501, 2);
    let x2503: BytePoly_3 = bigint_nondet_quot!(ctx, x2502, x6, 3);
    let x2504: BytePoly_1 = bigint_nondet_rem!(ctx, x2502, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2503, x6, 4), x2504, 4), x2502, 4),
        24387,
        2,
    )?;
    let x2505: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2504, x2498, 1), 1), x6, 1);
    let x2506: BytePoly_1 = bigint_nondet_quot!(ctx, x2505, x6, 1);
    let x2507: BytePoly_1 = bigint_nondet_rem!(ctx, x2505, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2506, x6, 2), x2507, 2), x2505, 2),
        8131,
        2,
    )?;
    let x2508: BytePoly_2 = bigint_add!(
        bigint_mul!(x2501, x2482, 2),
        bigint_mul!(x2445, x2484, 2),
        2
    );
    let x2509: BytePoly_2 = bigint_add!(
        bigint_mul!(x2507, x2482, 2),
        bigint_mul!(x2447, x2484, 2),
        2
    );
    let x2510: BytePoly_3 = bigint_nondet_quot!(ctx, x2508, x6, 3);
    let x2511: BytePoly_1 = bigint_nondet_rem!(ctx, x2508, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2510, x6, 4), x2511, 4), x2508, 4),
        24387,
        2,
    )?;
    let x2512: BytePoly_3 = bigint_nondet_quot!(ctx, x2509, x6, 3);
    let x2513: BytePoly_1 = bigint_nondet_rem!(ctx, x2509, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2512, x6, 4), x2513, 4), x2509, 4),
        24387,
        2,
    )?;
    let x2514: BytePoly_2 = bigint_mul!(x2475, x2475, 2);
    let x2515: BytePoly_3 = bigint_nondet_quot!(ctx, x2514, x6, 3);
    let x2516: BytePoly_1 = bigint_nondet_rem!(ctx, x2514, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2515, x6, 4), x2516, 4), x2514, 4),
        24387,
        2,
    )?;
    let x2517: BytePoly_2 = bigint_add!(bigint_mul!(x2516, x0, 2), x5, 2);
    let x2518: BytePoly_3 = bigint_nondet_quot!(ctx, x2517, x6, 3);
    let x2519: BytePoly_1 = bigint_nondet_rem!(ctx, x2517, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2518, x6, 4), x2519, 4), x2517, 4),
        24387,
        2,
    )?;
    let x2520: BytePoly_1 = bigint_add!(x2481, x2481, 1);
    let x2521: BytePoly_1 = bigint_nondet_quot!(ctx, x2520, x6, 1);
    let x2522: BytePoly_1 = bigint_nondet_rem!(ctx, x2520, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2521, x6, 2), x2522, 2), x2520, 2),
        8131,
        2,
    )?;
    let x2523: BytePoly_1 = bigint_nondet_inv!(ctx, x2522, x6, 1);
    let x2524: BytePoly_2 = bigint_mul!(x2522, x2523, 2);
    let x2525: BytePoly_3 = bigint_nondet_quot!(ctx, x2524, x6, 3);
    let x2526: BytePoly_1 = bigint_nondet_rem!(ctx, x2524, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2525, x6, 4), x2526, 4), x2524, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2526, x3, 1), 34, 1)?;
    let x2527: BytePoly_2 = bigint_mul!(x2519, x2523, 2);
    let x2528: BytePoly_3 = bigint_nondet_quot!(ctx, x2527, x6, 3);
    let x2529: BytePoly_1 = bigint_nondet_rem!(ctx, x2527, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2528, x6, 4), x2529, 4), x2527, 4),
        24387,
        2,
    )?;
    let x2530: BytePoly_2 = bigint_mul!(x2529, x2475, 2);
    let x2531: BytePoly_3 = bigint_nondet_quot!(ctx, x2530, x6, 3);
    let x2532: BytePoly_1 = bigint_nondet_rem!(ctx, x2530, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2531, x6, 4), x2532, 4), x2530, 4),
        24387,
        2,
    )?;
    let x2533: BytePoly_1 = bigint_add!(bigint_sub!(x2481, x2532, 1), x6, 1);
    let x2534: BytePoly_1 = bigint_nondet_quot!(ctx, x2533, x6, 1);
    let x2535: BytePoly_1 = bigint_nondet_rem!(ctx, x2533, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2534, x6, 2), x2535, 2), x2533, 2),
        8131,
        2,
    )?;
    let x2536: BytePoly_2 = bigint_mul!(x2529, x2529, 2);
    let x2537: BytePoly_3 = bigint_nondet_quot!(ctx, x2536, x6, 3);
    let x2538: BytePoly_1 = bigint_nondet_rem!(ctx, x2536, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2537, x6, 4), x2538, 4), x2536, 4),
        24387,
        2,
    )?;
    let x2539: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2538, x2475, 1), x6, 1), x2475, 1),
        x6,
        1
    );
    let x2540: BytePoly_1 = bigint_nondet_quot!(ctx, x2539, x6, 1);
    let x2541: BytePoly_1 = bigint_nondet_rem!(ctx, x2539, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2540, x6, 2), x2541, 2), x2539, 2),
        8131,
        2,
    )?;
    let x2542: BytePoly_2 = bigint_mul!(x2529, x2541, 2);
    let x2543: BytePoly_3 = bigint_nondet_quot!(ctx, x2542, x6, 3);
    let x2544: BytePoly_1 = bigint_nondet_rem!(ctx, x2542, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2543, x6, 4), x2544, 4), x2542, 4),
        24387,
        2,
    )?;
    let x2545: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2544, x2535, 1), 1), x6, 1);
    let x2546: BytePoly_1 = bigint_nondet_quot!(ctx, x2545, x6, 1);
    let x2547: BytePoly_1 = bigint_nondet_rem!(ctx, x2545, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2546, x6, 2), x2547, 2), x2545, 2),
        8131,
        2,
    )?;
    let x2548: BytePoly_1 = bigint_nondet_rem!(ctx, x2483, x2, 1);
    let x2549: BytePoly_2 = bigint_nondet_quot!(ctx, x2483, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2549, x2, 3), x2548, 3), x2483, 3),
        16259,
        2,
    )?;
    let x2550: BytePoly_1 = bigint_sub!(x3, x2548, 1);
    eqz(ctx, &bigint_mul!(x2548, x2550, 2), 8131, 2)?;
    let x2551: BytePoly_1 = bigint_add!(bigint_sub!(x2541, x2511, 1), x6, 1);
    let x2552: BytePoly_1 = bigint_nondet_inv!(ctx, x2551, x6, 1);
    let x2553: BytePoly_2 = bigint_mul!(x2551, x2552, 2);
    let x2554: BytePoly_3 = bigint_nondet_quot!(ctx, x2553, x6, 3);
    let x2555: BytePoly_1 = bigint_nondet_rem!(ctx, x2553, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2554, x6, 4), x2555, 4), x2553, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2555, x1, 1), 34, 1)?;
    let x2556: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2547, x2513, 1), x6, 1), x2552, 2);
    let x2557: BytePoly_3 = bigint_nondet_quot!(ctx, x2556, x6, 3);
    let x2558: BytePoly_1 = bigint_nondet_rem!(ctx, x2556, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2557, x6, 4), x2558, 4), x2556, 4),
        24387,
        2,
    )?;
    let x2559: BytePoly_2 = bigint_mul!(x2558, x2511, 2);
    let x2560: BytePoly_3 = bigint_nondet_quot!(ctx, x2559, x6, 3);
    let x2561: BytePoly_1 = bigint_nondet_rem!(ctx, x2559, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2560, x6, 4), x2561, 4), x2559, 4),
        24387,
        2,
    )?;
    let x2562: BytePoly_1 = bigint_add!(bigint_sub!(x2513, x2561, 1), x6, 1);
    let x2563: BytePoly_1 = bigint_nondet_quot!(ctx, x2562, x6, 1);
    let x2564: BytePoly_1 = bigint_nondet_rem!(ctx, x2562, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2563, x6, 2), x2564, 2), x2562, 2),
        8131,
        2,
    )?;
    let x2565: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2558, x2558, 2), x2511, 2), x6, 2),
            x2541,
            2
        ),
        x6,
        2
    );
    let x2566: BytePoly_3 = bigint_nondet_quot!(ctx, x2565, x6, 3);
    let x2567: BytePoly_1 = bigint_nondet_rem!(ctx, x2565, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2566, x6, 4), x2567, 4), x2565, 4),
        24387,
        2,
    )?;
    let x2568: BytePoly_2 = bigint_mul!(x2558, x2567, 2);
    let x2569: BytePoly_3 = bigint_nondet_quot!(ctx, x2568, x6, 3);
    let x2570: BytePoly_1 = bigint_nondet_rem!(ctx, x2568, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2569, x6, 4), x2570, 4), x2568, 4),
        24387,
        2,
    )?;
    let x2571: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2570, x2564, 1), 1), x6, 1);
    let x2572: BytePoly_1 = bigint_nondet_quot!(ctx, x2571, x6, 1);
    let x2573: BytePoly_1 = bigint_nondet_rem!(ctx, x2571, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2572, x6, 2), x2573, 2), x2571, 2),
        8131,
        2,
    )?;
    let x2574: BytePoly_2 = bigint_add!(
        bigint_mul!(x2567, x2548, 2),
        bigint_mul!(x2511, x2550, 2),
        2
    );
    let x2575: BytePoly_2 = bigint_add!(
        bigint_mul!(x2573, x2548, 2),
        bigint_mul!(x2513, x2550, 2),
        2
    );
    let x2576: BytePoly_3 = bigint_nondet_quot!(ctx, x2574, x6, 3);
    let x2577: BytePoly_1 = bigint_nondet_rem!(ctx, x2574, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2576, x6, 4), x2577, 4), x2574, 4),
        24387,
        2,
    )?;
    let x2578: BytePoly_3 = bigint_nondet_quot!(ctx, x2575, x6, 3);
    let x2579: BytePoly_1 = bigint_nondet_rem!(ctx, x2575, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2578, x6, 4), x2579, 4), x2575, 4),
        24387,
        2,
    )?;
    let x2580: BytePoly_2 = bigint_mul!(x2541, x2541, 2);
    let x2581: BytePoly_3 = bigint_nondet_quot!(ctx, x2580, x6, 3);
    let x2582: BytePoly_1 = bigint_nondet_rem!(ctx, x2580, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2581, x6, 4), x2582, 4), x2580, 4),
        24387,
        2,
    )?;
    let x2583: BytePoly_2 = bigint_add!(bigint_mul!(x2582, x0, 2), x5, 2);
    let x2584: BytePoly_3 = bigint_nondet_quot!(ctx, x2583, x6, 3);
    let x2585: BytePoly_1 = bigint_nondet_rem!(ctx, x2583, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2584, x6, 4), x2585, 4), x2583, 4),
        24387,
        2,
    )?;
    let x2586: BytePoly_1 = bigint_add!(x2547, x2547, 1);
    let x2587: BytePoly_1 = bigint_nondet_quot!(ctx, x2586, x6, 1);
    let x2588: BytePoly_1 = bigint_nondet_rem!(ctx, x2586, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2587, x6, 2), x2588, 2), x2586, 2),
        8131,
        2,
    )?;
    let x2589: BytePoly_1 = bigint_nondet_inv!(ctx, x2588, x6, 1);
    let x2590: BytePoly_2 = bigint_mul!(x2588, x2589, 2);
    let x2591: BytePoly_3 = bigint_nondet_quot!(ctx, x2590, x6, 3);
    let x2592: BytePoly_1 = bigint_nondet_rem!(ctx, x2590, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2591, x6, 4), x2592, 4), x2590, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2592, x3, 1), 34, 1)?;
    let x2593: BytePoly_2 = bigint_mul!(x2585, x2589, 2);
    let x2594: BytePoly_3 = bigint_nondet_quot!(ctx, x2593, x6, 3);
    let x2595: BytePoly_1 = bigint_nondet_rem!(ctx, x2593, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2594, x6, 4), x2595, 4), x2593, 4),
        24387,
        2,
    )?;
    let x2596: BytePoly_2 = bigint_mul!(x2595, x2541, 2);
    let x2597: BytePoly_3 = bigint_nondet_quot!(ctx, x2596, x6, 3);
    let x2598: BytePoly_1 = bigint_nondet_rem!(ctx, x2596, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2597, x6, 4), x2598, 4), x2596, 4),
        24387,
        2,
    )?;
    let x2599: BytePoly_1 = bigint_add!(bigint_sub!(x2547, x2598, 1), x6, 1);
    let x2600: BytePoly_1 = bigint_nondet_quot!(ctx, x2599, x6, 1);
    let x2601: BytePoly_1 = bigint_nondet_rem!(ctx, x2599, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2600, x6, 2), x2601, 2), x2599, 2),
        8131,
        2,
    )?;
    let x2602: BytePoly_2 = bigint_mul!(x2595, x2595, 2);
    let x2603: BytePoly_3 = bigint_nondet_quot!(ctx, x2602, x6, 3);
    let x2604: BytePoly_1 = bigint_nondet_rem!(ctx, x2602, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2603, x6, 4), x2604, 4), x2602, 4),
        24387,
        2,
    )?;
    let x2605: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2604, x2541, 1), x6, 1), x2541, 1),
        x6,
        1
    );
    let x2606: BytePoly_1 = bigint_nondet_quot!(ctx, x2605, x6, 1);
    let x2607: BytePoly_1 = bigint_nondet_rem!(ctx, x2605, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2606, x6, 2), x2607, 2), x2605, 2),
        8131,
        2,
    )?;
    let x2608: BytePoly_2 = bigint_mul!(x2595, x2607, 2);
    let x2609: BytePoly_3 = bigint_nondet_quot!(ctx, x2608, x6, 3);
    let x2610: BytePoly_1 = bigint_nondet_rem!(ctx, x2608, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2609, x6, 4), x2610, 4), x2608, 4),
        24387,
        2,
    )?;
    let x2611: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2610, x2601, 1), 1), x6, 1);
    let x2612: BytePoly_1 = bigint_nondet_quot!(ctx, x2611, x6, 1);
    let x2613: BytePoly_1 = bigint_nondet_rem!(ctx, x2611, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2612, x6, 2), x2613, 2), x2611, 2),
        8131,
        2,
    )?;
    let x2614: BytePoly_1 = bigint_nondet_rem!(ctx, x2549, x2, 1);
    let x2615: BytePoly_2 = bigint_nondet_quot!(ctx, x2549, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2615, x2, 3), x2614, 3), x2549, 3),
        16259,
        2,
    )?;
    let x2616: BytePoly_1 = bigint_sub!(x3, x2614, 1);
    eqz(ctx, &bigint_mul!(x2614, x2616, 2), 8131, 2)?;
    let x2617: BytePoly_1 = bigint_add!(bigint_sub!(x2607, x2577, 1), x6, 1);
    let x2618: BytePoly_1 = bigint_nondet_inv!(ctx, x2617, x6, 1);
    let x2619: BytePoly_2 = bigint_mul!(x2617, x2618, 2);
    let x2620: BytePoly_3 = bigint_nondet_quot!(ctx, x2619, x6, 3);
    let x2621: BytePoly_1 = bigint_nondet_rem!(ctx, x2619, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2620, x6, 4), x2621, 4), x2619, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2621, x1, 1), 34, 1)?;
    let x2622: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2613, x2579, 1), x6, 1), x2618, 2);
    let x2623: BytePoly_3 = bigint_nondet_quot!(ctx, x2622, x6, 3);
    let x2624: BytePoly_1 = bigint_nondet_rem!(ctx, x2622, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2623, x6, 4), x2624, 4), x2622, 4),
        24387,
        2,
    )?;
    let x2625: BytePoly_2 = bigint_mul!(x2624, x2577, 2);
    let x2626: BytePoly_3 = bigint_nondet_quot!(ctx, x2625, x6, 3);
    let x2627: BytePoly_1 = bigint_nondet_rem!(ctx, x2625, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2626, x6, 4), x2627, 4), x2625, 4),
        24387,
        2,
    )?;
    let x2628: BytePoly_1 = bigint_add!(bigint_sub!(x2579, x2627, 1), x6, 1);
    let x2629: BytePoly_1 = bigint_nondet_quot!(ctx, x2628, x6, 1);
    let x2630: BytePoly_1 = bigint_nondet_rem!(ctx, x2628, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2629, x6, 2), x2630, 2), x2628, 2),
        8131,
        2,
    )?;
    let x2631: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2624, x2624, 2), x2577, 2), x6, 2),
            x2607,
            2
        ),
        x6,
        2
    );
    let x2632: BytePoly_3 = bigint_nondet_quot!(ctx, x2631, x6, 3);
    let x2633: BytePoly_1 = bigint_nondet_rem!(ctx, x2631, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2632, x6, 4), x2633, 4), x2631, 4),
        24387,
        2,
    )?;
    let x2634: BytePoly_2 = bigint_mul!(x2624, x2633, 2);
    let x2635: BytePoly_3 = bigint_nondet_quot!(ctx, x2634, x6, 3);
    let x2636: BytePoly_1 = bigint_nondet_rem!(ctx, x2634, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2635, x6, 4), x2636, 4), x2634, 4),
        24387,
        2,
    )?;
    let x2637: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2636, x2630, 1), 1), x6, 1);
    let x2638: BytePoly_1 = bigint_nondet_quot!(ctx, x2637, x6, 1);
    let x2639: BytePoly_1 = bigint_nondet_rem!(ctx, x2637, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2638, x6, 2), x2639, 2), x2637, 2),
        8131,
        2,
    )?;
    let x2640: BytePoly_2 = bigint_add!(
        bigint_mul!(x2633, x2614, 2),
        bigint_mul!(x2577, x2616, 2),
        2
    );
    let x2641: BytePoly_2 = bigint_add!(
        bigint_mul!(x2639, x2614, 2),
        bigint_mul!(x2579, x2616, 2),
        2
    );
    let x2642: BytePoly_3 = bigint_nondet_quot!(ctx, x2640, x6, 3);
    let x2643: BytePoly_1 = bigint_nondet_rem!(ctx, x2640, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2642, x6, 4), x2643, 4), x2640, 4),
        24387,
        2,
    )?;
    let x2644: BytePoly_3 = bigint_nondet_quot!(ctx, x2641, x6, 3);
    let x2645: BytePoly_1 = bigint_nondet_rem!(ctx, x2641, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2644, x6, 4), x2645, 4), x2641, 4),
        24387,
        2,
    )?;
    let x2646: BytePoly_2 = bigint_mul!(x2607, x2607, 2);
    let x2647: BytePoly_3 = bigint_nondet_quot!(ctx, x2646, x6, 3);
    let x2648: BytePoly_1 = bigint_nondet_rem!(ctx, x2646, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2647, x6, 4), x2648, 4), x2646, 4),
        24387,
        2,
    )?;
    let x2649: BytePoly_2 = bigint_add!(bigint_mul!(x2648, x0, 2), x5, 2);
    let x2650: BytePoly_3 = bigint_nondet_quot!(ctx, x2649, x6, 3);
    let x2651: BytePoly_1 = bigint_nondet_rem!(ctx, x2649, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2650, x6, 4), x2651, 4), x2649, 4),
        24387,
        2,
    )?;
    let x2652: BytePoly_1 = bigint_add!(x2613, x2613, 1);
    let x2653: BytePoly_1 = bigint_nondet_quot!(ctx, x2652, x6, 1);
    let x2654: BytePoly_1 = bigint_nondet_rem!(ctx, x2652, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2653, x6, 2), x2654, 2), x2652, 2),
        8131,
        2,
    )?;
    let x2655: BytePoly_1 = bigint_nondet_inv!(ctx, x2654, x6, 1);
    let x2656: BytePoly_2 = bigint_mul!(x2654, x2655, 2);
    let x2657: BytePoly_3 = bigint_nondet_quot!(ctx, x2656, x6, 3);
    let x2658: BytePoly_1 = bigint_nondet_rem!(ctx, x2656, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2657, x6, 4), x2658, 4), x2656, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2658, x3, 1), 34, 1)?;
    let x2659: BytePoly_2 = bigint_mul!(x2651, x2655, 2);
    let x2660: BytePoly_3 = bigint_nondet_quot!(ctx, x2659, x6, 3);
    let x2661: BytePoly_1 = bigint_nondet_rem!(ctx, x2659, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2660, x6, 4), x2661, 4), x2659, 4),
        24387,
        2,
    )?;
    let x2662: BytePoly_2 = bigint_mul!(x2661, x2607, 2);
    let x2663: BytePoly_3 = bigint_nondet_quot!(ctx, x2662, x6, 3);
    let x2664: BytePoly_1 = bigint_nondet_rem!(ctx, x2662, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2663, x6, 4), x2664, 4), x2662, 4),
        24387,
        2,
    )?;
    let x2665: BytePoly_1 = bigint_add!(bigint_sub!(x2613, x2664, 1), x6, 1);
    let x2666: BytePoly_1 = bigint_nondet_quot!(ctx, x2665, x6, 1);
    let x2667: BytePoly_1 = bigint_nondet_rem!(ctx, x2665, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2666, x6, 2), x2667, 2), x2665, 2),
        8131,
        2,
    )?;
    let x2668: BytePoly_2 = bigint_mul!(x2661, x2661, 2);
    let x2669: BytePoly_3 = bigint_nondet_quot!(ctx, x2668, x6, 3);
    let x2670: BytePoly_1 = bigint_nondet_rem!(ctx, x2668, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2669, x6, 4), x2670, 4), x2668, 4),
        24387,
        2,
    )?;
    let x2671: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2670, x2607, 1), x6, 1), x2607, 1),
        x6,
        1
    );
    let x2672: BytePoly_1 = bigint_nondet_quot!(ctx, x2671, x6, 1);
    let x2673: BytePoly_1 = bigint_nondet_rem!(ctx, x2671, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2672, x6, 2), x2673, 2), x2671, 2),
        8131,
        2,
    )?;
    let x2674: BytePoly_2 = bigint_mul!(x2661, x2673, 2);
    let x2675: BytePoly_3 = bigint_nondet_quot!(ctx, x2674, x6, 3);
    let x2676: BytePoly_1 = bigint_nondet_rem!(ctx, x2674, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2675, x6, 4), x2676, 4), x2674, 4),
        24387,
        2,
    )?;
    let x2677: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2676, x2667, 1), 1), x6, 1);
    let x2678: BytePoly_1 = bigint_nondet_quot!(ctx, x2677, x6, 1);
    let x2679: BytePoly_1 = bigint_nondet_rem!(ctx, x2677, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2678, x6, 2), x2679, 2), x2677, 2),
        8131,
        2,
    )?;
    let x2680: BytePoly_1 = bigint_nondet_rem!(ctx, x2615, x2, 1);
    let x2681: BytePoly_2 = bigint_nondet_quot!(ctx, x2615, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2681, x2, 3), x2680, 3), x2615, 3),
        16259,
        2,
    )?;
    let x2682: BytePoly_1 = bigint_sub!(x3, x2680, 1);
    eqz(ctx, &bigint_mul!(x2680, x2682, 2), 8131, 2)?;
    let x2683: BytePoly_1 = bigint_add!(bigint_sub!(x2673, x2643, 1), x6, 1);
    let x2684: BytePoly_1 = bigint_nondet_inv!(ctx, x2683, x6, 1);
    let x2685: BytePoly_2 = bigint_mul!(x2683, x2684, 2);
    let x2686: BytePoly_3 = bigint_nondet_quot!(ctx, x2685, x6, 3);
    let x2687: BytePoly_1 = bigint_nondet_rem!(ctx, x2685, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2686, x6, 4), x2687, 4), x2685, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2687, x1, 1), 34, 1)?;
    let x2688: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2679, x2645, 1), x6, 1), x2684, 2);
    let x2689: BytePoly_3 = bigint_nondet_quot!(ctx, x2688, x6, 3);
    let x2690: BytePoly_1 = bigint_nondet_rem!(ctx, x2688, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2689, x6, 4), x2690, 4), x2688, 4),
        24387,
        2,
    )?;
    let x2691: BytePoly_2 = bigint_mul!(x2690, x2643, 2);
    let x2692: BytePoly_3 = bigint_nondet_quot!(ctx, x2691, x6, 3);
    let x2693: BytePoly_1 = bigint_nondet_rem!(ctx, x2691, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2692, x6, 4), x2693, 4), x2691, 4),
        24387,
        2,
    )?;
    let x2694: BytePoly_1 = bigint_add!(bigint_sub!(x2645, x2693, 1), x6, 1);
    let x2695: BytePoly_1 = bigint_nondet_quot!(ctx, x2694, x6, 1);
    let x2696: BytePoly_1 = bigint_nondet_rem!(ctx, x2694, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2695, x6, 2), x2696, 2), x2694, 2),
        8131,
        2,
    )?;
    let x2697: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2690, x2690, 2), x2643, 2), x6, 2),
            x2673,
            2
        ),
        x6,
        2
    );
    let x2698: BytePoly_3 = bigint_nondet_quot!(ctx, x2697, x6, 3);
    let x2699: BytePoly_1 = bigint_nondet_rem!(ctx, x2697, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2698, x6, 4), x2699, 4), x2697, 4),
        24387,
        2,
    )?;
    let x2700: BytePoly_2 = bigint_mul!(x2690, x2699, 2);
    let x2701: BytePoly_3 = bigint_nondet_quot!(ctx, x2700, x6, 3);
    let x2702: BytePoly_1 = bigint_nondet_rem!(ctx, x2700, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2701, x6, 4), x2702, 4), x2700, 4),
        24387,
        2,
    )?;
    let x2703: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2702, x2696, 1), 1), x6, 1);
    let x2704: BytePoly_1 = bigint_nondet_quot!(ctx, x2703, x6, 1);
    let x2705: BytePoly_1 = bigint_nondet_rem!(ctx, x2703, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2704, x6, 2), x2705, 2), x2703, 2),
        8131,
        2,
    )?;
    let x2706: BytePoly_2 = bigint_add!(
        bigint_mul!(x2699, x2680, 2),
        bigint_mul!(x2643, x2682, 2),
        2
    );
    let x2707: BytePoly_2 = bigint_add!(
        bigint_mul!(x2705, x2680, 2),
        bigint_mul!(x2645, x2682, 2),
        2
    );
    let x2708: BytePoly_3 = bigint_nondet_quot!(ctx, x2706, x6, 3);
    let x2709: BytePoly_1 = bigint_nondet_rem!(ctx, x2706, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2708, x6, 4), x2709, 4), x2706, 4),
        24387,
        2,
    )?;
    let x2710: BytePoly_3 = bigint_nondet_quot!(ctx, x2707, x6, 3);
    let x2711: BytePoly_1 = bigint_nondet_rem!(ctx, x2707, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2710, x6, 4), x2711, 4), x2707, 4),
        24387,
        2,
    )?;
    let x2712: BytePoly_2 = bigint_mul!(x2673, x2673, 2);
    let x2713: BytePoly_3 = bigint_nondet_quot!(ctx, x2712, x6, 3);
    let x2714: BytePoly_1 = bigint_nondet_rem!(ctx, x2712, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2713, x6, 4), x2714, 4), x2712, 4),
        24387,
        2,
    )?;
    let x2715: BytePoly_2 = bigint_add!(bigint_mul!(x2714, x0, 2), x5, 2);
    let x2716: BytePoly_3 = bigint_nondet_quot!(ctx, x2715, x6, 3);
    let x2717: BytePoly_1 = bigint_nondet_rem!(ctx, x2715, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2716, x6, 4), x2717, 4), x2715, 4),
        24387,
        2,
    )?;
    let x2718: BytePoly_1 = bigint_add!(x2679, x2679, 1);
    let x2719: BytePoly_1 = bigint_nondet_quot!(ctx, x2718, x6, 1);
    let x2720: BytePoly_1 = bigint_nondet_rem!(ctx, x2718, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2719, x6, 2), x2720, 2), x2718, 2),
        8131,
        2,
    )?;
    let x2721: BytePoly_1 = bigint_nondet_inv!(ctx, x2720, x6, 1);
    let x2722: BytePoly_2 = bigint_mul!(x2720, x2721, 2);
    let x2723: BytePoly_3 = bigint_nondet_quot!(ctx, x2722, x6, 3);
    let x2724: BytePoly_1 = bigint_nondet_rem!(ctx, x2722, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2723, x6, 4), x2724, 4), x2722, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2724, x3, 1), 34, 1)?;
    let x2725: BytePoly_2 = bigint_mul!(x2717, x2721, 2);
    let x2726: BytePoly_3 = bigint_nondet_quot!(ctx, x2725, x6, 3);
    let x2727: BytePoly_1 = bigint_nondet_rem!(ctx, x2725, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2726, x6, 4), x2727, 4), x2725, 4),
        24387,
        2,
    )?;
    let x2728: BytePoly_2 = bigint_mul!(x2727, x2673, 2);
    let x2729: BytePoly_3 = bigint_nondet_quot!(ctx, x2728, x6, 3);
    let x2730: BytePoly_1 = bigint_nondet_rem!(ctx, x2728, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2729, x6, 4), x2730, 4), x2728, 4),
        24387,
        2,
    )?;
    let x2731: BytePoly_1 = bigint_add!(bigint_sub!(x2679, x2730, 1), x6, 1);
    let x2732: BytePoly_1 = bigint_nondet_quot!(ctx, x2731, x6, 1);
    let x2733: BytePoly_1 = bigint_nondet_rem!(ctx, x2731, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2732, x6, 2), x2733, 2), x2731, 2),
        8131,
        2,
    )?;
    let x2734: BytePoly_2 = bigint_mul!(x2727, x2727, 2);
    let x2735: BytePoly_3 = bigint_nondet_quot!(ctx, x2734, x6, 3);
    let x2736: BytePoly_1 = bigint_nondet_rem!(ctx, x2734, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2735, x6, 4), x2736, 4), x2734, 4),
        24387,
        2,
    )?;
    let x2737: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2736, x2673, 1), x6, 1), x2673, 1),
        x6,
        1
    );
    let x2738: BytePoly_1 = bigint_nondet_quot!(ctx, x2737, x6, 1);
    let x2739: BytePoly_1 = bigint_nondet_rem!(ctx, x2737, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2738, x6, 2), x2739, 2), x2737, 2),
        8131,
        2,
    )?;
    let x2740: BytePoly_2 = bigint_mul!(x2727, x2739, 2);
    let x2741: BytePoly_3 = bigint_nondet_quot!(ctx, x2740, x6, 3);
    let x2742: BytePoly_1 = bigint_nondet_rem!(ctx, x2740, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2741, x6, 4), x2742, 4), x2740, 4),
        24387,
        2,
    )?;
    let x2743: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2742, x2733, 1), 1), x6, 1);
    let x2744: BytePoly_1 = bigint_nondet_quot!(ctx, x2743, x6, 1);
    let x2745: BytePoly_1 = bigint_nondet_rem!(ctx, x2743, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2744, x6, 2), x2745, 2), x2743, 2),
        8131,
        2,
    )?;
    let x2746: BytePoly_1 = bigint_nondet_rem!(ctx, x2681, x2, 1);
    let x2747: BytePoly_2 = bigint_nondet_quot!(ctx, x2681, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2747, x2, 3), x2746, 3), x2681, 3),
        16259,
        2,
    )?;
    let x2748: BytePoly_1 = bigint_sub!(x3, x2746, 1);
    eqz(ctx, &bigint_mul!(x2746, x2748, 2), 8131, 2)?;
    let x2749: BytePoly_1 = bigint_add!(bigint_sub!(x2739, x2709, 1), x6, 1);
    let x2750: BytePoly_1 = bigint_nondet_inv!(ctx, x2749, x6, 1);
    let x2751: BytePoly_2 = bigint_mul!(x2749, x2750, 2);
    let x2752: BytePoly_3 = bigint_nondet_quot!(ctx, x2751, x6, 3);
    let x2753: BytePoly_1 = bigint_nondet_rem!(ctx, x2751, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2752, x6, 4), x2753, 4), x2751, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2753, x1, 1), 34, 1)?;
    let x2754: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2745, x2711, 1), x6, 1), x2750, 2);
    let x2755: BytePoly_3 = bigint_nondet_quot!(ctx, x2754, x6, 3);
    let x2756: BytePoly_1 = bigint_nondet_rem!(ctx, x2754, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2755, x6, 4), x2756, 4), x2754, 4),
        24387,
        2,
    )?;
    let x2757: BytePoly_2 = bigint_mul!(x2756, x2709, 2);
    let x2758: BytePoly_3 = bigint_nondet_quot!(ctx, x2757, x6, 3);
    let x2759: BytePoly_1 = bigint_nondet_rem!(ctx, x2757, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2758, x6, 4), x2759, 4), x2757, 4),
        24387,
        2,
    )?;
    let x2760: BytePoly_1 = bigint_add!(bigint_sub!(x2711, x2759, 1), x6, 1);
    let x2761: BytePoly_1 = bigint_nondet_quot!(ctx, x2760, x6, 1);
    let x2762: BytePoly_1 = bigint_nondet_rem!(ctx, x2760, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2761, x6, 2), x2762, 2), x2760, 2),
        8131,
        2,
    )?;
    let x2763: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2756, x2756, 2), x2709, 2), x6, 2),
            x2739,
            2
        ),
        x6,
        2
    );
    let x2764: BytePoly_3 = bigint_nondet_quot!(ctx, x2763, x6, 3);
    let x2765: BytePoly_1 = bigint_nondet_rem!(ctx, x2763, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2764, x6, 4), x2765, 4), x2763, 4),
        24387,
        2,
    )?;
    let x2766: BytePoly_2 = bigint_mul!(x2756, x2765, 2);
    let x2767: BytePoly_3 = bigint_nondet_quot!(ctx, x2766, x6, 3);
    let x2768: BytePoly_1 = bigint_nondet_rem!(ctx, x2766, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2767, x6, 4), x2768, 4), x2766, 4),
        24387,
        2,
    )?;
    let x2769: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2768, x2762, 1), 1), x6, 1);
    let x2770: BytePoly_1 = bigint_nondet_quot!(ctx, x2769, x6, 1);
    let x2771: BytePoly_1 = bigint_nondet_rem!(ctx, x2769, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2770, x6, 2), x2771, 2), x2769, 2),
        8131,
        2,
    )?;
    let x2772: BytePoly_2 = bigint_add!(
        bigint_mul!(x2765, x2746, 2),
        bigint_mul!(x2709, x2748, 2),
        2
    );
    let x2773: BytePoly_2 = bigint_add!(
        bigint_mul!(x2771, x2746, 2),
        bigint_mul!(x2711, x2748, 2),
        2
    );
    let x2774: BytePoly_3 = bigint_nondet_quot!(ctx, x2772, x6, 3);
    let x2775: BytePoly_1 = bigint_nondet_rem!(ctx, x2772, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2774, x6, 4), x2775, 4), x2772, 4),
        24387,
        2,
    )?;
    let x2776: BytePoly_3 = bigint_nondet_quot!(ctx, x2773, x6, 3);
    let x2777: BytePoly_1 = bigint_nondet_rem!(ctx, x2773, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2776, x6, 4), x2777, 4), x2773, 4),
        24387,
        2,
    )?;
    let x2778: BytePoly_2 = bigint_mul!(x2739, x2739, 2);
    let x2779: BytePoly_3 = bigint_nondet_quot!(ctx, x2778, x6, 3);
    let x2780: BytePoly_1 = bigint_nondet_rem!(ctx, x2778, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2779, x6, 4), x2780, 4), x2778, 4),
        24387,
        2,
    )?;
    let x2781: BytePoly_2 = bigint_add!(bigint_mul!(x2780, x0, 2), x5, 2);
    let x2782: BytePoly_3 = bigint_nondet_quot!(ctx, x2781, x6, 3);
    let x2783: BytePoly_1 = bigint_nondet_rem!(ctx, x2781, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2782, x6, 4), x2783, 4), x2781, 4),
        24387,
        2,
    )?;
    let x2784: BytePoly_1 = bigint_add!(x2745, x2745, 1);
    let x2785: BytePoly_1 = bigint_nondet_quot!(ctx, x2784, x6, 1);
    let x2786: BytePoly_1 = bigint_nondet_rem!(ctx, x2784, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2785, x6, 2), x2786, 2), x2784, 2),
        8131,
        2,
    )?;
    let x2787: BytePoly_1 = bigint_nondet_inv!(ctx, x2786, x6, 1);
    let x2788: BytePoly_2 = bigint_mul!(x2786, x2787, 2);
    let x2789: BytePoly_3 = bigint_nondet_quot!(ctx, x2788, x6, 3);
    let x2790: BytePoly_1 = bigint_nondet_rem!(ctx, x2788, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2789, x6, 4), x2790, 4), x2788, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2790, x3, 1), 34, 1)?;
    let x2791: BytePoly_2 = bigint_mul!(x2783, x2787, 2);
    let x2792: BytePoly_3 = bigint_nondet_quot!(ctx, x2791, x6, 3);
    let x2793: BytePoly_1 = bigint_nondet_rem!(ctx, x2791, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2792, x6, 4), x2793, 4), x2791, 4),
        24387,
        2,
    )?;
    let x2794: BytePoly_2 = bigint_mul!(x2793, x2739, 2);
    let x2795: BytePoly_3 = bigint_nondet_quot!(ctx, x2794, x6, 3);
    let x2796: BytePoly_1 = bigint_nondet_rem!(ctx, x2794, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2795, x6, 4), x2796, 4), x2794, 4),
        24387,
        2,
    )?;
    let x2797: BytePoly_1 = bigint_add!(bigint_sub!(x2745, x2796, 1), x6, 1);
    let x2798: BytePoly_1 = bigint_nondet_quot!(ctx, x2797, x6, 1);
    let x2799: BytePoly_1 = bigint_nondet_rem!(ctx, x2797, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2798, x6, 2), x2799, 2), x2797, 2),
        8131,
        2,
    )?;
    let x2800: BytePoly_2 = bigint_mul!(x2793, x2793, 2);
    let x2801: BytePoly_3 = bigint_nondet_quot!(ctx, x2800, x6, 3);
    let x2802: BytePoly_1 = bigint_nondet_rem!(ctx, x2800, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2801, x6, 4), x2802, 4), x2800, 4),
        24387,
        2,
    )?;
    let x2803: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2802, x2739, 1), x6, 1), x2739, 1),
        x6,
        1
    );
    let x2804: BytePoly_1 = bigint_nondet_quot!(ctx, x2803, x6, 1);
    let x2805: BytePoly_1 = bigint_nondet_rem!(ctx, x2803, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2804, x6, 2), x2805, 2), x2803, 2),
        8131,
        2,
    )?;
    let x2806: BytePoly_2 = bigint_mul!(x2793, x2805, 2);
    let x2807: BytePoly_3 = bigint_nondet_quot!(ctx, x2806, x6, 3);
    let x2808: BytePoly_1 = bigint_nondet_rem!(ctx, x2806, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2807, x6, 4), x2808, 4), x2806, 4),
        24387,
        2,
    )?;
    let x2809: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2808, x2799, 1), 1), x6, 1);
    let x2810: BytePoly_1 = bigint_nondet_quot!(ctx, x2809, x6, 1);
    let x2811: BytePoly_1 = bigint_nondet_rem!(ctx, x2809, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2810, x6, 2), x2811, 2), x2809, 2),
        8131,
        2,
    )?;
    let x2812: BytePoly_1 = bigint_nondet_rem!(ctx, x2747, x2, 1);
    let x2813: BytePoly_2 = bigint_nondet_quot!(ctx, x2747, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2813, x2, 3), x2812, 3), x2747, 3),
        16259,
        2,
    )?;
    let x2814: BytePoly_1 = bigint_sub!(x3, x2812, 1);
    eqz(ctx, &bigint_mul!(x2812, x2814, 2), 8131, 2)?;
    let x2815: BytePoly_1 = bigint_add!(bigint_sub!(x2805, x2775, 1), x6, 1);
    let x2816: BytePoly_1 = bigint_nondet_inv!(ctx, x2815, x6, 1);
    let x2817: BytePoly_2 = bigint_mul!(x2815, x2816, 2);
    let x2818: BytePoly_3 = bigint_nondet_quot!(ctx, x2817, x6, 3);
    let x2819: BytePoly_1 = bigint_nondet_rem!(ctx, x2817, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2818, x6, 4), x2819, 4), x2817, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2819, x1, 1), 34, 1)?;
    let x2820: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2811, x2777, 1), x6, 1), x2816, 2);
    let x2821: BytePoly_3 = bigint_nondet_quot!(ctx, x2820, x6, 3);
    let x2822: BytePoly_1 = bigint_nondet_rem!(ctx, x2820, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2821, x6, 4), x2822, 4), x2820, 4),
        24387,
        2,
    )?;
    let x2823: BytePoly_2 = bigint_mul!(x2822, x2775, 2);
    let x2824: BytePoly_3 = bigint_nondet_quot!(ctx, x2823, x6, 3);
    let x2825: BytePoly_1 = bigint_nondet_rem!(ctx, x2823, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2824, x6, 4), x2825, 4), x2823, 4),
        24387,
        2,
    )?;
    let x2826: BytePoly_1 = bigint_add!(bigint_sub!(x2777, x2825, 1), x6, 1);
    let x2827: BytePoly_1 = bigint_nondet_quot!(ctx, x2826, x6, 1);
    let x2828: BytePoly_1 = bigint_nondet_rem!(ctx, x2826, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2827, x6, 2), x2828, 2), x2826, 2),
        8131,
        2,
    )?;
    let x2829: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2822, x2822, 2), x2775, 2), x6, 2),
            x2805,
            2
        ),
        x6,
        2
    );
    let x2830: BytePoly_3 = bigint_nondet_quot!(ctx, x2829, x6, 3);
    let x2831: BytePoly_1 = bigint_nondet_rem!(ctx, x2829, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2830, x6, 4), x2831, 4), x2829, 4),
        24387,
        2,
    )?;
    let x2832: BytePoly_2 = bigint_mul!(x2822, x2831, 2);
    let x2833: BytePoly_3 = bigint_nondet_quot!(ctx, x2832, x6, 3);
    let x2834: BytePoly_1 = bigint_nondet_rem!(ctx, x2832, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2833, x6, 4), x2834, 4), x2832, 4),
        24387,
        2,
    )?;
    let x2835: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2834, x2828, 1), 1), x6, 1);
    let x2836: BytePoly_1 = bigint_nondet_quot!(ctx, x2835, x6, 1);
    let x2837: BytePoly_1 = bigint_nondet_rem!(ctx, x2835, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2836, x6, 2), x2837, 2), x2835, 2),
        8131,
        2,
    )?;
    let x2838: BytePoly_2 = bigint_add!(
        bigint_mul!(x2831, x2812, 2),
        bigint_mul!(x2775, x2814, 2),
        2
    );
    let x2839: BytePoly_2 = bigint_add!(
        bigint_mul!(x2837, x2812, 2),
        bigint_mul!(x2777, x2814, 2),
        2
    );
    let x2840: BytePoly_3 = bigint_nondet_quot!(ctx, x2838, x6, 3);
    let x2841: BytePoly_1 = bigint_nondet_rem!(ctx, x2838, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2840, x6, 4), x2841, 4), x2838, 4),
        24387,
        2,
    )?;
    let x2842: BytePoly_3 = bigint_nondet_quot!(ctx, x2839, x6, 3);
    let x2843: BytePoly_1 = bigint_nondet_rem!(ctx, x2839, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2842, x6, 4), x2843, 4), x2839, 4),
        24387,
        2,
    )?;
    let x2844: BytePoly_2 = bigint_mul!(x2805, x2805, 2);
    let x2845: BytePoly_3 = bigint_nondet_quot!(ctx, x2844, x6, 3);
    let x2846: BytePoly_1 = bigint_nondet_rem!(ctx, x2844, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2845, x6, 4), x2846, 4), x2844, 4),
        24387,
        2,
    )?;
    let x2847: BytePoly_2 = bigint_add!(bigint_mul!(x2846, x0, 2), x5, 2);
    let x2848: BytePoly_3 = bigint_nondet_quot!(ctx, x2847, x6, 3);
    let x2849: BytePoly_1 = bigint_nondet_rem!(ctx, x2847, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2848, x6, 4), x2849, 4), x2847, 4),
        24387,
        2,
    )?;
    let x2850: BytePoly_1 = bigint_add!(x2811, x2811, 1);
    let x2851: BytePoly_1 = bigint_nondet_quot!(ctx, x2850, x6, 1);
    let x2852: BytePoly_1 = bigint_nondet_rem!(ctx, x2850, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2851, x6, 2), x2852, 2), x2850, 2),
        8131,
        2,
    )?;
    let x2853: BytePoly_1 = bigint_nondet_inv!(ctx, x2852, x6, 1);
    let x2854: BytePoly_2 = bigint_mul!(x2852, x2853, 2);
    let x2855: BytePoly_3 = bigint_nondet_quot!(ctx, x2854, x6, 3);
    let x2856: BytePoly_1 = bigint_nondet_rem!(ctx, x2854, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2855, x6, 4), x2856, 4), x2854, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2856, x3, 1), 34, 1)?;
    let x2857: BytePoly_2 = bigint_mul!(x2849, x2853, 2);
    let x2858: BytePoly_3 = bigint_nondet_quot!(ctx, x2857, x6, 3);
    let x2859: BytePoly_1 = bigint_nondet_rem!(ctx, x2857, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2858, x6, 4), x2859, 4), x2857, 4),
        24387,
        2,
    )?;
    let x2860: BytePoly_2 = bigint_mul!(x2859, x2805, 2);
    let x2861: BytePoly_3 = bigint_nondet_quot!(ctx, x2860, x6, 3);
    let x2862: BytePoly_1 = bigint_nondet_rem!(ctx, x2860, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2861, x6, 4), x2862, 4), x2860, 4),
        24387,
        2,
    )?;
    let x2863: BytePoly_1 = bigint_add!(bigint_sub!(x2811, x2862, 1), x6, 1);
    let x2864: BytePoly_1 = bigint_nondet_quot!(ctx, x2863, x6, 1);
    let x2865: BytePoly_1 = bigint_nondet_rem!(ctx, x2863, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2864, x6, 2), x2865, 2), x2863, 2),
        8131,
        2,
    )?;
    let x2866: BytePoly_2 = bigint_mul!(x2859, x2859, 2);
    let x2867: BytePoly_3 = bigint_nondet_quot!(ctx, x2866, x6, 3);
    let x2868: BytePoly_1 = bigint_nondet_rem!(ctx, x2866, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2867, x6, 4), x2868, 4), x2866, 4),
        24387,
        2,
    )?;
    let x2869: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2868, x2805, 1), x6, 1), x2805, 1),
        x6,
        1
    );
    let x2870: BytePoly_1 = bigint_nondet_quot!(ctx, x2869, x6, 1);
    let x2871: BytePoly_1 = bigint_nondet_rem!(ctx, x2869, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2870, x6, 2), x2871, 2), x2869, 2),
        8131,
        2,
    )?;
    let x2872: BytePoly_2 = bigint_mul!(x2859, x2871, 2);
    let x2873: BytePoly_3 = bigint_nondet_quot!(ctx, x2872, x6, 3);
    let x2874: BytePoly_1 = bigint_nondet_rem!(ctx, x2872, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2873, x6, 4), x2874, 4), x2872, 4),
        24387,
        2,
    )?;
    let x2875: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2874, x2865, 1), 1), x6, 1);
    let x2876: BytePoly_1 = bigint_nondet_quot!(ctx, x2875, x6, 1);
    let x2877: BytePoly_1 = bigint_nondet_rem!(ctx, x2875, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2876, x6, 2), x2877, 2), x2875, 2),
        8131,
        2,
    )?;
    let x2878: BytePoly_1 = bigint_nondet_rem!(ctx, x2813, x2, 1);
    let x2879: BytePoly_2 = bigint_nondet_quot!(ctx, x2813, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2879, x2, 3), x2878, 3), x2813, 3),
        16259,
        2,
    )?;
    let x2880: BytePoly_1 = bigint_sub!(x3, x2878, 1);
    eqz(ctx, &bigint_mul!(x2878, x2880, 2), 8131, 2)?;
    let x2881: BytePoly_1 = bigint_add!(bigint_sub!(x2871, x2841, 1), x6, 1);
    let x2882: BytePoly_1 = bigint_nondet_inv!(ctx, x2881, x6, 1);
    let x2883: BytePoly_2 = bigint_mul!(x2881, x2882, 2);
    let x2884: BytePoly_3 = bigint_nondet_quot!(ctx, x2883, x6, 3);
    let x2885: BytePoly_1 = bigint_nondet_rem!(ctx, x2883, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2884, x6, 4), x2885, 4), x2883, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2885, x1, 1), 34, 1)?;
    let x2886: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2877, x2843, 1), x6, 1), x2882, 2);
    let x2887: BytePoly_3 = bigint_nondet_quot!(ctx, x2886, x6, 3);
    let x2888: BytePoly_1 = bigint_nondet_rem!(ctx, x2886, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2887, x6, 4), x2888, 4), x2886, 4),
        24387,
        2,
    )?;
    let x2889: BytePoly_2 = bigint_mul!(x2888, x2841, 2);
    let x2890: BytePoly_3 = bigint_nondet_quot!(ctx, x2889, x6, 3);
    let x2891: BytePoly_1 = bigint_nondet_rem!(ctx, x2889, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2890, x6, 4), x2891, 4), x2889, 4),
        24387,
        2,
    )?;
    let x2892: BytePoly_1 = bigint_add!(bigint_sub!(x2843, x2891, 1), x6, 1);
    let x2893: BytePoly_1 = bigint_nondet_quot!(ctx, x2892, x6, 1);
    let x2894: BytePoly_1 = bigint_nondet_rem!(ctx, x2892, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2893, x6, 2), x2894, 2), x2892, 2),
        8131,
        2,
    )?;
    let x2895: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2888, x2888, 2), x2841, 2), x6, 2),
            x2871,
            2
        ),
        x6,
        2
    );
    let x2896: BytePoly_3 = bigint_nondet_quot!(ctx, x2895, x6, 3);
    let x2897: BytePoly_1 = bigint_nondet_rem!(ctx, x2895, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2896, x6, 4), x2897, 4), x2895, 4),
        24387,
        2,
    )?;
    let x2898: BytePoly_2 = bigint_mul!(x2888, x2897, 2);
    let x2899: BytePoly_3 = bigint_nondet_quot!(ctx, x2898, x6, 3);
    let x2900: BytePoly_1 = bigint_nondet_rem!(ctx, x2898, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2899, x6, 4), x2900, 4), x2898, 4),
        24387,
        2,
    )?;
    let x2901: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2900, x2894, 1), 1), x6, 1);
    let x2902: BytePoly_1 = bigint_nondet_quot!(ctx, x2901, x6, 1);
    let x2903: BytePoly_1 = bigint_nondet_rem!(ctx, x2901, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2902, x6, 2), x2903, 2), x2901, 2),
        8131,
        2,
    )?;
    let x2904: BytePoly_2 = bigint_add!(
        bigint_mul!(x2897, x2878, 2),
        bigint_mul!(x2841, x2880, 2),
        2
    );
    let x2905: BytePoly_2 = bigint_add!(
        bigint_mul!(x2903, x2878, 2),
        bigint_mul!(x2843, x2880, 2),
        2
    );
    let x2906: BytePoly_3 = bigint_nondet_quot!(ctx, x2904, x6, 3);
    let x2907: BytePoly_1 = bigint_nondet_rem!(ctx, x2904, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2906, x6, 4), x2907, 4), x2904, 4),
        24387,
        2,
    )?;
    let x2908: BytePoly_3 = bigint_nondet_quot!(ctx, x2905, x6, 3);
    let x2909: BytePoly_1 = bigint_nondet_rem!(ctx, x2905, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2908, x6, 4), x2909, 4), x2905, 4),
        24387,
        2,
    )?;
    let x2910: BytePoly_2 = bigint_mul!(x2871, x2871, 2);
    let x2911: BytePoly_3 = bigint_nondet_quot!(ctx, x2910, x6, 3);
    let x2912: BytePoly_1 = bigint_nondet_rem!(ctx, x2910, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2911, x6, 4), x2912, 4), x2910, 4),
        24387,
        2,
    )?;
    let x2913: BytePoly_2 = bigint_add!(bigint_mul!(x2912, x0, 2), x5, 2);
    let x2914: BytePoly_3 = bigint_nondet_quot!(ctx, x2913, x6, 3);
    let x2915: BytePoly_1 = bigint_nondet_rem!(ctx, x2913, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2914, x6, 4), x2915, 4), x2913, 4),
        24387,
        2,
    )?;
    let x2916: BytePoly_1 = bigint_add!(x2877, x2877, 1);
    let x2917: BytePoly_1 = bigint_nondet_quot!(ctx, x2916, x6, 1);
    let x2918: BytePoly_1 = bigint_nondet_rem!(ctx, x2916, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2917, x6, 2), x2918, 2), x2916, 2),
        8131,
        2,
    )?;
    let x2919: BytePoly_1 = bigint_nondet_inv!(ctx, x2918, x6, 1);
    let x2920: BytePoly_2 = bigint_mul!(x2918, x2919, 2);
    let x2921: BytePoly_3 = bigint_nondet_quot!(ctx, x2920, x6, 3);
    let x2922: BytePoly_1 = bigint_nondet_rem!(ctx, x2920, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2921, x6, 4), x2922, 4), x2920, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2922, x3, 1), 34, 1)?;
    let x2923: BytePoly_2 = bigint_mul!(x2915, x2919, 2);
    let x2924: BytePoly_3 = bigint_nondet_quot!(ctx, x2923, x6, 3);
    let x2925: BytePoly_1 = bigint_nondet_rem!(ctx, x2923, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2924, x6, 4), x2925, 4), x2923, 4),
        24387,
        2,
    )?;
    let x2926: BytePoly_2 = bigint_mul!(x2925, x2871, 2);
    let x2927: BytePoly_3 = bigint_nondet_quot!(ctx, x2926, x6, 3);
    let x2928: BytePoly_1 = bigint_nondet_rem!(ctx, x2926, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2927, x6, 4), x2928, 4), x2926, 4),
        24387,
        2,
    )?;
    let x2929: BytePoly_1 = bigint_add!(bigint_sub!(x2877, x2928, 1), x6, 1);
    let x2930: BytePoly_1 = bigint_nondet_quot!(ctx, x2929, x6, 1);
    let x2931: BytePoly_1 = bigint_nondet_rem!(ctx, x2929, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2930, x6, 2), x2931, 2), x2929, 2),
        8131,
        2,
    )?;
    let x2932: BytePoly_2 = bigint_mul!(x2925, x2925, 2);
    let x2933: BytePoly_3 = bigint_nondet_quot!(ctx, x2932, x6, 3);
    let x2934: BytePoly_1 = bigint_nondet_rem!(ctx, x2932, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2933, x6, 4), x2934, 4), x2932, 4),
        24387,
        2,
    )?;
    let x2935: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2934, x2871, 1), x6, 1), x2871, 1),
        x6,
        1
    );
    let x2936: BytePoly_1 = bigint_nondet_quot!(ctx, x2935, x6, 1);
    let x2937: BytePoly_1 = bigint_nondet_rem!(ctx, x2935, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2936, x6, 2), x2937, 2), x2935, 2),
        8131,
        2,
    )?;
    let x2938: BytePoly_2 = bigint_mul!(x2925, x2937, 2);
    let x2939: BytePoly_3 = bigint_nondet_quot!(ctx, x2938, x6, 3);
    let x2940: BytePoly_1 = bigint_nondet_rem!(ctx, x2938, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2939, x6, 4), x2940, 4), x2938, 4),
        24387,
        2,
    )?;
    let x2941: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2940, x2931, 1), 1), x6, 1);
    let x2942: BytePoly_1 = bigint_nondet_quot!(ctx, x2941, x6, 1);
    let x2943: BytePoly_1 = bigint_nondet_rem!(ctx, x2941, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2942, x6, 2), x2943, 2), x2941, 2),
        8131,
        2,
    )?;
    let x2944: BytePoly_1 = bigint_nondet_rem!(ctx, x2879, x2, 1);
    let x2945: BytePoly_2 = bigint_nondet_quot!(ctx, x2879, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2945, x2, 3), x2944, 3), x2879, 3),
        16259,
        2,
    )?;
    let x2946: BytePoly_1 = bigint_sub!(x3, x2944, 1);
    eqz(ctx, &bigint_mul!(x2944, x2946, 2), 8131, 2)?;
    let x2947: BytePoly_1 = bigint_add!(bigint_sub!(x2937, x2907, 1), x6, 1);
    let x2948: BytePoly_1 = bigint_nondet_inv!(ctx, x2947, x6, 1);
    let x2949: BytePoly_2 = bigint_mul!(x2947, x2948, 2);
    let x2950: BytePoly_3 = bigint_nondet_quot!(ctx, x2949, x6, 3);
    let x2951: BytePoly_1 = bigint_nondet_rem!(ctx, x2949, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2950, x6, 4), x2951, 4), x2949, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2951, x1, 1), 34, 1)?;
    let x2952: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2943, x2909, 1), x6, 1), x2948, 2);
    let x2953: BytePoly_3 = bigint_nondet_quot!(ctx, x2952, x6, 3);
    let x2954: BytePoly_1 = bigint_nondet_rem!(ctx, x2952, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2953, x6, 4), x2954, 4), x2952, 4),
        24387,
        2,
    )?;
    let x2955: BytePoly_2 = bigint_mul!(x2954, x2907, 2);
    let x2956: BytePoly_3 = bigint_nondet_quot!(ctx, x2955, x6, 3);
    let x2957: BytePoly_1 = bigint_nondet_rem!(ctx, x2955, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2956, x6, 4), x2957, 4), x2955, 4),
        24387,
        2,
    )?;
    let x2958: BytePoly_1 = bigint_add!(bigint_sub!(x2909, x2957, 1), x6, 1);
    let x2959: BytePoly_1 = bigint_nondet_quot!(ctx, x2958, x6, 1);
    let x2960: BytePoly_1 = bigint_nondet_rem!(ctx, x2958, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2959, x6, 2), x2960, 2), x2958, 2),
        8131,
        2,
    )?;
    let x2961: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2954, x2954, 2), x2907, 2), x6, 2),
            x2937,
            2
        ),
        x6,
        2
    );
    let x2962: BytePoly_3 = bigint_nondet_quot!(ctx, x2961, x6, 3);
    let x2963: BytePoly_1 = bigint_nondet_rem!(ctx, x2961, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2962, x6, 4), x2963, 4), x2961, 4),
        24387,
        2,
    )?;
    let x2964: BytePoly_2 = bigint_mul!(x2954, x2963, 2);
    let x2965: BytePoly_3 = bigint_nondet_quot!(ctx, x2964, x6, 3);
    let x2966: BytePoly_1 = bigint_nondet_rem!(ctx, x2964, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2965, x6, 4), x2966, 4), x2964, 4),
        24387,
        2,
    )?;
    let x2967: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x2966, x2960, 1), 1), x6, 1);
    let x2968: BytePoly_1 = bigint_nondet_quot!(ctx, x2967, x6, 1);
    let x2969: BytePoly_1 = bigint_nondet_rem!(ctx, x2967, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2968, x6, 2), x2969, 2), x2967, 2),
        8131,
        2,
    )?;
    let x2970: BytePoly_2 = bigint_add!(
        bigint_mul!(x2963, x2944, 2),
        bigint_mul!(x2907, x2946, 2),
        2
    );
    let x2971: BytePoly_2 = bigint_add!(
        bigint_mul!(x2969, x2944, 2),
        bigint_mul!(x2909, x2946, 2),
        2
    );
    let x2972: BytePoly_3 = bigint_nondet_quot!(ctx, x2970, x6, 3);
    let x2973: BytePoly_1 = bigint_nondet_rem!(ctx, x2970, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2972, x6, 4), x2973, 4), x2970, 4),
        24387,
        2,
    )?;
    let x2974: BytePoly_3 = bigint_nondet_quot!(ctx, x2971, x6, 3);
    let x2975: BytePoly_1 = bigint_nondet_rem!(ctx, x2971, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2974, x6, 4), x2975, 4), x2971, 4),
        24387,
        2,
    )?;
    let x2976: BytePoly_2 = bigint_mul!(x2937, x2937, 2);
    let x2977: BytePoly_3 = bigint_nondet_quot!(ctx, x2976, x6, 3);
    let x2978: BytePoly_1 = bigint_nondet_rem!(ctx, x2976, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2977, x6, 4), x2978, 4), x2976, 4),
        24387,
        2,
    )?;
    let x2979: BytePoly_2 = bigint_add!(bigint_mul!(x2978, x0, 2), x5, 2);
    let x2980: BytePoly_3 = bigint_nondet_quot!(ctx, x2979, x6, 3);
    let x2981: BytePoly_1 = bigint_nondet_rem!(ctx, x2979, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2980, x6, 4), x2981, 4), x2979, 4),
        24387,
        2,
    )?;
    let x2982: BytePoly_1 = bigint_add!(x2943, x2943, 1);
    let x2983: BytePoly_1 = bigint_nondet_quot!(ctx, x2982, x6, 1);
    let x2984: BytePoly_1 = bigint_nondet_rem!(ctx, x2982, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2983, x6, 2), x2984, 2), x2982, 2),
        8131,
        2,
    )?;
    let x2985: BytePoly_1 = bigint_nondet_inv!(ctx, x2984, x6, 1);
    let x2986: BytePoly_2 = bigint_mul!(x2984, x2985, 2);
    let x2987: BytePoly_3 = bigint_nondet_quot!(ctx, x2986, x6, 3);
    let x2988: BytePoly_1 = bigint_nondet_rem!(ctx, x2986, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2987, x6, 4), x2988, 4), x2986, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2988, x3, 1), 34, 1)?;
    let x2989: BytePoly_2 = bigint_mul!(x2981, x2985, 2);
    let x2990: BytePoly_3 = bigint_nondet_quot!(ctx, x2989, x6, 3);
    let x2991: BytePoly_1 = bigint_nondet_rem!(ctx, x2989, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2990, x6, 4), x2991, 4), x2989, 4),
        24387,
        2,
    )?;
    let x2992: BytePoly_2 = bigint_mul!(x2991, x2937, 2);
    let x2993: BytePoly_3 = bigint_nondet_quot!(ctx, x2992, x6, 3);
    let x2994: BytePoly_1 = bigint_nondet_rem!(ctx, x2992, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2993, x6, 4), x2994, 4), x2992, 4),
        24387,
        2,
    )?;
    let x2995: BytePoly_1 = bigint_add!(bigint_sub!(x2943, x2994, 1), x6, 1);
    let x2996: BytePoly_1 = bigint_nondet_quot!(ctx, x2995, x6, 1);
    let x2997: BytePoly_1 = bigint_nondet_rem!(ctx, x2995, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2996, x6, 2), x2997, 2), x2995, 2),
        8131,
        2,
    )?;
    let x2998: BytePoly_2 = bigint_mul!(x2991, x2991, 2);
    let x2999: BytePoly_3 = bigint_nondet_quot!(ctx, x2998, x6, 3);
    let x3000: BytePoly_1 = bigint_nondet_rem!(ctx, x2998, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2999, x6, 4), x3000, 4), x2998, 4),
        24387,
        2,
    )?;
    let x3001: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3000, x2937, 1), x6, 1), x2937, 1),
        x6,
        1
    );
    let x3002: BytePoly_1 = bigint_nondet_quot!(ctx, x3001, x6, 1);
    let x3003: BytePoly_1 = bigint_nondet_rem!(ctx, x3001, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3002, x6, 2), x3003, 2), x3001, 2),
        8131,
        2,
    )?;
    let x3004: BytePoly_2 = bigint_mul!(x2991, x3003, 2);
    let x3005: BytePoly_3 = bigint_nondet_quot!(ctx, x3004, x6, 3);
    let x3006: BytePoly_1 = bigint_nondet_rem!(ctx, x3004, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3005, x6, 4), x3006, 4), x3004, 4),
        24387,
        2,
    )?;
    let x3007: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3006, x2997, 1), 1), x6, 1);
    let x3008: BytePoly_1 = bigint_nondet_quot!(ctx, x3007, x6, 1);
    let x3009: BytePoly_1 = bigint_nondet_rem!(ctx, x3007, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3008, x6, 2), x3009, 2), x3007, 2),
        8131,
        2,
    )?;
    let x3010: BytePoly_1 = bigint_nondet_rem!(ctx, x2945, x2, 1);
    let x3011: BytePoly_2 = bigint_nondet_quot!(ctx, x2945, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3011, x2, 3), x3010, 3), x2945, 3),
        16259,
        2,
    )?;
    let x3012: BytePoly_1 = bigint_sub!(x3, x3010, 1);
    eqz(ctx, &bigint_mul!(x3010, x3012, 2), 8131, 2)?;
    let x3013: BytePoly_1 = bigint_add!(bigint_sub!(x3003, x2973, 1), x6, 1);
    let x3014: BytePoly_1 = bigint_nondet_inv!(ctx, x3013, x6, 1);
    let x3015: BytePoly_2 = bigint_mul!(x3013, x3014, 2);
    let x3016: BytePoly_3 = bigint_nondet_quot!(ctx, x3015, x6, 3);
    let x3017: BytePoly_1 = bigint_nondet_rem!(ctx, x3015, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3016, x6, 4), x3017, 4), x3015, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3017, x1, 1), 34, 1)?;
    let x3018: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3009, x2975, 1), x6, 1), x3014, 2);
    let x3019: BytePoly_3 = bigint_nondet_quot!(ctx, x3018, x6, 3);
    let x3020: BytePoly_1 = bigint_nondet_rem!(ctx, x3018, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3019, x6, 4), x3020, 4), x3018, 4),
        24387,
        2,
    )?;
    let x3021: BytePoly_2 = bigint_mul!(x3020, x2973, 2);
    let x3022: BytePoly_3 = bigint_nondet_quot!(ctx, x3021, x6, 3);
    let x3023: BytePoly_1 = bigint_nondet_rem!(ctx, x3021, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3022, x6, 4), x3023, 4), x3021, 4),
        24387,
        2,
    )?;
    let x3024: BytePoly_1 = bigint_add!(bigint_sub!(x2975, x3023, 1), x6, 1);
    let x3025: BytePoly_1 = bigint_nondet_quot!(ctx, x3024, x6, 1);
    let x3026: BytePoly_1 = bigint_nondet_rem!(ctx, x3024, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3025, x6, 2), x3026, 2), x3024, 2),
        8131,
        2,
    )?;
    let x3027: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3020, x3020, 2), x2973, 2), x6, 2),
            x3003,
            2
        ),
        x6,
        2
    );
    let x3028: BytePoly_3 = bigint_nondet_quot!(ctx, x3027, x6, 3);
    let x3029: BytePoly_1 = bigint_nondet_rem!(ctx, x3027, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3028, x6, 4), x3029, 4), x3027, 4),
        24387,
        2,
    )?;
    let x3030: BytePoly_2 = bigint_mul!(x3020, x3029, 2);
    let x3031: BytePoly_3 = bigint_nondet_quot!(ctx, x3030, x6, 3);
    let x3032: BytePoly_1 = bigint_nondet_rem!(ctx, x3030, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3031, x6, 4), x3032, 4), x3030, 4),
        24387,
        2,
    )?;
    let x3033: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3032, x3026, 1), 1), x6, 1);
    let x3034: BytePoly_1 = bigint_nondet_quot!(ctx, x3033, x6, 1);
    let x3035: BytePoly_1 = bigint_nondet_rem!(ctx, x3033, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3034, x6, 2), x3035, 2), x3033, 2),
        8131,
        2,
    )?;
    let x3036: BytePoly_2 = bigint_add!(
        bigint_mul!(x3029, x3010, 2),
        bigint_mul!(x2973, x3012, 2),
        2
    );
    let x3037: BytePoly_2 = bigint_add!(
        bigint_mul!(x3035, x3010, 2),
        bigint_mul!(x2975, x3012, 2),
        2
    );
    let x3038: BytePoly_3 = bigint_nondet_quot!(ctx, x3036, x6, 3);
    let x3039: BytePoly_1 = bigint_nondet_rem!(ctx, x3036, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3038, x6, 4), x3039, 4), x3036, 4),
        24387,
        2,
    )?;
    let x3040: BytePoly_3 = bigint_nondet_quot!(ctx, x3037, x6, 3);
    let x3041: BytePoly_1 = bigint_nondet_rem!(ctx, x3037, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3040, x6, 4), x3041, 4), x3037, 4),
        24387,
        2,
    )?;
    let x3042: BytePoly_2 = bigint_mul!(x3003, x3003, 2);
    let x3043: BytePoly_3 = bigint_nondet_quot!(ctx, x3042, x6, 3);
    let x3044: BytePoly_1 = bigint_nondet_rem!(ctx, x3042, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3043, x6, 4), x3044, 4), x3042, 4),
        24387,
        2,
    )?;
    let x3045: BytePoly_2 = bigint_add!(bigint_mul!(x3044, x0, 2), x5, 2);
    let x3046: BytePoly_3 = bigint_nondet_quot!(ctx, x3045, x6, 3);
    let x3047: BytePoly_1 = bigint_nondet_rem!(ctx, x3045, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3046, x6, 4), x3047, 4), x3045, 4),
        24387,
        2,
    )?;
    let x3048: BytePoly_1 = bigint_add!(x3009, x3009, 1);
    let x3049: BytePoly_1 = bigint_nondet_quot!(ctx, x3048, x6, 1);
    let x3050: BytePoly_1 = bigint_nondet_rem!(ctx, x3048, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3049, x6, 2), x3050, 2), x3048, 2),
        8131,
        2,
    )?;
    let x3051: BytePoly_1 = bigint_nondet_inv!(ctx, x3050, x6, 1);
    let x3052: BytePoly_2 = bigint_mul!(x3050, x3051, 2);
    let x3053: BytePoly_3 = bigint_nondet_quot!(ctx, x3052, x6, 3);
    let x3054: BytePoly_1 = bigint_nondet_rem!(ctx, x3052, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3053, x6, 4), x3054, 4), x3052, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3054, x3, 1), 34, 1)?;
    let x3055: BytePoly_2 = bigint_mul!(x3047, x3051, 2);
    let x3056: BytePoly_3 = bigint_nondet_quot!(ctx, x3055, x6, 3);
    let x3057: BytePoly_1 = bigint_nondet_rem!(ctx, x3055, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3056, x6, 4), x3057, 4), x3055, 4),
        24387,
        2,
    )?;
    let x3058: BytePoly_2 = bigint_mul!(x3057, x3003, 2);
    let x3059: BytePoly_3 = bigint_nondet_quot!(ctx, x3058, x6, 3);
    let x3060: BytePoly_1 = bigint_nondet_rem!(ctx, x3058, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3059, x6, 4), x3060, 4), x3058, 4),
        24387,
        2,
    )?;
    let x3061: BytePoly_1 = bigint_add!(bigint_sub!(x3009, x3060, 1), x6, 1);
    let x3062: BytePoly_1 = bigint_nondet_quot!(ctx, x3061, x6, 1);
    let x3063: BytePoly_1 = bigint_nondet_rem!(ctx, x3061, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3062, x6, 2), x3063, 2), x3061, 2),
        8131,
        2,
    )?;
    let x3064: BytePoly_2 = bigint_mul!(x3057, x3057, 2);
    let x3065: BytePoly_3 = bigint_nondet_quot!(ctx, x3064, x6, 3);
    let x3066: BytePoly_1 = bigint_nondet_rem!(ctx, x3064, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3065, x6, 4), x3066, 4), x3064, 4),
        24387,
        2,
    )?;
    let x3067: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3066, x3003, 1), x6, 1), x3003, 1),
        x6,
        1
    );
    let x3068: BytePoly_1 = bigint_nondet_quot!(ctx, x3067, x6, 1);
    let x3069: BytePoly_1 = bigint_nondet_rem!(ctx, x3067, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3068, x6, 2), x3069, 2), x3067, 2),
        8131,
        2,
    )?;
    let x3070: BytePoly_2 = bigint_mul!(x3057, x3069, 2);
    let x3071: BytePoly_3 = bigint_nondet_quot!(ctx, x3070, x6, 3);
    let x3072: BytePoly_1 = bigint_nondet_rem!(ctx, x3070, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3071, x6, 4), x3072, 4), x3070, 4),
        24387,
        2,
    )?;
    let x3073: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3072, x3063, 1), 1), x6, 1);
    let x3074: BytePoly_1 = bigint_nondet_quot!(ctx, x3073, x6, 1);
    let x3075: BytePoly_1 = bigint_nondet_rem!(ctx, x3073, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3074, x6, 2), x3075, 2), x3073, 2),
        8131,
        2,
    )?;
    let x3076: BytePoly_1 = bigint_nondet_rem!(ctx, x3011, x2, 1);
    let x3077: BytePoly_2 = bigint_nondet_quot!(ctx, x3011, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3077, x2, 3), x3076, 3), x3011, 3),
        16259,
        2,
    )?;
    let x3078: BytePoly_1 = bigint_sub!(x3, x3076, 1);
    eqz(ctx, &bigint_mul!(x3076, x3078, 2), 8131, 2)?;
    let x3079: BytePoly_1 = bigint_add!(bigint_sub!(x3069, x3039, 1), x6, 1);
    let x3080: BytePoly_1 = bigint_nondet_inv!(ctx, x3079, x6, 1);
    let x3081: BytePoly_2 = bigint_mul!(x3079, x3080, 2);
    let x3082: BytePoly_3 = bigint_nondet_quot!(ctx, x3081, x6, 3);
    let x3083: BytePoly_1 = bigint_nondet_rem!(ctx, x3081, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3082, x6, 4), x3083, 4), x3081, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3083, x1, 1), 34, 1)?;
    let x3084: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3075, x3041, 1), x6, 1), x3080, 2);
    let x3085: BytePoly_3 = bigint_nondet_quot!(ctx, x3084, x6, 3);
    let x3086: BytePoly_1 = bigint_nondet_rem!(ctx, x3084, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3085, x6, 4), x3086, 4), x3084, 4),
        24387,
        2,
    )?;
    let x3087: BytePoly_2 = bigint_mul!(x3086, x3039, 2);
    let x3088: BytePoly_3 = bigint_nondet_quot!(ctx, x3087, x6, 3);
    let x3089: BytePoly_1 = bigint_nondet_rem!(ctx, x3087, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3088, x6, 4), x3089, 4), x3087, 4),
        24387,
        2,
    )?;
    let x3090: BytePoly_1 = bigint_add!(bigint_sub!(x3041, x3089, 1), x6, 1);
    let x3091: BytePoly_1 = bigint_nondet_quot!(ctx, x3090, x6, 1);
    let x3092: BytePoly_1 = bigint_nondet_rem!(ctx, x3090, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3091, x6, 2), x3092, 2), x3090, 2),
        8131,
        2,
    )?;
    let x3093: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3086, x3086, 2), x3039, 2), x6, 2),
            x3069,
            2
        ),
        x6,
        2
    );
    let x3094: BytePoly_3 = bigint_nondet_quot!(ctx, x3093, x6, 3);
    let x3095: BytePoly_1 = bigint_nondet_rem!(ctx, x3093, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3094, x6, 4), x3095, 4), x3093, 4),
        24387,
        2,
    )?;
    let x3096: BytePoly_2 = bigint_mul!(x3086, x3095, 2);
    let x3097: BytePoly_3 = bigint_nondet_quot!(ctx, x3096, x6, 3);
    let x3098: BytePoly_1 = bigint_nondet_rem!(ctx, x3096, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3097, x6, 4), x3098, 4), x3096, 4),
        24387,
        2,
    )?;
    let x3099: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3098, x3092, 1), 1), x6, 1);
    let x3100: BytePoly_1 = bigint_nondet_quot!(ctx, x3099, x6, 1);
    let x3101: BytePoly_1 = bigint_nondet_rem!(ctx, x3099, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3100, x6, 2), x3101, 2), x3099, 2),
        8131,
        2,
    )?;
    let x3102: BytePoly_2 = bigint_add!(
        bigint_mul!(x3095, x3076, 2),
        bigint_mul!(x3039, x3078, 2),
        2
    );
    let x3103: BytePoly_2 = bigint_add!(
        bigint_mul!(x3101, x3076, 2),
        bigint_mul!(x3041, x3078, 2),
        2
    );
    let x3104: BytePoly_3 = bigint_nondet_quot!(ctx, x3102, x6, 3);
    let x3105: BytePoly_1 = bigint_nondet_rem!(ctx, x3102, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3104, x6, 4), x3105, 4), x3102, 4),
        24387,
        2,
    )?;
    let x3106: BytePoly_3 = bigint_nondet_quot!(ctx, x3103, x6, 3);
    let x3107: BytePoly_1 = bigint_nondet_rem!(ctx, x3103, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3106, x6, 4), x3107, 4), x3103, 4),
        24387,
        2,
    )?;
    let x3108: BytePoly_2 = bigint_mul!(x3069, x3069, 2);
    let x3109: BytePoly_3 = bigint_nondet_quot!(ctx, x3108, x6, 3);
    let x3110: BytePoly_1 = bigint_nondet_rem!(ctx, x3108, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3109, x6, 4), x3110, 4), x3108, 4),
        24387,
        2,
    )?;
    let x3111: BytePoly_2 = bigint_add!(bigint_mul!(x3110, x0, 2), x5, 2);
    let x3112: BytePoly_3 = bigint_nondet_quot!(ctx, x3111, x6, 3);
    let x3113: BytePoly_1 = bigint_nondet_rem!(ctx, x3111, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3112, x6, 4), x3113, 4), x3111, 4),
        24387,
        2,
    )?;
    let x3114: BytePoly_1 = bigint_add!(x3075, x3075, 1);
    let x3115: BytePoly_1 = bigint_nondet_quot!(ctx, x3114, x6, 1);
    let x3116: BytePoly_1 = bigint_nondet_rem!(ctx, x3114, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3115, x6, 2), x3116, 2), x3114, 2),
        8131,
        2,
    )?;
    let x3117: BytePoly_1 = bigint_nondet_inv!(ctx, x3116, x6, 1);
    let x3118: BytePoly_2 = bigint_mul!(x3116, x3117, 2);
    let x3119: BytePoly_3 = bigint_nondet_quot!(ctx, x3118, x6, 3);
    let x3120: BytePoly_1 = bigint_nondet_rem!(ctx, x3118, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3119, x6, 4), x3120, 4), x3118, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3120, x3, 1), 34, 1)?;
    let x3121: BytePoly_2 = bigint_mul!(x3113, x3117, 2);
    let x3122: BytePoly_3 = bigint_nondet_quot!(ctx, x3121, x6, 3);
    let x3123: BytePoly_1 = bigint_nondet_rem!(ctx, x3121, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3122, x6, 4), x3123, 4), x3121, 4),
        24387,
        2,
    )?;
    let x3124: BytePoly_2 = bigint_mul!(x3123, x3069, 2);
    let x3125: BytePoly_3 = bigint_nondet_quot!(ctx, x3124, x6, 3);
    let x3126: BytePoly_1 = bigint_nondet_rem!(ctx, x3124, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3125, x6, 4), x3126, 4), x3124, 4),
        24387,
        2,
    )?;
    let x3127: BytePoly_1 = bigint_add!(bigint_sub!(x3075, x3126, 1), x6, 1);
    let x3128: BytePoly_1 = bigint_nondet_quot!(ctx, x3127, x6, 1);
    let x3129: BytePoly_1 = bigint_nondet_rem!(ctx, x3127, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3128, x6, 2), x3129, 2), x3127, 2),
        8131,
        2,
    )?;
    let x3130: BytePoly_2 = bigint_mul!(x3123, x3123, 2);
    let x3131: BytePoly_3 = bigint_nondet_quot!(ctx, x3130, x6, 3);
    let x3132: BytePoly_1 = bigint_nondet_rem!(ctx, x3130, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3131, x6, 4), x3132, 4), x3130, 4),
        24387,
        2,
    )?;
    let x3133: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3132, x3069, 1), x6, 1), x3069, 1),
        x6,
        1
    );
    let x3134: BytePoly_1 = bigint_nondet_quot!(ctx, x3133, x6, 1);
    let x3135: BytePoly_1 = bigint_nondet_rem!(ctx, x3133, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3134, x6, 2), x3135, 2), x3133, 2),
        8131,
        2,
    )?;
    let x3136: BytePoly_2 = bigint_mul!(x3123, x3135, 2);
    let x3137: BytePoly_3 = bigint_nondet_quot!(ctx, x3136, x6, 3);
    let x3138: BytePoly_1 = bigint_nondet_rem!(ctx, x3136, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3137, x6, 4), x3138, 4), x3136, 4),
        24387,
        2,
    )?;
    let x3139: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3138, x3129, 1), 1), x6, 1);
    let x3140: BytePoly_1 = bigint_nondet_quot!(ctx, x3139, x6, 1);
    let x3141: BytePoly_1 = bigint_nondet_rem!(ctx, x3139, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3140, x6, 2), x3141, 2), x3139, 2),
        8131,
        2,
    )?;
    let x3142: BytePoly_1 = bigint_nondet_rem!(ctx, x3077, x2, 1);
    let x3143: BytePoly_2 = bigint_nondet_quot!(ctx, x3077, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3143, x2, 3), x3142, 3), x3077, 3),
        16259,
        2,
    )?;
    let x3144: BytePoly_1 = bigint_sub!(x3, x3142, 1);
    eqz(ctx, &bigint_mul!(x3142, x3144, 2), 8131, 2)?;
    let x3145: BytePoly_1 = bigint_add!(bigint_sub!(x3135, x3105, 1), x6, 1);
    let x3146: BytePoly_1 = bigint_nondet_inv!(ctx, x3145, x6, 1);
    let x3147: BytePoly_2 = bigint_mul!(x3145, x3146, 2);
    let x3148: BytePoly_3 = bigint_nondet_quot!(ctx, x3147, x6, 3);
    let x3149: BytePoly_1 = bigint_nondet_rem!(ctx, x3147, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3148, x6, 4), x3149, 4), x3147, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3149, x1, 1), 34, 1)?;
    let x3150: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3141, x3107, 1), x6, 1), x3146, 2);
    let x3151: BytePoly_3 = bigint_nondet_quot!(ctx, x3150, x6, 3);
    let x3152: BytePoly_1 = bigint_nondet_rem!(ctx, x3150, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3151, x6, 4), x3152, 4), x3150, 4),
        24387,
        2,
    )?;
    let x3153: BytePoly_2 = bigint_mul!(x3152, x3105, 2);
    let x3154: BytePoly_3 = bigint_nondet_quot!(ctx, x3153, x6, 3);
    let x3155: BytePoly_1 = bigint_nondet_rem!(ctx, x3153, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3154, x6, 4), x3155, 4), x3153, 4),
        24387,
        2,
    )?;
    let x3156: BytePoly_1 = bigint_add!(bigint_sub!(x3107, x3155, 1), x6, 1);
    let x3157: BytePoly_1 = bigint_nondet_quot!(ctx, x3156, x6, 1);
    let x3158: BytePoly_1 = bigint_nondet_rem!(ctx, x3156, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3157, x6, 2), x3158, 2), x3156, 2),
        8131,
        2,
    )?;
    let x3159: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3152, x3152, 2), x3105, 2), x6, 2),
            x3135,
            2
        ),
        x6,
        2
    );
    let x3160: BytePoly_3 = bigint_nondet_quot!(ctx, x3159, x6, 3);
    let x3161: BytePoly_1 = bigint_nondet_rem!(ctx, x3159, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3160, x6, 4), x3161, 4), x3159, 4),
        24387,
        2,
    )?;
    let x3162: BytePoly_2 = bigint_mul!(x3152, x3161, 2);
    let x3163: BytePoly_3 = bigint_nondet_quot!(ctx, x3162, x6, 3);
    let x3164: BytePoly_1 = bigint_nondet_rem!(ctx, x3162, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3163, x6, 4), x3164, 4), x3162, 4),
        24387,
        2,
    )?;
    let x3165: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3164, x3158, 1), 1), x6, 1);
    let x3166: BytePoly_1 = bigint_nondet_quot!(ctx, x3165, x6, 1);
    let x3167: BytePoly_1 = bigint_nondet_rem!(ctx, x3165, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3166, x6, 2), x3167, 2), x3165, 2),
        8131,
        2,
    )?;
    let x3168: BytePoly_2 = bigint_add!(
        bigint_mul!(x3161, x3142, 2),
        bigint_mul!(x3105, x3144, 2),
        2
    );
    let x3169: BytePoly_2 = bigint_add!(
        bigint_mul!(x3167, x3142, 2),
        bigint_mul!(x3107, x3144, 2),
        2
    );
    let x3170: BytePoly_3 = bigint_nondet_quot!(ctx, x3168, x6, 3);
    let x3171: BytePoly_1 = bigint_nondet_rem!(ctx, x3168, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3170, x6, 4), x3171, 4), x3168, 4),
        24387,
        2,
    )?;
    let x3172: BytePoly_3 = bigint_nondet_quot!(ctx, x3169, x6, 3);
    let x3173: BytePoly_1 = bigint_nondet_rem!(ctx, x3169, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3172, x6, 4), x3173, 4), x3169, 4),
        24387,
        2,
    )?;
    let x3174: BytePoly_2 = bigint_mul!(x3135, x3135, 2);
    let x3175: BytePoly_3 = bigint_nondet_quot!(ctx, x3174, x6, 3);
    let x3176: BytePoly_1 = bigint_nondet_rem!(ctx, x3174, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3175, x6, 4), x3176, 4), x3174, 4),
        24387,
        2,
    )?;
    let x3177: BytePoly_2 = bigint_add!(bigint_mul!(x3176, x0, 2), x5, 2);
    let x3178: BytePoly_3 = bigint_nondet_quot!(ctx, x3177, x6, 3);
    let x3179: BytePoly_1 = bigint_nondet_rem!(ctx, x3177, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3178, x6, 4), x3179, 4), x3177, 4),
        24387,
        2,
    )?;
    let x3180: BytePoly_1 = bigint_add!(x3141, x3141, 1);
    let x3181: BytePoly_1 = bigint_nondet_quot!(ctx, x3180, x6, 1);
    let x3182: BytePoly_1 = bigint_nondet_rem!(ctx, x3180, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3181, x6, 2), x3182, 2), x3180, 2),
        8131,
        2,
    )?;
    let x3183: BytePoly_1 = bigint_nondet_inv!(ctx, x3182, x6, 1);
    let x3184: BytePoly_2 = bigint_mul!(x3182, x3183, 2);
    let x3185: BytePoly_3 = bigint_nondet_quot!(ctx, x3184, x6, 3);
    let x3186: BytePoly_1 = bigint_nondet_rem!(ctx, x3184, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3185, x6, 4), x3186, 4), x3184, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3186, x3, 1), 34, 1)?;
    let x3187: BytePoly_2 = bigint_mul!(x3179, x3183, 2);
    let x3188: BytePoly_3 = bigint_nondet_quot!(ctx, x3187, x6, 3);
    let x3189: BytePoly_1 = bigint_nondet_rem!(ctx, x3187, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3188, x6, 4), x3189, 4), x3187, 4),
        24387,
        2,
    )?;
    let x3190: BytePoly_2 = bigint_mul!(x3189, x3135, 2);
    let x3191: BytePoly_3 = bigint_nondet_quot!(ctx, x3190, x6, 3);
    let x3192: BytePoly_1 = bigint_nondet_rem!(ctx, x3190, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3191, x6, 4), x3192, 4), x3190, 4),
        24387,
        2,
    )?;
    let x3193: BytePoly_1 = bigint_add!(bigint_sub!(x3141, x3192, 1), x6, 1);
    let x3194: BytePoly_1 = bigint_nondet_quot!(ctx, x3193, x6, 1);
    let x3195: BytePoly_1 = bigint_nondet_rem!(ctx, x3193, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3194, x6, 2), x3195, 2), x3193, 2),
        8131,
        2,
    )?;
    let x3196: BytePoly_2 = bigint_mul!(x3189, x3189, 2);
    let x3197: BytePoly_3 = bigint_nondet_quot!(ctx, x3196, x6, 3);
    let x3198: BytePoly_1 = bigint_nondet_rem!(ctx, x3196, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3197, x6, 4), x3198, 4), x3196, 4),
        24387,
        2,
    )?;
    let x3199: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3198, x3135, 1), x6, 1), x3135, 1),
        x6,
        1
    );
    let x3200: BytePoly_1 = bigint_nondet_quot!(ctx, x3199, x6, 1);
    let x3201: BytePoly_1 = bigint_nondet_rem!(ctx, x3199, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3200, x6, 2), x3201, 2), x3199, 2),
        8131,
        2,
    )?;
    let x3202: BytePoly_2 = bigint_mul!(x3189, x3201, 2);
    let x3203: BytePoly_3 = bigint_nondet_quot!(ctx, x3202, x6, 3);
    let x3204: BytePoly_1 = bigint_nondet_rem!(ctx, x3202, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3203, x6, 4), x3204, 4), x3202, 4),
        24387,
        2,
    )?;
    let x3205: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3204, x3195, 1), 1), x6, 1);
    let x3206: BytePoly_1 = bigint_nondet_quot!(ctx, x3205, x6, 1);
    let x3207: BytePoly_1 = bigint_nondet_rem!(ctx, x3205, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3206, x6, 2), x3207, 2), x3205, 2),
        8131,
        2,
    )?;
    let x3208: BytePoly_1 = bigint_nondet_rem!(ctx, x3143, x2, 1);
    let x3209: BytePoly_2 = bigint_nondet_quot!(ctx, x3143, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3209, x2, 3), x3208, 3), x3143, 3),
        16259,
        2,
    )?;
    let x3210: BytePoly_1 = bigint_sub!(x3, x3208, 1);
    eqz(ctx, &bigint_mul!(x3208, x3210, 2), 8131, 2)?;
    let x3211: BytePoly_1 = bigint_add!(bigint_sub!(x3201, x3171, 1), x6, 1);
    let x3212: BytePoly_1 = bigint_nondet_inv!(ctx, x3211, x6, 1);
    let x3213: BytePoly_2 = bigint_mul!(x3211, x3212, 2);
    let x3214: BytePoly_3 = bigint_nondet_quot!(ctx, x3213, x6, 3);
    let x3215: BytePoly_1 = bigint_nondet_rem!(ctx, x3213, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3214, x6, 4), x3215, 4), x3213, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3215, x1, 1), 34, 1)?;
    let x3216: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3207, x3173, 1), x6, 1), x3212, 2);
    let x3217: BytePoly_3 = bigint_nondet_quot!(ctx, x3216, x6, 3);
    let x3218: BytePoly_1 = bigint_nondet_rem!(ctx, x3216, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3217, x6, 4), x3218, 4), x3216, 4),
        24387,
        2,
    )?;
    let x3219: BytePoly_2 = bigint_mul!(x3218, x3171, 2);
    let x3220: BytePoly_3 = bigint_nondet_quot!(ctx, x3219, x6, 3);
    let x3221: BytePoly_1 = bigint_nondet_rem!(ctx, x3219, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3220, x6, 4), x3221, 4), x3219, 4),
        24387,
        2,
    )?;
    let x3222: BytePoly_1 = bigint_add!(bigint_sub!(x3173, x3221, 1), x6, 1);
    let x3223: BytePoly_1 = bigint_nondet_quot!(ctx, x3222, x6, 1);
    let x3224: BytePoly_1 = bigint_nondet_rem!(ctx, x3222, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3223, x6, 2), x3224, 2), x3222, 2),
        8131,
        2,
    )?;
    let x3225: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3218, x3218, 2), x3171, 2), x6, 2),
            x3201,
            2
        ),
        x6,
        2
    );
    let x3226: BytePoly_3 = bigint_nondet_quot!(ctx, x3225, x6, 3);
    let x3227: BytePoly_1 = bigint_nondet_rem!(ctx, x3225, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3226, x6, 4), x3227, 4), x3225, 4),
        24387,
        2,
    )?;
    let x3228: BytePoly_2 = bigint_mul!(x3218, x3227, 2);
    let x3229: BytePoly_3 = bigint_nondet_quot!(ctx, x3228, x6, 3);
    let x3230: BytePoly_1 = bigint_nondet_rem!(ctx, x3228, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3229, x6, 4), x3230, 4), x3228, 4),
        24387,
        2,
    )?;
    let x3231: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3230, x3224, 1), 1), x6, 1);
    let x3232: BytePoly_1 = bigint_nondet_quot!(ctx, x3231, x6, 1);
    let x3233: BytePoly_1 = bigint_nondet_rem!(ctx, x3231, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3232, x6, 2), x3233, 2), x3231, 2),
        8131,
        2,
    )?;
    let x3234: BytePoly_2 = bigint_add!(
        bigint_mul!(x3227, x3208, 2),
        bigint_mul!(x3171, x3210, 2),
        2
    );
    let x3235: BytePoly_2 = bigint_add!(
        bigint_mul!(x3233, x3208, 2),
        bigint_mul!(x3173, x3210, 2),
        2
    );
    let x3236: BytePoly_3 = bigint_nondet_quot!(ctx, x3234, x6, 3);
    let x3237: BytePoly_1 = bigint_nondet_rem!(ctx, x3234, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3236, x6, 4), x3237, 4), x3234, 4),
        24387,
        2,
    )?;
    let x3238: BytePoly_3 = bigint_nondet_quot!(ctx, x3235, x6, 3);
    let x3239: BytePoly_1 = bigint_nondet_rem!(ctx, x3235, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3238, x6, 4), x3239, 4), x3235, 4),
        24387,
        2,
    )?;
    let x3240: BytePoly_2 = bigint_mul!(x3201, x3201, 2);
    let x3241: BytePoly_3 = bigint_nondet_quot!(ctx, x3240, x6, 3);
    let x3242: BytePoly_1 = bigint_nondet_rem!(ctx, x3240, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3241, x6, 4), x3242, 4), x3240, 4),
        24387,
        2,
    )?;
    let x3243: BytePoly_2 = bigint_add!(bigint_mul!(x3242, x0, 2), x5, 2);
    let x3244: BytePoly_3 = bigint_nondet_quot!(ctx, x3243, x6, 3);
    let x3245: BytePoly_1 = bigint_nondet_rem!(ctx, x3243, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3244, x6, 4), x3245, 4), x3243, 4),
        24387,
        2,
    )?;
    let x3246: BytePoly_1 = bigint_add!(x3207, x3207, 1);
    let x3247: BytePoly_1 = bigint_nondet_quot!(ctx, x3246, x6, 1);
    let x3248: BytePoly_1 = bigint_nondet_rem!(ctx, x3246, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3247, x6, 2), x3248, 2), x3246, 2),
        8131,
        2,
    )?;
    let x3249: BytePoly_1 = bigint_nondet_inv!(ctx, x3248, x6, 1);
    let x3250: BytePoly_2 = bigint_mul!(x3248, x3249, 2);
    let x3251: BytePoly_3 = bigint_nondet_quot!(ctx, x3250, x6, 3);
    let x3252: BytePoly_1 = bigint_nondet_rem!(ctx, x3250, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3251, x6, 4), x3252, 4), x3250, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3252, x3, 1), 34, 1)?;
    let x3253: BytePoly_2 = bigint_mul!(x3245, x3249, 2);
    let x3254: BytePoly_3 = bigint_nondet_quot!(ctx, x3253, x6, 3);
    let x3255: BytePoly_1 = bigint_nondet_rem!(ctx, x3253, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3254, x6, 4), x3255, 4), x3253, 4),
        24387,
        2,
    )?;
    let x3256: BytePoly_2 = bigint_mul!(x3255, x3201, 2);
    let x3257: BytePoly_3 = bigint_nondet_quot!(ctx, x3256, x6, 3);
    let x3258: BytePoly_1 = bigint_nondet_rem!(ctx, x3256, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3257, x6, 4), x3258, 4), x3256, 4),
        24387,
        2,
    )?;
    let x3259: BytePoly_1 = bigint_add!(bigint_sub!(x3207, x3258, 1), x6, 1);
    let x3260: BytePoly_1 = bigint_nondet_quot!(ctx, x3259, x6, 1);
    let x3261: BytePoly_1 = bigint_nondet_rem!(ctx, x3259, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3260, x6, 2), x3261, 2), x3259, 2),
        8131,
        2,
    )?;
    let x3262: BytePoly_2 = bigint_mul!(x3255, x3255, 2);
    let x3263: BytePoly_3 = bigint_nondet_quot!(ctx, x3262, x6, 3);
    let x3264: BytePoly_1 = bigint_nondet_rem!(ctx, x3262, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3263, x6, 4), x3264, 4), x3262, 4),
        24387,
        2,
    )?;
    let x3265: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3264, x3201, 1), x6, 1), x3201, 1),
        x6,
        1
    );
    let x3266: BytePoly_1 = bigint_nondet_quot!(ctx, x3265, x6, 1);
    let x3267: BytePoly_1 = bigint_nondet_rem!(ctx, x3265, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3266, x6, 2), x3267, 2), x3265, 2),
        8131,
        2,
    )?;
    let x3268: BytePoly_2 = bigint_mul!(x3255, x3267, 2);
    let x3269: BytePoly_3 = bigint_nondet_quot!(ctx, x3268, x6, 3);
    let x3270: BytePoly_1 = bigint_nondet_rem!(ctx, x3268, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3269, x6, 4), x3270, 4), x3268, 4),
        24387,
        2,
    )?;
    let x3271: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3270, x3261, 1), 1), x6, 1);
    let x3272: BytePoly_1 = bigint_nondet_quot!(ctx, x3271, x6, 1);
    let x3273: BytePoly_1 = bigint_nondet_rem!(ctx, x3271, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3272, x6, 2), x3273, 2), x3271, 2),
        8131,
        2,
    )?;
    let x3274: BytePoly_1 = bigint_nondet_rem!(ctx, x3209, x2, 1);
    let x3275: BytePoly_2 = bigint_nondet_quot!(ctx, x3209, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3275, x2, 3), x3274, 3), x3209, 3),
        16259,
        2,
    )?;
    let x3276: BytePoly_1 = bigint_sub!(x3, x3274, 1);
    eqz(ctx, &bigint_mul!(x3274, x3276, 2), 8131, 2)?;
    let x3277: BytePoly_1 = bigint_add!(bigint_sub!(x3267, x3237, 1), x6, 1);
    let x3278: BytePoly_1 = bigint_nondet_inv!(ctx, x3277, x6, 1);
    let x3279: BytePoly_2 = bigint_mul!(x3277, x3278, 2);
    let x3280: BytePoly_3 = bigint_nondet_quot!(ctx, x3279, x6, 3);
    let x3281: BytePoly_1 = bigint_nondet_rem!(ctx, x3279, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3280, x6, 4), x3281, 4), x3279, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3281, x1, 1), 34, 1)?;
    let x3282: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3273, x3239, 1), x6, 1), x3278, 2);
    let x3283: BytePoly_3 = bigint_nondet_quot!(ctx, x3282, x6, 3);
    let x3284: BytePoly_1 = bigint_nondet_rem!(ctx, x3282, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3283, x6, 4), x3284, 4), x3282, 4),
        24387,
        2,
    )?;
    let x3285: BytePoly_2 = bigint_mul!(x3284, x3237, 2);
    let x3286: BytePoly_3 = bigint_nondet_quot!(ctx, x3285, x6, 3);
    let x3287: BytePoly_1 = bigint_nondet_rem!(ctx, x3285, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3286, x6, 4), x3287, 4), x3285, 4),
        24387,
        2,
    )?;
    let x3288: BytePoly_1 = bigint_add!(bigint_sub!(x3239, x3287, 1), x6, 1);
    let x3289: BytePoly_1 = bigint_nondet_quot!(ctx, x3288, x6, 1);
    let x3290: BytePoly_1 = bigint_nondet_rem!(ctx, x3288, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3289, x6, 2), x3290, 2), x3288, 2),
        8131,
        2,
    )?;
    let x3291: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3284, x3284, 2), x3237, 2), x6, 2),
            x3267,
            2
        ),
        x6,
        2
    );
    let x3292: BytePoly_3 = bigint_nondet_quot!(ctx, x3291, x6, 3);
    let x3293: BytePoly_1 = bigint_nondet_rem!(ctx, x3291, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3292, x6, 4), x3293, 4), x3291, 4),
        24387,
        2,
    )?;
    let x3294: BytePoly_2 = bigint_mul!(x3284, x3293, 2);
    let x3295: BytePoly_3 = bigint_nondet_quot!(ctx, x3294, x6, 3);
    let x3296: BytePoly_1 = bigint_nondet_rem!(ctx, x3294, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3295, x6, 4), x3296, 4), x3294, 4),
        24387,
        2,
    )?;
    let x3297: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3296, x3290, 1), 1), x6, 1);
    let x3298: BytePoly_1 = bigint_nondet_quot!(ctx, x3297, x6, 1);
    let x3299: BytePoly_1 = bigint_nondet_rem!(ctx, x3297, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3298, x6, 2), x3299, 2), x3297, 2),
        8131,
        2,
    )?;
    let x3300: BytePoly_2 = bigint_add!(
        bigint_mul!(x3293, x3274, 2),
        bigint_mul!(x3237, x3276, 2),
        2
    );
    let x3301: BytePoly_2 = bigint_add!(
        bigint_mul!(x3299, x3274, 2),
        bigint_mul!(x3239, x3276, 2),
        2
    );
    let x3302: BytePoly_3 = bigint_nondet_quot!(ctx, x3300, x6, 3);
    let x3303: BytePoly_1 = bigint_nondet_rem!(ctx, x3300, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3302, x6, 4), x3303, 4), x3300, 4),
        24387,
        2,
    )?;
    let x3304: BytePoly_3 = bigint_nondet_quot!(ctx, x3301, x6, 3);
    let x3305: BytePoly_1 = bigint_nondet_rem!(ctx, x3301, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3304, x6, 4), x3305, 4), x3301, 4),
        24387,
        2,
    )?;
    let x3306: BytePoly_2 = bigint_mul!(x3267, x3267, 2);
    let x3307: BytePoly_3 = bigint_nondet_quot!(ctx, x3306, x6, 3);
    let x3308: BytePoly_1 = bigint_nondet_rem!(ctx, x3306, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3307, x6, 4), x3308, 4), x3306, 4),
        24387,
        2,
    )?;
    let x3309: BytePoly_2 = bigint_add!(bigint_mul!(x3308, x0, 2), x5, 2);
    let x3310: BytePoly_3 = bigint_nondet_quot!(ctx, x3309, x6, 3);
    let x3311: BytePoly_1 = bigint_nondet_rem!(ctx, x3309, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3310, x6, 4), x3311, 4), x3309, 4),
        24387,
        2,
    )?;
    let x3312: BytePoly_1 = bigint_add!(x3273, x3273, 1);
    let x3313: BytePoly_1 = bigint_nondet_quot!(ctx, x3312, x6, 1);
    let x3314: BytePoly_1 = bigint_nondet_rem!(ctx, x3312, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3313, x6, 2), x3314, 2), x3312, 2),
        8131,
        2,
    )?;
    let x3315: BytePoly_1 = bigint_nondet_inv!(ctx, x3314, x6, 1);
    let x3316: BytePoly_2 = bigint_mul!(x3314, x3315, 2);
    let x3317: BytePoly_3 = bigint_nondet_quot!(ctx, x3316, x6, 3);
    let x3318: BytePoly_1 = bigint_nondet_rem!(ctx, x3316, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3317, x6, 4), x3318, 4), x3316, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3318, x3, 1), 34, 1)?;
    let x3319: BytePoly_2 = bigint_mul!(x3311, x3315, 2);
    let x3320: BytePoly_3 = bigint_nondet_quot!(ctx, x3319, x6, 3);
    let x3321: BytePoly_1 = bigint_nondet_rem!(ctx, x3319, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3320, x6, 4), x3321, 4), x3319, 4),
        24387,
        2,
    )?;
    let x3322: BytePoly_2 = bigint_mul!(x3321, x3267, 2);
    let x3323: BytePoly_3 = bigint_nondet_quot!(ctx, x3322, x6, 3);
    let x3324: BytePoly_1 = bigint_nondet_rem!(ctx, x3322, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3323, x6, 4), x3324, 4), x3322, 4),
        24387,
        2,
    )?;
    let x3325: BytePoly_1 = bigint_add!(bigint_sub!(x3273, x3324, 1), x6, 1);
    let x3326: BytePoly_1 = bigint_nondet_quot!(ctx, x3325, x6, 1);
    let x3327: BytePoly_1 = bigint_nondet_rem!(ctx, x3325, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3326, x6, 2), x3327, 2), x3325, 2),
        8131,
        2,
    )?;
    let x3328: BytePoly_2 = bigint_mul!(x3321, x3321, 2);
    let x3329: BytePoly_3 = bigint_nondet_quot!(ctx, x3328, x6, 3);
    let x3330: BytePoly_1 = bigint_nondet_rem!(ctx, x3328, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3329, x6, 4), x3330, 4), x3328, 4),
        24387,
        2,
    )?;
    let x3331: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3330, x3267, 1), x6, 1), x3267, 1),
        x6,
        1
    );
    let x3332: BytePoly_1 = bigint_nondet_quot!(ctx, x3331, x6, 1);
    let x3333: BytePoly_1 = bigint_nondet_rem!(ctx, x3331, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3332, x6, 2), x3333, 2), x3331, 2),
        8131,
        2,
    )?;
    let x3334: BytePoly_2 = bigint_mul!(x3321, x3333, 2);
    let x3335: BytePoly_3 = bigint_nondet_quot!(ctx, x3334, x6, 3);
    let x3336: BytePoly_1 = bigint_nondet_rem!(ctx, x3334, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3335, x6, 4), x3336, 4), x3334, 4),
        24387,
        2,
    )?;
    let x3337: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3336, x3327, 1), 1), x6, 1);
    let x3338: BytePoly_1 = bigint_nondet_quot!(ctx, x3337, x6, 1);
    let x3339: BytePoly_1 = bigint_nondet_rem!(ctx, x3337, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3338, x6, 2), x3339, 2), x3337, 2),
        8131,
        2,
    )?;
    let x3340: BytePoly_1 = bigint_nondet_rem!(ctx, x3275, x2, 1);
    let x3341: BytePoly_2 = bigint_nondet_quot!(ctx, x3275, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3341, x2, 3), x3340, 3), x3275, 3),
        16259,
        2,
    )?;
    let x3342: BytePoly_1 = bigint_sub!(x3, x3340, 1);
    eqz(ctx, &bigint_mul!(x3340, x3342, 2), 8131, 2)?;
    let x3343: BytePoly_1 = bigint_add!(bigint_sub!(x3333, x3303, 1), x6, 1);
    let x3344: BytePoly_1 = bigint_nondet_inv!(ctx, x3343, x6, 1);
    let x3345: BytePoly_2 = bigint_mul!(x3343, x3344, 2);
    let x3346: BytePoly_3 = bigint_nondet_quot!(ctx, x3345, x6, 3);
    let x3347: BytePoly_1 = bigint_nondet_rem!(ctx, x3345, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3346, x6, 4), x3347, 4), x3345, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3347, x1, 1), 34, 1)?;
    let x3348: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3339, x3305, 1), x6, 1), x3344, 2);
    let x3349: BytePoly_3 = bigint_nondet_quot!(ctx, x3348, x6, 3);
    let x3350: BytePoly_1 = bigint_nondet_rem!(ctx, x3348, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3349, x6, 4), x3350, 4), x3348, 4),
        24387,
        2,
    )?;
    let x3351: BytePoly_2 = bigint_mul!(x3350, x3303, 2);
    let x3352: BytePoly_3 = bigint_nondet_quot!(ctx, x3351, x6, 3);
    let x3353: BytePoly_1 = bigint_nondet_rem!(ctx, x3351, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3352, x6, 4), x3353, 4), x3351, 4),
        24387,
        2,
    )?;
    let x3354: BytePoly_1 = bigint_add!(bigint_sub!(x3305, x3353, 1), x6, 1);
    let x3355: BytePoly_1 = bigint_nondet_quot!(ctx, x3354, x6, 1);
    let x3356: BytePoly_1 = bigint_nondet_rem!(ctx, x3354, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3355, x6, 2), x3356, 2), x3354, 2),
        8131,
        2,
    )?;
    let x3357: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3350, x3350, 2), x3303, 2), x6, 2),
            x3333,
            2
        ),
        x6,
        2
    );
    let x3358: BytePoly_3 = bigint_nondet_quot!(ctx, x3357, x6, 3);
    let x3359: BytePoly_1 = bigint_nondet_rem!(ctx, x3357, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3358, x6, 4), x3359, 4), x3357, 4),
        24387,
        2,
    )?;
    let x3360: BytePoly_2 = bigint_mul!(x3350, x3359, 2);
    let x3361: BytePoly_3 = bigint_nondet_quot!(ctx, x3360, x6, 3);
    let x3362: BytePoly_1 = bigint_nondet_rem!(ctx, x3360, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3361, x6, 4), x3362, 4), x3360, 4),
        24387,
        2,
    )?;
    let x3363: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3362, x3356, 1), 1), x6, 1);
    let x3364: BytePoly_1 = bigint_nondet_quot!(ctx, x3363, x6, 1);
    let x3365: BytePoly_1 = bigint_nondet_rem!(ctx, x3363, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3364, x6, 2), x3365, 2), x3363, 2),
        8131,
        2,
    )?;
    let x3366: BytePoly_2 = bigint_add!(
        bigint_mul!(x3359, x3340, 2),
        bigint_mul!(x3303, x3342, 2),
        2
    );
    let x3367: BytePoly_2 = bigint_add!(
        bigint_mul!(x3365, x3340, 2),
        bigint_mul!(x3305, x3342, 2),
        2
    );
    let x3368: BytePoly_3 = bigint_nondet_quot!(ctx, x3366, x6, 3);
    let x3369: BytePoly_1 = bigint_nondet_rem!(ctx, x3366, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3368, x6, 4), x3369, 4), x3366, 4),
        24387,
        2,
    )?;
    let x3370: BytePoly_3 = bigint_nondet_quot!(ctx, x3367, x6, 3);
    let x3371: BytePoly_1 = bigint_nondet_rem!(ctx, x3367, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3370, x6, 4), x3371, 4), x3367, 4),
        24387,
        2,
    )?;
    let x3372: BytePoly_2 = bigint_mul!(x3333, x3333, 2);
    let x3373: BytePoly_3 = bigint_nondet_quot!(ctx, x3372, x6, 3);
    let x3374: BytePoly_1 = bigint_nondet_rem!(ctx, x3372, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3373, x6, 4), x3374, 4), x3372, 4),
        24387,
        2,
    )?;
    let x3375: BytePoly_2 = bigint_add!(bigint_mul!(x3374, x0, 2), x5, 2);
    let x3376: BytePoly_3 = bigint_nondet_quot!(ctx, x3375, x6, 3);
    let x3377: BytePoly_1 = bigint_nondet_rem!(ctx, x3375, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3376, x6, 4), x3377, 4), x3375, 4),
        24387,
        2,
    )?;
    let x3378: BytePoly_1 = bigint_add!(x3339, x3339, 1);
    let x3379: BytePoly_1 = bigint_nondet_quot!(ctx, x3378, x6, 1);
    let x3380: BytePoly_1 = bigint_nondet_rem!(ctx, x3378, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3379, x6, 2), x3380, 2), x3378, 2),
        8131,
        2,
    )?;
    let x3381: BytePoly_1 = bigint_nondet_inv!(ctx, x3380, x6, 1);
    let x3382: BytePoly_2 = bigint_mul!(x3380, x3381, 2);
    let x3383: BytePoly_3 = bigint_nondet_quot!(ctx, x3382, x6, 3);
    let x3384: BytePoly_1 = bigint_nondet_rem!(ctx, x3382, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3383, x6, 4), x3384, 4), x3382, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3384, x3, 1), 34, 1)?;
    let x3385: BytePoly_2 = bigint_mul!(x3377, x3381, 2);
    let x3386: BytePoly_3 = bigint_nondet_quot!(ctx, x3385, x6, 3);
    let x3387: BytePoly_1 = bigint_nondet_rem!(ctx, x3385, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3386, x6, 4), x3387, 4), x3385, 4),
        24387,
        2,
    )?;
    let x3388: BytePoly_2 = bigint_mul!(x3387, x3333, 2);
    let x3389: BytePoly_3 = bigint_nondet_quot!(ctx, x3388, x6, 3);
    let x3390: BytePoly_1 = bigint_nondet_rem!(ctx, x3388, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3389, x6, 4), x3390, 4), x3388, 4),
        24387,
        2,
    )?;
    let x3391: BytePoly_1 = bigint_add!(bigint_sub!(x3339, x3390, 1), x6, 1);
    let x3392: BytePoly_1 = bigint_nondet_quot!(ctx, x3391, x6, 1);
    let x3393: BytePoly_1 = bigint_nondet_rem!(ctx, x3391, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3392, x6, 2), x3393, 2), x3391, 2),
        8131,
        2,
    )?;
    let x3394: BytePoly_2 = bigint_mul!(x3387, x3387, 2);
    let x3395: BytePoly_3 = bigint_nondet_quot!(ctx, x3394, x6, 3);
    let x3396: BytePoly_1 = bigint_nondet_rem!(ctx, x3394, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3395, x6, 4), x3396, 4), x3394, 4),
        24387,
        2,
    )?;
    let x3397: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3396, x3333, 1), x6, 1), x3333, 1),
        x6,
        1
    );
    let x3398: BytePoly_1 = bigint_nondet_quot!(ctx, x3397, x6, 1);
    let x3399: BytePoly_1 = bigint_nondet_rem!(ctx, x3397, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3398, x6, 2), x3399, 2), x3397, 2),
        8131,
        2,
    )?;
    let x3400: BytePoly_2 = bigint_mul!(x3387, x3399, 2);
    let x3401: BytePoly_3 = bigint_nondet_quot!(ctx, x3400, x6, 3);
    let x3402: BytePoly_1 = bigint_nondet_rem!(ctx, x3400, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3401, x6, 4), x3402, 4), x3400, 4),
        24387,
        2,
    )?;
    let x3403: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3402, x3393, 1), 1), x6, 1);
    let x3404: BytePoly_1 = bigint_nondet_quot!(ctx, x3403, x6, 1);
    let x3405: BytePoly_1 = bigint_nondet_rem!(ctx, x3403, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3404, x6, 2), x3405, 2), x3403, 2),
        8131,
        2,
    )?;
    let x3406: BytePoly_1 = bigint_nondet_rem!(ctx, x3341, x2, 1);
    let x3407: BytePoly_2 = bigint_nondet_quot!(ctx, x3341, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3407, x2, 3), x3406, 3), x3341, 3),
        16259,
        2,
    )?;
    let x3408: BytePoly_1 = bigint_sub!(x3, x3406, 1);
    eqz(ctx, &bigint_mul!(x3406, x3408, 2), 8131, 2)?;
    let x3409: BytePoly_1 = bigint_add!(bigint_sub!(x3399, x3369, 1), x6, 1);
    let x3410: BytePoly_1 = bigint_nondet_inv!(ctx, x3409, x6, 1);
    let x3411: BytePoly_2 = bigint_mul!(x3409, x3410, 2);
    let x3412: BytePoly_3 = bigint_nondet_quot!(ctx, x3411, x6, 3);
    let x3413: BytePoly_1 = bigint_nondet_rem!(ctx, x3411, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3412, x6, 4), x3413, 4), x3411, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3413, x1, 1), 34, 1)?;
    let x3414: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3405, x3371, 1), x6, 1), x3410, 2);
    let x3415: BytePoly_3 = bigint_nondet_quot!(ctx, x3414, x6, 3);
    let x3416: BytePoly_1 = bigint_nondet_rem!(ctx, x3414, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3415, x6, 4), x3416, 4), x3414, 4),
        24387,
        2,
    )?;
    let x3417: BytePoly_2 = bigint_mul!(x3416, x3369, 2);
    let x3418: BytePoly_3 = bigint_nondet_quot!(ctx, x3417, x6, 3);
    let x3419: BytePoly_1 = bigint_nondet_rem!(ctx, x3417, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3418, x6, 4), x3419, 4), x3417, 4),
        24387,
        2,
    )?;
    let x3420: BytePoly_1 = bigint_add!(bigint_sub!(x3371, x3419, 1), x6, 1);
    let x3421: BytePoly_1 = bigint_nondet_quot!(ctx, x3420, x6, 1);
    let x3422: BytePoly_1 = bigint_nondet_rem!(ctx, x3420, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3421, x6, 2), x3422, 2), x3420, 2),
        8131,
        2,
    )?;
    let x3423: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3416, x3416, 2), x3369, 2), x6, 2),
            x3399,
            2
        ),
        x6,
        2
    );
    let x3424: BytePoly_3 = bigint_nondet_quot!(ctx, x3423, x6, 3);
    let x3425: BytePoly_1 = bigint_nondet_rem!(ctx, x3423, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3424, x6, 4), x3425, 4), x3423, 4),
        24387,
        2,
    )?;
    let x3426: BytePoly_2 = bigint_mul!(x3416, x3425, 2);
    let x3427: BytePoly_3 = bigint_nondet_quot!(ctx, x3426, x6, 3);
    let x3428: BytePoly_1 = bigint_nondet_rem!(ctx, x3426, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3427, x6, 4), x3428, 4), x3426, 4),
        24387,
        2,
    )?;
    let x3429: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3428, x3422, 1), 1), x6, 1);
    let x3430: BytePoly_1 = bigint_nondet_quot!(ctx, x3429, x6, 1);
    let x3431: BytePoly_1 = bigint_nondet_rem!(ctx, x3429, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3430, x6, 2), x3431, 2), x3429, 2),
        8131,
        2,
    )?;
    let x3432: BytePoly_2 = bigint_add!(
        bigint_mul!(x3425, x3406, 2),
        bigint_mul!(x3369, x3408, 2),
        2
    );
    let x3433: BytePoly_2 = bigint_add!(
        bigint_mul!(x3431, x3406, 2),
        bigint_mul!(x3371, x3408, 2),
        2
    );
    let x3434: BytePoly_3 = bigint_nondet_quot!(ctx, x3432, x6, 3);
    let x3435: BytePoly_1 = bigint_nondet_rem!(ctx, x3432, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3434, x6, 4), x3435, 4), x3432, 4),
        24387,
        2,
    )?;
    let x3436: BytePoly_3 = bigint_nondet_quot!(ctx, x3433, x6, 3);
    let x3437: BytePoly_1 = bigint_nondet_rem!(ctx, x3433, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3436, x6, 4), x3437, 4), x3433, 4),
        24387,
        2,
    )?;
    let x3438: BytePoly_2 = bigint_mul!(x3399, x3399, 2);
    let x3439: BytePoly_3 = bigint_nondet_quot!(ctx, x3438, x6, 3);
    let x3440: BytePoly_1 = bigint_nondet_rem!(ctx, x3438, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3439, x6, 4), x3440, 4), x3438, 4),
        24387,
        2,
    )?;
    let x3441: BytePoly_2 = bigint_add!(bigint_mul!(x3440, x0, 2), x5, 2);
    let x3442: BytePoly_3 = bigint_nondet_quot!(ctx, x3441, x6, 3);
    let x3443: BytePoly_1 = bigint_nondet_rem!(ctx, x3441, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3442, x6, 4), x3443, 4), x3441, 4),
        24387,
        2,
    )?;
    let x3444: BytePoly_1 = bigint_add!(x3405, x3405, 1);
    let x3445: BytePoly_1 = bigint_nondet_quot!(ctx, x3444, x6, 1);
    let x3446: BytePoly_1 = bigint_nondet_rem!(ctx, x3444, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3445, x6, 2), x3446, 2), x3444, 2),
        8131,
        2,
    )?;
    let x3447: BytePoly_1 = bigint_nondet_inv!(ctx, x3446, x6, 1);
    let x3448: BytePoly_2 = bigint_mul!(x3446, x3447, 2);
    let x3449: BytePoly_3 = bigint_nondet_quot!(ctx, x3448, x6, 3);
    let x3450: BytePoly_1 = bigint_nondet_rem!(ctx, x3448, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3449, x6, 4), x3450, 4), x3448, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3450, x3, 1), 34, 1)?;
    let x3451: BytePoly_2 = bigint_mul!(x3443, x3447, 2);
    let x3452: BytePoly_3 = bigint_nondet_quot!(ctx, x3451, x6, 3);
    let x3453: BytePoly_1 = bigint_nondet_rem!(ctx, x3451, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3452, x6, 4), x3453, 4), x3451, 4),
        24387,
        2,
    )?;
    let x3454: BytePoly_2 = bigint_mul!(x3453, x3399, 2);
    let x3455: BytePoly_3 = bigint_nondet_quot!(ctx, x3454, x6, 3);
    let x3456: BytePoly_1 = bigint_nondet_rem!(ctx, x3454, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3455, x6, 4), x3456, 4), x3454, 4),
        24387,
        2,
    )?;
    let x3457: BytePoly_1 = bigint_add!(bigint_sub!(x3405, x3456, 1), x6, 1);
    let x3458: BytePoly_1 = bigint_nondet_quot!(ctx, x3457, x6, 1);
    let x3459: BytePoly_1 = bigint_nondet_rem!(ctx, x3457, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3458, x6, 2), x3459, 2), x3457, 2),
        8131,
        2,
    )?;
    let x3460: BytePoly_2 = bigint_mul!(x3453, x3453, 2);
    let x3461: BytePoly_3 = bigint_nondet_quot!(ctx, x3460, x6, 3);
    let x3462: BytePoly_1 = bigint_nondet_rem!(ctx, x3460, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3461, x6, 4), x3462, 4), x3460, 4),
        24387,
        2,
    )?;
    let x3463: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3462, x3399, 1), x6, 1), x3399, 1),
        x6,
        1
    );
    let x3464: BytePoly_1 = bigint_nondet_quot!(ctx, x3463, x6, 1);
    let x3465: BytePoly_1 = bigint_nondet_rem!(ctx, x3463, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3464, x6, 2), x3465, 2), x3463, 2),
        8131,
        2,
    )?;
    let x3466: BytePoly_2 = bigint_mul!(x3453, x3465, 2);
    let x3467: BytePoly_3 = bigint_nondet_quot!(ctx, x3466, x6, 3);
    let x3468: BytePoly_1 = bigint_nondet_rem!(ctx, x3466, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3467, x6, 4), x3468, 4), x3466, 4),
        24387,
        2,
    )?;
    let x3469: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3468, x3459, 1), 1), x6, 1);
    let x3470: BytePoly_1 = bigint_nondet_quot!(ctx, x3469, x6, 1);
    let x3471: BytePoly_1 = bigint_nondet_rem!(ctx, x3469, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3470, x6, 2), x3471, 2), x3469, 2),
        8131,
        2,
    )?;
    let x3472: BytePoly_1 = bigint_nondet_rem!(ctx, x3407, x2, 1);
    let x3473: BytePoly_2 = bigint_nondet_quot!(ctx, x3407, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3473, x2, 3), x3472, 3), x3407, 3),
        16259,
        2,
    )?;
    let x3474: BytePoly_1 = bigint_sub!(x3, x3472, 1);
    eqz(ctx, &bigint_mul!(x3472, x3474, 2), 8131, 2)?;
    let x3475: BytePoly_1 = bigint_add!(bigint_sub!(x3465, x3435, 1), x6, 1);
    let x3476: BytePoly_1 = bigint_nondet_inv!(ctx, x3475, x6, 1);
    let x3477: BytePoly_2 = bigint_mul!(x3475, x3476, 2);
    let x3478: BytePoly_3 = bigint_nondet_quot!(ctx, x3477, x6, 3);
    let x3479: BytePoly_1 = bigint_nondet_rem!(ctx, x3477, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3478, x6, 4), x3479, 4), x3477, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3479, x1, 1), 34, 1)?;
    let x3480: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3471, x3437, 1), x6, 1), x3476, 2);
    let x3481: BytePoly_3 = bigint_nondet_quot!(ctx, x3480, x6, 3);
    let x3482: BytePoly_1 = bigint_nondet_rem!(ctx, x3480, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3481, x6, 4), x3482, 4), x3480, 4),
        24387,
        2,
    )?;
    let x3483: BytePoly_2 = bigint_mul!(x3482, x3435, 2);
    let x3484: BytePoly_3 = bigint_nondet_quot!(ctx, x3483, x6, 3);
    let x3485: BytePoly_1 = bigint_nondet_rem!(ctx, x3483, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3484, x6, 4), x3485, 4), x3483, 4),
        24387,
        2,
    )?;
    let x3486: BytePoly_1 = bigint_add!(bigint_sub!(x3437, x3485, 1), x6, 1);
    let x3487: BytePoly_1 = bigint_nondet_quot!(ctx, x3486, x6, 1);
    let x3488: BytePoly_1 = bigint_nondet_rem!(ctx, x3486, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3487, x6, 2), x3488, 2), x3486, 2),
        8131,
        2,
    )?;
    let x3489: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3482, x3482, 2), x3435, 2), x6, 2),
            x3465,
            2
        ),
        x6,
        2
    );
    let x3490: BytePoly_3 = bigint_nondet_quot!(ctx, x3489, x6, 3);
    let x3491: BytePoly_1 = bigint_nondet_rem!(ctx, x3489, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3490, x6, 4), x3491, 4), x3489, 4),
        24387,
        2,
    )?;
    let x3492: BytePoly_2 = bigint_mul!(x3482, x3491, 2);
    let x3493: BytePoly_3 = bigint_nondet_quot!(ctx, x3492, x6, 3);
    let x3494: BytePoly_1 = bigint_nondet_rem!(ctx, x3492, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3493, x6, 4), x3494, 4), x3492, 4),
        24387,
        2,
    )?;
    let x3495: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3494, x3488, 1), 1), x6, 1);
    let x3496: BytePoly_1 = bigint_nondet_quot!(ctx, x3495, x6, 1);
    let x3497: BytePoly_1 = bigint_nondet_rem!(ctx, x3495, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3496, x6, 2), x3497, 2), x3495, 2),
        8131,
        2,
    )?;
    let x3498: BytePoly_2 = bigint_add!(
        bigint_mul!(x3491, x3472, 2),
        bigint_mul!(x3435, x3474, 2),
        2
    );
    let x3499: BytePoly_2 = bigint_add!(
        bigint_mul!(x3497, x3472, 2),
        bigint_mul!(x3437, x3474, 2),
        2
    );
    let x3500: BytePoly_3 = bigint_nondet_quot!(ctx, x3498, x6, 3);
    let x3501: BytePoly_1 = bigint_nondet_rem!(ctx, x3498, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3500, x6, 4), x3501, 4), x3498, 4),
        24387,
        2,
    )?;
    let x3502: BytePoly_3 = bigint_nondet_quot!(ctx, x3499, x6, 3);
    let x3503: BytePoly_1 = bigint_nondet_rem!(ctx, x3499, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3502, x6, 4), x3503, 4), x3499, 4),
        24387,
        2,
    )?;
    let x3504: BytePoly_2 = bigint_mul!(x3465, x3465, 2);
    let x3505: BytePoly_3 = bigint_nondet_quot!(ctx, x3504, x6, 3);
    let x3506: BytePoly_1 = bigint_nondet_rem!(ctx, x3504, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3505, x6, 4), x3506, 4), x3504, 4),
        24387,
        2,
    )?;
    let x3507: BytePoly_2 = bigint_add!(bigint_mul!(x3506, x0, 2), x5, 2);
    let x3508: BytePoly_3 = bigint_nondet_quot!(ctx, x3507, x6, 3);
    let x3509: BytePoly_1 = bigint_nondet_rem!(ctx, x3507, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3508, x6, 4), x3509, 4), x3507, 4),
        24387,
        2,
    )?;
    let x3510: BytePoly_1 = bigint_add!(x3471, x3471, 1);
    let x3511: BytePoly_1 = bigint_nondet_quot!(ctx, x3510, x6, 1);
    let x3512: BytePoly_1 = bigint_nondet_rem!(ctx, x3510, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3511, x6, 2), x3512, 2), x3510, 2),
        8131,
        2,
    )?;
    let x3513: BytePoly_1 = bigint_nondet_inv!(ctx, x3512, x6, 1);
    let x3514: BytePoly_2 = bigint_mul!(x3512, x3513, 2);
    let x3515: BytePoly_3 = bigint_nondet_quot!(ctx, x3514, x6, 3);
    let x3516: BytePoly_1 = bigint_nondet_rem!(ctx, x3514, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3515, x6, 4), x3516, 4), x3514, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3516, x3, 1), 34, 1)?;
    let x3517: BytePoly_2 = bigint_mul!(x3509, x3513, 2);
    let x3518: BytePoly_3 = bigint_nondet_quot!(ctx, x3517, x6, 3);
    let x3519: BytePoly_1 = bigint_nondet_rem!(ctx, x3517, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3518, x6, 4), x3519, 4), x3517, 4),
        24387,
        2,
    )?;
    let x3520: BytePoly_2 = bigint_mul!(x3519, x3465, 2);
    let x3521: BytePoly_3 = bigint_nondet_quot!(ctx, x3520, x6, 3);
    let x3522: BytePoly_1 = bigint_nondet_rem!(ctx, x3520, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3521, x6, 4), x3522, 4), x3520, 4),
        24387,
        2,
    )?;
    let x3523: BytePoly_1 = bigint_add!(bigint_sub!(x3471, x3522, 1), x6, 1);
    let x3524: BytePoly_1 = bigint_nondet_quot!(ctx, x3523, x6, 1);
    let x3525: BytePoly_1 = bigint_nondet_rem!(ctx, x3523, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3524, x6, 2), x3525, 2), x3523, 2),
        8131,
        2,
    )?;
    let x3526: BytePoly_2 = bigint_mul!(x3519, x3519, 2);
    let x3527: BytePoly_3 = bigint_nondet_quot!(ctx, x3526, x6, 3);
    let x3528: BytePoly_1 = bigint_nondet_rem!(ctx, x3526, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3527, x6, 4), x3528, 4), x3526, 4),
        24387,
        2,
    )?;
    let x3529: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3528, x3465, 1), x6, 1), x3465, 1),
        x6,
        1
    );
    let x3530: BytePoly_1 = bigint_nondet_quot!(ctx, x3529, x6, 1);
    let x3531: BytePoly_1 = bigint_nondet_rem!(ctx, x3529, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3530, x6, 2), x3531, 2), x3529, 2),
        8131,
        2,
    )?;
    let x3532: BytePoly_2 = bigint_mul!(x3519, x3531, 2);
    let x3533: BytePoly_3 = bigint_nondet_quot!(ctx, x3532, x6, 3);
    let x3534: BytePoly_1 = bigint_nondet_rem!(ctx, x3532, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3533, x6, 4), x3534, 4), x3532, 4),
        24387,
        2,
    )?;
    let x3535: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3534, x3525, 1), 1), x6, 1);
    let x3536: BytePoly_1 = bigint_nondet_quot!(ctx, x3535, x6, 1);
    let x3537: BytePoly_1 = bigint_nondet_rem!(ctx, x3535, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3536, x6, 2), x3537, 2), x3535, 2),
        8131,
        2,
    )?;
    let x3538: BytePoly_1 = bigint_nondet_rem!(ctx, x3473, x2, 1);
    let x3539: BytePoly_2 = bigint_nondet_quot!(ctx, x3473, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3539, x2, 3), x3538, 3), x3473, 3),
        16259,
        2,
    )?;
    let x3540: BytePoly_1 = bigint_sub!(x3, x3538, 1);
    eqz(ctx, &bigint_mul!(x3538, x3540, 2), 8131, 2)?;
    let x3541: BytePoly_1 = bigint_add!(bigint_sub!(x3531, x3501, 1), x6, 1);
    let x3542: BytePoly_1 = bigint_nondet_inv!(ctx, x3541, x6, 1);
    let x3543: BytePoly_2 = bigint_mul!(x3541, x3542, 2);
    let x3544: BytePoly_3 = bigint_nondet_quot!(ctx, x3543, x6, 3);
    let x3545: BytePoly_1 = bigint_nondet_rem!(ctx, x3543, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3544, x6, 4), x3545, 4), x3543, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3545, x1, 1), 34, 1)?;
    let x3546: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3537, x3503, 1), x6, 1), x3542, 2);
    let x3547: BytePoly_3 = bigint_nondet_quot!(ctx, x3546, x6, 3);
    let x3548: BytePoly_1 = bigint_nondet_rem!(ctx, x3546, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3547, x6, 4), x3548, 4), x3546, 4),
        24387,
        2,
    )?;
    let x3549: BytePoly_2 = bigint_mul!(x3548, x3501, 2);
    let x3550: BytePoly_3 = bigint_nondet_quot!(ctx, x3549, x6, 3);
    let x3551: BytePoly_1 = bigint_nondet_rem!(ctx, x3549, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3550, x6, 4), x3551, 4), x3549, 4),
        24387,
        2,
    )?;
    let x3552: BytePoly_1 = bigint_add!(bigint_sub!(x3503, x3551, 1), x6, 1);
    let x3553: BytePoly_1 = bigint_nondet_quot!(ctx, x3552, x6, 1);
    let x3554: BytePoly_1 = bigint_nondet_rem!(ctx, x3552, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3553, x6, 2), x3554, 2), x3552, 2),
        8131,
        2,
    )?;
    let x3555: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3548, x3548, 2), x3501, 2), x6, 2),
            x3531,
            2
        ),
        x6,
        2
    );
    let x3556: BytePoly_3 = bigint_nondet_quot!(ctx, x3555, x6, 3);
    let x3557: BytePoly_1 = bigint_nondet_rem!(ctx, x3555, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3556, x6, 4), x3557, 4), x3555, 4),
        24387,
        2,
    )?;
    let x3558: BytePoly_2 = bigint_mul!(x3548, x3557, 2);
    let x3559: BytePoly_3 = bigint_nondet_quot!(ctx, x3558, x6, 3);
    let x3560: BytePoly_1 = bigint_nondet_rem!(ctx, x3558, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3559, x6, 4), x3560, 4), x3558, 4),
        24387,
        2,
    )?;
    let x3561: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3560, x3554, 1), 1), x6, 1);
    let x3562: BytePoly_1 = bigint_nondet_quot!(ctx, x3561, x6, 1);
    let x3563: BytePoly_1 = bigint_nondet_rem!(ctx, x3561, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3562, x6, 2), x3563, 2), x3561, 2),
        8131,
        2,
    )?;
    let x3564: BytePoly_2 = bigint_add!(
        bigint_mul!(x3557, x3538, 2),
        bigint_mul!(x3501, x3540, 2),
        2
    );
    let x3565: BytePoly_2 = bigint_add!(
        bigint_mul!(x3563, x3538, 2),
        bigint_mul!(x3503, x3540, 2),
        2
    );
    let x3566: BytePoly_3 = bigint_nondet_quot!(ctx, x3564, x6, 3);
    let x3567: BytePoly_1 = bigint_nondet_rem!(ctx, x3564, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3566, x6, 4), x3567, 4), x3564, 4),
        24387,
        2,
    )?;
    let x3568: BytePoly_3 = bigint_nondet_quot!(ctx, x3565, x6, 3);
    let x3569: BytePoly_1 = bigint_nondet_rem!(ctx, x3565, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3568, x6, 4), x3569, 4), x3565, 4),
        24387,
        2,
    )?;
    let x3570: BytePoly_2 = bigint_mul!(x3531, x3531, 2);
    let x3571: BytePoly_3 = bigint_nondet_quot!(ctx, x3570, x6, 3);
    let x3572: BytePoly_1 = bigint_nondet_rem!(ctx, x3570, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3571, x6, 4), x3572, 4), x3570, 4),
        24387,
        2,
    )?;
    let x3573: BytePoly_2 = bigint_add!(bigint_mul!(x3572, x0, 2), x5, 2);
    let x3574: BytePoly_3 = bigint_nondet_quot!(ctx, x3573, x6, 3);
    let x3575: BytePoly_1 = bigint_nondet_rem!(ctx, x3573, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3574, x6, 4), x3575, 4), x3573, 4),
        24387,
        2,
    )?;
    let x3576: BytePoly_1 = bigint_add!(x3537, x3537, 1);
    let x3577: BytePoly_1 = bigint_nondet_quot!(ctx, x3576, x6, 1);
    let x3578: BytePoly_1 = bigint_nondet_rem!(ctx, x3576, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3577, x6, 2), x3578, 2), x3576, 2),
        8131,
        2,
    )?;
    let x3579: BytePoly_1 = bigint_nondet_inv!(ctx, x3578, x6, 1);
    let x3580: BytePoly_2 = bigint_mul!(x3578, x3579, 2);
    let x3581: BytePoly_3 = bigint_nondet_quot!(ctx, x3580, x6, 3);
    let x3582: BytePoly_1 = bigint_nondet_rem!(ctx, x3580, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3581, x6, 4), x3582, 4), x3580, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3582, x3, 1), 34, 1)?;
    let x3583: BytePoly_2 = bigint_mul!(x3575, x3579, 2);
    let x3584: BytePoly_3 = bigint_nondet_quot!(ctx, x3583, x6, 3);
    let x3585: BytePoly_1 = bigint_nondet_rem!(ctx, x3583, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3584, x6, 4), x3585, 4), x3583, 4),
        24387,
        2,
    )?;
    let x3586: BytePoly_2 = bigint_mul!(x3585, x3531, 2);
    let x3587: BytePoly_3 = bigint_nondet_quot!(ctx, x3586, x6, 3);
    let x3588: BytePoly_1 = bigint_nondet_rem!(ctx, x3586, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3587, x6, 4), x3588, 4), x3586, 4),
        24387,
        2,
    )?;
    let x3589: BytePoly_1 = bigint_add!(bigint_sub!(x3537, x3588, 1), x6, 1);
    let x3590: BytePoly_1 = bigint_nondet_quot!(ctx, x3589, x6, 1);
    let x3591: BytePoly_1 = bigint_nondet_rem!(ctx, x3589, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3590, x6, 2), x3591, 2), x3589, 2),
        8131,
        2,
    )?;
    let x3592: BytePoly_2 = bigint_mul!(x3585, x3585, 2);
    let x3593: BytePoly_3 = bigint_nondet_quot!(ctx, x3592, x6, 3);
    let x3594: BytePoly_1 = bigint_nondet_rem!(ctx, x3592, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3593, x6, 4), x3594, 4), x3592, 4),
        24387,
        2,
    )?;
    let x3595: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3594, x3531, 1), x6, 1), x3531, 1),
        x6,
        1
    );
    let x3596: BytePoly_1 = bigint_nondet_quot!(ctx, x3595, x6, 1);
    let x3597: BytePoly_1 = bigint_nondet_rem!(ctx, x3595, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3596, x6, 2), x3597, 2), x3595, 2),
        8131,
        2,
    )?;
    let x3598: BytePoly_2 = bigint_mul!(x3585, x3597, 2);
    let x3599: BytePoly_3 = bigint_nondet_quot!(ctx, x3598, x6, 3);
    let x3600: BytePoly_1 = bigint_nondet_rem!(ctx, x3598, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3599, x6, 4), x3600, 4), x3598, 4),
        24387,
        2,
    )?;
    let x3601: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3600, x3591, 1), 1), x6, 1);
    let x3602: BytePoly_1 = bigint_nondet_quot!(ctx, x3601, x6, 1);
    let x3603: BytePoly_1 = bigint_nondet_rem!(ctx, x3601, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3602, x6, 2), x3603, 2), x3601, 2),
        8131,
        2,
    )?;
    let x3604: BytePoly_1 = bigint_nondet_rem!(ctx, x3539, x2, 1);
    let x3605: BytePoly_2 = bigint_nondet_quot!(ctx, x3539, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3605, x2, 3), x3604, 3), x3539, 3),
        16259,
        2,
    )?;
    let x3606: BytePoly_1 = bigint_sub!(x3, x3604, 1);
    eqz(ctx, &bigint_mul!(x3604, x3606, 2), 8131, 2)?;
    let x3607: BytePoly_1 = bigint_add!(bigint_sub!(x3597, x3567, 1), x6, 1);
    let x3608: BytePoly_1 = bigint_nondet_inv!(ctx, x3607, x6, 1);
    let x3609: BytePoly_2 = bigint_mul!(x3607, x3608, 2);
    let x3610: BytePoly_3 = bigint_nondet_quot!(ctx, x3609, x6, 3);
    let x3611: BytePoly_1 = bigint_nondet_rem!(ctx, x3609, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3610, x6, 4), x3611, 4), x3609, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3611, x1, 1), 34, 1)?;
    let x3612: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3603, x3569, 1), x6, 1), x3608, 2);
    let x3613: BytePoly_3 = bigint_nondet_quot!(ctx, x3612, x6, 3);
    let x3614: BytePoly_1 = bigint_nondet_rem!(ctx, x3612, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3613, x6, 4), x3614, 4), x3612, 4),
        24387,
        2,
    )?;
    let x3615: BytePoly_2 = bigint_mul!(x3614, x3567, 2);
    let x3616: BytePoly_3 = bigint_nondet_quot!(ctx, x3615, x6, 3);
    let x3617: BytePoly_1 = bigint_nondet_rem!(ctx, x3615, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3616, x6, 4), x3617, 4), x3615, 4),
        24387,
        2,
    )?;
    let x3618: BytePoly_1 = bigint_add!(bigint_sub!(x3569, x3617, 1), x6, 1);
    let x3619: BytePoly_1 = bigint_nondet_quot!(ctx, x3618, x6, 1);
    let x3620: BytePoly_1 = bigint_nondet_rem!(ctx, x3618, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3619, x6, 2), x3620, 2), x3618, 2),
        8131,
        2,
    )?;
    let x3621: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3614, x3614, 2), x3567, 2), x6, 2),
            x3597,
            2
        ),
        x6,
        2
    );
    let x3622: BytePoly_3 = bigint_nondet_quot!(ctx, x3621, x6, 3);
    let x3623: BytePoly_1 = bigint_nondet_rem!(ctx, x3621, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3622, x6, 4), x3623, 4), x3621, 4),
        24387,
        2,
    )?;
    let x3624: BytePoly_2 = bigint_mul!(x3614, x3623, 2);
    let x3625: BytePoly_3 = bigint_nondet_quot!(ctx, x3624, x6, 3);
    let x3626: BytePoly_1 = bigint_nondet_rem!(ctx, x3624, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3625, x6, 4), x3626, 4), x3624, 4),
        24387,
        2,
    )?;
    let x3627: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3626, x3620, 1), 1), x6, 1);
    let x3628: BytePoly_1 = bigint_nondet_quot!(ctx, x3627, x6, 1);
    let x3629: BytePoly_1 = bigint_nondet_rem!(ctx, x3627, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3628, x6, 2), x3629, 2), x3627, 2),
        8131,
        2,
    )?;
    let x3630: BytePoly_2 = bigint_add!(
        bigint_mul!(x3623, x3604, 2),
        bigint_mul!(x3567, x3606, 2),
        2
    );
    let x3631: BytePoly_2 = bigint_add!(
        bigint_mul!(x3629, x3604, 2),
        bigint_mul!(x3569, x3606, 2),
        2
    );
    let x3632: BytePoly_3 = bigint_nondet_quot!(ctx, x3630, x6, 3);
    let x3633: BytePoly_1 = bigint_nondet_rem!(ctx, x3630, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3632, x6, 4), x3633, 4), x3630, 4),
        24387,
        2,
    )?;
    let x3634: BytePoly_3 = bigint_nondet_quot!(ctx, x3631, x6, 3);
    let x3635: BytePoly_1 = bigint_nondet_rem!(ctx, x3631, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3634, x6, 4), x3635, 4), x3631, 4),
        24387,
        2,
    )?;
    let x3636: BytePoly_2 = bigint_mul!(x3597, x3597, 2);
    let x3637: BytePoly_3 = bigint_nondet_quot!(ctx, x3636, x6, 3);
    let x3638: BytePoly_1 = bigint_nondet_rem!(ctx, x3636, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3637, x6, 4), x3638, 4), x3636, 4),
        24387,
        2,
    )?;
    let x3639: BytePoly_2 = bigint_add!(bigint_mul!(x3638, x0, 2), x5, 2);
    let x3640: BytePoly_3 = bigint_nondet_quot!(ctx, x3639, x6, 3);
    let x3641: BytePoly_1 = bigint_nondet_rem!(ctx, x3639, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3640, x6, 4), x3641, 4), x3639, 4),
        24387,
        2,
    )?;
    let x3642: BytePoly_1 = bigint_add!(x3603, x3603, 1);
    let x3643: BytePoly_1 = bigint_nondet_quot!(ctx, x3642, x6, 1);
    let x3644: BytePoly_1 = bigint_nondet_rem!(ctx, x3642, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3643, x6, 2), x3644, 2), x3642, 2),
        8131,
        2,
    )?;
    let x3645: BytePoly_1 = bigint_nondet_inv!(ctx, x3644, x6, 1);
    let x3646: BytePoly_2 = bigint_mul!(x3644, x3645, 2);
    let x3647: BytePoly_3 = bigint_nondet_quot!(ctx, x3646, x6, 3);
    let x3648: BytePoly_1 = bigint_nondet_rem!(ctx, x3646, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3647, x6, 4), x3648, 4), x3646, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3648, x3, 1), 34, 1)?;
    let x3649: BytePoly_2 = bigint_mul!(x3641, x3645, 2);
    let x3650: BytePoly_3 = bigint_nondet_quot!(ctx, x3649, x6, 3);
    let x3651: BytePoly_1 = bigint_nondet_rem!(ctx, x3649, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3650, x6, 4), x3651, 4), x3649, 4),
        24387,
        2,
    )?;
    let x3652: BytePoly_2 = bigint_mul!(x3651, x3597, 2);
    let x3653: BytePoly_3 = bigint_nondet_quot!(ctx, x3652, x6, 3);
    let x3654: BytePoly_1 = bigint_nondet_rem!(ctx, x3652, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3653, x6, 4), x3654, 4), x3652, 4),
        24387,
        2,
    )?;
    let x3655: BytePoly_1 = bigint_add!(bigint_sub!(x3603, x3654, 1), x6, 1);
    let x3656: BytePoly_1 = bigint_nondet_quot!(ctx, x3655, x6, 1);
    let x3657: BytePoly_1 = bigint_nondet_rem!(ctx, x3655, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3656, x6, 2), x3657, 2), x3655, 2),
        8131,
        2,
    )?;
    let x3658: BytePoly_2 = bigint_mul!(x3651, x3651, 2);
    let x3659: BytePoly_3 = bigint_nondet_quot!(ctx, x3658, x6, 3);
    let x3660: BytePoly_1 = bigint_nondet_rem!(ctx, x3658, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3659, x6, 4), x3660, 4), x3658, 4),
        24387,
        2,
    )?;
    let x3661: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3660, x3597, 1), x6, 1), x3597, 1),
        x6,
        1
    );
    let x3662: BytePoly_1 = bigint_nondet_quot!(ctx, x3661, x6, 1);
    let x3663: BytePoly_1 = bigint_nondet_rem!(ctx, x3661, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3662, x6, 2), x3663, 2), x3661, 2),
        8131,
        2,
    )?;
    let x3664: BytePoly_2 = bigint_mul!(x3651, x3663, 2);
    let x3665: BytePoly_3 = bigint_nondet_quot!(ctx, x3664, x6, 3);
    let x3666: BytePoly_1 = bigint_nondet_rem!(ctx, x3664, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3665, x6, 4), x3666, 4), x3664, 4),
        24387,
        2,
    )?;
    let x3667: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3666, x3657, 1), 1), x6, 1);
    let x3668: BytePoly_1 = bigint_nondet_quot!(ctx, x3667, x6, 1);
    let x3669: BytePoly_1 = bigint_nondet_rem!(ctx, x3667, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3668, x6, 2), x3669, 2), x3667, 2),
        8131,
        2,
    )?;
    let x3670: BytePoly_1 = bigint_nondet_rem!(ctx, x3605, x2, 1);
    let x3671: BytePoly_2 = bigint_nondet_quot!(ctx, x3605, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3671, x2, 3), x3670, 3), x3605, 3),
        16259,
        2,
    )?;
    let x3672: BytePoly_1 = bigint_sub!(x3, x3670, 1);
    eqz(ctx, &bigint_mul!(x3670, x3672, 2), 8131, 2)?;
    let x3673: BytePoly_1 = bigint_add!(bigint_sub!(x3663, x3633, 1), x6, 1);
    let x3674: BytePoly_1 = bigint_nondet_inv!(ctx, x3673, x6, 1);
    let x3675: BytePoly_2 = bigint_mul!(x3673, x3674, 2);
    let x3676: BytePoly_3 = bigint_nondet_quot!(ctx, x3675, x6, 3);
    let x3677: BytePoly_1 = bigint_nondet_rem!(ctx, x3675, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3676, x6, 4), x3677, 4), x3675, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3677, x1, 1), 34, 1)?;
    let x3678: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3669, x3635, 1), x6, 1), x3674, 2);
    let x3679: BytePoly_3 = bigint_nondet_quot!(ctx, x3678, x6, 3);
    let x3680: BytePoly_1 = bigint_nondet_rem!(ctx, x3678, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3679, x6, 4), x3680, 4), x3678, 4),
        24387,
        2,
    )?;
    let x3681: BytePoly_2 = bigint_mul!(x3680, x3633, 2);
    let x3682: BytePoly_3 = bigint_nondet_quot!(ctx, x3681, x6, 3);
    let x3683: BytePoly_1 = bigint_nondet_rem!(ctx, x3681, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3682, x6, 4), x3683, 4), x3681, 4),
        24387,
        2,
    )?;
    let x3684: BytePoly_1 = bigint_add!(bigint_sub!(x3635, x3683, 1), x6, 1);
    let x3685: BytePoly_1 = bigint_nondet_quot!(ctx, x3684, x6, 1);
    let x3686: BytePoly_1 = bigint_nondet_rem!(ctx, x3684, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3685, x6, 2), x3686, 2), x3684, 2),
        8131,
        2,
    )?;
    let x3687: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3680, x3680, 2), x3633, 2), x6, 2),
            x3663,
            2
        ),
        x6,
        2
    );
    let x3688: BytePoly_3 = bigint_nondet_quot!(ctx, x3687, x6, 3);
    let x3689: BytePoly_1 = bigint_nondet_rem!(ctx, x3687, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3688, x6, 4), x3689, 4), x3687, 4),
        24387,
        2,
    )?;
    let x3690: BytePoly_2 = bigint_mul!(x3680, x3689, 2);
    let x3691: BytePoly_3 = bigint_nondet_quot!(ctx, x3690, x6, 3);
    let x3692: BytePoly_1 = bigint_nondet_rem!(ctx, x3690, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3691, x6, 4), x3692, 4), x3690, 4),
        24387,
        2,
    )?;
    let x3693: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3692, x3686, 1), 1), x6, 1);
    let x3694: BytePoly_1 = bigint_nondet_quot!(ctx, x3693, x6, 1);
    let x3695: BytePoly_1 = bigint_nondet_rem!(ctx, x3693, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3694, x6, 2), x3695, 2), x3693, 2),
        8131,
        2,
    )?;
    let x3696: BytePoly_2 = bigint_add!(
        bigint_mul!(x3689, x3670, 2),
        bigint_mul!(x3633, x3672, 2),
        2
    );
    let x3697: BytePoly_2 = bigint_add!(
        bigint_mul!(x3695, x3670, 2),
        bigint_mul!(x3635, x3672, 2),
        2
    );
    let x3698: BytePoly_3 = bigint_nondet_quot!(ctx, x3696, x6, 3);
    let x3699: BytePoly_1 = bigint_nondet_rem!(ctx, x3696, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3698, x6, 4), x3699, 4), x3696, 4),
        24387,
        2,
    )?;
    let x3700: BytePoly_3 = bigint_nondet_quot!(ctx, x3697, x6, 3);
    let x3701: BytePoly_1 = bigint_nondet_rem!(ctx, x3697, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3700, x6, 4), x3701, 4), x3697, 4),
        24387,
        2,
    )?;
    let x3702: BytePoly_2 = bigint_mul!(x3663, x3663, 2);
    let x3703: BytePoly_3 = bigint_nondet_quot!(ctx, x3702, x6, 3);
    let x3704: BytePoly_1 = bigint_nondet_rem!(ctx, x3702, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3703, x6, 4), x3704, 4), x3702, 4),
        24387,
        2,
    )?;
    let x3705: BytePoly_2 = bigint_add!(bigint_mul!(x3704, x0, 2), x5, 2);
    let x3706: BytePoly_3 = bigint_nondet_quot!(ctx, x3705, x6, 3);
    let x3707: BytePoly_1 = bigint_nondet_rem!(ctx, x3705, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3706, x6, 4), x3707, 4), x3705, 4),
        24387,
        2,
    )?;
    let x3708: BytePoly_1 = bigint_add!(x3669, x3669, 1);
    let x3709: BytePoly_1 = bigint_nondet_quot!(ctx, x3708, x6, 1);
    let x3710: BytePoly_1 = bigint_nondet_rem!(ctx, x3708, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3709, x6, 2), x3710, 2), x3708, 2),
        8131,
        2,
    )?;
    let x3711: BytePoly_1 = bigint_nondet_inv!(ctx, x3710, x6, 1);
    let x3712: BytePoly_2 = bigint_mul!(x3710, x3711, 2);
    let x3713: BytePoly_3 = bigint_nondet_quot!(ctx, x3712, x6, 3);
    let x3714: BytePoly_1 = bigint_nondet_rem!(ctx, x3712, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3713, x6, 4), x3714, 4), x3712, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3714, x3, 1), 34, 1)?;
    let x3715: BytePoly_2 = bigint_mul!(x3707, x3711, 2);
    let x3716: BytePoly_3 = bigint_nondet_quot!(ctx, x3715, x6, 3);
    let x3717: BytePoly_1 = bigint_nondet_rem!(ctx, x3715, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3716, x6, 4), x3717, 4), x3715, 4),
        24387,
        2,
    )?;
    let x3718: BytePoly_2 = bigint_mul!(x3717, x3663, 2);
    let x3719: BytePoly_3 = bigint_nondet_quot!(ctx, x3718, x6, 3);
    let x3720: BytePoly_1 = bigint_nondet_rem!(ctx, x3718, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3719, x6, 4), x3720, 4), x3718, 4),
        24387,
        2,
    )?;
    let x3721: BytePoly_1 = bigint_add!(bigint_sub!(x3669, x3720, 1), x6, 1);
    let x3722: BytePoly_1 = bigint_nondet_quot!(ctx, x3721, x6, 1);
    let x3723: BytePoly_1 = bigint_nondet_rem!(ctx, x3721, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3722, x6, 2), x3723, 2), x3721, 2),
        8131,
        2,
    )?;
    let x3724: BytePoly_2 = bigint_mul!(x3717, x3717, 2);
    let x3725: BytePoly_3 = bigint_nondet_quot!(ctx, x3724, x6, 3);
    let x3726: BytePoly_1 = bigint_nondet_rem!(ctx, x3724, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3725, x6, 4), x3726, 4), x3724, 4),
        24387,
        2,
    )?;
    let x3727: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3726, x3663, 1), x6, 1), x3663, 1),
        x6,
        1
    );
    let x3728: BytePoly_1 = bigint_nondet_quot!(ctx, x3727, x6, 1);
    let x3729: BytePoly_1 = bigint_nondet_rem!(ctx, x3727, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3728, x6, 2), x3729, 2), x3727, 2),
        8131,
        2,
    )?;
    let x3730: BytePoly_2 = bigint_mul!(x3717, x3729, 2);
    let x3731: BytePoly_3 = bigint_nondet_quot!(ctx, x3730, x6, 3);
    let x3732: BytePoly_1 = bigint_nondet_rem!(ctx, x3730, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3731, x6, 4), x3732, 4), x3730, 4),
        24387,
        2,
    )?;
    let x3733: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3732, x3723, 1), 1), x6, 1);
    let x3734: BytePoly_1 = bigint_nondet_quot!(ctx, x3733, x6, 1);
    let x3735: BytePoly_1 = bigint_nondet_rem!(ctx, x3733, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3734, x6, 2), x3735, 2), x3733, 2),
        8131,
        2,
    )?;
    let x3736: BytePoly_1 = bigint_nondet_rem!(ctx, x3671, x2, 1);
    let x3737: BytePoly_2 = bigint_nondet_quot!(ctx, x3671, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3737, x2, 3), x3736, 3), x3671, 3),
        16259,
        2,
    )?;
    let x3738: BytePoly_1 = bigint_sub!(x3, x3736, 1);
    eqz(ctx, &bigint_mul!(x3736, x3738, 2), 8131, 2)?;
    let x3739: BytePoly_1 = bigint_add!(bigint_sub!(x3729, x3699, 1), x6, 1);
    let x3740: BytePoly_1 = bigint_nondet_inv!(ctx, x3739, x6, 1);
    let x3741: BytePoly_2 = bigint_mul!(x3739, x3740, 2);
    let x3742: BytePoly_3 = bigint_nondet_quot!(ctx, x3741, x6, 3);
    let x3743: BytePoly_1 = bigint_nondet_rem!(ctx, x3741, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3742, x6, 4), x3743, 4), x3741, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3743, x1, 1), 34, 1)?;
    let x3744: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3735, x3701, 1), x6, 1), x3740, 2);
    let x3745: BytePoly_3 = bigint_nondet_quot!(ctx, x3744, x6, 3);
    let x3746: BytePoly_1 = bigint_nondet_rem!(ctx, x3744, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3745, x6, 4), x3746, 4), x3744, 4),
        24387,
        2,
    )?;
    let x3747: BytePoly_2 = bigint_mul!(x3746, x3699, 2);
    let x3748: BytePoly_3 = bigint_nondet_quot!(ctx, x3747, x6, 3);
    let x3749: BytePoly_1 = bigint_nondet_rem!(ctx, x3747, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3748, x6, 4), x3749, 4), x3747, 4),
        24387,
        2,
    )?;
    let x3750: BytePoly_1 = bigint_add!(bigint_sub!(x3701, x3749, 1), x6, 1);
    let x3751: BytePoly_1 = bigint_nondet_quot!(ctx, x3750, x6, 1);
    let x3752: BytePoly_1 = bigint_nondet_rem!(ctx, x3750, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3751, x6, 2), x3752, 2), x3750, 2),
        8131,
        2,
    )?;
    let x3753: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3746, x3746, 2), x3699, 2), x6, 2),
            x3729,
            2
        ),
        x6,
        2
    );
    let x3754: BytePoly_3 = bigint_nondet_quot!(ctx, x3753, x6, 3);
    let x3755: BytePoly_1 = bigint_nondet_rem!(ctx, x3753, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3754, x6, 4), x3755, 4), x3753, 4),
        24387,
        2,
    )?;
    let x3756: BytePoly_2 = bigint_mul!(x3746, x3755, 2);
    let x3757: BytePoly_3 = bigint_nondet_quot!(ctx, x3756, x6, 3);
    let x3758: BytePoly_1 = bigint_nondet_rem!(ctx, x3756, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3757, x6, 4), x3758, 4), x3756, 4),
        24387,
        2,
    )?;
    let x3759: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3758, x3752, 1), 1), x6, 1);
    let x3760: BytePoly_1 = bigint_nondet_quot!(ctx, x3759, x6, 1);
    let x3761: BytePoly_1 = bigint_nondet_rem!(ctx, x3759, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3760, x6, 2), x3761, 2), x3759, 2),
        8131,
        2,
    )?;
    let x3762: BytePoly_2 = bigint_add!(
        bigint_mul!(x3755, x3736, 2),
        bigint_mul!(x3699, x3738, 2),
        2
    );
    let x3763: BytePoly_2 = bigint_add!(
        bigint_mul!(x3761, x3736, 2),
        bigint_mul!(x3701, x3738, 2),
        2
    );
    let x3764: BytePoly_3 = bigint_nondet_quot!(ctx, x3762, x6, 3);
    let x3765: BytePoly_1 = bigint_nondet_rem!(ctx, x3762, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3764, x6, 4), x3765, 4), x3762, 4),
        24387,
        2,
    )?;
    let x3766: BytePoly_3 = bigint_nondet_quot!(ctx, x3763, x6, 3);
    let x3767: BytePoly_1 = bigint_nondet_rem!(ctx, x3763, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3766, x6, 4), x3767, 4), x3763, 4),
        24387,
        2,
    )?;
    let x3768: BytePoly_2 = bigint_mul!(x3729, x3729, 2);
    let x3769: BytePoly_3 = bigint_nondet_quot!(ctx, x3768, x6, 3);
    let x3770: BytePoly_1 = bigint_nondet_rem!(ctx, x3768, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3769, x6, 4), x3770, 4), x3768, 4),
        24387,
        2,
    )?;
    let x3771: BytePoly_2 = bigint_add!(bigint_mul!(x3770, x0, 2), x5, 2);
    let x3772: BytePoly_3 = bigint_nondet_quot!(ctx, x3771, x6, 3);
    let x3773: BytePoly_1 = bigint_nondet_rem!(ctx, x3771, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3772, x6, 4), x3773, 4), x3771, 4),
        24387,
        2,
    )?;
    let x3774: BytePoly_1 = bigint_add!(x3735, x3735, 1);
    let x3775: BytePoly_1 = bigint_nondet_quot!(ctx, x3774, x6, 1);
    let x3776: BytePoly_1 = bigint_nondet_rem!(ctx, x3774, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3775, x6, 2), x3776, 2), x3774, 2),
        8131,
        2,
    )?;
    let x3777: BytePoly_1 = bigint_nondet_inv!(ctx, x3776, x6, 1);
    let x3778: BytePoly_2 = bigint_mul!(x3776, x3777, 2);
    let x3779: BytePoly_3 = bigint_nondet_quot!(ctx, x3778, x6, 3);
    let x3780: BytePoly_1 = bigint_nondet_rem!(ctx, x3778, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3779, x6, 4), x3780, 4), x3778, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3780, x3, 1), 34, 1)?;
    let x3781: BytePoly_2 = bigint_mul!(x3773, x3777, 2);
    let x3782: BytePoly_3 = bigint_nondet_quot!(ctx, x3781, x6, 3);
    let x3783: BytePoly_1 = bigint_nondet_rem!(ctx, x3781, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3782, x6, 4), x3783, 4), x3781, 4),
        24387,
        2,
    )?;
    let x3784: BytePoly_2 = bigint_mul!(x3783, x3729, 2);
    let x3785: BytePoly_3 = bigint_nondet_quot!(ctx, x3784, x6, 3);
    let x3786: BytePoly_1 = bigint_nondet_rem!(ctx, x3784, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3785, x6, 4), x3786, 4), x3784, 4),
        24387,
        2,
    )?;
    let x3787: BytePoly_1 = bigint_add!(bigint_sub!(x3735, x3786, 1), x6, 1);
    let x3788: BytePoly_1 = bigint_nondet_quot!(ctx, x3787, x6, 1);
    let x3789: BytePoly_1 = bigint_nondet_rem!(ctx, x3787, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3788, x6, 2), x3789, 2), x3787, 2),
        8131,
        2,
    )?;
    let x3790: BytePoly_2 = bigint_mul!(x3783, x3783, 2);
    let x3791: BytePoly_3 = bigint_nondet_quot!(ctx, x3790, x6, 3);
    let x3792: BytePoly_1 = bigint_nondet_rem!(ctx, x3790, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3791, x6, 4), x3792, 4), x3790, 4),
        24387,
        2,
    )?;
    let x3793: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3792, x3729, 1), x6, 1), x3729, 1),
        x6,
        1
    );
    let x3794: BytePoly_1 = bigint_nondet_quot!(ctx, x3793, x6, 1);
    let x3795: BytePoly_1 = bigint_nondet_rem!(ctx, x3793, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3794, x6, 2), x3795, 2), x3793, 2),
        8131,
        2,
    )?;
    let x3796: BytePoly_2 = bigint_mul!(x3783, x3795, 2);
    let x3797: BytePoly_3 = bigint_nondet_quot!(ctx, x3796, x6, 3);
    let x3798: BytePoly_1 = bigint_nondet_rem!(ctx, x3796, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3797, x6, 4), x3798, 4), x3796, 4),
        24387,
        2,
    )?;
    let x3799: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3798, x3789, 1), 1), x6, 1);
    let x3800: BytePoly_1 = bigint_nondet_quot!(ctx, x3799, x6, 1);
    let x3801: BytePoly_1 = bigint_nondet_rem!(ctx, x3799, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3800, x6, 2), x3801, 2), x3799, 2),
        8131,
        2,
    )?;
    let x3802: BytePoly_1 = bigint_nondet_rem!(ctx, x3737, x2, 1);
    let x3803: BytePoly_2 = bigint_nondet_quot!(ctx, x3737, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3803, x2, 3), x3802, 3), x3737, 3),
        16259,
        2,
    )?;
    let x3804: BytePoly_1 = bigint_sub!(x3, x3802, 1);
    eqz(ctx, &bigint_mul!(x3802, x3804, 2), 8131, 2)?;
    let x3805: BytePoly_1 = bigint_add!(bigint_sub!(x3795, x3765, 1), x6, 1);
    let x3806: BytePoly_1 = bigint_nondet_inv!(ctx, x3805, x6, 1);
    let x3807: BytePoly_2 = bigint_mul!(x3805, x3806, 2);
    let x3808: BytePoly_3 = bigint_nondet_quot!(ctx, x3807, x6, 3);
    let x3809: BytePoly_1 = bigint_nondet_rem!(ctx, x3807, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3808, x6, 4), x3809, 4), x3807, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3809, x1, 1), 34, 1)?;
    let x3810: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3801, x3767, 1), x6, 1), x3806, 2);
    let x3811: BytePoly_3 = bigint_nondet_quot!(ctx, x3810, x6, 3);
    let x3812: BytePoly_1 = bigint_nondet_rem!(ctx, x3810, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3811, x6, 4), x3812, 4), x3810, 4),
        24387,
        2,
    )?;
    let x3813: BytePoly_2 = bigint_mul!(x3812, x3765, 2);
    let x3814: BytePoly_3 = bigint_nondet_quot!(ctx, x3813, x6, 3);
    let x3815: BytePoly_1 = bigint_nondet_rem!(ctx, x3813, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3814, x6, 4), x3815, 4), x3813, 4),
        24387,
        2,
    )?;
    let x3816: BytePoly_1 = bigint_add!(bigint_sub!(x3767, x3815, 1), x6, 1);
    let x3817: BytePoly_1 = bigint_nondet_quot!(ctx, x3816, x6, 1);
    let x3818: BytePoly_1 = bigint_nondet_rem!(ctx, x3816, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3817, x6, 2), x3818, 2), x3816, 2),
        8131,
        2,
    )?;
    let x3819: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3812, x3812, 2), x3765, 2), x6, 2),
            x3795,
            2
        ),
        x6,
        2
    );
    let x3820: BytePoly_3 = bigint_nondet_quot!(ctx, x3819, x6, 3);
    let x3821: BytePoly_1 = bigint_nondet_rem!(ctx, x3819, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3820, x6, 4), x3821, 4), x3819, 4),
        24387,
        2,
    )?;
    let x3822: BytePoly_2 = bigint_mul!(x3812, x3821, 2);
    let x3823: BytePoly_3 = bigint_nondet_quot!(ctx, x3822, x6, 3);
    let x3824: BytePoly_1 = bigint_nondet_rem!(ctx, x3822, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3823, x6, 4), x3824, 4), x3822, 4),
        24387,
        2,
    )?;
    let x3825: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3824, x3818, 1), 1), x6, 1);
    let x3826: BytePoly_1 = bigint_nondet_quot!(ctx, x3825, x6, 1);
    let x3827: BytePoly_1 = bigint_nondet_rem!(ctx, x3825, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3826, x6, 2), x3827, 2), x3825, 2),
        8131,
        2,
    )?;
    let x3828: BytePoly_2 = bigint_add!(
        bigint_mul!(x3821, x3802, 2),
        bigint_mul!(x3765, x3804, 2),
        2
    );
    let x3829: BytePoly_2 = bigint_add!(
        bigint_mul!(x3827, x3802, 2),
        bigint_mul!(x3767, x3804, 2),
        2
    );
    let x3830: BytePoly_3 = bigint_nondet_quot!(ctx, x3828, x6, 3);
    let x3831: BytePoly_1 = bigint_nondet_rem!(ctx, x3828, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3830, x6, 4), x3831, 4), x3828, 4),
        24387,
        2,
    )?;
    let x3832: BytePoly_3 = bigint_nondet_quot!(ctx, x3829, x6, 3);
    let x3833: BytePoly_1 = bigint_nondet_rem!(ctx, x3829, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3832, x6, 4), x3833, 4), x3829, 4),
        24387,
        2,
    )?;
    let x3834: BytePoly_2 = bigint_mul!(x3795, x3795, 2);
    let x3835: BytePoly_3 = bigint_nondet_quot!(ctx, x3834, x6, 3);
    let x3836: BytePoly_1 = bigint_nondet_rem!(ctx, x3834, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3835, x6, 4), x3836, 4), x3834, 4),
        24387,
        2,
    )?;
    let x3837: BytePoly_2 = bigint_add!(bigint_mul!(x3836, x0, 2), x5, 2);
    let x3838: BytePoly_3 = bigint_nondet_quot!(ctx, x3837, x6, 3);
    let x3839: BytePoly_1 = bigint_nondet_rem!(ctx, x3837, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3838, x6, 4), x3839, 4), x3837, 4),
        24387,
        2,
    )?;
    let x3840: BytePoly_1 = bigint_add!(x3801, x3801, 1);
    let x3841: BytePoly_1 = bigint_nondet_quot!(ctx, x3840, x6, 1);
    let x3842: BytePoly_1 = bigint_nondet_rem!(ctx, x3840, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3841, x6, 2), x3842, 2), x3840, 2),
        8131,
        2,
    )?;
    let x3843: BytePoly_1 = bigint_nondet_inv!(ctx, x3842, x6, 1);
    let x3844: BytePoly_2 = bigint_mul!(x3842, x3843, 2);
    let x3845: BytePoly_3 = bigint_nondet_quot!(ctx, x3844, x6, 3);
    let x3846: BytePoly_1 = bigint_nondet_rem!(ctx, x3844, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3845, x6, 4), x3846, 4), x3844, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3846, x3, 1), 34, 1)?;
    let x3847: BytePoly_2 = bigint_mul!(x3839, x3843, 2);
    let x3848: BytePoly_3 = bigint_nondet_quot!(ctx, x3847, x6, 3);
    let x3849: BytePoly_1 = bigint_nondet_rem!(ctx, x3847, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3848, x6, 4), x3849, 4), x3847, 4),
        24387,
        2,
    )?;
    let x3850: BytePoly_2 = bigint_mul!(x3849, x3795, 2);
    let x3851: BytePoly_3 = bigint_nondet_quot!(ctx, x3850, x6, 3);
    let x3852: BytePoly_1 = bigint_nondet_rem!(ctx, x3850, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3851, x6, 4), x3852, 4), x3850, 4),
        24387,
        2,
    )?;
    let x3853: BytePoly_1 = bigint_add!(bigint_sub!(x3801, x3852, 1), x6, 1);
    let x3854: BytePoly_1 = bigint_nondet_quot!(ctx, x3853, x6, 1);
    let x3855: BytePoly_1 = bigint_nondet_rem!(ctx, x3853, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3854, x6, 2), x3855, 2), x3853, 2),
        8131,
        2,
    )?;
    let x3856: BytePoly_2 = bigint_mul!(x3849, x3849, 2);
    let x3857: BytePoly_3 = bigint_nondet_quot!(ctx, x3856, x6, 3);
    let x3858: BytePoly_1 = bigint_nondet_rem!(ctx, x3856, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3857, x6, 4), x3858, 4), x3856, 4),
        24387,
        2,
    )?;
    let x3859: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3858, x3795, 1), x6, 1), x3795, 1),
        x6,
        1
    );
    let x3860: BytePoly_1 = bigint_nondet_quot!(ctx, x3859, x6, 1);
    let x3861: BytePoly_1 = bigint_nondet_rem!(ctx, x3859, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3860, x6, 2), x3861, 2), x3859, 2),
        8131,
        2,
    )?;
    let x3862: BytePoly_2 = bigint_mul!(x3849, x3861, 2);
    let x3863: BytePoly_3 = bigint_nondet_quot!(ctx, x3862, x6, 3);
    let x3864: BytePoly_1 = bigint_nondet_rem!(ctx, x3862, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3863, x6, 4), x3864, 4), x3862, 4),
        24387,
        2,
    )?;
    let x3865: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3864, x3855, 1), 1), x6, 1);
    let x3866: BytePoly_1 = bigint_nondet_quot!(ctx, x3865, x6, 1);
    let x3867: BytePoly_1 = bigint_nondet_rem!(ctx, x3865, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3866, x6, 2), x3867, 2), x3865, 2),
        8131,
        2,
    )?;
    let x3868: BytePoly_1 = bigint_nondet_rem!(ctx, x3803, x2, 1);
    let x3869: BytePoly_2 = bigint_nondet_quot!(ctx, x3803, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3869, x2, 3), x3868, 3), x3803, 3),
        16259,
        2,
    )?;
    let x3870: BytePoly_1 = bigint_sub!(x3, x3868, 1);
    eqz(ctx, &bigint_mul!(x3868, x3870, 2), 8131, 2)?;
    let x3871: BytePoly_1 = bigint_add!(bigint_sub!(x3861, x3831, 1), x6, 1);
    let x3872: BytePoly_1 = bigint_nondet_inv!(ctx, x3871, x6, 1);
    let x3873: BytePoly_2 = bigint_mul!(x3871, x3872, 2);
    let x3874: BytePoly_3 = bigint_nondet_quot!(ctx, x3873, x6, 3);
    let x3875: BytePoly_1 = bigint_nondet_rem!(ctx, x3873, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3874, x6, 4), x3875, 4), x3873, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3875, x1, 1), 34, 1)?;
    let x3876: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3867, x3833, 1), x6, 1), x3872, 2);
    let x3877: BytePoly_3 = bigint_nondet_quot!(ctx, x3876, x6, 3);
    let x3878: BytePoly_1 = bigint_nondet_rem!(ctx, x3876, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3877, x6, 4), x3878, 4), x3876, 4),
        24387,
        2,
    )?;
    let x3879: BytePoly_2 = bigint_mul!(x3878, x3831, 2);
    let x3880: BytePoly_3 = bigint_nondet_quot!(ctx, x3879, x6, 3);
    let x3881: BytePoly_1 = bigint_nondet_rem!(ctx, x3879, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3880, x6, 4), x3881, 4), x3879, 4),
        24387,
        2,
    )?;
    let x3882: BytePoly_1 = bigint_add!(bigint_sub!(x3833, x3881, 1), x6, 1);
    let x3883: BytePoly_1 = bigint_nondet_quot!(ctx, x3882, x6, 1);
    let x3884: BytePoly_1 = bigint_nondet_rem!(ctx, x3882, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3883, x6, 2), x3884, 2), x3882, 2),
        8131,
        2,
    )?;
    let x3885: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3878, x3878, 2), x3831, 2), x6, 2),
            x3861,
            2
        ),
        x6,
        2
    );
    let x3886: BytePoly_3 = bigint_nondet_quot!(ctx, x3885, x6, 3);
    let x3887: BytePoly_1 = bigint_nondet_rem!(ctx, x3885, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3886, x6, 4), x3887, 4), x3885, 4),
        24387,
        2,
    )?;
    let x3888: BytePoly_2 = bigint_mul!(x3878, x3887, 2);
    let x3889: BytePoly_3 = bigint_nondet_quot!(ctx, x3888, x6, 3);
    let x3890: BytePoly_1 = bigint_nondet_rem!(ctx, x3888, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3889, x6, 4), x3890, 4), x3888, 4),
        24387,
        2,
    )?;
    let x3891: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3890, x3884, 1), 1), x6, 1);
    let x3892: BytePoly_1 = bigint_nondet_quot!(ctx, x3891, x6, 1);
    let x3893: BytePoly_1 = bigint_nondet_rem!(ctx, x3891, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3892, x6, 2), x3893, 2), x3891, 2),
        8131,
        2,
    )?;
    let x3894: BytePoly_2 = bigint_add!(
        bigint_mul!(x3887, x3868, 2),
        bigint_mul!(x3831, x3870, 2),
        2
    );
    let x3895: BytePoly_2 = bigint_add!(
        bigint_mul!(x3893, x3868, 2),
        bigint_mul!(x3833, x3870, 2),
        2
    );
    let x3896: BytePoly_3 = bigint_nondet_quot!(ctx, x3894, x6, 3);
    let x3897: BytePoly_1 = bigint_nondet_rem!(ctx, x3894, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3896, x6, 4), x3897, 4), x3894, 4),
        24387,
        2,
    )?;
    let x3898: BytePoly_3 = bigint_nondet_quot!(ctx, x3895, x6, 3);
    let x3899: BytePoly_1 = bigint_nondet_rem!(ctx, x3895, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3898, x6, 4), x3899, 4), x3895, 4),
        24387,
        2,
    )?;
    let x3900: BytePoly_2 = bigint_mul!(x3861, x3861, 2);
    let x3901: BytePoly_3 = bigint_nondet_quot!(ctx, x3900, x6, 3);
    let x3902: BytePoly_1 = bigint_nondet_rem!(ctx, x3900, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3901, x6, 4), x3902, 4), x3900, 4),
        24387,
        2,
    )?;
    let x3903: BytePoly_2 = bigint_add!(bigint_mul!(x3902, x0, 2), x5, 2);
    let x3904: BytePoly_3 = bigint_nondet_quot!(ctx, x3903, x6, 3);
    let x3905: BytePoly_1 = bigint_nondet_rem!(ctx, x3903, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3904, x6, 4), x3905, 4), x3903, 4),
        24387,
        2,
    )?;
    let x3906: BytePoly_1 = bigint_add!(x3867, x3867, 1);
    let x3907: BytePoly_1 = bigint_nondet_quot!(ctx, x3906, x6, 1);
    let x3908: BytePoly_1 = bigint_nondet_rem!(ctx, x3906, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3907, x6, 2), x3908, 2), x3906, 2),
        8131,
        2,
    )?;
    let x3909: BytePoly_1 = bigint_nondet_inv!(ctx, x3908, x6, 1);
    let x3910: BytePoly_2 = bigint_mul!(x3908, x3909, 2);
    let x3911: BytePoly_3 = bigint_nondet_quot!(ctx, x3910, x6, 3);
    let x3912: BytePoly_1 = bigint_nondet_rem!(ctx, x3910, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3911, x6, 4), x3912, 4), x3910, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3912, x3, 1), 34, 1)?;
    let x3913: BytePoly_2 = bigint_mul!(x3905, x3909, 2);
    let x3914: BytePoly_3 = bigint_nondet_quot!(ctx, x3913, x6, 3);
    let x3915: BytePoly_1 = bigint_nondet_rem!(ctx, x3913, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3914, x6, 4), x3915, 4), x3913, 4),
        24387,
        2,
    )?;
    let x3916: BytePoly_2 = bigint_mul!(x3915, x3861, 2);
    let x3917: BytePoly_3 = bigint_nondet_quot!(ctx, x3916, x6, 3);
    let x3918: BytePoly_1 = bigint_nondet_rem!(ctx, x3916, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3917, x6, 4), x3918, 4), x3916, 4),
        24387,
        2,
    )?;
    let x3919: BytePoly_1 = bigint_add!(bigint_sub!(x3867, x3918, 1), x6, 1);
    let x3920: BytePoly_1 = bigint_nondet_quot!(ctx, x3919, x6, 1);
    let x3921: BytePoly_1 = bigint_nondet_rem!(ctx, x3919, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3920, x6, 2), x3921, 2), x3919, 2),
        8131,
        2,
    )?;
    let x3922: BytePoly_2 = bigint_mul!(x3915, x3915, 2);
    let x3923: BytePoly_3 = bigint_nondet_quot!(ctx, x3922, x6, 3);
    let x3924: BytePoly_1 = bigint_nondet_rem!(ctx, x3922, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3923, x6, 4), x3924, 4), x3922, 4),
        24387,
        2,
    )?;
    let x3925: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3924, x3861, 1), x6, 1), x3861, 1),
        x6,
        1
    );
    let x3926: BytePoly_1 = bigint_nondet_quot!(ctx, x3925, x6, 1);
    let x3927: BytePoly_1 = bigint_nondet_rem!(ctx, x3925, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3926, x6, 2), x3927, 2), x3925, 2),
        8131,
        2,
    )?;
    let x3928: BytePoly_2 = bigint_mul!(x3915, x3927, 2);
    let x3929: BytePoly_3 = bigint_nondet_quot!(ctx, x3928, x6, 3);
    let x3930: BytePoly_1 = bigint_nondet_rem!(ctx, x3928, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3929, x6, 4), x3930, 4), x3928, 4),
        24387,
        2,
    )?;
    let x3931: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3930, x3921, 1), 1), x6, 1);
    let x3932: BytePoly_1 = bigint_nondet_quot!(ctx, x3931, x6, 1);
    let x3933: BytePoly_1 = bigint_nondet_rem!(ctx, x3931, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3932, x6, 2), x3933, 2), x3931, 2),
        8131,
        2,
    )?;
    let x3934: BytePoly_1 = bigint_nondet_rem!(ctx, x3869, x2, 1);
    let x3935: BytePoly_2 = bigint_nondet_quot!(ctx, x3869, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3935, x2, 3), x3934, 3), x3869, 3),
        16259,
        2,
    )?;
    let x3936: BytePoly_1 = bigint_sub!(x3, x3934, 1);
    eqz(ctx, &bigint_mul!(x3934, x3936, 2), 8131, 2)?;
    let x3937: BytePoly_1 = bigint_add!(bigint_sub!(x3927, x3897, 1), x6, 1);
    let x3938: BytePoly_1 = bigint_nondet_inv!(ctx, x3937, x6, 1);
    let x3939: BytePoly_2 = bigint_mul!(x3937, x3938, 2);
    let x3940: BytePoly_3 = bigint_nondet_quot!(ctx, x3939, x6, 3);
    let x3941: BytePoly_1 = bigint_nondet_rem!(ctx, x3939, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3940, x6, 4), x3941, 4), x3939, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3941, x1, 1), 34, 1)?;
    let x3942: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3933, x3899, 1), x6, 1), x3938, 2);
    let x3943: BytePoly_3 = bigint_nondet_quot!(ctx, x3942, x6, 3);
    let x3944: BytePoly_1 = bigint_nondet_rem!(ctx, x3942, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3943, x6, 4), x3944, 4), x3942, 4),
        24387,
        2,
    )?;
    let x3945: BytePoly_2 = bigint_mul!(x3944, x3897, 2);
    let x3946: BytePoly_3 = bigint_nondet_quot!(ctx, x3945, x6, 3);
    let x3947: BytePoly_1 = bigint_nondet_rem!(ctx, x3945, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3946, x6, 4), x3947, 4), x3945, 4),
        24387,
        2,
    )?;
    let x3948: BytePoly_1 = bigint_add!(bigint_sub!(x3899, x3947, 1), x6, 1);
    let x3949: BytePoly_1 = bigint_nondet_quot!(ctx, x3948, x6, 1);
    let x3950: BytePoly_1 = bigint_nondet_rem!(ctx, x3948, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3949, x6, 2), x3950, 2), x3948, 2),
        8131,
        2,
    )?;
    let x3951: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x3944, x3944, 2), x3897, 2), x6, 2),
            x3927,
            2
        ),
        x6,
        2
    );
    let x3952: BytePoly_3 = bigint_nondet_quot!(ctx, x3951, x6, 3);
    let x3953: BytePoly_1 = bigint_nondet_rem!(ctx, x3951, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3952, x6, 4), x3953, 4), x3951, 4),
        24387,
        2,
    )?;
    let x3954: BytePoly_2 = bigint_mul!(x3944, x3953, 2);
    let x3955: BytePoly_3 = bigint_nondet_quot!(ctx, x3954, x6, 3);
    let x3956: BytePoly_1 = bigint_nondet_rem!(ctx, x3954, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3955, x6, 4), x3956, 4), x3954, 4),
        24387,
        2,
    )?;
    let x3957: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3956, x3950, 1), 1), x6, 1);
    let x3958: BytePoly_1 = bigint_nondet_quot!(ctx, x3957, x6, 1);
    let x3959: BytePoly_1 = bigint_nondet_rem!(ctx, x3957, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3958, x6, 2), x3959, 2), x3957, 2),
        8131,
        2,
    )?;
    let x3960: BytePoly_2 = bigint_add!(
        bigint_mul!(x3953, x3934, 2),
        bigint_mul!(x3897, x3936, 2),
        2
    );
    let x3961: BytePoly_2 = bigint_add!(
        bigint_mul!(x3959, x3934, 2),
        bigint_mul!(x3899, x3936, 2),
        2
    );
    let x3962: BytePoly_3 = bigint_nondet_quot!(ctx, x3960, x6, 3);
    let x3963: BytePoly_1 = bigint_nondet_rem!(ctx, x3960, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3962, x6, 4), x3963, 4), x3960, 4),
        24387,
        2,
    )?;
    let x3964: BytePoly_3 = bigint_nondet_quot!(ctx, x3961, x6, 3);
    let x3965: BytePoly_1 = bigint_nondet_rem!(ctx, x3961, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3964, x6, 4), x3965, 4), x3961, 4),
        24387,
        2,
    )?;
    let x3966: BytePoly_2 = bigint_mul!(x3927, x3927, 2);
    let x3967: BytePoly_3 = bigint_nondet_quot!(ctx, x3966, x6, 3);
    let x3968: BytePoly_1 = bigint_nondet_rem!(ctx, x3966, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3967, x6, 4), x3968, 4), x3966, 4),
        24387,
        2,
    )?;
    let x3969: BytePoly_2 = bigint_add!(bigint_mul!(x3968, x0, 2), x5, 2);
    let x3970: BytePoly_3 = bigint_nondet_quot!(ctx, x3969, x6, 3);
    let x3971: BytePoly_1 = bigint_nondet_rem!(ctx, x3969, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3970, x6, 4), x3971, 4), x3969, 4),
        24387,
        2,
    )?;
    let x3972: BytePoly_1 = bigint_add!(x3933, x3933, 1);
    let x3973: BytePoly_1 = bigint_nondet_quot!(ctx, x3972, x6, 1);
    let x3974: BytePoly_1 = bigint_nondet_rem!(ctx, x3972, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3973, x6, 2), x3974, 2), x3972, 2),
        8131,
        2,
    )?;
    let x3975: BytePoly_1 = bigint_nondet_inv!(ctx, x3974, x6, 1);
    let x3976: BytePoly_2 = bigint_mul!(x3974, x3975, 2);
    let x3977: BytePoly_3 = bigint_nondet_quot!(ctx, x3976, x6, 3);
    let x3978: BytePoly_1 = bigint_nondet_rem!(ctx, x3976, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3977, x6, 4), x3978, 4), x3976, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x3978, x3, 1), 34, 1)?;
    let x3979: BytePoly_2 = bigint_mul!(x3971, x3975, 2);
    let x3980: BytePoly_3 = bigint_nondet_quot!(ctx, x3979, x6, 3);
    let x3981: BytePoly_1 = bigint_nondet_rem!(ctx, x3979, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3980, x6, 4), x3981, 4), x3979, 4),
        24387,
        2,
    )?;
    let x3982: BytePoly_2 = bigint_mul!(x3981, x3927, 2);
    let x3983: BytePoly_3 = bigint_nondet_quot!(ctx, x3982, x6, 3);
    let x3984: BytePoly_1 = bigint_nondet_rem!(ctx, x3982, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3983, x6, 4), x3984, 4), x3982, 4),
        24387,
        2,
    )?;
    let x3985: BytePoly_1 = bigint_add!(bigint_sub!(x3933, x3984, 1), x6, 1);
    let x3986: BytePoly_1 = bigint_nondet_quot!(ctx, x3985, x6, 1);
    let x3987: BytePoly_1 = bigint_nondet_rem!(ctx, x3985, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3986, x6, 2), x3987, 2), x3985, 2),
        8131,
        2,
    )?;
    let x3988: BytePoly_2 = bigint_mul!(x3981, x3981, 2);
    let x3989: BytePoly_3 = bigint_nondet_quot!(ctx, x3988, x6, 3);
    let x3990: BytePoly_1 = bigint_nondet_rem!(ctx, x3988, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3989, x6, 4), x3990, 4), x3988, 4),
        24387,
        2,
    )?;
    let x3991: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x3990, x3927, 1), x6, 1), x3927, 1),
        x6,
        1
    );
    let x3992: BytePoly_1 = bigint_nondet_quot!(ctx, x3991, x6, 1);
    let x3993: BytePoly_1 = bigint_nondet_rem!(ctx, x3991, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3992, x6, 2), x3993, 2), x3991, 2),
        8131,
        2,
    )?;
    let x3994: BytePoly_2 = bigint_mul!(x3981, x3993, 2);
    let x3995: BytePoly_3 = bigint_nondet_quot!(ctx, x3994, x6, 3);
    let x3996: BytePoly_1 = bigint_nondet_rem!(ctx, x3994, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3995, x6, 4), x3996, 4), x3994, 4),
        24387,
        2,
    )?;
    let x3997: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x3996, x3987, 1), 1), x6, 1);
    let x3998: BytePoly_1 = bigint_nondet_quot!(ctx, x3997, x6, 1);
    let x3999: BytePoly_1 = bigint_nondet_rem!(ctx, x3997, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x3998, x6, 2), x3999, 2), x3997, 2),
        8131,
        2,
    )?;
    let x4000: BytePoly_1 = bigint_nondet_rem!(ctx, x3935, x2, 1);
    let x4001: BytePoly_2 = bigint_nondet_quot!(ctx, x3935, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4001, x2, 3), x4000, 3), x3935, 3),
        16259,
        2,
    )?;
    let x4002: BytePoly_1 = bigint_sub!(x3, x4000, 1);
    eqz(ctx, &bigint_mul!(x4000, x4002, 2), 8131, 2)?;
    let x4003: BytePoly_1 = bigint_add!(bigint_sub!(x3993, x3963, 1), x6, 1);
    let x4004: BytePoly_1 = bigint_nondet_inv!(ctx, x4003, x6, 1);
    let x4005: BytePoly_2 = bigint_mul!(x4003, x4004, 2);
    let x4006: BytePoly_3 = bigint_nondet_quot!(ctx, x4005, x6, 3);
    let x4007: BytePoly_1 = bigint_nondet_rem!(ctx, x4005, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4006, x6, 4), x4007, 4), x4005, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4007, x1, 1), 34, 1)?;
    let x4008: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x3999, x3965, 1), x6, 1), x4004, 2);
    let x4009: BytePoly_3 = bigint_nondet_quot!(ctx, x4008, x6, 3);
    let x4010: BytePoly_1 = bigint_nondet_rem!(ctx, x4008, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4009, x6, 4), x4010, 4), x4008, 4),
        24387,
        2,
    )?;
    let x4011: BytePoly_2 = bigint_mul!(x4010, x3963, 2);
    let x4012: BytePoly_3 = bigint_nondet_quot!(ctx, x4011, x6, 3);
    let x4013: BytePoly_1 = bigint_nondet_rem!(ctx, x4011, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4012, x6, 4), x4013, 4), x4011, 4),
        24387,
        2,
    )?;
    let x4014: BytePoly_1 = bigint_add!(bigint_sub!(x3965, x4013, 1), x6, 1);
    let x4015: BytePoly_1 = bigint_nondet_quot!(ctx, x4014, x6, 1);
    let x4016: BytePoly_1 = bigint_nondet_rem!(ctx, x4014, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4015, x6, 2), x4016, 2), x4014, 2),
        8131,
        2,
    )?;
    let x4017: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4010, x4010, 2), x3963, 2), x6, 2),
            x3993,
            2
        ),
        x6,
        2
    );
    let x4018: BytePoly_3 = bigint_nondet_quot!(ctx, x4017, x6, 3);
    let x4019: BytePoly_1 = bigint_nondet_rem!(ctx, x4017, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4018, x6, 4), x4019, 4), x4017, 4),
        24387,
        2,
    )?;
    let x4020: BytePoly_2 = bigint_mul!(x4010, x4019, 2);
    let x4021: BytePoly_3 = bigint_nondet_quot!(ctx, x4020, x6, 3);
    let x4022: BytePoly_1 = bigint_nondet_rem!(ctx, x4020, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4021, x6, 4), x4022, 4), x4020, 4),
        24387,
        2,
    )?;
    let x4023: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4022, x4016, 1), 1), x6, 1);
    let x4024: BytePoly_1 = bigint_nondet_quot!(ctx, x4023, x6, 1);
    let x4025: BytePoly_1 = bigint_nondet_rem!(ctx, x4023, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4024, x6, 2), x4025, 2), x4023, 2),
        8131,
        2,
    )?;
    let x4026: BytePoly_2 = bigint_add!(
        bigint_mul!(x4019, x4000, 2),
        bigint_mul!(x3963, x4002, 2),
        2
    );
    let x4027: BytePoly_2 = bigint_add!(
        bigint_mul!(x4025, x4000, 2),
        bigint_mul!(x3965, x4002, 2),
        2
    );
    let x4028: BytePoly_3 = bigint_nondet_quot!(ctx, x4026, x6, 3);
    let x4029: BytePoly_1 = bigint_nondet_rem!(ctx, x4026, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4028, x6, 4), x4029, 4), x4026, 4),
        24387,
        2,
    )?;
    let x4030: BytePoly_3 = bigint_nondet_quot!(ctx, x4027, x6, 3);
    let x4031: BytePoly_1 = bigint_nondet_rem!(ctx, x4027, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4030, x6, 4), x4031, 4), x4027, 4),
        24387,
        2,
    )?;
    let x4032: BytePoly_2 = bigint_mul!(x3993, x3993, 2);
    let x4033: BytePoly_3 = bigint_nondet_quot!(ctx, x4032, x6, 3);
    let x4034: BytePoly_1 = bigint_nondet_rem!(ctx, x4032, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4033, x6, 4), x4034, 4), x4032, 4),
        24387,
        2,
    )?;
    let x4035: BytePoly_2 = bigint_add!(bigint_mul!(x4034, x0, 2), x5, 2);
    let x4036: BytePoly_3 = bigint_nondet_quot!(ctx, x4035, x6, 3);
    let x4037: BytePoly_1 = bigint_nondet_rem!(ctx, x4035, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4036, x6, 4), x4037, 4), x4035, 4),
        24387,
        2,
    )?;
    let x4038: BytePoly_1 = bigint_add!(x3999, x3999, 1);
    let x4039: BytePoly_1 = bigint_nondet_quot!(ctx, x4038, x6, 1);
    let x4040: BytePoly_1 = bigint_nondet_rem!(ctx, x4038, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4039, x6, 2), x4040, 2), x4038, 2),
        8131,
        2,
    )?;
    let x4041: BytePoly_1 = bigint_nondet_inv!(ctx, x4040, x6, 1);
    let x4042: BytePoly_2 = bigint_mul!(x4040, x4041, 2);
    let x4043: BytePoly_3 = bigint_nondet_quot!(ctx, x4042, x6, 3);
    let x4044: BytePoly_1 = bigint_nondet_rem!(ctx, x4042, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4043, x6, 4), x4044, 4), x4042, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4044, x3, 1), 34, 1)?;
    let x4045: BytePoly_2 = bigint_mul!(x4037, x4041, 2);
    let x4046: BytePoly_3 = bigint_nondet_quot!(ctx, x4045, x6, 3);
    let x4047: BytePoly_1 = bigint_nondet_rem!(ctx, x4045, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4046, x6, 4), x4047, 4), x4045, 4),
        24387,
        2,
    )?;
    let x4048: BytePoly_2 = bigint_mul!(x4047, x3993, 2);
    let x4049: BytePoly_3 = bigint_nondet_quot!(ctx, x4048, x6, 3);
    let x4050: BytePoly_1 = bigint_nondet_rem!(ctx, x4048, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4049, x6, 4), x4050, 4), x4048, 4),
        24387,
        2,
    )?;
    let x4051: BytePoly_1 = bigint_add!(bigint_sub!(x3999, x4050, 1), x6, 1);
    let x4052: BytePoly_1 = bigint_nondet_quot!(ctx, x4051, x6, 1);
    let x4053: BytePoly_1 = bigint_nondet_rem!(ctx, x4051, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4052, x6, 2), x4053, 2), x4051, 2),
        8131,
        2,
    )?;
    let x4054: BytePoly_2 = bigint_mul!(x4047, x4047, 2);
    let x4055: BytePoly_3 = bigint_nondet_quot!(ctx, x4054, x6, 3);
    let x4056: BytePoly_1 = bigint_nondet_rem!(ctx, x4054, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4055, x6, 4), x4056, 4), x4054, 4),
        24387,
        2,
    )?;
    let x4057: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4056, x3993, 1), x6, 1), x3993, 1),
        x6,
        1
    );
    let x4058: BytePoly_1 = bigint_nondet_quot!(ctx, x4057, x6, 1);
    let x4059: BytePoly_1 = bigint_nondet_rem!(ctx, x4057, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4058, x6, 2), x4059, 2), x4057, 2),
        8131,
        2,
    )?;
    let x4060: BytePoly_2 = bigint_mul!(x4047, x4059, 2);
    let x4061: BytePoly_3 = bigint_nondet_quot!(ctx, x4060, x6, 3);
    let x4062: BytePoly_1 = bigint_nondet_rem!(ctx, x4060, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4061, x6, 4), x4062, 4), x4060, 4),
        24387,
        2,
    )?;
    let x4063: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4062, x4053, 1), 1), x6, 1);
    let x4064: BytePoly_1 = bigint_nondet_quot!(ctx, x4063, x6, 1);
    let x4065: BytePoly_1 = bigint_nondet_rem!(ctx, x4063, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4064, x6, 2), x4065, 2), x4063, 2),
        8131,
        2,
    )?;
    let x4066: BytePoly_1 = bigint_nondet_rem!(ctx, x4001, x2, 1);
    let x4067: BytePoly_2 = bigint_nondet_quot!(ctx, x4001, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4067, x2, 3), x4066, 3), x4001, 3),
        16259,
        2,
    )?;
    let x4068: BytePoly_1 = bigint_sub!(x3, x4066, 1);
    eqz(ctx, &bigint_mul!(x4066, x4068, 2), 8131, 2)?;
    let x4069: BytePoly_1 = bigint_add!(bigint_sub!(x4059, x4029, 1), x6, 1);
    let x4070: BytePoly_1 = bigint_nondet_inv!(ctx, x4069, x6, 1);
    let x4071: BytePoly_2 = bigint_mul!(x4069, x4070, 2);
    let x4072: BytePoly_3 = bigint_nondet_quot!(ctx, x4071, x6, 3);
    let x4073: BytePoly_1 = bigint_nondet_rem!(ctx, x4071, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4072, x6, 4), x4073, 4), x4071, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4073, x1, 1), 34, 1)?;
    let x4074: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4065, x4031, 1), x6, 1), x4070, 2);
    let x4075: BytePoly_3 = bigint_nondet_quot!(ctx, x4074, x6, 3);
    let x4076: BytePoly_1 = bigint_nondet_rem!(ctx, x4074, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4075, x6, 4), x4076, 4), x4074, 4),
        24387,
        2,
    )?;
    let x4077: BytePoly_2 = bigint_mul!(x4076, x4029, 2);
    let x4078: BytePoly_3 = bigint_nondet_quot!(ctx, x4077, x6, 3);
    let x4079: BytePoly_1 = bigint_nondet_rem!(ctx, x4077, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4078, x6, 4), x4079, 4), x4077, 4),
        24387,
        2,
    )?;
    let x4080: BytePoly_1 = bigint_add!(bigint_sub!(x4031, x4079, 1), x6, 1);
    let x4081: BytePoly_1 = bigint_nondet_quot!(ctx, x4080, x6, 1);
    let x4082: BytePoly_1 = bigint_nondet_rem!(ctx, x4080, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4081, x6, 2), x4082, 2), x4080, 2),
        8131,
        2,
    )?;
    let x4083: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4076, x4076, 2), x4029, 2), x6, 2),
            x4059,
            2
        ),
        x6,
        2
    );
    let x4084: BytePoly_3 = bigint_nondet_quot!(ctx, x4083, x6, 3);
    let x4085: BytePoly_1 = bigint_nondet_rem!(ctx, x4083, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4084, x6, 4), x4085, 4), x4083, 4),
        24387,
        2,
    )?;
    let x4086: BytePoly_2 = bigint_mul!(x4076, x4085, 2);
    let x4087: BytePoly_3 = bigint_nondet_quot!(ctx, x4086, x6, 3);
    let x4088: BytePoly_1 = bigint_nondet_rem!(ctx, x4086, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4087, x6, 4), x4088, 4), x4086, 4),
        24387,
        2,
    )?;
    let x4089: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4088, x4082, 1), 1), x6, 1);
    let x4090: BytePoly_1 = bigint_nondet_quot!(ctx, x4089, x6, 1);
    let x4091: BytePoly_1 = bigint_nondet_rem!(ctx, x4089, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4090, x6, 2), x4091, 2), x4089, 2),
        8131,
        2,
    )?;
    let x4092: BytePoly_2 = bigint_add!(
        bigint_mul!(x4085, x4066, 2),
        bigint_mul!(x4029, x4068, 2),
        2
    );
    let x4093: BytePoly_2 = bigint_add!(
        bigint_mul!(x4091, x4066, 2),
        bigint_mul!(x4031, x4068, 2),
        2
    );
    let x4094: BytePoly_3 = bigint_nondet_quot!(ctx, x4092, x6, 3);
    let x4095: BytePoly_1 = bigint_nondet_rem!(ctx, x4092, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4094, x6, 4), x4095, 4), x4092, 4),
        24387,
        2,
    )?;
    let x4096: BytePoly_3 = bigint_nondet_quot!(ctx, x4093, x6, 3);
    let x4097: BytePoly_1 = bigint_nondet_rem!(ctx, x4093, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4096, x6, 4), x4097, 4), x4093, 4),
        24387,
        2,
    )?;
    let x4098: BytePoly_2 = bigint_mul!(x4059, x4059, 2);
    let x4099: BytePoly_3 = bigint_nondet_quot!(ctx, x4098, x6, 3);
    let x4100: BytePoly_1 = bigint_nondet_rem!(ctx, x4098, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4099, x6, 4), x4100, 4), x4098, 4),
        24387,
        2,
    )?;
    let x4101: BytePoly_2 = bigint_add!(bigint_mul!(x4100, x0, 2), x5, 2);
    let x4102: BytePoly_3 = bigint_nondet_quot!(ctx, x4101, x6, 3);
    let x4103: BytePoly_1 = bigint_nondet_rem!(ctx, x4101, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4102, x6, 4), x4103, 4), x4101, 4),
        24387,
        2,
    )?;
    let x4104: BytePoly_1 = bigint_add!(x4065, x4065, 1);
    let x4105: BytePoly_1 = bigint_nondet_quot!(ctx, x4104, x6, 1);
    let x4106: BytePoly_1 = bigint_nondet_rem!(ctx, x4104, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4105, x6, 2), x4106, 2), x4104, 2),
        8131,
        2,
    )?;
    let x4107: BytePoly_1 = bigint_nondet_inv!(ctx, x4106, x6, 1);
    let x4108: BytePoly_2 = bigint_mul!(x4106, x4107, 2);
    let x4109: BytePoly_3 = bigint_nondet_quot!(ctx, x4108, x6, 3);
    let x4110: BytePoly_1 = bigint_nondet_rem!(ctx, x4108, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4109, x6, 4), x4110, 4), x4108, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4110, x3, 1), 34, 1)?;
    let x4111: BytePoly_2 = bigint_mul!(x4103, x4107, 2);
    let x4112: BytePoly_3 = bigint_nondet_quot!(ctx, x4111, x6, 3);
    let x4113: BytePoly_1 = bigint_nondet_rem!(ctx, x4111, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4112, x6, 4), x4113, 4), x4111, 4),
        24387,
        2,
    )?;
    let x4114: BytePoly_2 = bigint_mul!(x4113, x4059, 2);
    let x4115: BytePoly_3 = bigint_nondet_quot!(ctx, x4114, x6, 3);
    let x4116: BytePoly_1 = bigint_nondet_rem!(ctx, x4114, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4115, x6, 4), x4116, 4), x4114, 4),
        24387,
        2,
    )?;
    let x4117: BytePoly_1 = bigint_add!(bigint_sub!(x4065, x4116, 1), x6, 1);
    let x4118: BytePoly_1 = bigint_nondet_quot!(ctx, x4117, x6, 1);
    let x4119: BytePoly_1 = bigint_nondet_rem!(ctx, x4117, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4118, x6, 2), x4119, 2), x4117, 2),
        8131,
        2,
    )?;
    let x4120: BytePoly_2 = bigint_mul!(x4113, x4113, 2);
    let x4121: BytePoly_3 = bigint_nondet_quot!(ctx, x4120, x6, 3);
    let x4122: BytePoly_1 = bigint_nondet_rem!(ctx, x4120, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4121, x6, 4), x4122, 4), x4120, 4),
        24387,
        2,
    )?;
    let x4123: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4122, x4059, 1), x6, 1), x4059, 1),
        x6,
        1
    );
    let x4124: BytePoly_1 = bigint_nondet_quot!(ctx, x4123, x6, 1);
    let x4125: BytePoly_1 = bigint_nondet_rem!(ctx, x4123, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4124, x6, 2), x4125, 2), x4123, 2),
        8131,
        2,
    )?;
    let x4126: BytePoly_2 = bigint_mul!(x4113, x4125, 2);
    let x4127: BytePoly_3 = bigint_nondet_quot!(ctx, x4126, x6, 3);
    let x4128: BytePoly_1 = bigint_nondet_rem!(ctx, x4126, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4127, x6, 4), x4128, 4), x4126, 4),
        24387,
        2,
    )?;
    let x4129: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4128, x4119, 1), 1), x6, 1);
    let x4130: BytePoly_1 = bigint_nondet_quot!(ctx, x4129, x6, 1);
    let x4131: BytePoly_1 = bigint_nondet_rem!(ctx, x4129, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4130, x6, 2), x4131, 2), x4129, 2),
        8131,
        2,
    )?;
    let x4132: BytePoly_1 = bigint_nondet_rem!(ctx, x4067, x2, 1);
    let x4133: BytePoly_2 = bigint_nondet_quot!(ctx, x4067, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4133, x2, 3), x4132, 3), x4067, 3),
        16259,
        2,
    )?;
    let x4134: BytePoly_1 = bigint_sub!(x3, x4132, 1);
    eqz(ctx, &bigint_mul!(x4132, x4134, 2), 8131, 2)?;
    let x4135: BytePoly_1 = bigint_add!(bigint_sub!(x4125, x4095, 1), x6, 1);
    let x4136: BytePoly_1 = bigint_nondet_inv!(ctx, x4135, x6, 1);
    let x4137: BytePoly_2 = bigint_mul!(x4135, x4136, 2);
    let x4138: BytePoly_3 = bigint_nondet_quot!(ctx, x4137, x6, 3);
    let x4139: BytePoly_1 = bigint_nondet_rem!(ctx, x4137, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4138, x6, 4), x4139, 4), x4137, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4139, x1, 1), 34, 1)?;
    let x4140: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4131, x4097, 1), x6, 1), x4136, 2);
    let x4141: BytePoly_3 = bigint_nondet_quot!(ctx, x4140, x6, 3);
    let x4142: BytePoly_1 = bigint_nondet_rem!(ctx, x4140, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4141, x6, 4), x4142, 4), x4140, 4),
        24387,
        2,
    )?;
    let x4143: BytePoly_2 = bigint_mul!(x4142, x4095, 2);
    let x4144: BytePoly_3 = bigint_nondet_quot!(ctx, x4143, x6, 3);
    let x4145: BytePoly_1 = bigint_nondet_rem!(ctx, x4143, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4144, x6, 4), x4145, 4), x4143, 4),
        24387,
        2,
    )?;
    let x4146: BytePoly_1 = bigint_add!(bigint_sub!(x4097, x4145, 1), x6, 1);
    let x4147: BytePoly_1 = bigint_nondet_quot!(ctx, x4146, x6, 1);
    let x4148: BytePoly_1 = bigint_nondet_rem!(ctx, x4146, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4147, x6, 2), x4148, 2), x4146, 2),
        8131,
        2,
    )?;
    let x4149: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4142, x4142, 2), x4095, 2), x6, 2),
            x4125,
            2
        ),
        x6,
        2
    );
    let x4150: BytePoly_3 = bigint_nondet_quot!(ctx, x4149, x6, 3);
    let x4151: BytePoly_1 = bigint_nondet_rem!(ctx, x4149, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4150, x6, 4), x4151, 4), x4149, 4),
        24387,
        2,
    )?;
    let x4152: BytePoly_2 = bigint_mul!(x4142, x4151, 2);
    let x4153: BytePoly_3 = bigint_nondet_quot!(ctx, x4152, x6, 3);
    let x4154: BytePoly_1 = bigint_nondet_rem!(ctx, x4152, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4153, x6, 4), x4154, 4), x4152, 4),
        24387,
        2,
    )?;
    let x4155: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4154, x4148, 1), 1), x6, 1);
    let x4156: BytePoly_1 = bigint_nondet_quot!(ctx, x4155, x6, 1);
    let x4157: BytePoly_1 = bigint_nondet_rem!(ctx, x4155, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4156, x6, 2), x4157, 2), x4155, 2),
        8131,
        2,
    )?;
    let x4158: BytePoly_2 = bigint_add!(
        bigint_mul!(x4151, x4132, 2),
        bigint_mul!(x4095, x4134, 2),
        2
    );
    let x4159: BytePoly_2 = bigint_add!(
        bigint_mul!(x4157, x4132, 2),
        bigint_mul!(x4097, x4134, 2),
        2
    );
    let x4160: BytePoly_3 = bigint_nondet_quot!(ctx, x4158, x6, 3);
    let x4161: BytePoly_1 = bigint_nondet_rem!(ctx, x4158, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4160, x6, 4), x4161, 4), x4158, 4),
        24387,
        2,
    )?;
    let x4162: BytePoly_3 = bigint_nondet_quot!(ctx, x4159, x6, 3);
    let x4163: BytePoly_1 = bigint_nondet_rem!(ctx, x4159, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4162, x6, 4), x4163, 4), x4159, 4),
        24387,
        2,
    )?;
    let x4164: BytePoly_2 = bigint_mul!(x4125, x4125, 2);
    let x4165: BytePoly_3 = bigint_nondet_quot!(ctx, x4164, x6, 3);
    let x4166: BytePoly_1 = bigint_nondet_rem!(ctx, x4164, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4165, x6, 4), x4166, 4), x4164, 4),
        24387,
        2,
    )?;
    let x4167: BytePoly_2 = bigint_add!(bigint_mul!(x4166, x0, 2), x5, 2);
    let x4168: BytePoly_3 = bigint_nondet_quot!(ctx, x4167, x6, 3);
    let x4169: BytePoly_1 = bigint_nondet_rem!(ctx, x4167, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4168, x6, 4), x4169, 4), x4167, 4),
        24387,
        2,
    )?;
    let x4170: BytePoly_1 = bigint_add!(x4131, x4131, 1);
    let x4171: BytePoly_1 = bigint_nondet_quot!(ctx, x4170, x6, 1);
    let x4172: BytePoly_1 = bigint_nondet_rem!(ctx, x4170, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4171, x6, 2), x4172, 2), x4170, 2),
        8131,
        2,
    )?;
    let x4173: BytePoly_1 = bigint_nondet_inv!(ctx, x4172, x6, 1);
    let x4174: BytePoly_2 = bigint_mul!(x4172, x4173, 2);
    let x4175: BytePoly_3 = bigint_nondet_quot!(ctx, x4174, x6, 3);
    let x4176: BytePoly_1 = bigint_nondet_rem!(ctx, x4174, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4175, x6, 4), x4176, 4), x4174, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4176, x3, 1), 34, 1)?;
    let x4177: BytePoly_2 = bigint_mul!(x4169, x4173, 2);
    let x4178: BytePoly_3 = bigint_nondet_quot!(ctx, x4177, x6, 3);
    let x4179: BytePoly_1 = bigint_nondet_rem!(ctx, x4177, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4178, x6, 4), x4179, 4), x4177, 4),
        24387,
        2,
    )?;
    let x4180: BytePoly_2 = bigint_mul!(x4179, x4125, 2);
    let x4181: BytePoly_3 = bigint_nondet_quot!(ctx, x4180, x6, 3);
    let x4182: BytePoly_1 = bigint_nondet_rem!(ctx, x4180, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4181, x6, 4), x4182, 4), x4180, 4),
        24387,
        2,
    )?;
    let x4183: BytePoly_1 = bigint_add!(bigint_sub!(x4131, x4182, 1), x6, 1);
    let x4184: BytePoly_1 = bigint_nondet_quot!(ctx, x4183, x6, 1);
    let x4185: BytePoly_1 = bigint_nondet_rem!(ctx, x4183, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4184, x6, 2), x4185, 2), x4183, 2),
        8131,
        2,
    )?;
    let x4186: BytePoly_2 = bigint_mul!(x4179, x4179, 2);
    let x4187: BytePoly_3 = bigint_nondet_quot!(ctx, x4186, x6, 3);
    let x4188: BytePoly_1 = bigint_nondet_rem!(ctx, x4186, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4187, x6, 4), x4188, 4), x4186, 4),
        24387,
        2,
    )?;
    let x4189: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4188, x4125, 1), x6, 1), x4125, 1),
        x6,
        1
    );
    let x4190: BytePoly_1 = bigint_nondet_quot!(ctx, x4189, x6, 1);
    let x4191: BytePoly_1 = bigint_nondet_rem!(ctx, x4189, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4190, x6, 2), x4191, 2), x4189, 2),
        8131,
        2,
    )?;
    let x4192: BytePoly_2 = bigint_mul!(x4179, x4191, 2);
    let x4193: BytePoly_3 = bigint_nondet_quot!(ctx, x4192, x6, 3);
    let x4194: BytePoly_1 = bigint_nondet_rem!(ctx, x4192, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4193, x6, 4), x4194, 4), x4192, 4),
        24387,
        2,
    )?;
    let x4195: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4194, x4185, 1), 1), x6, 1);
    let x4196: BytePoly_1 = bigint_nondet_quot!(ctx, x4195, x6, 1);
    let x4197: BytePoly_1 = bigint_nondet_rem!(ctx, x4195, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4196, x6, 2), x4197, 2), x4195, 2),
        8131,
        2,
    )?;
    let x4198: BytePoly_1 = bigint_nondet_rem!(ctx, x4133, x2, 1);
    let x4199: BytePoly_2 = bigint_nondet_quot!(ctx, x4133, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4199, x2, 3), x4198, 3), x4133, 3),
        16259,
        2,
    )?;
    let x4200: BytePoly_1 = bigint_sub!(x3, x4198, 1);
    eqz(ctx, &bigint_mul!(x4198, x4200, 2), 8131, 2)?;
    let x4201: BytePoly_1 = bigint_add!(bigint_sub!(x4191, x4161, 1), x6, 1);
    let x4202: BytePoly_1 = bigint_nondet_inv!(ctx, x4201, x6, 1);
    let x4203: BytePoly_2 = bigint_mul!(x4201, x4202, 2);
    let x4204: BytePoly_3 = bigint_nondet_quot!(ctx, x4203, x6, 3);
    let x4205: BytePoly_1 = bigint_nondet_rem!(ctx, x4203, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4204, x6, 4), x4205, 4), x4203, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4205, x1, 1), 34, 1)?;
    let x4206: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4197, x4163, 1), x6, 1), x4202, 2);
    let x4207: BytePoly_3 = bigint_nondet_quot!(ctx, x4206, x6, 3);
    let x4208: BytePoly_1 = bigint_nondet_rem!(ctx, x4206, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4207, x6, 4), x4208, 4), x4206, 4),
        24387,
        2,
    )?;
    let x4209: BytePoly_2 = bigint_mul!(x4208, x4161, 2);
    let x4210: BytePoly_3 = bigint_nondet_quot!(ctx, x4209, x6, 3);
    let x4211: BytePoly_1 = bigint_nondet_rem!(ctx, x4209, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4210, x6, 4), x4211, 4), x4209, 4),
        24387,
        2,
    )?;
    let x4212: BytePoly_1 = bigint_add!(bigint_sub!(x4163, x4211, 1), x6, 1);
    let x4213: BytePoly_1 = bigint_nondet_quot!(ctx, x4212, x6, 1);
    let x4214: BytePoly_1 = bigint_nondet_rem!(ctx, x4212, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4213, x6, 2), x4214, 2), x4212, 2),
        8131,
        2,
    )?;
    let x4215: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4208, x4208, 2), x4161, 2), x6, 2),
            x4191,
            2
        ),
        x6,
        2
    );
    let x4216: BytePoly_3 = bigint_nondet_quot!(ctx, x4215, x6, 3);
    let x4217: BytePoly_1 = bigint_nondet_rem!(ctx, x4215, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4216, x6, 4), x4217, 4), x4215, 4),
        24387,
        2,
    )?;
    let x4218: BytePoly_2 = bigint_mul!(x4208, x4217, 2);
    let x4219: BytePoly_3 = bigint_nondet_quot!(ctx, x4218, x6, 3);
    let x4220: BytePoly_1 = bigint_nondet_rem!(ctx, x4218, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4219, x6, 4), x4220, 4), x4218, 4),
        24387,
        2,
    )?;
    let x4221: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4220, x4214, 1), 1), x6, 1);
    let x4222: BytePoly_1 = bigint_nondet_quot!(ctx, x4221, x6, 1);
    let x4223: BytePoly_1 = bigint_nondet_rem!(ctx, x4221, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4222, x6, 2), x4223, 2), x4221, 2),
        8131,
        2,
    )?;
    let x4224: BytePoly_2 = bigint_add!(
        bigint_mul!(x4217, x4198, 2),
        bigint_mul!(x4161, x4200, 2),
        2
    );
    let x4225: BytePoly_2 = bigint_add!(
        bigint_mul!(x4223, x4198, 2),
        bigint_mul!(x4163, x4200, 2),
        2
    );
    let x4226: BytePoly_3 = bigint_nondet_quot!(ctx, x4224, x6, 3);
    let x4227: BytePoly_1 = bigint_nondet_rem!(ctx, x4224, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4226, x6, 4), x4227, 4), x4224, 4),
        24387,
        2,
    )?;
    let x4228: BytePoly_3 = bigint_nondet_quot!(ctx, x4225, x6, 3);
    let x4229: BytePoly_1 = bigint_nondet_rem!(ctx, x4225, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4228, x6, 4), x4229, 4), x4225, 4),
        24387,
        2,
    )?;
    let x4230: BytePoly_2 = bigint_mul!(x4191, x4191, 2);
    let x4231: BytePoly_3 = bigint_nondet_quot!(ctx, x4230, x6, 3);
    let x4232: BytePoly_1 = bigint_nondet_rem!(ctx, x4230, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4231, x6, 4), x4232, 4), x4230, 4),
        24387,
        2,
    )?;
    let x4233: BytePoly_2 = bigint_add!(bigint_mul!(x4232, x0, 2), x5, 2);
    let x4234: BytePoly_3 = bigint_nondet_quot!(ctx, x4233, x6, 3);
    let x4235: BytePoly_1 = bigint_nondet_rem!(ctx, x4233, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4234, x6, 4), x4235, 4), x4233, 4),
        24387,
        2,
    )?;
    let x4236: BytePoly_1 = bigint_add!(x4197, x4197, 1);
    let x4237: BytePoly_1 = bigint_nondet_quot!(ctx, x4236, x6, 1);
    let x4238: BytePoly_1 = bigint_nondet_rem!(ctx, x4236, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4237, x6, 2), x4238, 2), x4236, 2),
        8131,
        2,
    )?;
    let x4239: BytePoly_1 = bigint_nondet_inv!(ctx, x4238, x6, 1);
    let x4240: BytePoly_2 = bigint_mul!(x4238, x4239, 2);
    let x4241: BytePoly_3 = bigint_nondet_quot!(ctx, x4240, x6, 3);
    let x4242: BytePoly_1 = bigint_nondet_rem!(ctx, x4240, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4241, x6, 4), x4242, 4), x4240, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4242, x3, 1), 34, 1)?;
    let x4243: BytePoly_2 = bigint_mul!(x4235, x4239, 2);
    let x4244: BytePoly_3 = bigint_nondet_quot!(ctx, x4243, x6, 3);
    let x4245: BytePoly_1 = bigint_nondet_rem!(ctx, x4243, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4244, x6, 4), x4245, 4), x4243, 4),
        24387,
        2,
    )?;
    let x4246: BytePoly_2 = bigint_mul!(x4245, x4191, 2);
    let x4247: BytePoly_3 = bigint_nondet_quot!(ctx, x4246, x6, 3);
    let x4248: BytePoly_1 = bigint_nondet_rem!(ctx, x4246, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4247, x6, 4), x4248, 4), x4246, 4),
        24387,
        2,
    )?;
    let x4249: BytePoly_1 = bigint_add!(bigint_sub!(x4197, x4248, 1), x6, 1);
    let x4250: BytePoly_1 = bigint_nondet_quot!(ctx, x4249, x6, 1);
    let x4251: BytePoly_1 = bigint_nondet_rem!(ctx, x4249, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4250, x6, 2), x4251, 2), x4249, 2),
        8131,
        2,
    )?;
    let x4252: BytePoly_2 = bigint_mul!(x4245, x4245, 2);
    let x4253: BytePoly_3 = bigint_nondet_quot!(ctx, x4252, x6, 3);
    let x4254: BytePoly_1 = bigint_nondet_rem!(ctx, x4252, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4253, x6, 4), x4254, 4), x4252, 4),
        24387,
        2,
    )?;
    let x4255: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4254, x4191, 1), x6, 1), x4191, 1),
        x6,
        1
    );
    let x4256: BytePoly_1 = bigint_nondet_quot!(ctx, x4255, x6, 1);
    let x4257: BytePoly_1 = bigint_nondet_rem!(ctx, x4255, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4256, x6, 2), x4257, 2), x4255, 2),
        8131,
        2,
    )?;
    let x4258: BytePoly_2 = bigint_mul!(x4245, x4257, 2);
    let x4259: BytePoly_3 = bigint_nondet_quot!(ctx, x4258, x6, 3);
    let x4260: BytePoly_1 = bigint_nondet_rem!(ctx, x4258, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4259, x6, 4), x4260, 4), x4258, 4),
        24387,
        2,
    )?;
    let x4261: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4260, x4251, 1), 1), x6, 1);
    let x4262: BytePoly_1 = bigint_nondet_quot!(ctx, x4261, x6, 1);
    let x4263: BytePoly_1 = bigint_nondet_rem!(ctx, x4261, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4262, x6, 2), x4263, 2), x4261, 2),
        8131,
        2,
    )?;
    let x4264: BytePoly_1 = bigint_nondet_rem!(ctx, x4199, x2, 1);
    let x4265: BytePoly_2 = bigint_nondet_quot!(ctx, x4199, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4265, x2, 3), x4264, 3), x4199, 3),
        16259,
        2,
    )?;
    let x4266: BytePoly_1 = bigint_sub!(x3, x4264, 1);
    eqz(ctx, &bigint_mul!(x4264, x4266, 2), 8131, 2)?;
    let x4267: BytePoly_1 = bigint_add!(bigint_sub!(x4257, x4227, 1), x6, 1);
    let x4268: BytePoly_1 = bigint_nondet_inv!(ctx, x4267, x6, 1);
    let x4269: BytePoly_2 = bigint_mul!(x4267, x4268, 2);
    let x4270: BytePoly_3 = bigint_nondet_quot!(ctx, x4269, x6, 3);
    let x4271: BytePoly_1 = bigint_nondet_rem!(ctx, x4269, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4270, x6, 4), x4271, 4), x4269, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4271, x1, 1), 34, 1)?;
    let x4272: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4263, x4229, 1), x6, 1), x4268, 2);
    let x4273: BytePoly_3 = bigint_nondet_quot!(ctx, x4272, x6, 3);
    let x4274: BytePoly_1 = bigint_nondet_rem!(ctx, x4272, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4273, x6, 4), x4274, 4), x4272, 4),
        24387,
        2,
    )?;
    let x4275: BytePoly_2 = bigint_mul!(x4274, x4227, 2);
    let x4276: BytePoly_3 = bigint_nondet_quot!(ctx, x4275, x6, 3);
    let x4277: BytePoly_1 = bigint_nondet_rem!(ctx, x4275, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4276, x6, 4), x4277, 4), x4275, 4),
        24387,
        2,
    )?;
    let x4278: BytePoly_1 = bigint_add!(bigint_sub!(x4229, x4277, 1), x6, 1);
    let x4279: BytePoly_1 = bigint_nondet_quot!(ctx, x4278, x6, 1);
    let x4280: BytePoly_1 = bigint_nondet_rem!(ctx, x4278, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4279, x6, 2), x4280, 2), x4278, 2),
        8131,
        2,
    )?;
    let x4281: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4274, x4274, 2), x4227, 2), x6, 2),
            x4257,
            2
        ),
        x6,
        2
    );
    let x4282: BytePoly_3 = bigint_nondet_quot!(ctx, x4281, x6, 3);
    let x4283: BytePoly_1 = bigint_nondet_rem!(ctx, x4281, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4282, x6, 4), x4283, 4), x4281, 4),
        24387,
        2,
    )?;
    let x4284: BytePoly_2 = bigint_mul!(x4274, x4283, 2);
    let x4285: BytePoly_3 = bigint_nondet_quot!(ctx, x4284, x6, 3);
    let x4286: BytePoly_1 = bigint_nondet_rem!(ctx, x4284, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4285, x6, 4), x4286, 4), x4284, 4),
        24387,
        2,
    )?;
    let x4287: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4286, x4280, 1), 1), x6, 1);
    let x4288: BytePoly_1 = bigint_nondet_quot!(ctx, x4287, x6, 1);
    let x4289: BytePoly_1 = bigint_nondet_rem!(ctx, x4287, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4288, x6, 2), x4289, 2), x4287, 2),
        8131,
        2,
    )?;
    let x4290: BytePoly_2 = bigint_add!(
        bigint_mul!(x4283, x4264, 2),
        bigint_mul!(x4227, x4266, 2),
        2
    );
    let x4291: BytePoly_2 = bigint_add!(
        bigint_mul!(x4289, x4264, 2),
        bigint_mul!(x4229, x4266, 2),
        2
    );
    let x4292: BytePoly_3 = bigint_nondet_quot!(ctx, x4290, x6, 3);
    let x4293: BytePoly_1 = bigint_nondet_rem!(ctx, x4290, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4292, x6, 4), x4293, 4), x4290, 4),
        24387,
        2,
    )?;
    let x4294: BytePoly_3 = bigint_nondet_quot!(ctx, x4291, x6, 3);
    let x4295: BytePoly_1 = bigint_nondet_rem!(ctx, x4291, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4294, x6, 4), x4295, 4), x4291, 4),
        24387,
        2,
    )?;
    let x4296: BytePoly_2 = bigint_mul!(x4257, x4257, 2);
    let x4297: BytePoly_3 = bigint_nondet_quot!(ctx, x4296, x6, 3);
    let x4298: BytePoly_1 = bigint_nondet_rem!(ctx, x4296, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4297, x6, 4), x4298, 4), x4296, 4),
        24387,
        2,
    )?;
    let x4299: BytePoly_2 = bigint_add!(bigint_mul!(x4298, x0, 2), x5, 2);
    let x4300: BytePoly_3 = bigint_nondet_quot!(ctx, x4299, x6, 3);
    let x4301: BytePoly_1 = bigint_nondet_rem!(ctx, x4299, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4300, x6, 4), x4301, 4), x4299, 4),
        24387,
        2,
    )?;
    let x4302: BytePoly_1 = bigint_add!(x4263, x4263, 1);
    let x4303: BytePoly_1 = bigint_nondet_quot!(ctx, x4302, x6, 1);
    let x4304: BytePoly_1 = bigint_nondet_rem!(ctx, x4302, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4303, x6, 2), x4304, 2), x4302, 2),
        8131,
        2,
    )?;
    let x4305: BytePoly_1 = bigint_nondet_inv!(ctx, x4304, x6, 1);
    let x4306: BytePoly_2 = bigint_mul!(x4304, x4305, 2);
    let x4307: BytePoly_3 = bigint_nondet_quot!(ctx, x4306, x6, 3);
    let x4308: BytePoly_1 = bigint_nondet_rem!(ctx, x4306, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4307, x6, 4), x4308, 4), x4306, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4308, x3, 1), 34, 1)?;
    let x4309: BytePoly_2 = bigint_mul!(x4301, x4305, 2);
    let x4310: BytePoly_3 = bigint_nondet_quot!(ctx, x4309, x6, 3);
    let x4311: BytePoly_1 = bigint_nondet_rem!(ctx, x4309, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4310, x6, 4), x4311, 4), x4309, 4),
        24387,
        2,
    )?;
    let x4312: BytePoly_2 = bigint_mul!(x4311, x4257, 2);
    let x4313: BytePoly_3 = bigint_nondet_quot!(ctx, x4312, x6, 3);
    let x4314: BytePoly_1 = bigint_nondet_rem!(ctx, x4312, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4313, x6, 4), x4314, 4), x4312, 4),
        24387,
        2,
    )?;
    let x4315: BytePoly_1 = bigint_add!(bigint_sub!(x4263, x4314, 1), x6, 1);
    let x4316: BytePoly_1 = bigint_nondet_quot!(ctx, x4315, x6, 1);
    let x4317: BytePoly_1 = bigint_nondet_rem!(ctx, x4315, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4316, x6, 2), x4317, 2), x4315, 2),
        8131,
        2,
    )?;
    let x4318: BytePoly_2 = bigint_mul!(x4311, x4311, 2);
    let x4319: BytePoly_3 = bigint_nondet_quot!(ctx, x4318, x6, 3);
    let x4320: BytePoly_1 = bigint_nondet_rem!(ctx, x4318, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4319, x6, 4), x4320, 4), x4318, 4),
        24387,
        2,
    )?;
    let x4321: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4320, x4257, 1), x6, 1), x4257, 1),
        x6,
        1
    );
    let x4322: BytePoly_1 = bigint_nondet_quot!(ctx, x4321, x6, 1);
    let x4323: BytePoly_1 = bigint_nondet_rem!(ctx, x4321, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4322, x6, 2), x4323, 2), x4321, 2),
        8131,
        2,
    )?;
    let x4324: BytePoly_2 = bigint_mul!(x4311, x4323, 2);
    let x4325: BytePoly_3 = bigint_nondet_quot!(ctx, x4324, x6, 3);
    let x4326: BytePoly_1 = bigint_nondet_rem!(ctx, x4324, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4325, x6, 4), x4326, 4), x4324, 4),
        24387,
        2,
    )?;
    let x4327: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4326, x4317, 1), 1), x6, 1);
    let x4328: BytePoly_1 = bigint_nondet_quot!(ctx, x4327, x6, 1);
    let x4329: BytePoly_1 = bigint_nondet_rem!(ctx, x4327, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4328, x6, 2), x4329, 2), x4327, 2),
        8131,
        2,
    )?;
    let x4330: BytePoly_1 = bigint_add!(bigint_sub!(x15, x4293, 1), x6, 1);
    let x4331: BytePoly_1 = bigint_nondet_inv!(ctx, x4330, x6, 1);
    let x4332: BytePoly_2 = bigint_mul!(x4330, x4331, 2);
    let x4333: BytePoly_3 = bigint_nondet_quot!(ctx, x4332, x6, 3);
    let x4334: BytePoly_1 = bigint_nondet_rem!(ctx, x4332, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4333, x6, 4), x4334, 4), x4332, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4334, x1, 1), 34, 1)?;
    let x4335: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2172, x4295, 1), x6, 1), x4331, 2);
    let x4336: BytePoly_3 = bigint_nondet_quot!(ctx, x4335, x6, 3);
    let x4337: BytePoly_1 = bigint_nondet_rem!(ctx, x4335, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4336, x6, 4), x4337, 4), x4335, 4),
        24387,
        2,
    )?;
    let x4338: BytePoly_2 = bigint_mul!(x4337, x4293, 2);
    let x4339: BytePoly_3 = bigint_nondet_quot!(ctx, x4338, x6, 3);
    let x4340: BytePoly_1 = bigint_nondet_rem!(ctx, x4338, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4339, x6, 4), x4340, 4), x4338, 4),
        24387,
        2,
    )?;
    let x4341: BytePoly_1 = bigint_add!(bigint_sub!(x4295, x4340, 1), x6, 1);
    let x4342: BytePoly_1 = bigint_nondet_quot!(ctx, x4341, x6, 1);
    let x4343: BytePoly_1 = bigint_nondet_rem!(ctx, x4341, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4342, x6, 2), x4343, 2), x4341, 2),
        8131,
        2,
    )?;
    let x4344: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4337, x4337, 2), x4293, 2), x6, 2),
            x15,
            2
        ),
        x6,
        2
    );
    let x4345: BytePoly_3 = bigint_nondet_quot!(ctx, x4344, x6, 3);
    let x4346: BytePoly_1 = bigint_nondet_rem!(ctx, x4344, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4345, x6, 4), x4346, 4), x4344, 4),
        24387,
        2,
    )?;
    let x4347: BytePoly_2 = bigint_mul!(x4337, x4346, 2);
    let x4348: BytePoly_3 = bigint_nondet_quot!(ctx, x4347, x6, 3);
    let x4349: BytePoly_1 = bigint_nondet_rem!(ctx, x4347, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4348, x6, 4), x4349, 4), x4347, 4),
        24387,
        2,
    )?;
    let x4350: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4349, x4343, 1), 1), x6, 1);
    let x4351: BytePoly_1 = bigint_nondet_quot!(ctx, x4350, x6, 1);
    let x4352: BytePoly_1 = bigint_nondet_rem!(ctx, x4350, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4351, x6, 2), x4352, 2), x4350, 2),
        8131,
        2,
    )?;
    let x4353: BytePoly_3 = bigint_nondet_quot!(ctx, x32, x6, 3);
    let x4354: BytePoly_1 = bigint_nondet_rem!(ctx, x32, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4353, x6, 4), x4354, 4), x32, 4),
        24387,
        2,
    )?;
    let x4355: BytePoly_3 = bigint_nondet_quot!(ctx, x35, x6, 3);
    let x4356: BytePoly_1 = bigint_nondet_rem!(ctx, x35, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4355, x6, 4), x4356, 4), x35, 4),
        24387,
        2,
    )?;
    let x4357: BytePoly_2 = bigint_mul!(x15, x4356, 2);
    let x4358: BytePoly_3 = bigint_nondet_quot!(ctx, x4357, x6, 3);
    let x4359: BytePoly_1 = bigint_nondet_rem!(ctx, x4357, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4358, x6, 4), x4359, 4), x4357, 4),
        24387,
        2,
    )?;
    let x4360: BytePoly_3 = bigint_nondet_quot!(ctx, x41, x6, 3);
    let x4361: BytePoly_1 = bigint_nondet_rem!(ctx, x41, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4360, x6, 4), x4361, 4), x41, 4),
        24387,
        2,
    )?;
    let x4362: BytePoly_1 = bigint_add!(bigint_add!(x4359, x4361, 1), x4, 1);
    let x4363: BytePoly_1 = bigint_nondet_quot!(ctx, x4362, x6, 1);
    let x4364: BytePoly_1 = bigint_nondet_rem!(ctx, x4362, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4363, x6, 2), x4364, 2), x4362, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4354, x4364, 1), 34, 1)?;
    let x4365: BytePoly_1 = bigint_nondet_rem!(ctx, x2205, x2, 1);
    let x4366: BytePoly_2 = bigint_nondet_quot!(ctx, x2205, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4366, x2, 3), x4365, 3), x2205, 3),
        16259,
        2,
    )?;
    let x4367: BytePoly_1 = bigint_sub!(x3, x4365, 1);
    eqz(ctx, &bigint_mul!(x4365, x4367, 2), 8131, 2)?;
    let x4368: BytePoly_1 = bigint_nondet_inv!(ctx, x64, x6, 1);
    let x4369: BytePoly_2 = bigint_mul!(x64, x4368, 2);
    let x4370: BytePoly_3 = bigint_nondet_quot!(ctx, x4369, x6, 3);
    let x4371: BytePoly_1 = bigint_nondet_rem!(ctx, x4369, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4370, x6, 4), x4371, 4), x4369, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4371, x1, 1), 34, 1)?;
    let x4372: BytePoly_2 = bigint_mul!(x63, x4368, 2);
    let x4373: BytePoly_3 = bigint_nondet_quot!(ctx, x4372, x6, 3);
    let x4374: BytePoly_1 = bigint_nondet_rem!(ctx, x4372, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4373, x6, 4), x4374, 4), x4372, 4),
        24387,
        2,
    )?;
    let x4375: BytePoly_2 = bigint_mul!(x4374, x15, 2);
    let x4376: BytePoly_3 = bigint_nondet_quot!(ctx, x4375, x6, 3);
    let x4377: BytePoly_1 = bigint_nondet_rem!(ctx, x4375, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4376, x6, 4), x4377, 4), x4375, 4),
        24387,
        2,
    )?;
    let x4378: BytePoly_1 = bigint_add!(bigint_sub!(x16, x4377, 1), x6, 1);
    let x4379: BytePoly_1 = bigint_nondet_quot!(ctx, x4378, x6, 1);
    let x4380: BytePoly_1 = bigint_nondet_rem!(ctx, x4378, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4379, x6, 2), x4380, 2), x4378, 2),
        8131,
        2,
    )?;
    let x4381: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4374, x4374, 2), x15, 2), x6, 2),
            x10,
            2
        ),
        x6,
        2
    );
    let x4382: BytePoly_3 = bigint_nondet_quot!(ctx, x4381, x6, 3);
    let x4383: BytePoly_1 = bigint_nondet_rem!(ctx, x4381, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4382, x6, 4), x4383, 4), x4381, 4),
        24387,
        2,
    )?;
    let x4384: BytePoly_2 = bigint_mul!(x4374, x4383, 2);
    let x4385: BytePoly_3 = bigint_nondet_quot!(ctx, x4384, x6, 3);
    let x4386: BytePoly_1 = bigint_nondet_rem!(ctx, x4384, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4385, x6, 4), x4386, 4), x4384, 4),
        24387,
        2,
    )?;
    let x4387: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4386, x4380, 1), 1), x6, 1);
    let x4388: BytePoly_1 = bigint_nondet_quot!(ctx, x4387, x6, 1);
    let x4389: BytePoly_1 = bigint_nondet_rem!(ctx, x4387, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4388, x6, 2), x4389, 2), x4387, 2),
        8131,
        2,
    )?;
    let x4390: BytePoly_2 =
        bigint_add!(bigint_mul!(x4383, x4365, 2), bigint_mul!(x15, x4367, 2), 2);
    let x4391: BytePoly_2 =
        bigint_add!(bigint_mul!(x4389, x4365, 2), bigint_mul!(x16, x4367, 2), 2);
    let x4392: BytePoly_3 = bigint_nondet_quot!(ctx, x4390, x6, 3);
    let x4393: BytePoly_1 = bigint_nondet_rem!(ctx, x4390, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4392, x6, 4), x4393, 4), x4390, 4),
        24387,
        2,
    )?;
    let x4394: BytePoly_3 = bigint_nondet_quot!(ctx, x4391, x6, 3);
    let x4395: BytePoly_1 = bigint_nondet_rem!(ctx, x4391, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4394, x6, 4), x4395, 4), x4391, 4),
        24387,
        2,
    )?;
    let x4396: BytePoly_3 = bigint_nondet_quot!(ctx, x20, x6, 3);
    let x4397: BytePoly_1 = bigint_nondet_rem!(ctx, x20, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4396, x6, 4), x4397, 4), x20, 4),
        24387,
        2,
    )?;
    let x4398: BytePoly_2 = bigint_add!(bigint_mul!(x4397, x0, 2), x5, 2);
    let x4399: BytePoly_3 = bigint_nondet_quot!(ctx, x4398, x6, 3);
    let x4400: BytePoly_1 = bigint_nondet_rem!(ctx, x4398, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4399, x6, 4), x4400, 4), x4398, 4),
        24387,
        2,
    )?;
    let x4401: BytePoly_1 = bigint_nondet_quot!(ctx, x98, x6, 1);
    let x4402: BytePoly_1 = bigint_nondet_rem!(ctx, x98, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4401, x6, 2), x4402, 2), x98, 2),
        8131,
        2,
    )?;
    let x4403: BytePoly_1 = bigint_nondet_inv!(ctx, x4402, x6, 1);
    let x4404: BytePoly_2 = bigint_mul!(x4402, x4403, 2);
    let x4405: BytePoly_3 = bigint_nondet_quot!(ctx, x4404, x6, 3);
    let x4406: BytePoly_1 = bigint_nondet_rem!(ctx, x4404, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4405, x6, 4), x4406, 4), x4404, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4406, x3, 1), 34, 1)?;
    let x4407: BytePoly_2 = bigint_mul!(x4400, x4403, 2);
    let x4408: BytePoly_3 = bigint_nondet_quot!(ctx, x4407, x6, 3);
    let x4409: BytePoly_1 = bigint_nondet_rem!(ctx, x4407, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4408, x6, 4), x4409, 4), x4407, 4),
        24387,
        2,
    )?;
    let x4410: BytePoly_2 = bigint_mul!(x4409, x10, 2);
    let x4411: BytePoly_3 = bigint_nondet_quot!(ctx, x4410, x6, 3);
    let x4412: BytePoly_1 = bigint_nondet_rem!(ctx, x4410, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4411, x6, 4), x4412, 4), x4410, 4),
        24387,
        2,
    )?;
    let x4413: BytePoly_1 = bigint_add!(bigint_sub!(x11, x4412, 1), x6, 1);
    let x4414: BytePoly_1 = bigint_nondet_quot!(ctx, x4413, x6, 1);
    let x4415: BytePoly_1 = bigint_nondet_rem!(ctx, x4413, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4414, x6, 2), x4415, 2), x4413, 2),
        8131,
        2,
    )?;
    let x4416: BytePoly_2 = bigint_mul!(x4409, x4409, 2);
    let x4417: BytePoly_3 = bigint_nondet_quot!(ctx, x4416, x6, 3);
    let x4418: BytePoly_1 = bigint_nondet_rem!(ctx, x4416, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4417, x6, 4), x4418, 4), x4416, 4),
        24387,
        2,
    )?;
    let x4419: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4418, x10, 1), x6, 1), x10, 1),
        x6,
        1
    );
    let x4420: BytePoly_1 = bigint_nondet_quot!(ctx, x4419, x6, 1);
    let x4421: BytePoly_1 = bigint_nondet_rem!(ctx, x4419, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4420, x6, 2), x4421, 2), x4419, 2),
        8131,
        2,
    )?;
    let x4422: BytePoly_2 = bigint_mul!(x4409, x4421, 2);
    let x4423: BytePoly_3 = bigint_nondet_quot!(ctx, x4422, x6, 3);
    let x4424: BytePoly_1 = bigint_nondet_rem!(ctx, x4422, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4423, x6, 4), x4424, 4), x4422, 4),
        24387,
        2,
    )?;
    let x4425: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4424, x4415, 1), 1), x6, 1);
    let x4426: BytePoly_1 = bigint_nondet_quot!(ctx, x4425, x6, 1);
    let x4427: BytePoly_1 = bigint_nondet_rem!(ctx, x4425, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4426, x6, 2), x4427, 2), x4425, 2),
        8131,
        2,
    )?;
    let x4428: BytePoly_1 = bigint_nondet_rem!(ctx, x4366, x2, 1);
    let x4429: BytePoly_2 = bigint_nondet_quot!(ctx, x4366, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4429, x2, 3), x4428, 3), x4366, 3),
        16259,
        2,
    )?;
    let x4430: BytePoly_1 = bigint_sub!(x3, x4428, 1);
    eqz(ctx, &bigint_mul!(x4428, x4430, 2), 8131, 2)?;
    let x4431: BytePoly_1 = bigint_add!(bigint_sub!(x4421, x4393, 1), x6, 1);
    let x4432: BytePoly_1 = bigint_nondet_inv!(ctx, x4431, x6, 1);
    let x4433: BytePoly_2 = bigint_mul!(x4431, x4432, 2);
    let x4434: BytePoly_3 = bigint_nondet_quot!(ctx, x4433, x6, 3);
    let x4435: BytePoly_1 = bigint_nondet_rem!(ctx, x4433, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4434, x6, 4), x4435, 4), x4433, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4435, x1, 1), 34, 1)?;
    let x4436: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4427, x4395, 1), x6, 1), x4432, 2);
    let x4437: BytePoly_3 = bigint_nondet_quot!(ctx, x4436, x6, 3);
    let x4438: BytePoly_1 = bigint_nondet_rem!(ctx, x4436, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4437, x6, 4), x4438, 4), x4436, 4),
        24387,
        2,
    )?;
    let x4439: BytePoly_2 = bigint_mul!(x4438, x4393, 2);
    let x4440: BytePoly_3 = bigint_nondet_quot!(ctx, x4439, x6, 3);
    let x4441: BytePoly_1 = bigint_nondet_rem!(ctx, x4439, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4440, x6, 4), x4441, 4), x4439, 4),
        24387,
        2,
    )?;
    let x4442: BytePoly_1 = bigint_add!(bigint_sub!(x4395, x4441, 1), x6, 1);
    let x4443: BytePoly_1 = bigint_nondet_quot!(ctx, x4442, x6, 1);
    let x4444: BytePoly_1 = bigint_nondet_rem!(ctx, x4442, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4443, x6, 2), x4444, 2), x4442, 2),
        8131,
        2,
    )?;
    let x4445: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4438, x4438, 2), x4393, 2), x6, 2),
            x4421,
            2
        ),
        x6,
        2
    );
    let x4446: BytePoly_3 = bigint_nondet_quot!(ctx, x4445, x6, 3);
    let x4447: BytePoly_1 = bigint_nondet_rem!(ctx, x4445, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4446, x6, 4), x4447, 4), x4445, 4),
        24387,
        2,
    )?;
    let x4448: BytePoly_2 = bigint_mul!(x4438, x4447, 2);
    let x4449: BytePoly_3 = bigint_nondet_quot!(ctx, x4448, x6, 3);
    let x4450: BytePoly_1 = bigint_nondet_rem!(ctx, x4448, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4449, x6, 4), x4450, 4), x4448, 4),
        24387,
        2,
    )?;
    let x4451: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4450, x4444, 1), 1), x6, 1);
    let x4452: BytePoly_1 = bigint_nondet_quot!(ctx, x4451, x6, 1);
    let x4453: BytePoly_1 = bigint_nondet_rem!(ctx, x4451, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4452, x6, 2), x4453, 2), x4451, 2),
        8131,
        2,
    )?;
    let x4454: BytePoly_2 = bigint_add!(
        bigint_mul!(x4447, x4428, 2),
        bigint_mul!(x4393, x4430, 2),
        2
    );
    let x4455: BytePoly_2 = bigint_add!(
        bigint_mul!(x4453, x4428, 2),
        bigint_mul!(x4395, x4430, 2),
        2
    );
    let x4456: BytePoly_3 = bigint_nondet_quot!(ctx, x4454, x6, 3);
    let x4457: BytePoly_1 = bigint_nondet_rem!(ctx, x4454, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4456, x6, 4), x4457, 4), x4454, 4),
        24387,
        2,
    )?;
    let x4458: BytePoly_3 = bigint_nondet_quot!(ctx, x4455, x6, 3);
    let x4459: BytePoly_1 = bigint_nondet_rem!(ctx, x4455, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4458, x6, 4), x4459, 4), x4455, 4),
        24387,
        2,
    )?;
    let x4460: BytePoly_2 = bigint_mul!(x4421, x4421, 2);
    let x4461: BytePoly_3 = bigint_nondet_quot!(ctx, x4460, x6, 3);
    let x4462: BytePoly_1 = bigint_nondet_rem!(ctx, x4460, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4461, x6, 4), x4462, 4), x4460, 4),
        24387,
        2,
    )?;
    let x4463: BytePoly_2 = bigint_add!(bigint_mul!(x4462, x0, 2), x5, 2);
    let x4464: BytePoly_3 = bigint_nondet_quot!(ctx, x4463, x6, 3);
    let x4465: BytePoly_1 = bigint_nondet_rem!(ctx, x4463, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4464, x6, 4), x4465, 4), x4463, 4),
        24387,
        2,
    )?;
    let x4466: BytePoly_1 = bigint_add!(x4427, x4427, 1);
    let x4467: BytePoly_1 = bigint_nondet_quot!(ctx, x4466, x6, 1);
    let x4468: BytePoly_1 = bigint_nondet_rem!(ctx, x4466, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4467, x6, 2), x4468, 2), x4466, 2),
        8131,
        2,
    )?;
    let x4469: BytePoly_1 = bigint_nondet_inv!(ctx, x4468, x6, 1);
    let x4470: BytePoly_2 = bigint_mul!(x4468, x4469, 2);
    let x4471: BytePoly_3 = bigint_nondet_quot!(ctx, x4470, x6, 3);
    let x4472: BytePoly_1 = bigint_nondet_rem!(ctx, x4470, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4471, x6, 4), x4472, 4), x4470, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4472, x3, 1), 34, 1)?;
    let x4473: BytePoly_2 = bigint_mul!(x4465, x4469, 2);
    let x4474: BytePoly_3 = bigint_nondet_quot!(ctx, x4473, x6, 3);
    let x4475: BytePoly_1 = bigint_nondet_rem!(ctx, x4473, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4474, x6, 4), x4475, 4), x4473, 4),
        24387,
        2,
    )?;
    let x4476: BytePoly_2 = bigint_mul!(x4475, x4421, 2);
    let x4477: BytePoly_3 = bigint_nondet_quot!(ctx, x4476, x6, 3);
    let x4478: BytePoly_1 = bigint_nondet_rem!(ctx, x4476, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4477, x6, 4), x4478, 4), x4476, 4),
        24387,
        2,
    )?;
    let x4479: BytePoly_1 = bigint_add!(bigint_sub!(x4427, x4478, 1), x6, 1);
    let x4480: BytePoly_1 = bigint_nondet_quot!(ctx, x4479, x6, 1);
    let x4481: BytePoly_1 = bigint_nondet_rem!(ctx, x4479, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4480, x6, 2), x4481, 2), x4479, 2),
        8131,
        2,
    )?;
    let x4482: BytePoly_2 = bigint_mul!(x4475, x4475, 2);
    let x4483: BytePoly_3 = bigint_nondet_quot!(ctx, x4482, x6, 3);
    let x4484: BytePoly_1 = bigint_nondet_rem!(ctx, x4482, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4483, x6, 4), x4484, 4), x4482, 4),
        24387,
        2,
    )?;
    let x4485: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4484, x4421, 1), x6, 1), x4421, 1),
        x6,
        1
    );
    let x4486: BytePoly_1 = bigint_nondet_quot!(ctx, x4485, x6, 1);
    let x4487: BytePoly_1 = bigint_nondet_rem!(ctx, x4485, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4486, x6, 2), x4487, 2), x4485, 2),
        8131,
        2,
    )?;
    let x4488: BytePoly_2 = bigint_mul!(x4475, x4487, 2);
    let x4489: BytePoly_3 = bigint_nondet_quot!(ctx, x4488, x6, 3);
    let x4490: BytePoly_1 = bigint_nondet_rem!(ctx, x4488, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4489, x6, 4), x4490, 4), x4488, 4),
        24387,
        2,
    )?;
    let x4491: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4490, x4481, 1), 1), x6, 1);
    let x4492: BytePoly_1 = bigint_nondet_quot!(ctx, x4491, x6, 1);
    let x4493: BytePoly_1 = bigint_nondet_rem!(ctx, x4491, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4492, x6, 2), x4493, 2), x4491, 2),
        8131,
        2,
    )?;
    let x4494: BytePoly_1 = bigint_nondet_rem!(ctx, x4429, x2, 1);
    let x4495: BytePoly_2 = bigint_nondet_quot!(ctx, x4429, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4495, x2, 3), x4494, 3), x4429, 3),
        16259,
        2,
    )?;
    let x4496: BytePoly_1 = bigint_sub!(x3, x4494, 1);
    eqz(ctx, &bigint_mul!(x4494, x4496, 2), 8131, 2)?;
    let x4497: BytePoly_1 = bigint_add!(bigint_sub!(x4487, x4457, 1), x6, 1);
    let x4498: BytePoly_1 = bigint_nondet_inv!(ctx, x4497, x6, 1);
    let x4499: BytePoly_2 = bigint_mul!(x4497, x4498, 2);
    let x4500: BytePoly_3 = bigint_nondet_quot!(ctx, x4499, x6, 3);
    let x4501: BytePoly_1 = bigint_nondet_rem!(ctx, x4499, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4500, x6, 4), x4501, 4), x4499, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4501, x1, 1), 34, 1)?;
    let x4502: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4493, x4459, 1), x6, 1), x4498, 2);
    let x4503: BytePoly_3 = bigint_nondet_quot!(ctx, x4502, x6, 3);
    let x4504: BytePoly_1 = bigint_nondet_rem!(ctx, x4502, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4503, x6, 4), x4504, 4), x4502, 4),
        24387,
        2,
    )?;
    let x4505: BytePoly_2 = bigint_mul!(x4504, x4457, 2);
    let x4506: BytePoly_3 = bigint_nondet_quot!(ctx, x4505, x6, 3);
    let x4507: BytePoly_1 = bigint_nondet_rem!(ctx, x4505, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4506, x6, 4), x4507, 4), x4505, 4),
        24387,
        2,
    )?;
    let x4508: BytePoly_1 = bigint_add!(bigint_sub!(x4459, x4507, 1), x6, 1);
    let x4509: BytePoly_1 = bigint_nondet_quot!(ctx, x4508, x6, 1);
    let x4510: BytePoly_1 = bigint_nondet_rem!(ctx, x4508, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4509, x6, 2), x4510, 2), x4508, 2),
        8131,
        2,
    )?;
    let x4511: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4504, x4504, 2), x4457, 2), x6, 2),
            x4487,
            2
        ),
        x6,
        2
    );
    let x4512: BytePoly_3 = bigint_nondet_quot!(ctx, x4511, x6, 3);
    let x4513: BytePoly_1 = bigint_nondet_rem!(ctx, x4511, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4512, x6, 4), x4513, 4), x4511, 4),
        24387,
        2,
    )?;
    let x4514: BytePoly_2 = bigint_mul!(x4504, x4513, 2);
    let x4515: BytePoly_3 = bigint_nondet_quot!(ctx, x4514, x6, 3);
    let x4516: BytePoly_1 = bigint_nondet_rem!(ctx, x4514, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4515, x6, 4), x4516, 4), x4514, 4),
        24387,
        2,
    )?;
    let x4517: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4516, x4510, 1), 1), x6, 1);
    let x4518: BytePoly_1 = bigint_nondet_quot!(ctx, x4517, x6, 1);
    let x4519: BytePoly_1 = bigint_nondet_rem!(ctx, x4517, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4518, x6, 2), x4519, 2), x4517, 2),
        8131,
        2,
    )?;
    let x4520: BytePoly_2 = bigint_add!(
        bigint_mul!(x4513, x4494, 2),
        bigint_mul!(x4457, x4496, 2),
        2
    );
    let x4521: BytePoly_2 = bigint_add!(
        bigint_mul!(x4519, x4494, 2),
        bigint_mul!(x4459, x4496, 2),
        2
    );
    let x4522: BytePoly_3 = bigint_nondet_quot!(ctx, x4520, x6, 3);
    let x4523: BytePoly_1 = bigint_nondet_rem!(ctx, x4520, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4522, x6, 4), x4523, 4), x4520, 4),
        24387,
        2,
    )?;
    let x4524: BytePoly_3 = bigint_nondet_quot!(ctx, x4521, x6, 3);
    let x4525: BytePoly_1 = bigint_nondet_rem!(ctx, x4521, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4524, x6, 4), x4525, 4), x4521, 4),
        24387,
        2,
    )?;
    let x4526: BytePoly_2 = bigint_mul!(x4487, x4487, 2);
    let x4527: BytePoly_3 = bigint_nondet_quot!(ctx, x4526, x6, 3);
    let x4528: BytePoly_1 = bigint_nondet_rem!(ctx, x4526, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4527, x6, 4), x4528, 4), x4526, 4),
        24387,
        2,
    )?;
    let x4529: BytePoly_2 = bigint_add!(bigint_mul!(x4528, x0, 2), x5, 2);
    let x4530: BytePoly_3 = bigint_nondet_quot!(ctx, x4529, x6, 3);
    let x4531: BytePoly_1 = bigint_nondet_rem!(ctx, x4529, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4530, x6, 4), x4531, 4), x4529, 4),
        24387,
        2,
    )?;
    let x4532: BytePoly_1 = bigint_add!(x4493, x4493, 1);
    let x4533: BytePoly_1 = bigint_nondet_quot!(ctx, x4532, x6, 1);
    let x4534: BytePoly_1 = bigint_nondet_rem!(ctx, x4532, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4533, x6, 2), x4534, 2), x4532, 2),
        8131,
        2,
    )?;
    let x4535: BytePoly_1 = bigint_nondet_inv!(ctx, x4534, x6, 1);
    let x4536: BytePoly_2 = bigint_mul!(x4534, x4535, 2);
    let x4537: BytePoly_3 = bigint_nondet_quot!(ctx, x4536, x6, 3);
    let x4538: BytePoly_1 = bigint_nondet_rem!(ctx, x4536, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4537, x6, 4), x4538, 4), x4536, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4538, x3, 1), 34, 1)?;
    let x4539: BytePoly_2 = bigint_mul!(x4531, x4535, 2);
    let x4540: BytePoly_3 = bigint_nondet_quot!(ctx, x4539, x6, 3);
    let x4541: BytePoly_1 = bigint_nondet_rem!(ctx, x4539, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4540, x6, 4), x4541, 4), x4539, 4),
        24387,
        2,
    )?;
    let x4542: BytePoly_2 = bigint_mul!(x4541, x4487, 2);
    let x4543: BytePoly_3 = bigint_nondet_quot!(ctx, x4542, x6, 3);
    let x4544: BytePoly_1 = bigint_nondet_rem!(ctx, x4542, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4543, x6, 4), x4544, 4), x4542, 4),
        24387,
        2,
    )?;
    let x4545: BytePoly_1 = bigint_add!(bigint_sub!(x4493, x4544, 1), x6, 1);
    let x4546: BytePoly_1 = bigint_nondet_quot!(ctx, x4545, x6, 1);
    let x4547: BytePoly_1 = bigint_nondet_rem!(ctx, x4545, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4546, x6, 2), x4547, 2), x4545, 2),
        8131,
        2,
    )?;
    let x4548: BytePoly_2 = bigint_mul!(x4541, x4541, 2);
    let x4549: BytePoly_3 = bigint_nondet_quot!(ctx, x4548, x6, 3);
    let x4550: BytePoly_1 = bigint_nondet_rem!(ctx, x4548, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4549, x6, 4), x4550, 4), x4548, 4),
        24387,
        2,
    )?;
    let x4551: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4550, x4487, 1), x6, 1), x4487, 1),
        x6,
        1
    );
    let x4552: BytePoly_1 = bigint_nondet_quot!(ctx, x4551, x6, 1);
    let x4553: BytePoly_1 = bigint_nondet_rem!(ctx, x4551, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4552, x6, 2), x4553, 2), x4551, 2),
        8131,
        2,
    )?;
    let x4554: BytePoly_2 = bigint_mul!(x4541, x4553, 2);
    let x4555: BytePoly_3 = bigint_nondet_quot!(ctx, x4554, x6, 3);
    let x4556: BytePoly_1 = bigint_nondet_rem!(ctx, x4554, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4555, x6, 4), x4556, 4), x4554, 4),
        24387,
        2,
    )?;
    let x4557: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4556, x4547, 1), 1), x6, 1);
    let x4558: BytePoly_1 = bigint_nondet_quot!(ctx, x4557, x6, 1);
    let x4559: BytePoly_1 = bigint_nondet_rem!(ctx, x4557, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4558, x6, 2), x4559, 2), x4557, 2),
        8131,
        2,
    )?;
    let x4560: BytePoly_1 = bigint_nondet_rem!(ctx, x4495, x2, 1);
    let x4561: BytePoly_2 = bigint_nondet_quot!(ctx, x4495, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4561, x2, 3), x4560, 3), x4495, 3),
        16259,
        2,
    )?;
    let x4562: BytePoly_1 = bigint_sub!(x3, x4560, 1);
    eqz(ctx, &bigint_mul!(x4560, x4562, 2), 8131, 2)?;
    let x4563: BytePoly_1 = bigint_add!(bigint_sub!(x4553, x4523, 1), x6, 1);
    let x4564: BytePoly_1 = bigint_nondet_inv!(ctx, x4563, x6, 1);
    let x4565: BytePoly_2 = bigint_mul!(x4563, x4564, 2);
    let x4566: BytePoly_3 = bigint_nondet_quot!(ctx, x4565, x6, 3);
    let x4567: BytePoly_1 = bigint_nondet_rem!(ctx, x4565, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4566, x6, 4), x4567, 4), x4565, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4567, x1, 1), 34, 1)?;
    let x4568: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4559, x4525, 1), x6, 1), x4564, 2);
    let x4569: BytePoly_3 = bigint_nondet_quot!(ctx, x4568, x6, 3);
    let x4570: BytePoly_1 = bigint_nondet_rem!(ctx, x4568, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4569, x6, 4), x4570, 4), x4568, 4),
        24387,
        2,
    )?;
    let x4571: BytePoly_2 = bigint_mul!(x4570, x4523, 2);
    let x4572: BytePoly_3 = bigint_nondet_quot!(ctx, x4571, x6, 3);
    let x4573: BytePoly_1 = bigint_nondet_rem!(ctx, x4571, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4572, x6, 4), x4573, 4), x4571, 4),
        24387,
        2,
    )?;
    let x4574: BytePoly_1 = bigint_add!(bigint_sub!(x4525, x4573, 1), x6, 1);
    let x4575: BytePoly_1 = bigint_nondet_quot!(ctx, x4574, x6, 1);
    let x4576: BytePoly_1 = bigint_nondet_rem!(ctx, x4574, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4575, x6, 2), x4576, 2), x4574, 2),
        8131,
        2,
    )?;
    let x4577: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4570, x4570, 2), x4523, 2), x6, 2),
            x4553,
            2
        ),
        x6,
        2
    );
    let x4578: BytePoly_3 = bigint_nondet_quot!(ctx, x4577, x6, 3);
    let x4579: BytePoly_1 = bigint_nondet_rem!(ctx, x4577, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4578, x6, 4), x4579, 4), x4577, 4),
        24387,
        2,
    )?;
    let x4580: BytePoly_2 = bigint_mul!(x4570, x4579, 2);
    let x4581: BytePoly_3 = bigint_nondet_quot!(ctx, x4580, x6, 3);
    let x4582: BytePoly_1 = bigint_nondet_rem!(ctx, x4580, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4581, x6, 4), x4582, 4), x4580, 4),
        24387,
        2,
    )?;
    let x4583: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4582, x4576, 1), 1), x6, 1);
    let x4584: BytePoly_1 = bigint_nondet_quot!(ctx, x4583, x6, 1);
    let x4585: BytePoly_1 = bigint_nondet_rem!(ctx, x4583, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4584, x6, 2), x4585, 2), x4583, 2),
        8131,
        2,
    )?;
    let x4586: BytePoly_2 = bigint_add!(
        bigint_mul!(x4579, x4560, 2),
        bigint_mul!(x4523, x4562, 2),
        2
    );
    let x4587: BytePoly_2 = bigint_add!(
        bigint_mul!(x4585, x4560, 2),
        bigint_mul!(x4525, x4562, 2),
        2
    );
    let x4588: BytePoly_3 = bigint_nondet_quot!(ctx, x4586, x6, 3);
    let x4589: BytePoly_1 = bigint_nondet_rem!(ctx, x4586, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4588, x6, 4), x4589, 4), x4586, 4),
        24387,
        2,
    )?;
    let x4590: BytePoly_3 = bigint_nondet_quot!(ctx, x4587, x6, 3);
    let x4591: BytePoly_1 = bigint_nondet_rem!(ctx, x4587, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4590, x6, 4), x4591, 4), x4587, 4),
        24387,
        2,
    )?;
    let x4592: BytePoly_2 = bigint_mul!(x4553, x4553, 2);
    let x4593: BytePoly_3 = bigint_nondet_quot!(ctx, x4592, x6, 3);
    let x4594: BytePoly_1 = bigint_nondet_rem!(ctx, x4592, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4593, x6, 4), x4594, 4), x4592, 4),
        24387,
        2,
    )?;
    let x4595: BytePoly_2 = bigint_add!(bigint_mul!(x4594, x0, 2), x5, 2);
    let x4596: BytePoly_3 = bigint_nondet_quot!(ctx, x4595, x6, 3);
    let x4597: BytePoly_1 = bigint_nondet_rem!(ctx, x4595, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4596, x6, 4), x4597, 4), x4595, 4),
        24387,
        2,
    )?;
    let x4598: BytePoly_1 = bigint_add!(x4559, x4559, 1);
    let x4599: BytePoly_1 = bigint_nondet_quot!(ctx, x4598, x6, 1);
    let x4600: BytePoly_1 = bigint_nondet_rem!(ctx, x4598, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4599, x6, 2), x4600, 2), x4598, 2),
        8131,
        2,
    )?;
    let x4601: BytePoly_1 = bigint_nondet_inv!(ctx, x4600, x6, 1);
    let x4602: BytePoly_2 = bigint_mul!(x4600, x4601, 2);
    let x4603: BytePoly_3 = bigint_nondet_quot!(ctx, x4602, x6, 3);
    let x4604: BytePoly_1 = bigint_nondet_rem!(ctx, x4602, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4603, x6, 4), x4604, 4), x4602, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4604, x3, 1), 34, 1)?;
    let x4605: BytePoly_2 = bigint_mul!(x4597, x4601, 2);
    let x4606: BytePoly_3 = bigint_nondet_quot!(ctx, x4605, x6, 3);
    let x4607: BytePoly_1 = bigint_nondet_rem!(ctx, x4605, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4606, x6, 4), x4607, 4), x4605, 4),
        24387,
        2,
    )?;
    let x4608: BytePoly_2 = bigint_mul!(x4607, x4553, 2);
    let x4609: BytePoly_3 = bigint_nondet_quot!(ctx, x4608, x6, 3);
    let x4610: BytePoly_1 = bigint_nondet_rem!(ctx, x4608, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4609, x6, 4), x4610, 4), x4608, 4),
        24387,
        2,
    )?;
    let x4611: BytePoly_1 = bigint_add!(bigint_sub!(x4559, x4610, 1), x6, 1);
    let x4612: BytePoly_1 = bigint_nondet_quot!(ctx, x4611, x6, 1);
    let x4613: BytePoly_1 = bigint_nondet_rem!(ctx, x4611, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4612, x6, 2), x4613, 2), x4611, 2),
        8131,
        2,
    )?;
    let x4614: BytePoly_2 = bigint_mul!(x4607, x4607, 2);
    let x4615: BytePoly_3 = bigint_nondet_quot!(ctx, x4614, x6, 3);
    let x4616: BytePoly_1 = bigint_nondet_rem!(ctx, x4614, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4615, x6, 4), x4616, 4), x4614, 4),
        24387,
        2,
    )?;
    let x4617: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4616, x4553, 1), x6, 1), x4553, 1),
        x6,
        1
    );
    let x4618: BytePoly_1 = bigint_nondet_quot!(ctx, x4617, x6, 1);
    let x4619: BytePoly_1 = bigint_nondet_rem!(ctx, x4617, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4618, x6, 2), x4619, 2), x4617, 2),
        8131,
        2,
    )?;
    let x4620: BytePoly_2 = bigint_mul!(x4607, x4619, 2);
    let x4621: BytePoly_3 = bigint_nondet_quot!(ctx, x4620, x6, 3);
    let x4622: BytePoly_1 = bigint_nondet_rem!(ctx, x4620, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4621, x6, 4), x4622, 4), x4620, 4),
        24387,
        2,
    )?;
    let x4623: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4622, x4613, 1), 1), x6, 1);
    let x4624: BytePoly_1 = bigint_nondet_quot!(ctx, x4623, x6, 1);
    let x4625: BytePoly_1 = bigint_nondet_rem!(ctx, x4623, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4624, x6, 2), x4625, 2), x4623, 2),
        8131,
        2,
    )?;
    let x4626: BytePoly_1 = bigint_nondet_rem!(ctx, x4561, x2, 1);
    let x4627: BytePoly_2 = bigint_nondet_quot!(ctx, x4561, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4627, x2, 3), x4626, 3), x4561, 3),
        16259,
        2,
    )?;
    let x4628: BytePoly_1 = bigint_sub!(x3, x4626, 1);
    eqz(ctx, &bigint_mul!(x4626, x4628, 2), 8131, 2)?;
    let x4629: BytePoly_1 = bigint_add!(bigint_sub!(x4619, x4589, 1), x6, 1);
    let x4630: BytePoly_1 = bigint_nondet_inv!(ctx, x4629, x6, 1);
    let x4631: BytePoly_2 = bigint_mul!(x4629, x4630, 2);
    let x4632: BytePoly_3 = bigint_nondet_quot!(ctx, x4631, x6, 3);
    let x4633: BytePoly_1 = bigint_nondet_rem!(ctx, x4631, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4632, x6, 4), x4633, 4), x4631, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4633, x1, 1), 34, 1)?;
    let x4634: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4625, x4591, 1), x6, 1), x4630, 2);
    let x4635: BytePoly_3 = bigint_nondet_quot!(ctx, x4634, x6, 3);
    let x4636: BytePoly_1 = bigint_nondet_rem!(ctx, x4634, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4635, x6, 4), x4636, 4), x4634, 4),
        24387,
        2,
    )?;
    let x4637: BytePoly_2 = bigint_mul!(x4636, x4589, 2);
    let x4638: BytePoly_3 = bigint_nondet_quot!(ctx, x4637, x6, 3);
    let x4639: BytePoly_1 = bigint_nondet_rem!(ctx, x4637, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4638, x6, 4), x4639, 4), x4637, 4),
        24387,
        2,
    )?;
    let x4640: BytePoly_1 = bigint_add!(bigint_sub!(x4591, x4639, 1), x6, 1);
    let x4641: BytePoly_1 = bigint_nondet_quot!(ctx, x4640, x6, 1);
    let x4642: BytePoly_1 = bigint_nondet_rem!(ctx, x4640, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4641, x6, 2), x4642, 2), x4640, 2),
        8131,
        2,
    )?;
    let x4643: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4636, x4636, 2), x4589, 2), x6, 2),
            x4619,
            2
        ),
        x6,
        2
    );
    let x4644: BytePoly_3 = bigint_nondet_quot!(ctx, x4643, x6, 3);
    let x4645: BytePoly_1 = bigint_nondet_rem!(ctx, x4643, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4644, x6, 4), x4645, 4), x4643, 4),
        24387,
        2,
    )?;
    let x4646: BytePoly_2 = bigint_mul!(x4636, x4645, 2);
    let x4647: BytePoly_3 = bigint_nondet_quot!(ctx, x4646, x6, 3);
    let x4648: BytePoly_1 = bigint_nondet_rem!(ctx, x4646, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4647, x6, 4), x4648, 4), x4646, 4),
        24387,
        2,
    )?;
    let x4649: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4648, x4642, 1), 1), x6, 1);
    let x4650: BytePoly_1 = bigint_nondet_quot!(ctx, x4649, x6, 1);
    let x4651: BytePoly_1 = bigint_nondet_rem!(ctx, x4649, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4650, x6, 2), x4651, 2), x4649, 2),
        8131,
        2,
    )?;
    let x4652: BytePoly_2 = bigint_add!(
        bigint_mul!(x4645, x4626, 2),
        bigint_mul!(x4589, x4628, 2),
        2
    );
    let x4653: BytePoly_2 = bigint_add!(
        bigint_mul!(x4651, x4626, 2),
        bigint_mul!(x4591, x4628, 2),
        2
    );
    let x4654: BytePoly_3 = bigint_nondet_quot!(ctx, x4652, x6, 3);
    let x4655: BytePoly_1 = bigint_nondet_rem!(ctx, x4652, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4654, x6, 4), x4655, 4), x4652, 4),
        24387,
        2,
    )?;
    let x4656: BytePoly_3 = bigint_nondet_quot!(ctx, x4653, x6, 3);
    let x4657: BytePoly_1 = bigint_nondet_rem!(ctx, x4653, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4656, x6, 4), x4657, 4), x4653, 4),
        24387,
        2,
    )?;
    let x4658: BytePoly_2 = bigint_mul!(x4619, x4619, 2);
    let x4659: BytePoly_3 = bigint_nondet_quot!(ctx, x4658, x6, 3);
    let x4660: BytePoly_1 = bigint_nondet_rem!(ctx, x4658, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4659, x6, 4), x4660, 4), x4658, 4),
        24387,
        2,
    )?;
    let x4661: BytePoly_2 = bigint_add!(bigint_mul!(x4660, x0, 2), x5, 2);
    let x4662: BytePoly_3 = bigint_nondet_quot!(ctx, x4661, x6, 3);
    let x4663: BytePoly_1 = bigint_nondet_rem!(ctx, x4661, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4662, x6, 4), x4663, 4), x4661, 4),
        24387,
        2,
    )?;
    let x4664: BytePoly_1 = bigint_add!(x4625, x4625, 1);
    let x4665: BytePoly_1 = bigint_nondet_quot!(ctx, x4664, x6, 1);
    let x4666: BytePoly_1 = bigint_nondet_rem!(ctx, x4664, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4665, x6, 2), x4666, 2), x4664, 2),
        8131,
        2,
    )?;
    let x4667: BytePoly_1 = bigint_nondet_inv!(ctx, x4666, x6, 1);
    let x4668: BytePoly_2 = bigint_mul!(x4666, x4667, 2);
    let x4669: BytePoly_3 = bigint_nondet_quot!(ctx, x4668, x6, 3);
    let x4670: BytePoly_1 = bigint_nondet_rem!(ctx, x4668, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4669, x6, 4), x4670, 4), x4668, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4670, x3, 1), 34, 1)?;
    let x4671: BytePoly_2 = bigint_mul!(x4663, x4667, 2);
    let x4672: BytePoly_3 = bigint_nondet_quot!(ctx, x4671, x6, 3);
    let x4673: BytePoly_1 = bigint_nondet_rem!(ctx, x4671, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4672, x6, 4), x4673, 4), x4671, 4),
        24387,
        2,
    )?;
    let x4674: BytePoly_2 = bigint_mul!(x4673, x4619, 2);
    let x4675: BytePoly_3 = bigint_nondet_quot!(ctx, x4674, x6, 3);
    let x4676: BytePoly_1 = bigint_nondet_rem!(ctx, x4674, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4675, x6, 4), x4676, 4), x4674, 4),
        24387,
        2,
    )?;
    let x4677: BytePoly_1 = bigint_add!(bigint_sub!(x4625, x4676, 1), x6, 1);
    let x4678: BytePoly_1 = bigint_nondet_quot!(ctx, x4677, x6, 1);
    let x4679: BytePoly_1 = bigint_nondet_rem!(ctx, x4677, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4678, x6, 2), x4679, 2), x4677, 2),
        8131,
        2,
    )?;
    let x4680: BytePoly_2 = bigint_mul!(x4673, x4673, 2);
    let x4681: BytePoly_3 = bigint_nondet_quot!(ctx, x4680, x6, 3);
    let x4682: BytePoly_1 = bigint_nondet_rem!(ctx, x4680, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4681, x6, 4), x4682, 4), x4680, 4),
        24387,
        2,
    )?;
    let x4683: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4682, x4619, 1), x6, 1), x4619, 1),
        x6,
        1
    );
    let x4684: BytePoly_1 = bigint_nondet_quot!(ctx, x4683, x6, 1);
    let x4685: BytePoly_1 = bigint_nondet_rem!(ctx, x4683, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4684, x6, 2), x4685, 2), x4683, 2),
        8131,
        2,
    )?;
    let x4686: BytePoly_2 = bigint_mul!(x4673, x4685, 2);
    let x4687: BytePoly_3 = bigint_nondet_quot!(ctx, x4686, x6, 3);
    let x4688: BytePoly_1 = bigint_nondet_rem!(ctx, x4686, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4687, x6, 4), x4688, 4), x4686, 4),
        24387,
        2,
    )?;
    let x4689: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4688, x4679, 1), 1), x6, 1);
    let x4690: BytePoly_1 = bigint_nondet_quot!(ctx, x4689, x6, 1);
    let x4691: BytePoly_1 = bigint_nondet_rem!(ctx, x4689, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4690, x6, 2), x4691, 2), x4689, 2),
        8131,
        2,
    )?;
    let x4692: BytePoly_1 = bigint_nondet_rem!(ctx, x4627, x2, 1);
    let x4693: BytePoly_2 = bigint_nondet_quot!(ctx, x4627, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4693, x2, 3), x4692, 3), x4627, 3),
        16259,
        2,
    )?;
    let x4694: BytePoly_1 = bigint_sub!(x3, x4692, 1);
    eqz(ctx, &bigint_mul!(x4692, x4694, 2), 8131, 2)?;
    let x4695: BytePoly_1 = bigint_add!(bigint_sub!(x4685, x4655, 1), x6, 1);
    let x4696: BytePoly_1 = bigint_nondet_inv!(ctx, x4695, x6, 1);
    let x4697: BytePoly_2 = bigint_mul!(x4695, x4696, 2);
    let x4698: BytePoly_3 = bigint_nondet_quot!(ctx, x4697, x6, 3);
    let x4699: BytePoly_1 = bigint_nondet_rem!(ctx, x4697, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4698, x6, 4), x4699, 4), x4697, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4699, x1, 1), 34, 1)?;
    let x4700: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4691, x4657, 1), x6, 1), x4696, 2);
    let x4701: BytePoly_3 = bigint_nondet_quot!(ctx, x4700, x6, 3);
    let x4702: BytePoly_1 = bigint_nondet_rem!(ctx, x4700, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4701, x6, 4), x4702, 4), x4700, 4),
        24387,
        2,
    )?;
    let x4703: BytePoly_2 = bigint_mul!(x4702, x4655, 2);
    let x4704: BytePoly_3 = bigint_nondet_quot!(ctx, x4703, x6, 3);
    let x4705: BytePoly_1 = bigint_nondet_rem!(ctx, x4703, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4704, x6, 4), x4705, 4), x4703, 4),
        24387,
        2,
    )?;
    let x4706: BytePoly_1 = bigint_add!(bigint_sub!(x4657, x4705, 1), x6, 1);
    let x4707: BytePoly_1 = bigint_nondet_quot!(ctx, x4706, x6, 1);
    let x4708: BytePoly_1 = bigint_nondet_rem!(ctx, x4706, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4707, x6, 2), x4708, 2), x4706, 2),
        8131,
        2,
    )?;
    let x4709: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4702, x4702, 2), x4655, 2), x6, 2),
            x4685,
            2
        ),
        x6,
        2
    );
    let x4710: BytePoly_3 = bigint_nondet_quot!(ctx, x4709, x6, 3);
    let x4711: BytePoly_1 = bigint_nondet_rem!(ctx, x4709, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4710, x6, 4), x4711, 4), x4709, 4),
        24387,
        2,
    )?;
    let x4712: BytePoly_2 = bigint_mul!(x4702, x4711, 2);
    let x4713: BytePoly_3 = bigint_nondet_quot!(ctx, x4712, x6, 3);
    let x4714: BytePoly_1 = bigint_nondet_rem!(ctx, x4712, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4713, x6, 4), x4714, 4), x4712, 4),
        24387,
        2,
    )?;
    let x4715: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4714, x4708, 1), 1), x6, 1);
    let x4716: BytePoly_1 = bigint_nondet_quot!(ctx, x4715, x6, 1);
    let x4717: BytePoly_1 = bigint_nondet_rem!(ctx, x4715, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4716, x6, 2), x4717, 2), x4715, 2),
        8131,
        2,
    )?;
    let x4718: BytePoly_2 = bigint_add!(
        bigint_mul!(x4711, x4692, 2),
        bigint_mul!(x4655, x4694, 2),
        2
    );
    let x4719: BytePoly_2 = bigint_add!(
        bigint_mul!(x4717, x4692, 2),
        bigint_mul!(x4657, x4694, 2),
        2
    );
    let x4720: BytePoly_3 = bigint_nondet_quot!(ctx, x4718, x6, 3);
    let x4721: BytePoly_1 = bigint_nondet_rem!(ctx, x4718, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4720, x6, 4), x4721, 4), x4718, 4),
        24387,
        2,
    )?;
    let x4722: BytePoly_3 = bigint_nondet_quot!(ctx, x4719, x6, 3);
    let x4723: BytePoly_1 = bigint_nondet_rem!(ctx, x4719, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4722, x6, 4), x4723, 4), x4719, 4),
        24387,
        2,
    )?;
    let x4724: BytePoly_2 = bigint_mul!(x4685, x4685, 2);
    let x4725: BytePoly_3 = bigint_nondet_quot!(ctx, x4724, x6, 3);
    let x4726: BytePoly_1 = bigint_nondet_rem!(ctx, x4724, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4725, x6, 4), x4726, 4), x4724, 4),
        24387,
        2,
    )?;
    let x4727: BytePoly_2 = bigint_add!(bigint_mul!(x4726, x0, 2), x5, 2);
    let x4728: BytePoly_3 = bigint_nondet_quot!(ctx, x4727, x6, 3);
    let x4729: BytePoly_1 = bigint_nondet_rem!(ctx, x4727, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4728, x6, 4), x4729, 4), x4727, 4),
        24387,
        2,
    )?;
    let x4730: BytePoly_1 = bigint_add!(x4691, x4691, 1);
    let x4731: BytePoly_1 = bigint_nondet_quot!(ctx, x4730, x6, 1);
    let x4732: BytePoly_1 = bigint_nondet_rem!(ctx, x4730, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4731, x6, 2), x4732, 2), x4730, 2),
        8131,
        2,
    )?;
    let x4733: BytePoly_1 = bigint_nondet_inv!(ctx, x4732, x6, 1);
    let x4734: BytePoly_2 = bigint_mul!(x4732, x4733, 2);
    let x4735: BytePoly_3 = bigint_nondet_quot!(ctx, x4734, x6, 3);
    let x4736: BytePoly_1 = bigint_nondet_rem!(ctx, x4734, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4735, x6, 4), x4736, 4), x4734, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4736, x3, 1), 34, 1)?;
    let x4737: BytePoly_2 = bigint_mul!(x4729, x4733, 2);
    let x4738: BytePoly_3 = bigint_nondet_quot!(ctx, x4737, x6, 3);
    let x4739: BytePoly_1 = bigint_nondet_rem!(ctx, x4737, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4738, x6, 4), x4739, 4), x4737, 4),
        24387,
        2,
    )?;
    let x4740: BytePoly_2 = bigint_mul!(x4739, x4685, 2);
    let x4741: BytePoly_3 = bigint_nondet_quot!(ctx, x4740, x6, 3);
    let x4742: BytePoly_1 = bigint_nondet_rem!(ctx, x4740, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4741, x6, 4), x4742, 4), x4740, 4),
        24387,
        2,
    )?;
    let x4743: BytePoly_1 = bigint_add!(bigint_sub!(x4691, x4742, 1), x6, 1);
    let x4744: BytePoly_1 = bigint_nondet_quot!(ctx, x4743, x6, 1);
    let x4745: BytePoly_1 = bigint_nondet_rem!(ctx, x4743, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4744, x6, 2), x4745, 2), x4743, 2),
        8131,
        2,
    )?;
    let x4746: BytePoly_2 = bigint_mul!(x4739, x4739, 2);
    let x4747: BytePoly_3 = bigint_nondet_quot!(ctx, x4746, x6, 3);
    let x4748: BytePoly_1 = bigint_nondet_rem!(ctx, x4746, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4747, x6, 4), x4748, 4), x4746, 4),
        24387,
        2,
    )?;
    let x4749: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4748, x4685, 1), x6, 1), x4685, 1),
        x6,
        1
    );
    let x4750: BytePoly_1 = bigint_nondet_quot!(ctx, x4749, x6, 1);
    let x4751: BytePoly_1 = bigint_nondet_rem!(ctx, x4749, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4750, x6, 2), x4751, 2), x4749, 2),
        8131,
        2,
    )?;
    let x4752: BytePoly_2 = bigint_mul!(x4739, x4751, 2);
    let x4753: BytePoly_3 = bigint_nondet_quot!(ctx, x4752, x6, 3);
    let x4754: BytePoly_1 = bigint_nondet_rem!(ctx, x4752, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4753, x6, 4), x4754, 4), x4752, 4),
        24387,
        2,
    )?;
    let x4755: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4754, x4745, 1), 1), x6, 1);
    let x4756: BytePoly_1 = bigint_nondet_quot!(ctx, x4755, x6, 1);
    let x4757: BytePoly_1 = bigint_nondet_rem!(ctx, x4755, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4756, x6, 2), x4757, 2), x4755, 2),
        8131,
        2,
    )?;
    let x4758: BytePoly_1 = bigint_nondet_rem!(ctx, x4693, x2, 1);
    let x4759: BytePoly_2 = bigint_nondet_quot!(ctx, x4693, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4759, x2, 3), x4758, 3), x4693, 3),
        16259,
        2,
    )?;
    let x4760: BytePoly_1 = bigint_sub!(x3, x4758, 1);
    eqz(ctx, &bigint_mul!(x4758, x4760, 2), 8131, 2)?;
    let x4761: BytePoly_1 = bigint_add!(bigint_sub!(x4751, x4721, 1), x6, 1);
    let x4762: BytePoly_1 = bigint_nondet_inv!(ctx, x4761, x6, 1);
    let x4763: BytePoly_2 = bigint_mul!(x4761, x4762, 2);
    let x4764: BytePoly_3 = bigint_nondet_quot!(ctx, x4763, x6, 3);
    let x4765: BytePoly_1 = bigint_nondet_rem!(ctx, x4763, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4764, x6, 4), x4765, 4), x4763, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4765, x1, 1), 34, 1)?;
    let x4766: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4757, x4723, 1), x6, 1), x4762, 2);
    let x4767: BytePoly_3 = bigint_nondet_quot!(ctx, x4766, x6, 3);
    let x4768: BytePoly_1 = bigint_nondet_rem!(ctx, x4766, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4767, x6, 4), x4768, 4), x4766, 4),
        24387,
        2,
    )?;
    let x4769: BytePoly_2 = bigint_mul!(x4768, x4721, 2);
    let x4770: BytePoly_3 = bigint_nondet_quot!(ctx, x4769, x6, 3);
    let x4771: BytePoly_1 = bigint_nondet_rem!(ctx, x4769, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4770, x6, 4), x4771, 4), x4769, 4),
        24387,
        2,
    )?;
    let x4772: BytePoly_1 = bigint_add!(bigint_sub!(x4723, x4771, 1), x6, 1);
    let x4773: BytePoly_1 = bigint_nondet_quot!(ctx, x4772, x6, 1);
    let x4774: BytePoly_1 = bigint_nondet_rem!(ctx, x4772, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4773, x6, 2), x4774, 2), x4772, 2),
        8131,
        2,
    )?;
    let x4775: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4768, x4768, 2), x4721, 2), x6, 2),
            x4751,
            2
        ),
        x6,
        2
    );
    let x4776: BytePoly_3 = bigint_nondet_quot!(ctx, x4775, x6, 3);
    let x4777: BytePoly_1 = bigint_nondet_rem!(ctx, x4775, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4776, x6, 4), x4777, 4), x4775, 4),
        24387,
        2,
    )?;
    let x4778: BytePoly_2 = bigint_mul!(x4768, x4777, 2);
    let x4779: BytePoly_3 = bigint_nondet_quot!(ctx, x4778, x6, 3);
    let x4780: BytePoly_1 = bigint_nondet_rem!(ctx, x4778, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4779, x6, 4), x4780, 4), x4778, 4),
        24387,
        2,
    )?;
    let x4781: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4780, x4774, 1), 1), x6, 1);
    let x4782: BytePoly_1 = bigint_nondet_quot!(ctx, x4781, x6, 1);
    let x4783: BytePoly_1 = bigint_nondet_rem!(ctx, x4781, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4782, x6, 2), x4783, 2), x4781, 2),
        8131,
        2,
    )?;
    let x4784: BytePoly_2 = bigint_add!(
        bigint_mul!(x4777, x4758, 2),
        bigint_mul!(x4721, x4760, 2),
        2
    );
    let x4785: BytePoly_2 = bigint_add!(
        bigint_mul!(x4783, x4758, 2),
        bigint_mul!(x4723, x4760, 2),
        2
    );
    let x4786: BytePoly_3 = bigint_nondet_quot!(ctx, x4784, x6, 3);
    let x4787: BytePoly_1 = bigint_nondet_rem!(ctx, x4784, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4786, x6, 4), x4787, 4), x4784, 4),
        24387,
        2,
    )?;
    let x4788: BytePoly_3 = bigint_nondet_quot!(ctx, x4785, x6, 3);
    let x4789: BytePoly_1 = bigint_nondet_rem!(ctx, x4785, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4788, x6, 4), x4789, 4), x4785, 4),
        24387,
        2,
    )?;
    let x4790: BytePoly_2 = bigint_mul!(x4751, x4751, 2);
    let x4791: BytePoly_3 = bigint_nondet_quot!(ctx, x4790, x6, 3);
    let x4792: BytePoly_1 = bigint_nondet_rem!(ctx, x4790, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4791, x6, 4), x4792, 4), x4790, 4),
        24387,
        2,
    )?;
    let x4793: BytePoly_2 = bigint_add!(bigint_mul!(x4792, x0, 2), x5, 2);
    let x4794: BytePoly_3 = bigint_nondet_quot!(ctx, x4793, x6, 3);
    let x4795: BytePoly_1 = bigint_nondet_rem!(ctx, x4793, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4794, x6, 4), x4795, 4), x4793, 4),
        24387,
        2,
    )?;
    let x4796: BytePoly_1 = bigint_add!(x4757, x4757, 1);
    let x4797: BytePoly_1 = bigint_nondet_quot!(ctx, x4796, x6, 1);
    let x4798: BytePoly_1 = bigint_nondet_rem!(ctx, x4796, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4797, x6, 2), x4798, 2), x4796, 2),
        8131,
        2,
    )?;
    let x4799: BytePoly_1 = bigint_nondet_inv!(ctx, x4798, x6, 1);
    let x4800: BytePoly_2 = bigint_mul!(x4798, x4799, 2);
    let x4801: BytePoly_3 = bigint_nondet_quot!(ctx, x4800, x6, 3);
    let x4802: BytePoly_1 = bigint_nondet_rem!(ctx, x4800, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4801, x6, 4), x4802, 4), x4800, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4802, x3, 1), 34, 1)?;
    let x4803: BytePoly_2 = bigint_mul!(x4795, x4799, 2);
    let x4804: BytePoly_3 = bigint_nondet_quot!(ctx, x4803, x6, 3);
    let x4805: BytePoly_1 = bigint_nondet_rem!(ctx, x4803, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4804, x6, 4), x4805, 4), x4803, 4),
        24387,
        2,
    )?;
    let x4806: BytePoly_2 = bigint_mul!(x4805, x4751, 2);
    let x4807: BytePoly_3 = bigint_nondet_quot!(ctx, x4806, x6, 3);
    let x4808: BytePoly_1 = bigint_nondet_rem!(ctx, x4806, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4807, x6, 4), x4808, 4), x4806, 4),
        24387,
        2,
    )?;
    let x4809: BytePoly_1 = bigint_add!(bigint_sub!(x4757, x4808, 1), x6, 1);
    let x4810: BytePoly_1 = bigint_nondet_quot!(ctx, x4809, x6, 1);
    let x4811: BytePoly_1 = bigint_nondet_rem!(ctx, x4809, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4810, x6, 2), x4811, 2), x4809, 2),
        8131,
        2,
    )?;
    let x4812: BytePoly_2 = bigint_mul!(x4805, x4805, 2);
    let x4813: BytePoly_3 = bigint_nondet_quot!(ctx, x4812, x6, 3);
    let x4814: BytePoly_1 = bigint_nondet_rem!(ctx, x4812, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4813, x6, 4), x4814, 4), x4812, 4),
        24387,
        2,
    )?;
    let x4815: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4814, x4751, 1), x6, 1), x4751, 1),
        x6,
        1
    );
    let x4816: BytePoly_1 = bigint_nondet_quot!(ctx, x4815, x6, 1);
    let x4817: BytePoly_1 = bigint_nondet_rem!(ctx, x4815, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4816, x6, 2), x4817, 2), x4815, 2),
        8131,
        2,
    )?;
    let x4818: BytePoly_2 = bigint_mul!(x4805, x4817, 2);
    let x4819: BytePoly_3 = bigint_nondet_quot!(ctx, x4818, x6, 3);
    let x4820: BytePoly_1 = bigint_nondet_rem!(ctx, x4818, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4819, x6, 4), x4820, 4), x4818, 4),
        24387,
        2,
    )?;
    let x4821: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4820, x4811, 1), 1), x6, 1);
    let x4822: BytePoly_1 = bigint_nondet_quot!(ctx, x4821, x6, 1);
    let x4823: BytePoly_1 = bigint_nondet_rem!(ctx, x4821, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4822, x6, 2), x4823, 2), x4821, 2),
        8131,
        2,
    )?;
    let x4824: BytePoly_1 = bigint_nondet_rem!(ctx, x4759, x2, 1);
    let x4825: BytePoly_2 = bigint_nondet_quot!(ctx, x4759, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4825, x2, 3), x4824, 3), x4759, 3),
        16259,
        2,
    )?;
    let x4826: BytePoly_1 = bigint_sub!(x3, x4824, 1);
    eqz(ctx, &bigint_mul!(x4824, x4826, 2), 8131, 2)?;
    let x4827: BytePoly_1 = bigint_add!(bigint_sub!(x4817, x4787, 1), x6, 1);
    let x4828: BytePoly_1 = bigint_nondet_inv!(ctx, x4827, x6, 1);
    let x4829: BytePoly_2 = bigint_mul!(x4827, x4828, 2);
    let x4830: BytePoly_3 = bigint_nondet_quot!(ctx, x4829, x6, 3);
    let x4831: BytePoly_1 = bigint_nondet_rem!(ctx, x4829, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4830, x6, 4), x4831, 4), x4829, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4831, x1, 1), 34, 1)?;
    let x4832: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4823, x4789, 1), x6, 1), x4828, 2);
    let x4833: BytePoly_3 = bigint_nondet_quot!(ctx, x4832, x6, 3);
    let x4834: BytePoly_1 = bigint_nondet_rem!(ctx, x4832, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4833, x6, 4), x4834, 4), x4832, 4),
        24387,
        2,
    )?;
    let x4835: BytePoly_2 = bigint_mul!(x4834, x4787, 2);
    let x4836: BytePoly_3 = bigint_nondet_quot!(ctx, x4835, x6, 3);
    let x4837: BytePoly_1 = bigint_nondet_rem!(ctx, x4835, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4836, x6, 4), x4837, 4), x4835, 4),
        24387,
        2,
    )?;
    let x4838: BytePoly_1 = bigint_add!(bigint_sub!(x4789, x4837, 1), x6, 1);
    let x4839: BytePoly_1 = bigint_nondet_quot!(ctx, x4838, x6, 1);
    let x4840: BytePoly_1 = bigint_nondet_rem!(ctx, x4838, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4839, x6, 2), x4840, 2), x4838, 2),
        8131,
        2,
    )?;
    let x4841: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4834, x4834, 2), x4787, 2), x6, 2),
            x4817,
            2
        ),
        x6,
        2
    );
    let x4842: BytePoly_3 = bigint_nondet_quot!(ctx, x4841, x6, 3);
    let x4843: BytePoly_1 = bigint_nondet_rem!(ctx, x4841, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4842, x6, 4), x4843, 4), x4841, 4),
        24387,
        2,
    )?;
    let x4844: BytePoly_2 = bigint_mul!(x4834, x4843, 2);
    let x4845: BytePoly_3 = bigint_nondet_quot!(ctx, x4844, x6, 3);
    let x4846: BytePoly_1 = bigint_nondet_rem!(ctx, x4844, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4845, x6, 4), x4846, 4), x4844, 4),
        24387,
        2,
    )?;
    let x4847: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4846, x4840, 1), 1), x6, 1);
    let x4848: BytePoly_1 = bigint_nondet_quot!(ctx, x4847, x6, 1);
    let x4849: BytePoly_1 = bigint_nondet_rem!(ctx, x4847, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4848, x6, 2), x4849, 2), x4847, 2),
        8131,
        2,
    )?;
    let x4850: BytePoly_2 = bigint_add!(
        bigint_mul!(x4843, x4824, 2),
        bigint_mul!(x4787, x4826, 2),
        2
    );
    let x4851: BytePoly_2 = bigint_add!(
        bigint_mul!(x4849, x4824, 2),
        bigint_mul!(x4789, x4826, 2),
        2
    );
    let x4852: BytePoly_3 = bigint_nondet_quot!(ctx, x4850, x6, 3);
    let x4853: BytePoly_1 = bigint_nondet_rem!(ctx, x4850, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4852, x6, 4), x4853, 4), x4850, 4),
        24387,
        2,
    )?;
    let x4854: BytePoly_3 = bigint_nondet_quot!(ctx, x4851, x6, 3);
    let x4855: BytePoly_1 = bigint_nondet_rem!(ctx, x4851, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4854, x6, 4), x4855, 4), x4851, 4),
        24387,
        2,
    )?;
    let x4856: BytePoly_2 = bigint_mul!(x4817, x4817, 2);
    let x4857: BytePoly_3 = bigint_nondet_quot!(ctx, x4856, x6, 3);
    let x4858: BytePoly_1 = bigint_nondet_rem!(ctx, x4856, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4857, x6, 4), x4858, 4), x4856, 4),
        24387,
        2,
    )?;
    let x4859: BytePoly_2 = bigint_add!(bigint_mul!(x4858, x0, 2), x5, 2);
    let x4860: BytePoly_3 = bigint_nondet_quot!(ctx, x4859, x6, 3);
    let x4861: BytePoly_1 = bigint_nondet_rem!(ctx, x4859, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4860, x6, 4), x4861, 4), x4859, 4),
        24387,
        2,
    )?;
    let x4862: BytePoly_1 = bigint_add!(x4823, x4823, 1);
    let x4863: BytePoly_1 = bigint_nondet_quot!(ctx, x4862, x6, 1);
    let x4864: BytePoly_1 = bigint_nondet_rem!(ctx, x4862, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4863, x6, 2), x4864, 2), x4862, 2),
        8131,
        2,
    )?;
    let x4865: BytePoly_1 = bigint_nondet_inv!(ctx, x4864, x6, 1);
    let x4866: BytePoly_2 = bigint_mul!(x4864, x4865, 2);
    let x4867: BytePoly_3 = bigint_nondet_quot!(ctx, x4866, x6, 3);
    let x4868: BytePoly_1 = bigint_nondet_rem!(ctx, x4866, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4867, x6, 4), x4868, 4), x4866, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4868, x3, 1), 34, 1)?;
    let x4869: BytePoly_2 = bigint_mul!(x4861, x4865, 2);
    let x4870: BytePoly_3 = bigint_nondet_quot!(ctx, x4869, x6, 3);
    let x4871: BytePoly_1 = bigint_nondet_rem!(ctx, x4869, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4870, x6, 4), x4871, 4), x4869, 4),
        24387,
        2,
    )?;
    let x4872: BytePoly_2 = bigint_mul!(x4871, x4817, 2);
    let x4873: BytePoly_3 = bigint_nondet_quot!(ctx, x4872, x6, 3);
    let x4874: BytePoly_1 = bigint_nondet_rem!(ctx, x4872, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4873, x6, 4), x4874, 4), x4872, 4),
        24387,
        2,
    )?;
    let x4875: BytePoly_1 = bigint_add!(bigint_sub!(x4823, x4874, 1), x6, 1);
    let x4876: BytePoly_1 = bigint_nondet_quot!(ctx, x4875, x6, 1);
    let x4877: BytePoly_1 = bigint_nondet_rem!(ctx, x4875, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4876, x6, 2), x4877, 2), x4875, 2),
        8131,
        2,
    )?;
    let x4878: BytePoly_2 = bigint_mul!(x4871, x4871, 2);
    let x4879: BytePoly_3 = bigint_nondet_quot!(ctx, x4878, x6, 3);
    let x4880: BytePoly_1 = bigint_nondet_rem!(ctx, x4878, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4879, x6, 4), x4880, 4), x4878, 4),
        24387,
        2,
    )?;
    let x4881: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4880, x4817, 1), x6, 1), x4817, 1),
        x6,
        1
    );
    let x4882: BytePoly_1 = bigint_nondet_quot!(ctx, x4881, x6, 1);
    let x4883: BytePoly_1 = bigint_nondet_rem!(ctx, x4881, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4882, x6, 2), x4883, 2), x4881, 2),
        8131,
        2,
    )?;
    let x4884: BytePoly_2 = bigint_mul!(x4871, x4883, 2);
    let x4885: BytePoly_3 = bigint_nondet_quot!(ctx, x4884, x6, 3);
    let x4886: BytePoly_1 = bigint_nondet_rem!(ctx, x4884, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4885, x6, 4), x4886, 4), x4884, 4),
        24387,
        2,
    )?;
    let x4887: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4886, x4877, 1), 1), x6, 1);
    let x4888: BytePoly_1 = bigint_nondet_quot!(ctx, x4887, x6, 1);
    let x4889: BytePoly_1 = bigint_nondet_rem!(ctx, x4887, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4888, x6, 2), x4889, 2), x4887, 2),
        8131,
        2,
    )?;
    let x4890: BytePoly_1 = bigint_nondet_rem!(ctx, x4825, x2, 1);
    let x4891: BytePoly_2 = bigint_nondet_quot!(ctx, x4825, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4891, x2, 3), x4890, 3), x4825, 3),
        16259,
        2,
    )?;
    let x4892: BytePoly_1 = bigint_sub!(x3, x4890, 1);
    eqz(ctx, &bigint_mul!(x4890, x4892, 2), 8131, 2)?;
    let x4893: BytePoly_1 = bigint_add!(bigint_sub!(x4883, x4853, 1), x6, 1);
    let x4894: BytePoly_1 = bigint_nondet_inv!(ctx, x4893, x6, 1);
    let x4895: BytePoly_2 = bigint_mul!(x4893, x4894, 2);
    let x4896: BytePoly_3 = bigint_nondet_quot!(ctx, x4895, x6, 3);
    let x4897: BytePoly_1 = bigint_nondet_rem!(ctx, x4895, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4896, x6, 4), x4897, 4), x4895, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4897, x1, 1), 34, 1)?;
    let x4898: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4889, x4855, 1), x6, 1), x4894, 2);
    let x4899: BytePoly_3 = bigint_nondet_quot!(ctx, x4898, x6, 3);
    let x4900: BytePoly_1 = bigint_nondet_rem!(ctx, x4898, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4899, x6, 4), x4900, 4), x4898, 4),
        24387,
        2,
    )?;
    let x4901: BytePoly_2 = bigint_mul!(x4900, x4853, 2);
    let x4902: BytePoly_3 = bigint_nondet_quot!(ctx, x4901, x6, 3);
    let x4903: BytePoly_1 = bigint_nondet_rem!(ctx, x4901, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4902, x6, 4), x4903, 4), x4901, 4),
        24387,
        2,
    )?;
    let x4904: BytePoly_1 = bigint_add!(bigint_sub!(x4855, x4903, 1), x6, 1);
    let x4905: BytePoly_1 = bigint_nondet_quot!(ctx, x4904, x6, 1);
    let x4906: BytePoly_1 = bigint_nondet_rem!(ctx, x4904, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4905, x6, 2), x4906, 2), x4904, 2),
        8131,
        2,
    )?;
    let x4907: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4900, x4900, 2), x4853, 2), x6, 2),
            x4883,
            2
        ),
        x6,
        2
    );
    let x4908: BytePoly_3 = bigint_nondet_quot!(ctx, x4907, x6, 3);
    let x4909: BytePoly_1 = bigint_nondet_rem!(ctx, x4907, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4908, x6, 4), x4909, 4), x4907, 4),
        24387,
        2,
    )?;
    let x4910: BytePoly_2 = bigint_mul!(x4900, x4909, 2);
    let x4911: BytePoly_3 = bigint_nondet_quot!(ctx, x4910, x6, 3);
    let x4912: BytePoly_1 = bigint_nondet_rem!(ctx, x4910, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4911, x6, 4), x4912, 4), x4910, 4),
        24387,
        2,
    )?;
    let x4913: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4912, x4906, 1), 1), x6, 1);
    let x4914: BytePoly_1 = bigint_nondet_quot!(ctx, x4913, x6, 1);
    let x4915: BytePoly_1 = bigint_nondet_rem!(ctx, x4913, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4914, x6, 2), x4915, 2), x4913, 2),
        8131,
        2,
    )?;
    let x4916: BytePoly_2 = bigint_add!(
        bigint_mul!(x4909, x4890, 2),
        bigint_mul!(x4853, x4892, 2),
        2
    );
    let x4917: BytePoly_2 = bigint_add!(
        bigint_mul!(x4915, x4890, 2),
        bigint_mul!(x4855, x4892, 2),
        2
    );
    let x4918: BytePoly_3 = bigint_nondet_quot!(ctx, x4916, x6, 3);
    let x4919: BytePoly_1 = bigint_nondet_rem!(ctx, x4916, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4918, x6, 4), x4919, 4), x4916, 4),
        24387,
        2,
    )?;
    let x4920: BytePoly_3 = bigint_nondet_quot!(ctx, x4917, x6, 3);
    let x4921: BytePoly_1 = bigint_nondet_rem!(ctx, x4917, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4920, x6, 4), x4921, 4), x4917, 4),
        24387,
        2,
    )?;
    let x4922: BytePoly_2 = bigint_mul!(x4883, x4883, 2);
    let x4923: BytePoly_3 = bigint_nondet_quot!(ctx, x4922, x6, 3);
    let x4924: BytePoly_1 = bigint_nondet_rem!(ctx, x4922, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4923, x6, 4), x4924, 4), x4922, 4),
        24387,
        2,
    )?;
    let x4925: BytePoly_2 = bigint_add!(bigint_mul!(x4924, x0, 2), x5, 2);
    let x4926: BytePoly_3 = bigint_nondet_quot!(ctx, x4925, x6, 3);
    let x4927: BytePoly_1 = bigint_nondet_rem!(ctx, x4925, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4926, x6, 4), x4927, 4), x4925, 4),
        24387,
        2,
    )?;
    let x4928: BytePoly_1 = bigint_add!(x4889, x4889, 1);
    let x4929: BytePoly_1 = bigint_nondet_quot!(ctx, x4928, x6, 1);
    let x4930: BytePoly_1 = bigint_nondet_rem!(ctx, x4928, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4929, x6, 2), x4930, 2), x4928, 2),
        8131,
        2,
    )?;
    let x4931: BytePoly_1 = bigint_nondet_inv!(ctx, x4930, x6, 1);
    let x4932: BytePoly_2 = bigint_mul!(x4930, x4931, 2);
    let x4933: BytePoly_3 = bigint_nondet_quot!(ctx, x4932, x6, 3);
    let x4934: BytePoly_1 = bigint_nondet_rem!(ctx, x4932, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4933, x6, 4), x4934, 4), x4932, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4934, x3, 1), 34, 1)?;
    let x4935: BytePoly_2 = bigint_mul!(x4927, x4931, 2);
    let x4936: BytePoly_3 = bigint_nondet_quot!(ctx, x4935, x6, 3);
    let x4937: BytePoly_1 = bigint_nondet_rem!(ctx, x4935, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4936, x6, 4), x4937, 4), x4935, 4),
        24387,
        2,
    )?;
    let x4938: BytePoly_2 = bigint_mul!(x4937, x4883, 2);
    let x4939: BytePoly_3 = bigint_nondet_quot!(ctx, x4938, x6, 3);
    let x4940: BytePoly_1 = bigint_nondet_rem!(ctx, x4938, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4939, x6, 4), x4940, 4), x4938, 4),
        24387,
        2,
    )?;
    let x4941: BytePoly_1 = bigint_add!(bigint_sub!(x4889, x4940, 1), x6, 1);
    let x4942: BytePoly_1 = bigint_nondet_quot!(ctx, x4941, x6, 1);
    let x4943: BytePoly_1 = bigint_nondet_rem!(ctx, x4941, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4942, x6, 2), x4943, 2), x4941, 2),
        8131,
        2,
    )?;
    let x4944: BytePoly_2 = bigint_mul!(x4937, x4937, 2);
    let x4945: BytePoly_3 = bigint_nondet_quot!(ctx, x4944, x6, 3);
    let x4946: BytePoly_1 = bigint_nondet_rem!(ctx, x4944, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4945, x6, 4), x4946, 4), x4944, 4),
        24387,
        2,
    )?;
    let x4947: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4946, x4883, 1), x6, 1), x4883, 1),
        x6,
        1
    );
    let x4948: BytePoly_1 = bigint_nondet_quot!(ctx, x4947, x6, 1);
    let x4949: BytePoly_1 = bigint_nondet_rem!(ctx, x4947, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4948, x6, 2), x4949, 2), x4947, 2),
        8131,
        2,
    )?;
    let x4950: BytePoly_2 = bigint_mul!(x4937, x4949, 2);
    let x4951: BytePoly_3 = bigint_nondet_quot!(ctx, x4950, x6, 3);
    let x4952: BytePoly_1 = bigint_nondet_rem!(ctx, x4950, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4951, x6, 4), x4952, 4), x4950, 4),
        24387,
        2,
    )?;
    let x4953: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4952, x4943, 1), 1), x6, 1);
    let x4954: BytePoly_1 = bigint_nondet_quot!(ctx, x4953, x6, 1);
    let x4955: BytePoly_1 = bigint_nondet_rem!(ctx, x4953, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4954, x6, 2), x4955, 2), x4953, 2),
        8131,
        2,
    )?;
    let x4956: BytePoly_1 = bigint_nondet_rem!(ctx, x4891, x2, 1);
    let x4957: BytePoly_2 = bigint_nondet_quot!(ctx, x4891, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4957, x2, 3), x4956, 3), x4891, 3),
        16259,
        2,
    )?;
    let x4958: BytePoly_1 = bigint_sub!(x3, x4956, 1);
    eqz(ctx, &bigint_mul!(x4956, x4958, 2), 8131, 2)?;
    let x4959: BytePoly_1 = bigint_add!(bigint_sub!(x4949, x4919, 1), x6, 1);
    let x4960: BytePoly_1 = bigint_nondet_inv!(ctx, x4959, x6, 1);
    let x4961: BytePoly_2 = bigint_mul!(x4959, x4960, 2);
    let x4962: BytePoly_3 = bigint_nondet_quot!(ctx, x4961, x6, 3);
    let x4963: BytePoly_1 = bigint_nondet_rem!(ctx, x4961, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4962, x6, 4), x4963, 4), x4961, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x4963, x1, 1), 34, 1)?;
    let x4964: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x4955, x4921, 1), x6, 1), x4960, 2);
    let x4965: BytePoly_3 = bigint_nondet_quot!(ctx, x4964, x6, 3);
    let x4966: BytePoly_1 = bigint_nondet_rem!(ctx, x4964, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4965, x6, 4), x4966, 4), x4964, 4),
        24387,
        2,
    )?;
    let x4967: BytePoly_2 = bigint_mul!(x4966, x4919, 2);
    let x4968: BytePoly_3 = bigint_nondet_quot!(ctx, x4967, x6, 3);
    let x4969: BytePoly_1 = bigint_nondet_rem!(ctx, x4967, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4968, x6, 4), x4969, 4), x4967, 4),
        24387,
        2,
    )?;
    let x4970: BytePoly_1 = bigint_add!(bigint_sub!(x4921, x4969, 1), x6, 1);
    let x4971: BytePoly_1 = bigint_nondet_quot!(ctx, x4970, x6, 1);
    let x4972: BytePoly_1 = bigint_nondet_rem!(ctx, x4970, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4971, x6, 2), x4972, 2), x4970, 2),
        8131,
        2,
    )?;
    let x4973: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4966, x4966, 2), x4919, 2), x6, 2),
            x4949,
            2
        ),
        x6,
        2
    );
    let x4974: BytePoly_3 = bigint_nondet_quot!(ctx, x4973, x6, 3);
    let x4975: BytePoly_1 = bigint_nondet_rem!(ctx, x4973, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4974, x6, 4), x4975, 4), x4973, 4),
        24387,
        2,
    )?;
    let x4976: BytePoly_2 = bigint_mul!(x4966, x4975, 2);
    let x4977: BytePoly_3 = bigint_nondet_quot!(ctx, x4976, x6, 3);
    let x4978: BytePoly_1 = bigint_nondet_rem!(ctx, x4976, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4977, x6, 4), x4978, 4), x4976, 4),
        24387,
        2,
    )?;
    let x4979: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x4978, x4972, 1), 1), x6, 1);
    let x4980: BytePoly_1 = bigint_nondet_quot!(ctx, x4979, x6, 1);
    let x4981: BytePoly_1 = bigint_nondet_rem!(ctx, x4979, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4980, x6, 2), x4981, 2), x4979, 2),
        8131,
        2,
    )?;
    let x4982: BytePoly_2 = bigint_add!(
        bigint_mul!(x4975, x4956, 2),
        bigint_mul!(x4919, x4958, 2),
        2
    );
    let x4983: BytePoly_2 = bigint_add!(
        bigint_mul!(x4981, x4956, 2),
        bigint_mul!(x4921, x4958, 2),
        2
    );
    let x4984: BytePoly_3 = bigint_nondet_quot!(ctx, x4982, x6, 3);
    let x4985: BytePoly_1 = bigint_nondet_rem!(ctx, x4982, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4984, x6, 4), x4985, 4), x4982, 4),
        24387,
        2,
    )?;
    let x4986: BytePoly_3 = bigint_nondet_quot!(ctx, x4983, x6, 3);
    let x4987: BytePoly_1 = bigint_nondet_rem!(ctx, x4983, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4986, x6, 4), x4987, 4), x4983, 4),
        24387,
        2,
    )?;
    let x4988: BytePoly_2 = bigint_mul!(x4949, x4949, 2);
    let x4989: BytePoly_3 = bigint_nondet_quot!(ctx, x4988, x6, 3);
    let x4990: BytePoly_1 = bigint_nondet_rem!(ctx, x4988, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4989, x6, 4), x4990, 4), x4988, 4),
        24387,
        2,
    )?;
    let x4991: BytePoly_2 = bigint_add!(bigint_mul!(x4990, x0, 2), x5, 2);
    let x4992: BytePoly_3 = bigint_nondet_quot!(ctx, x4991, x6, 3);
    let x4993: BytePoly_1 = bigint_nondet_rem!(ctx, x4991, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4992, x6, 4), x4993, 4), x4991, 4),
        24387,
        2,
    )?;
    let x4994: BytePoly_1 = bigint_add!(x4955, x4955, 1);
    let x4995: BytePoly_1 = bigint_nondet_quot!(ctx, x4994, x6, 1);
    let x4996: BytePoly_1 = bigint_nondet_rem!(ctx, x4994, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4995, x6, 2), x4996, 2), x4994, 2),
        8131,
        2,
    )?;
    let x4997: BytePoly_1 = bigint_nondet_inv!(ctx, x4996, x6, 1);
    let x4998: BytePoly_2 = bigint_mul!(x4996, x4997, 2);
    let x4999: BytePoly_3 = bigint_nondet_quot!(ctx, x4998, x6, 3);
    let x5000: BytePoly_1 = bigint_nondet_rem!(ctx, x4998, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4999, x6, 4), x5000, 4), x4998, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5000, x3, 1), 34, 1)?;
    let x5001: BytePoly_2 = bigint_mul!(x4993, x4997, 2);
    let x5002: BytePoly_3 = bigint_nondet_quot!(ctx, x5001, x6, 3);
    let x5003: BytePoly_1 = bigint_nondet_rem!(ctx, x5001, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5002, x6, 4), x5003, 4), x5001, 4),
        24387,
        2,
    )?;
    let x5004: BytePoly_2 = bigint_mul!(x5003, x4949, 2);
    let x5005: BytePoly_3 = bigint_nondet_quot!(ctx, x5004, x6, 3);
    let x5006: BytePoly_1 = bigint_nondet_rem!(ctx, x5004, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5005, x6, 4), x5006, 4), x5004, 4),
        24387,
        2,
    )?;
    let x5007: BytePoly_1 = bigint_add!(bigint_sub!(x4955, x5006, 1), x6, 1);
    let x5008: BytePoly_1 = bigint_nondet_quot!(ctx, x5007, x6, 1);
    let x5009: BytePoly_1 = bigint_nondet_rem!(ctx, x5007, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5008, x6, 2), x5009, 2), x5007, 2),
        8131,
        2,
    )?;
    let x5010: BytePoly_2 = bigint_mul!(x5003, x5003, 2);
    let x5011: BytePoly_3 = bigint_nondet_quot!(ctx, x5010, x6, 3);
    let x5012: BytePoly_1 = bigint_nondet_rem!(ctx, x5010, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5011, x6, 4), x5012, 4), x5010, 4),
        24387,
        2,
    )?;
    let x5013: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5012, x4949, 1), x6, 1), x4949, 1),
        x6,
        1
    );
    let x5014: BytePoly_1 = bigint_nondet_quot!(ctx, x5013, x6, 1);
    let x5015: BytePoly_1 = bigint_nondet_rem!(ctx, x5013, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5014, x6, 2), x5015, 2), x5013, 2),
        8131,
        2,
    )?;
    let x5016: BytePoly_2 = bigint_mul!(x5003, x5015, 2);
    let x5017: BytePoly_3 = bigint_nondet_quot!(ctx, x5016, x6, 3);
    let x5018: BytePoly_1 = bigint_nondet_rem!(ctx, x5016, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5017, x6, 4), x5018, 4), x5016, 4),
        24387,
        2,
    )?;
    let x5019: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5018, x5009, 1), 1), x6, 1);
    let x5020: BytePoly_1 = bigint_nondet_quot!(ctx, x5019, x6, 1);
    let x5021: BytePoly_1 = bigint_nondet_rem!(ctx, x5019, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5020, x6, 2), x5021, 2), x5019, 2),
        8131,
        2,
    )?;
    let x5022: BytePoly_1 = bigint_nondet_rem!(ctx, x4957, x2, 1);
    let x5023: BytePoly_2 = bigint_nondet_quot!(ctx, x4957, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5023, x2, 3), x5022, 3), x4957, 3),
        16259,
        2,
    )?;
    let x5024: BytePoly_1 = bigint_sub!(x3, x5022, 1);
    eqz(ctx, &bigint_mul!(x5022, x5024, 2), 8131, 2)?;
    let x5025: BytePoly_1 = bigint_add!(bigint_sub!(x5015, x4985, 1), x6, 1);
    let x5026: BytePoly_1 = bigint_nondet_inv!(ctx, x5025, x6, 1);
    let x5027: BytePoly_2 = bigint_mul!(x5025, x5026, 2);
    let x5028: BytePoly_3 = bigint_nondet_quot!(ctx, x5027, x6, 3);
    let x5029: BytePoly_1 = bigint_nondet_rem!(ctx, x5027, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5028, x6, 4), x5029, 4), x5027, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5029, x1, 1), 34, 1)?;
    let x5030: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5021, x4987, 1), x6, 1), x5026, 2);
    let x5031: BytePoly_3 = bigint_nondet_quot!(ctx, x5030, x6, 3);
    let x5032: BytePoly_1 = bigint_nondet_rem!(ctx, x5030, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5031, x6, 4), x5032, 4), x5030, 4),
        24387,
        2,
    )?;
    let x5033: BytePoly_2 = bigint_mul!(x5032, x4985, 2);
    let x5034: BytePoly_3 = bigint_nondet_quot!(ctx, x5033, x6, 3);
    let x5035: BytePoly_1 = bigint_nondet_rem!(ctx, x5033, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5034, x6, 4), x5035, 4), x5033, 4),
        24387,
        2,
    )?;
    let x5036: BytePoly_1 = bigint_add!(bigint_sub!(x4987, x5035, 1), x6, 1);
    let x5037: BytePoly_1 = bigint_nondet_quot!(ctx, x5036, x6, 1);
    let x5038: BytePoly_1 = bigint_nondet_rem!(ctx, x5036, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5037, x6, 2), x5038, 2), x5036, 2),
        8131,
        2,
    )?;
    let x5039: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5032, x5032, 2), x4985, 2), x6, 2),
            x5015,
            2
        ),
        x6,
        2
    );
    let x5040: BytePoly_3 = bigint_nondet_quot!(ctx, x5039, x6, 3);
    let x5041: BytePoly_1 = bigint_nondet_rem!(ctx, x5039, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5040, x6, 4), x5041, 4), x5039, 4),
        24387,
        2,
    )?;
    let x5042: BytePoly_2 = bigint_mul!(x5032, x5041, 2);
    let x5043: BytePoly_3 = bigint_nondet_quot!(ctx, x5042, x6, 3);
    let x5044: BytePoly_1 = bigint_nondet_rem!(ctx, x5042, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5043, x6, 4), x5044, 4), x5042, 4),
        24387,
        2,
    )?;
    let x5045: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5044, x5038, 1), 1), x6, 1);
    let x5046: BytePoly_1 = bigint_nondet_quot!(ctx, x5045, x6, 1);
    let x5047: BytePoly_1 = bigint_nondet_rem!(ctx, x5045, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5046, x6, 2), x5047, 2), x5045, 2),
        8131,
        2,
    )?;
    let x5048: BytePoly_2 = bigint_add!(
        bigint_mul!(x5041, x5022, 2),
        bigint_mul!(x4985, x5024, 2),
        2
    );
    let x5049: BytePoly_2 = bigint_add!(
        bigint_mul!(x5047, x5022, 2),
        bigint_mul!(x4987, x5024, 2),
        2
    );
    let x5050: BytePoly_3 = bigint_nondet_quot!(ctx, x5048, x6, 3);
    let x5051: BytePoly_1 = bigint_nondet_rem!(ctx, x5048, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5050, x6, 4), x5051, 4), x5048, 4),
        24387,
        2,
    )?;
    let x5052: BytePoly_3 = bigint_nondet_quot!(ctx, x5049, x6, 3);
    let x5053: BytePoly_1 = bigint_nondet_rem!(ctx, x5049, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5052, x6, 4), x5053, 4), x5049, 4),
        24387,
        2,
    )?;
    let x5054: BytePoly_2 = bigint_mul!(x5015, x5015, 2);
    let x5055: BytePoly_3 = bigint_nondet_quot!(ctx, x5054, x6, 3);
    let x5056: BytePoly_1 = bigint_nondet_rem!(ctx, x5054, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5055, x6, 4), x5056, 4), x5054, 4),
        24387,
        2,
    )?;
    let x5057: BytePoly_2 = bigint_add!(bigint_mul!(x5056, x0, 2), x5, 2);
    let x5058: BytePoly_3 = bigint_nondet_quot!(ctx, x5057, x6, 3);
    let x5059: BytePoly_1 = bigint_nondet_rem!(ctx, x5057, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5058, x6, 4), x5059, 4), x5057, 4),
        24387,
        2,
    )?;
    let x5060: BytePoly_1 = bigint_add!(x5021, x5021, 1);
    let x5061: BytePoly_1 = bigint_nondet_quot!(ctx, x5060, x6, 1);
    let x5062: BytePoly_1 = bigint_nondet_rem!(ctx, x5060, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5061, x6, 2), x5062, 2), x5060, 2),
        8131,
        2,
    )?;
    let x5063: BytePoly_1 = bigint_nondet_inv!(ctx, x5062, x6, 1);
    let x5064: BytePoly_2 = bigint_mul!(x5062, x5063, 2);
    let x5065: BytePoly_3 = bigint_nondet_quot!(ctx, x5064, x6, 3);
    let x5066: BytePoly_1 = bigint_nondet_rem!(ctx, x5064, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5065, x6, 4), x5066, 4), x5064, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5066, x3, 1), 34, 1)?;
    let x5067: BytePoly_2 = bigint_mul!(x5059, x5063, 2);
    let x5068: BytePoly_3 = bigint_nondet_quot!(ctx, x5067, x6, 3);
    let x5069: BytePoly_1 = bigint_nondet_rem!(ctx, x5067, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5068, x6, 4), x5069, 4), x5067, 4),
        24387,
        2,
    )?;
    let x5070: BytePoly_2 = bigint_mul!(x5069, x5015, 2);
    let x5071: BytePoly_3 = bigint_nondet_quot!(ctx, x5070, x6, 3);
    let x5072: BytePoly_1 = bigint_nondet_rem!(ctx, x5070, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5071, x6, 4), x5072, 4), x5070, 4),
        24387,
        2,
    )?;
    let x5073: BytePoly_1 = bigint_add!(bigint_sub!(x5021, x5072, 1), x6, 1);
    let x5074: BytePoly_1 = bigint_nondet_quot!(ctx, x5073, x6, 1);
    let x5075: BytePoly_1 = bigint_nondet_rem!(ctx, x5073, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5074, x6, 2), x5075, 2), x5073, 2),
        8131,
        2,
    )?;
    let x5076: BytePoly_2 = bigint_mul!(x5069, x5069, 2);
    let x5077: BytePoly_3 = bigint_nondet_quot!(ctx, x5076, x6, 3);
    let x5078: BytePoly_1 = bigint_nondet_rem!(ctx, x5076, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5077, x6, 4), x5078, 4), x5076, 4),
        24387,
        2,
    )?;
    let x5079: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5078, x5015, 1), x6, 1), x5015, 1),
        x6,
        1
    );
    let x5080: BytePoly_1 = bigint_nondet_quot!(ctx, x5079, x6, 1);
    let x5081: BytePoly_1 = bigint_nondet_rem!(ctx, x5079, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5080, x6, 2), x5081, 2), x5079, 2),
        8131,
        2,
    )?;
    let x5082: BytePoly_2 = bigint_mul!(x5069, x5081, 2);
    let x5083: BytePoly_3 = bigint_nondet_quot!(ctx, x5082, x6, 3);
    let x5084: BytePoly_1 = bigint_nondet_rem!(ctx, x5082, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5083, x6, 4), x5084, 4), x5082, 4),
        24387,
        2,
    )?;
    let x5085: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5084, x5075, 1), 1), x6, 1);
    let x5086: BytePoly_1 = bigint_nondet_quot!(ctx, x5085, x6, 1);
    let x5087: BytePoly_1 = bigint_nondet_rem!(ctx, x5085, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5086, x6, 2), x5087, 2), x5085, 2),
        8131,
        2,
    )?;
    let x5088: BytePoly_1 = bigint_nondet_rem!(ctx, x5023, x2, 1);
    let x5089: BytePoly_2 = bigint_nondet_quot!(ctx, x5023, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5089, x2, 3), x5088, 3), x5023, 3),
        16259,
        2,
    )?;
    let x5090: BytePoly_1 = bigint_sub!(x3, x5088, 1);
    eqz(ctx, &bigint_mul!(x5088, x5090, 2), 8131, 2)?;
    let x5091: BytePoly_1 = bigint_add!(bigint_sub!(x5081, x5051, 1), x6, 1);
    let x5092: BytePoly_1 = bigint_nondet_inv!(ctx, x5091, x6, 1);
    let x5093: BytePoly_2 = bigint_mul!(x5091, x5092, 2);
    let x5094: BytePoly_3 = bigint_nondet_quot!(ctx, x5093, x6, 3);
    let x5095: BytePoly_1 = bigint_nondet_rem!(ctx, x5093, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5094, x6, 4), x5095, 4), x5093, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5095, x1, 1), 34, 1)?;
    let x5096: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5087, x5053, 1), x6, 1), x5092, 2);
    let x5097: BytePoly_3 = bigint_nondet_quot!(ctx, x5096, x6, 3);
    let x5098: BytePoly_1 = bigint_nondet_rem!(ctx, x5096, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5097, x6, 4), x5098, 4), x5096, 4),
        24387,
        2,
    )?;
    let x5099: BytePoly_2 = bigint_mul!(x5098, x5051, 2);
    let x5100: BytePoly_3 = bigint_nondet_quot!(ctx, x5099, x6, 3);
    let x5101: BytePoly_1 = bigint_nondet_rem!(ctx, x5099, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5100, x6, 4), x5101, 4), x5099, 4),
        24387,
        2,
    )?;
    let x5102: BytePoly_1 = bigint_add!(bigint_sub!(x5053, x5101, 1), x6, 1);
    let x5103: BytePoly_1 = bigint_nondet_quot!(ctx, x5102, x6, 1);
    let x5104: BytePoly_1 = bigint_nondet_rem!(ctx, x5102, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5103, x6, 2), x5104, 2), x5102, 2),
        8131,
        2,
    )?;
    let x5105: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5098, x5098, 2), x5051, 2), x6, 2),
            x5081,
            2
        ),
        x6,
        2
    );
    let x5106: BytePoly_3 = bigint_nondet_quot!(ctx, x5105, x6, 3);
    let x5107: BytePoly_1 = bigint_nondet_rem!(ctx, x5105, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5106, x6, 4), x5107, 4), x5105, 4),
        24387,
        2,
    )?;
    let x5108: BytePoly_2 = bigint_mul!(x5098, x5107, 2);
    let x5109: BytePoly_3 = bigint_nondet_quot!(ctx, x5108, x6, 3);
    let x5110: BytePoly_1 = bigint_nondet_rem!(ctx, x5108, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5109, x6, 4), x5110, 4), x5108, 4),
        24387,
        2,
    )?;
    let x5111: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5110, x5104, 1), 1), x6, 1);
    let x5112: BytePoly_1 = bigint_nondet_quot!(ctx, x5111, x6, 1);
    let x5113: BytePoly_1 = bigint_nondet_rem!(ctx, x5111, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5112, x6, 2), x5113, 2), x5111, 2),
        8131,
        2,
    )?;
    let x5114: BytePoly_2 = bigint_add!(
        bigint_mul!(x5107, x5088, 2),
        bigint_mul!(x5051, x5090, 2),
        2
    );
    let x5115: BytePoly_2 = bigint_add!(
        bigint_mul!(x5113, x5088, 2),
        bigint_mul!(x5053, x5090, 2),
        2
    );
    let x5116: BytePoly_3 = bigint_nondet_quot!(ctx, x5114, x6, 3);
    let x5117: BytePoly_1 = bigint_nondet_rem!(ctx, x5114, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5116, x6, 4), x5117, 4), x5114, 4),
        24387,
        2,
    )?;
    let x5118: BytePoly_3 = bigint_nondet_quot!(ctx, x5115, x6, 3);
    let x5119: BytePoly_1 = bigint_nondet_rem!(ctx, x5115, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5118, x6, 4), x5119, 4), x5115, 4),
        24387,
        2,
    )?;
    let x5120: BytePoly_2 = bigint_mul!(x5081, x5081, 2);
    let x5121: BytePoly_3 = bigint_nondet_quot!(ctx, x5120, x6, 3);
    let x5122: BytePoly_1 = bigint_nondet_rem!(ctx, x5120, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5121, x6, 4), x5122, 4), x5120, 4),
        24387,
        2,
    )?;
    let x5123: BytePoly_2 = bigint_add!(bigint_mul!(x5122, x0, 2), x5, 2);
    let x5124: BytePoly_3 = bigint_nondet_quot!(ctx, x5123, x6, 3);
    let x5125: BytePoly_1 = bigint_nondet_rem!(ctx, x5123, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5124, x6, 4), x5125, 4), x5123, 4),
        24387,
        2,
    )?;
    let x5126: BytePoly_1 = bigint_add!(x5087, x5087, 1);
    let x5127: BytePoly_1 = bigint_nondet_quot!(ctx, x5126, x6, 1);
    let x5128: BytePoly_1 = bigint_nondet_rem!(ctx, x5126, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5127, x6, 2), x5128, 2), x5126, 2),
        8131,
        2,
    )?;
    let x5129: BytePoly_1 = bigint_nondet_inv!(ctx, x5128, x6, 1);
    let x5130: BytePoly_2 = bigint_mul!(x5128, x5129, 2);
    let x5131: BytePoly_3 = bigint_nondet_quot!(ctx, x5130, x6, 3);
    let x5132: BytePoly_1 = bigint_nondet_rem!(ctx, x5130, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5131, x6, 4), x5132, 4), x5130, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5132, x3, 1), 34, 1)?;
    let x5133: BytePoly_2 = bigint_mul!(x5125, x5129, 2);
    let x5134: BytePoly_3 = bigint_nondet_quot!(ctx, x5133, x6, 3);
    let x5135: BytePoly_1 = bigint_nondet_rem!(ctx, x5133, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5134, x6, 4), x5135, 4), x5133, 4),
        24387,
        2,
    )?;
    let x5136: BytePoly_2 = bigint_mul!(x5135, x5081, 2);
    let x5137: BytePoly_3 = bigint_nondet_quot!(ctx, x5136, x6, 3);
    let x5138: BytePoly_1 = bigint_nondet_rem!(ctx, x5136, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5137, x6, 4), x5138, 4), x5136, 4),
        24387,
        2,
    )?;
    let x5139: BytePoly_1 = bigint_add!(bigint_sub!(x5087, x5138, 1), x6, 1);
    let x5140: BytePoly_1 = bigint_nondet_quot!(ctx, x5139, x6, 1);
    let x5141: BytePoly_1 = bigint_nondet_rem!(ctx, x5139, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5140, x6, 2), x5141, 2), x5139, 2),
        8131,
        2,
    )?;
    let x5142: BytePoly_2 = bigint_mul!(x5135, x5135, 2);
    let x5143: BytePoly_3 = bigint_nondet_quot!(ctx, x5142, x6, 3);
    let x5144: BytePoly_1 = bigint_nondet_rem!(ctx, x5142, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5143, x6, 4), x5144, 4), x5142, 4),
        24387,
        2,
    )?;
    let x5145: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5144, x5081, 1), x6, 1), x5081, 1),
        x6,
        1
    );
    let x5146: BytePoly_1 = bigint_nondet_quot!(ctx, x5145, x6, 1);
    let x5147: BytePoly_1 = bigint_nondet_rem!(ctx, x5145, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5146, x6, 2), x5147, 2), x5145, 2),
        8131,
        2,
    )?;
    let x5148: BytePoly_2 = bigint_mul!(x5135, x5147, 2);
    let x5149: BytePoly_3 = bigint_nondet_quot!(ctx, x5148, x6, 3);
    let x5150: BytePoly_1 = bigint_nondet_rem!(ctx, x5148, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5149, x6, 4), x5150, 4), x5148, 4),
        24387,
        2,
    )?;
    let x5151: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5150, x5141, 1), 1), x6, 1);
    let x5152: BytePoly_1 = bigint_nondet_quot!(ctx, x5151, x6, 1);
    let x5153: BytePoly_1 = bigint_nondet_rem!(ctx, x5151, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5152, x6, 2), x5153, 2), x5151, 2),
        8131,
        2,
    )?;
    let x5154: BytePoly_1 = bigint_nondet_rem!(ctx, x5089, x2, 1);
    let x5155: BytePoly_2 = bigint_nondet_quot!(ctx, x5089, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5155, x2, 3), x5154, 3), x5089, 3),
        16259,
        2,
    )?;
    let x5156: BytePoly_1 = bigint_sub!(x3, x5154, 1);
    eqz(ctx, &bigint_mul!(x5154, x5156, 2), 8131, 2)?;
    let x5157: BytePoly_1 = bigint_add!(bigint_sub!(x5147, x5117, 1), x6, 1);
    let x5158: BytePoly_1 = bigint_nondet_inv!(ctx, x5157, x6, 1);
    let x5159: BytePoly_2 = bigint_mul!(x5157, x5158, 2);
    let x5160: BytePoly_3 = bigint_nondet_quot!(ctx, x5159, x6, 3);
    let x5161: BytePoly_1 = bigint_nondet_rem!(ctx, x5159, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5160, x6, 4), x5161, 4), x5159, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5161, x1, 1), 34, 1)?;
    let x5162: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5153, x5119, 1), x6, 1), x5158, 2);
    let x5163: BytePoly_3 = bigint_nondet_quot!(ctx, x5162, x6, 3);
    let x5164: BytePoly_1 = bigint_nondet_rem!(ctx, x5162, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5163, x6, 4), x5164, 4), x5162, 4),
        24387,
        2,
    )?;
    let x5165: BytePoly_2 = bigint_mul!(x5164, x5117, 2);
    let x5166: BytePoly_3 = bigint_nondet_quot!(ctx, x5165, x6, 3);
    let x5167: BytePoly_1 = bigint_nondet_rem!(ctx, x5165, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5166, x6, 4), x5167, 4), x5165, 4),
        24387,
        2,
    )?;
    let x5168: BytePoly_1 = bigint_add!(bigint_sub!(x5119, x5167, 1), x6, 1);
    let x5169: BytePoly_1 = bigint_nondet_quot!(ctx, x5168, x6, 1);
    let x5170: BytePoly_1 = bigint_nondet_rem!(ctx, x5168, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5169, x6, 2), x5170, 2), x5168, 2),
        8131,
        2,
    )?;
    let x5171: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5164, x5164, 2), x5117, 2), x6, 2),
            x5147,
            2
        ),
        x6,
        2
    );
    let x5172: BytePoly_3 = bigint_nondet_quot!(ctx, x5171, x6, 3);
    let x5173: BytePoly_1 = bigint_nondet_rem!(ctx, x5171, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5172, x6, 4), x5173, 4), x5171, 4),
        24387,
        2,
    )?;
    let x5174: BytePoly_2 = bigint_mul!(x5164, x5173, 2);
    let x5175: BytePoly_3 = bigint_nondet_quot!(ctx, x5174, x6, 3);
    let x5176: BytePoly_1 = bigint_nondet_rem!(ctx, x5174, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5175, x6, 4), x5176, 4), x5174, 4),
        24387,
        2,
    )?;
    let x5177: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5176, x5170, 1), 1), x6, 1);
    let x5178: BytePoly_1 = bigint_nondet_quot!(ctx, x5177, x6, 1);
    let x5179: BytePoly_1 = bigint_nondet_rem!(ctx, x5177, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5178, x6, 2), x5179, 2), x5177, 2),
        8131,
        2,
    )?;
    let x5180: BytePoly_2 = bigint_add!(
        bigint_mul!(x5173, x5154, 2),
        bigint_mul!(x5117, x5156, 2),
        2
    );
    let x5181: BytePoly_2 = bigint_add!(
        bigint_mul!(x5179, x5154, 2),
        bigint_mul!(x5119, x5156, 2),
        2
    );
    let x5182: BytePoly_3 = bigint_nondet_quot!(ctx, x5180, x6, 3);
    let x5183: BytePoly_1 = bigint_nondet_rem!(ctx, x5180, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5182, x6, 4), x5183, 4), x5180, 4),
        24387,
        2,
    )?;
    let x5184: BytePoly_3 = bigint_nondet_quot!(ctx, x5181, x6, 3);
    let x5185: BytePoly_1 = bigint_nondet_rem!(ctx, x5181, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5184, x6, 4), x5185, 4), x5181, 4),
        24387,
        2,
    )?;
    let x5186: BytePoly_2 = bigint_mul!(x5147, x5147, 2);
    let x5187: BytePoly_3 = bigint_nondet_quot!(ctx, x5186, x6, 3);
    let x5188: BytePoly_1 = bigint_nondet_rem!(ctx, x5186, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5187, x6, 4), x5188, 4), x5186, 4),
        24387,
        2,
    )?;
    let x5189: BytePoly_2 = bigint_add!(bigint_mul!(x5188, x0, 2), x5, 2);
    let x5190: BytePoly_3 = bigint_nondet_quot!(ctx, x5189, x6, 3);
    let x5191: BytePoly_1 = bigint_nondet_rem!(ctx, x5189, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5190, x6, 4), x5191, 4), x5189, 4),
        24387,
        2,
    )?;
    let x5192: BytePoly_1 = bigint_add!(x5153, x5153, 1);
    let x5193: BytePoly_1 = bigint_nondet_quot!(ctx, x5192, x6, 1);
    let x5194: BytePoly_1 = bigint_nondet_rem!(ctx, x5192, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5193, x6, 2), x5194, 2), x5192, 2),
        8131,
        2,
    )?;
    let x5195: BytePoly_1 = bigint_nondet_inv!(ctx, x5194, x6, 1);
    let x5196: BytePoly_2 = bigint_mul!(x5194, x5195, 2);
    let x5197: BytePoly_3 = bigint_nondet_quot!(ctx, x5196, x6, 3);
    let x5198: BytePoly_1 = bigint_nondet_rem!(ctx, x5196, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5197, x6, 4), x5198, 4), x5196, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5198, x3, 1), 34, 1)?;
    let x5199: BytePoly_2 = bigint_mul!(x5191, x5195, 2);
    let x5200: BytePoly_3 = bigint_nondet_quot!(ctx, x5199, x6, 3);
    let x5201: BytePoly_1 = bigint_nondet_rem!(ctx, x5199, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5200, x6, 4), x5201, 4), x5199, 4),
        24387,
        2,
    )?;
    let x5202: BytePoly_2 = bigint_mul!(x5201, x5147, 2);
    let x5203: BytePoly_3 = bigint_nondet_quot!(ctx, x5202, x6, 3);
    let x5204: BytePoly_1 = bigint_nondet_rem!(ctx, x5202, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5203, x6, 4), x5204, 4), x5202, 4),
        24387,
        2,
    )?;
    let x5205: BytePoly_1 = bigint_add!(bigint_sub!(x5153, x5204, 1), x6, 1);
    let x5206: BytePoly_1 = bigint_nondet_quot!(ctx, x5205, x6, 1);
    let x5207: BytePoly_1 = bigint_nondet_rem!(ctx, x5205, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5206, x6, 2), x5207, 2), x5205, 2),
        8131,
        2,
    )?;
    let x5208: BytePoly_2 = bigint_mul!(x5201, x5201, 2);
    let x5209: BytePoly_3 = bigint_nondet_quot!(ctx, x5208, x6, 3);
    let x5210: BytePoly_1 = bigint_nondet_rem!(ctx, x5208, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5209, x6, 4), x5210, 4), x5208, 4),
        24387,
        2,
    )?;
    let x5211: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5210, x5147, 1), x6, 1), x5147, 1),
        x6,
        1
    );
    let x5212: BytePoly_1 = bigint_nondet_quot!(ctx, x5211, x6, 1);
    let x5213: BytePoly_1 = bigint_nondet_rem!(ctx, x5211, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5212, x6, 2), x5213, 2), x5211, 2),
        8131,
        2,
    )?;
    let x5214: BytePoly_2 = bigint_mul!(x5201, x5213, 2);
    let x5215: BytePoly_3 = bigint_nondet_quot!(ctx, x5214, x6, 3);
    let x5216: BytePoly_1 = bigint_nondet_rem!(ctx, x5214, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5215, x6, 4), x5216, 4), x5214, 4),
        24387,
        2,
    )?;
    let x5217: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5216, x5207, 1), 1), x6, 1);
    let x5218: BytePoly_1 = bigint_nondet_quot!(ctx, x5217, x6, 1);
    let x5219: BytePoly_1 = bigint_nondet_rem!(ctx, x5217, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5218, x6, 2), x5219, 2), x5217, 2),
        8131,
        2,
    )?;
    let x5220: BytePoly_1 = bigint_nondet_rem!(ctx, x5155, x2, 1);
    let x5221: BytePoly_2 = bigint_nondet_quot!(ctx, x5155, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5221, x2, 3), x5220, 3), x5155, 3),
        16259,
        2,
    )?;
    let x5222: BytePoly_1 = bigint_sub!(x3, x5220, 1);
    eqz(ctx, &bigint_mul!(x5220, x5222, 2), 8131, 2)?;
    let x5223: BytePoly_1 = bigint_add!(bigint_sub!(x5213, x5183, 1), x6, 1);
    let x5224: BytePoly_1 = bigint_nondet_inv!(ctx, x5223, x6, 1);
    let x5225: BytePoly_2 = bigint_mul!(x5223, x5224, 2);
    let x5226: BytePoly_3 = bigint_nondet_quot!(ctx, x5225, x6, 3);
    let x5227: BytePoly_1 = bigint_nondet_rem!(ctx, x5225, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5226, x6, 4), x5227, 4), x5225, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5227, x1, 1), 34, 1)?;
    let x5228: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5219, x5185, 1), x6, 1), x5224, 2);
    let x5229: BytePoly_3 = bigint_nondet_quot!(ctx, x5228, x6, 3);
    let x5230: BytePoly_1 = bigint_nondet_rem!(ctx, x5228, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5229, x6, 4), x5230, 4), x5228, 4),
        24387,
        2,
    )?;
    let x5231: BytePoly_2 = bigint_mul!(x5230, x5183, 2);
    let x5232: BytePoly_3 = bigint_nondet_quot!(ctx, x5231, x6, 3);
    let x5233: BytePoly_1 = bigint_nondet_rem!(ctx, x5231, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5232, x6, 4), x5233, 4), x5231, 4),
        24387,
        2,
    )?;
    let x5234: BytePoly_1 = bigint_add!(bigint_sub!(x5185, x5233, 1), x6, 1);
    let x5235: BytePoly_1 = bigint_nondet_quot!(ctx, x5234, x6, 1);
    let x5236: BytePoly_1 = bigint_nondet_rem!(ctx, x5234, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5235, x6, 2), x5236, 2), x5234, 2),
        8131,
        2,
    )?;
    let x5237: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5230, x5230, 2), x5183, 2), x6, 2),
            x5213,
            2
        ),
        x6,
        2
    );
    let x5238: BytePoly_3 = bigint_nondet_quot!(ctx, x5237, x6, 3);
    let x5239: BytePoly_1 = bigint_nondet_rem!(ctx, x5237, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5238, x6, 4), x5239, 4), x5237, 4),
        24387,
        2,
    )?;
    let x5240: BytePoly_2 = bigint_mul!(x5230, x5239, 2);
    let x5241: BytePoly_3 = bigint_nondet_quot!(ctx, x5240, x6, 3);
    let x5242: BytePoly_1 = bigint_nondet_rem!(ctx, x5240, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5241, x6, 4), x5242, 4), x5240, 4),
        24387,
        2,
    )?;
    let x5243: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5242, x5236, 1), 1), x6, 1);
    let x5244: BytePoly_1 = bigint_nondet_quot!(ctx, x5243, x6, 1);
    let x5245: BytePoly_1 = bigint_nondet_rem!(ctx, x5243, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5244, x6, 2), x5245, 2), x5243, 2),
        8131,
        2,
    )?;
    let x5246: BytePoly_2 = bigint_add!(
        bigint_mul!(x5239, x5220, 2),
        bigint_mul!(x5183, x5222, 2),
        2
    );
    let x5247: BytePoly_2 = bigint_add!(
        bigint_mul!(x5245, x5220, 2),
        bigint_mul!(x5185, x5222, 2),
        2
    );
    let x5248: BytePoly_3 = bigint_nondet_quot!(ctx, x5246, x6, 3);
    let x5249: BytePoly_1 = bigint_nondet_rem!(ctx, x5246, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5248, x6, 4), x5249, 4), x5246, 4),
        24387,
        2,
    )?;
    let x5250: BytePoly_3 = bigint_nondet_quot!(ctx, x5247, x6, 3);
    let x5251: BytePoly_1 = bigint_nondet_rem!(ctx, x5247, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5250, x6, 4), x5251, 4), x5247, 4),
        24387,
        2,
    )?;
    let x5252: BytePoly_2 = bigint_mul!(x5213, x5213, 2);
    let x5253: BytePoly_3 = bigint_nondet_quot!(ctx, x5252, x6, 3);
    let x5254: BytePoly_1 = bigint_nondet_rem!(ctx, x5252, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5253, x6, 4), x5254, 4), x5252, 4),
        24387,
        2,
    )?;
    let x5255: BytePoly_2 = bigint_add!(bigint_mul!(x5254, x0, 2), x5, 2);
    let x5256: BytePoly_3 = bigint_nondet_quot!(ctx, x5255, x6, 3);
    let x5257: BytePoly_1 = bigint_nondet_rem!(ctx, x5255, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5256, x6, 4), x5257, 4), x5255, 4),
        24387,
        2,
    )?;
    let x5258: BytePoly_1 = bigint_add!(x5219, x5219, 1);
    let x5259: BytePoly_1 = bigint_nondet_quot!(ctx, x5258, x6, 1);
    let x5260: BytePoly_1 = bigint_nondet_rem!(ctx, x5258, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5259, x6, 2), x5260, 2), x5258, 2),
        8131,
        2,
    )?;
    let x5261: BytePoly_1 = bigint_nondet_inv!(ctx, x5260, x6, 1);
    let x5262: BytePoly_2 = bigint_mul!(x5260, x5261, 2);
    let x5263: BytePoly_3 = bigint_nondet_quot!(ctx, x5262, x6, 3);
    let x5264: BytePoly_1 = bigint_nondet_rem!(ctx, x5262, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5263, x6, 4), x5264, 4), x5262, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5264, x3, 1), 34, 1)?;
    let x5265: BytePoly_2 = bigint_mul!(x5257, x5261, 2);
    let x5266: BytePoly_3 = bigint_nondet_quot!(ctx, x5265, x6, 3);
    let x5267: BytePoly_1 = bigint_nondet_rem!(ctx, x5265, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5266, x6, 4), x5267, 4), x5265, 4),
        24387,
        2,
    )?;
    let x5268: BytePoly_2 = bigint_mul!(x5267, x5213, 2);
    let x5269: BytePoly_3 = bigint_nondet_quot!(ctx, x5268, x6, 3);
    let x5270: BytePoly_1 = bigint_nondet_rem!(ctx, x5268, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5269, x6, 4), x5270, 4), x5268, 4),
        24387,
        2,
    )?;
    let x5271: BytePoly_1 = bigint_add!(bigint_sub!(x5219, x5270, 1), x6, 1);
    let x5272: BytePoly_1 = bigint_nondet_quot!(ctx, x5271, x6, 1);
    let x5273: BytePoly_1 = bigint_nondet_rem!(ctx, x5271, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5272, x6, 2), x5273, 2), x5271, 2),
        8131,
        2,
    )?;
    let x5274: BytePoly_2 = bigint_mul!(x5267, x5267, 2);
    let x5275: BytePoly_3 = bigint_nondet_quot!(ctx, x5274, x6, 3);
    let x5276: BytePoly_1 = bigint_nondet_rem!(ctx, x5274, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5275, x6, 4), x5276, 4), x5274, 4),
        24387,
        2,
    )?;
    let x5277: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5276, x5213, 1), x6, 1), x5213, 1),
        x6,
        1
    );
    let x5278: BytePoly_1 = bigint_nondet_quot!(ctx, x5277, x6, 1);
    let x5279: BytePoly_1 = bigint_nondet_rem!(ctx, x5277, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5278, x6, 2), x5279, 2), x5277, 2),
        8131,
        2,
    )?;
    let x5280: BytePoly_2 = bigint_mul!(x5267, x5279, 2);
    let x5281: BytePoly_3 = bigint_nondet_quot!(ctx, x5280, x6, 3);
    let x5282: BytePoly_1 = bigint_nondet_rem!(ctx, x5280, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5281, x6, 4), x5282, 4), x5280, 4),
        24387,
        2,
    )?;
    let x5283: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5282, x5273, 1), 1), x6, 1);
    let x5284: BytePoly_1 = bigint_nondet_quot!(ctx, x5283, x6, 1);
    let x5285: BytePoly_1 = bigint_nondet_rem!(ctx, x5283, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5284, x6, 2), x5285, 2), x5283, 2),
        8131,
        2,
    )?;
    let x5286: BytePoly_1 = bigint_nondet_rem!(ctx, x5221, x2, 1);
    let x5287: BytePoly_2 = bigint_nondet_quot!(ctx, x5221, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5287, x2, 3), x5286, 3), x5221, 3),
        16259,
        2,
    )?;
    let x5288: BytePoly_1 = bigint_sub!(x3, x5286, 1);
    eqz(ctx, &bigint_mul!(x5286, x5288, 2), 8131, 2)?;
    let x5289: BytePoly_1 = bigint_add!(bigint_sub!(x5279, x5249, 1), x6, 1);
    let x5290: BytePoly_1 = bigint_nondet_inv!(ctx, x5289, x6, 1);
    let x5291: BytePoly_2 = bigint_mul!(x5289, x5290, 2);
    let x5292: BytePoly_3 = bigint_nondet_quot!(ctx, x5291, x6, 3);
    let x5293: BytePoly_1 = bigint_nondet_rem!(ctx, x5291, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5292, x6, 4), x5293, 4), x5291, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5293, x1, 1), 34, 1)?;
    let x5294: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5285, x5251, 1), x6, 1), x5290, 2);
    let x5295: BytePoly_3 = bigint_nondet_quot!(ctx, x5294, x6, 3);
    let x5296: BytePoly_1 = bigint_nondet_rem!(ctx, x5294, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5295, x6, 4), x5296, 4), x5294, 4),
        24387,
        2,
    )?;
    let x5297: BytePoly_2 = bigint_mul!(x5296, x5249, 2);
    let x5298: BytePoly_3 = bigint_nondet_quot!(ctx, x5297, x6, 3);
    let x5299: BytePoly_1 = bigint_nondet_rem!(ctx, x5297, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5298, x6, 4), x5299, 4), x5297, 4),
        24387,
        2,
    )?;
    let x5300: BytePoly_1 = bigint_add!(bigint_sub!(x5251, x5299, 1), x6, 1);
    let x5301: BytePoly_1 = bigint_nondet_quot!(ctx, x5300, x6, 1);
    let x5302: BytePoly_1 = bigint_nondet_rem!(ctx, x5300, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5301, x6, 2), x5302, 2), x5300, 2),
        8131,
        2,
    )?;
    let x5303: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5296, x5296, 2), x5249, 2), x6, 2),
            x5279,
            2
        ),
        x6,
        2
    );
    let x5304: BytePoly_3 = bigint_nondet_quot!(ctx, x5303, x6, 3);
    let x5305: BytePoly_1 = bigint_nondet_rem!(ctx, x5303, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5304, x6, 4), x5305, 4), x5303, 4),
        24387,
        2,
    )?;
    let x5306: BytePoly_2 = bigint_mul!(x5296, x5305, 2);
    let x5307: BytePoly_3 = bigint_nondet_quot!(ctx, x5306, x6, 3);
    let x5308: BytePoly_1 = bigint_nondet_rem!(ctx, x5306, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5307, x6, 4), x5308, 4), x5306, 4),
        24387,
        2,
    )?;
    let x5309: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5308, x5302, 1), 1), x6, 1);
    let x5310: BytePoly_1 = bigint_nondet_quot!(ctx, x5309, x6, 1);
    let x5311: BytePoly_1 = bigint_nondet_rem!(ctx, x5309, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5310, x6, 2), x5311, 2), x5309, 2),
        8131,
        2,
    )?;
    let x5312: BytePoly_2 = bigint_add!(
        bigint_mul!(x5305, x5286, 2),
        bigint_mul!(x5249, x5288, 2),
        2
    );
    let x5313: BytePoly_2 = bigint_add!(
        bigint_mul!(x5311, x5286, 2),
        bigint_mul!(x5251, x5288, 2),
        2
    );
    let x5314: BytePoly_3 = bigint_nondet_quot!(ctx, x5312, x6, 3);
    let x5315: BytePoly_1 = bigint_nondet_rem!(ctx, x5312, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5314, x6, 4), x5315, 4), x5312, 4),
        24387,
        2,
    )?;
    let x5316: BytePoly_3 = bigint_nondet_quot!(ctx, x5313, x6, 3);
    let x5317: BytePoly_1 = bigint_nondet_rem!(ctx, x5313, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5316, x6, 4), x5317, 4), x5313, 4),
        24387,
        2,
    )?;
    let x5318: BytePoly_2 = bigint_mul!(x5279, x5279, 2);
    let x5319: BytePoly_3 = bigint_nondet_quot!(ctx, x5318, x6, 3);
    let x5320: BytePoly_1 = bigint_nondet_rem!(ctx, x5318, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5319, x6, 4), x5320, 4), x5318, 4),
        24387,
        2,
    )?;
    let x5321: BytePoly_2 = bigint_add!(bigint_mul!(x5320, x0, 2), x5, 2);
    let x5322: BytePoly_3 = bigint_nondet_quot!(ctx, x5321, x6, 3);
    let x5323: BytePoly_1 = bigint_nondet_rem!(ctx, x5321, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5322, x6, 4), x5323, 4), x5321, 4),
        24387,
        2,
    )?;
    let x5324: BytePoly_1 = bigint_add!(x5285, x5285, 1);
    let x5325: BytePoly_1 = bigint_nondet_quot!(ctx, x5324, x6, 1);
    let x5326: BytePoly_1 = bigint_nondet_rem!(ctx, x5324, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5325, x6, 2), x5326, 2), x5324, 2),
        8131,
        2,
    )?;
    let x5327: BytePoly_1 = bigint_nondet_inv!(ctx, x5326, x6, 1);
    let x5328: BytePoly_2 = bigint_mul!(x5326, x5327, 2);
    let x5329: BytePoly_3 = bigint_nondet_quot!(ctx, x5328, x6, 3);
    let x5330: BytePoly_1 = bigint_nondet_rem!(ctx, x5328, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5329, x6, 4), x5330, 4), x5328, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5330, x3, 1), 34, 1)?;
    let x5331: BytePoly_2 = bigint_mul!(x5323, x5327, 2);
    let x5332: BytePoly_3 = bigint_nondet_quot!(ctx, x5331, x6, 3);
    let x5333: BytePoly_1 = bigint_nondet_rem!(ctx, x5331, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5332, x6, 4), x5333, 4), x5331, 4),
        24387,
        2,
    )?;
    let x5334: BytePoly_2 = bigint_mul!(x5333, x5279, 2);
    let x5335: BytePoly_3 = bigint_nondet_quot!(ctx, x5334, x6, 3);
    let x5336: BytePoly_1 = bigint_nondet_rem!(ctx, x5334, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5335, x6, 4), x5336, 4), x5334, 4),
        24387,
        2,
    )?;
    let x5337: BytePoly_1 = bigint_add!(bigint_sub!(x5285, x5336, 1), x6, 1);
    let x5338: BytePoly_1 = bigint_nondet_quot!(ctx, x5337, x6, 1);
    let x5339: BytePoly_1 = bigint_nondet_rem!(ctx, x5337, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5338, x6, 2), x5339, 2), x5337, 2),
        8131,
        2,
    )?;
    let x5340: BytePoly_2 = bigint_mul!(x5333, x5333, 2);
    let x5341: BytePoly_3 = bigint_nondet_quot!(ctx, x5340, x6, 3);
    let x5342: BytePoly_1 = bigint_nondet_rem!(ctx, x5340, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5341, x6, 4), x5342, 4), x5340, 4),
        24387,
        2,
    )?;
    let x5343: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5342, x5279, 1), x6, 1), x5279, 1),
        x6,
        1
    );
    let x5344: BytePoly_1 = bigint_nondet_quot!(ctx, x5343, x6, 1);
    let x5345: BytePoly_1 = bigint_nondet_rem!(ctx, x5343, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5344, x6, 2), x5345, 2), x5343, 2),
        8131,
        2,
    )?;
    let x5346: BytePoly_2 = bigint_mul!(x5333, x5345, 2);
    let x5347: BytePoly_3 = bigint_nondet_quot!(ctx, x5346, x6, 3);
    let x5348: BytePoly_1 = bigint_nondet_rem!(ctx, x5346, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5347, x6, 4), x5348, 4), x5346, 4),
        24387,
        2,
    )?;
    let x5349: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5348, x5339, 1), 1), x6, 1);
    let x5350: BytePoly_1 = bigint_nondet_quot!(ctx, x5349, x6, 1);
    let x5351: BytePoly_1 = bigint_nondet_rem!(ctx, x5349, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5350, x6, 2), x5351, 2), x5349, 2),
        8131,
        2,
    )?;
    let x5352: BytePoly_1 = bigint_nondet_rem!(ctx, x5287, x2, 1);
    let x5353: BytePoly_2 = bigint_nondet_quot!(ctx, x5287, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5353, x2, 3), x5352, 3), x5287, 3),
        16259,
        2,
    )?;
    let x5354: BytePoly_1 = bigint_sub!(x3, x5352, 1);
    eqz(ctx, &bigint_mul!(x5352, x5354, 2), 8131, 2)?;
    let x5355: BytePoly_1 = bigint_add!(bigint_sub!(x5345, x5315, 1), x6, 1);
    let x5356: BytePoly_1 = bigint_nondet_inv!(ctx, x5355, x6, 1);
    let x5357: BytePoly_2 = bigint_mul!(x5355, x5356, 2);
    let x5358: BytePoly_3 = bigint_nondet_quot!(ctx, x5357, x6, 3);
    let x5359: BytePoly_1 = bigint_nondet_rem!(ctx, x5357, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5358, x6, 4), x5359, 4), x5357, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5359, x1, 1), 34, 1)?;
    let x5360: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5351, x5317, 1), x6, 1), x5356, 2);
    let x5361: BytePoly_3 = bigint_nondet_quot!(ctx, x5360, x6, 3);
    let x5362: BytePoly_1 = bigint_nondet_rem!(ctx, x5360, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5361, x6, 4), x5362, 4), x5360, 4),
        24387,
        2,
    )?;
    let x5363: BytePoly_2 = bigint_mul!(x5362, x5315, 2);
    let x5364: BytePoly_3 = bigint_nondet_quot!(ctx, x5363, x6, 3);
    let x5365: BytePoly_1 = bigint_nondet_rem!(ctx, x5363, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5364, x6, 4), x5365, 4), x5363, 4),
        24387,
        2,
    )?;
    let x5366: BytePoly_1 = bigint_add!(bigint_sub!(x5317, x5365, 1), x6, 1);
    let x5367: BytePoly_1 = bigint_nondet_quot!(ctx, x5366, x6, 1);
    let x5368: BytePoly_1 = bigint_nondet_rem!(ctx, x5366, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5367, x6, 2), x5368, 2), x5366, 2),
        8131,
        2,
    )?;
    let x5369: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5362, x5362, 2), x5315, 2), x6, 2),
            x5345,
            2
        ),
        x6,
        2
    );
    let x5370: BytePoly_3 = bigint_nondet_quot!(ctx, x5369, x6, 3);
    let x5371: BytePoly_1 = bigint_nondet_rem!(ctx, x5369, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5370, x6, 4), x5371, 4), x5369, 4),
        24387,
        2,
    )?;
    let x5372: BytePoly_2 = bigint_mul!(x5362, x5371, 2);
    let x5373: BytePoly_3 = bigint_nondet_quot!(ctx, x5372, x6, 3);
    let x5374: BytePoly_1 = bigint_nondet_rem!(ctx, x5372, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5373, x6, 4), x5374, 4), x5372, 4),
        24387,
        2,
    )?;
    let x5375: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5374, x5368, 1), 1), x6, 1);
    let x5376: BytePoly_1 = bigint_nondet_quot!(ctx, x5375, x6, 1);
    let x5377: BytePoly_1 = bigint_nondet_rem!(ctx, x5375, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5376, x6, 2), x5377, 2), x5375, 2),
        8131,
        2,
    )?;
    let x5378: BytePoly_2 = bigint_add!(
        bigint_mul!(x5371, x5352, 2),
        bigint_mul!(x5315, x5354, 2),
        2
    );
    let x5379: BytePoly_2 = bigint_add!(
        bigint_mul!(x5377, x5352, 2),
        bigint_mul!(x5317, x5354, 2),
        2
    );
    let x5380: BytePoly_3 = bigint_nondet_quot!(ctx, x5378, x6, 3);
    let x5381: BytePoly_1 = bigint_nondet_rem!(ctx, x5378, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5380, x6, 4), x5381, 4), x5378, 4),
        24387,
        2,
    )?;
    let x5382: BytePoly_3 = bigint_nondet_quot!(ctx, x5379, x6, 3);
    let x5383: BytePoly_1 = bigint_nondet_rem!(ctx, x5379, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5382, x6, 4), x5383, 4), x5379, 4),
        24387,
        2,
    )?;
    let x5384: BytePoly_2 = bigint_mul!(x5345, x5345, 2);
    let x5385: BytePoly_3 = bigint_nondet_quot!(ctx, x5384, x6, 3);
    let x5386: BytePoly_1 = bigint_nondet_rem!(ctx, x5384, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5385, x6, 4), x5386, 4), x5384, 4),
        24387,
        2,
    )?;
    let x5387: BytePoly_2 = bigint_add!(bigint_mul!(x5386, x0, 2), x5, 2);
    let x5388: BytePoly_3 = bigint_nondet_quot!(ctx, x5387, x6, 3);
    let x5389: BytePoly_1 = bigint_nondet_rem!(ctx, x5387, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5388, x6, 4), x5389, 4), x5387, 4),
        24387,
        2,
    )?;
    let x5390: BytePoly_1 = bigint_add!(x5351, x5351, 1);
    let x5391: BytePoly_1 = bigint_nondet_quot!(ctx, x5390, x6, 1);
    let x5392: BytePoly_1 = bigint_nondet_rem!(ctx, x5390, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5391, x6, 2), x5392, 2), x5390, 2),
        8131,
        2,
    )?;
    let x5393: BytePoly_1 = bigint_nondet_inv!(ctx, x5392, x6, 1);
    let x5394: BytePoly_2 = bigint_mul!(x5392, x5393, 2);
    let x5395: BytePoly_3 = bigint_nondet_quot!(ctx, x5394, x6, 3);
    let x5396: BytePoly_1 = bigint_nondet_rem!(ctx, x5394, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5395, x6, 4), x5396, 4), x5394, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5396, x3, 1), 34, 1)?;
    let x5397: BytePoly_2 = bigint_mul!(x5389, x5393, 2);
    let x5398: BytePoly_3 = bigint_nondet_quot!(ctx, x5397, x6, 3);
    let x5399: BytePoly_1 = bigint_nondet_rem!(ctx, x5397, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5398, x6, 4), x5399, 4), x5397, 4),
        24387,
        2,
    )?;
    let x5400: BytePoly_2 = bigint_mul!(x5399, x5345, 2);
    let x5401: BytePoly_3 = bigint_nondet_quot!(ctx, x5400, x6, 3);
    let x5402: BytePoly_1 = bigint_nondet_rem!(ctx, x5400, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5401, x6, 4), x5402, 4), x5400, 4),
        24387,
        2,
    )?;
    let x5403: BytePoly_1 = bigint_add!(bigint_sub!(x5351, x5402, 1), x6, 1);
    let x5404: BytePoly_1 = bigint_nondet_quot!(ctx, x5403, x6, 1);
    let x5405: BytePoly_1 = bigint_nondet_rem!(ctx, x5403, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5404, x6, 2), x5405, 2), x5403, 2),
        8131,
        2,
    )?;
    let x5406: BytePoly_2 = bigint_mul!(x5399, x5399, 2);
    let x5407: BytePoly_3 = bigint_nondet_quot!(ctx, x5406, x6, 3);
    let x5408: BytePoly_1 = bigint_nondet_rem!(ctx, x5406, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5407, x6, 4), x5408, 4), x5406, 4),
        24387,
        2,
    )?;
    let x5409: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5408, x5345, 1), x6, 1), x5345, 1),
        x6,
        1
    );
    let x5410: BytePoly_1 = bigint_nondet_quot!(ctx, x5409, x6, 1);
    let x5411: BytePoly_1 = bigint_nondet_rem!(ctx, x5409, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5410, x6, 2), x5411, 2), x5409, 2),
        8131,
        2,
    )?;
    let x5412: BytePoly_2 = bigint_mul!(x5399, x5411, 2);
    let x5413: BytePoly_3 = bigint_nondet_quot!(ctx, x5412, x6, 3);
    let x5414: BytePoly_1 = bigint_nondet_rem!(ctx, x5412, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5413, x6, 4), x5414, 4), x5412, 4),
        24387,
        2,
    )?;
    let x5415: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5414, x5405, 1), 1), x6, 1);
    let x5416: BytePoly_1 = bigint_nondet_quot!(ctx, x5415, x6, 1);
    let x5417: BytePoly_1 = bigint_nondet_rem!(ctx, x5415, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5416, x6, 2), x5417, 2), x5415, 2),
        8131,
        2,
    )?;
    let x5418: BytePoly_1 = bigint_nondet_rem!(ctx, x5353, x2, 1);
    let x5419: BytePoly_2 = bigint_nondet_quot!(ctx, x5353, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5419, x2, 3), x5418, 3), x5353, 3),
        16259,
        2,
    )?;
    let x5420: BytePoly_1 = bigint_sub!(x3, x5418, 1);
    eqz(ctx, &bigint_mul!(x5418, x5420, 2), 8131, 2)?;
    let x5421: BytePoly_1 = bigint_add!(bigint_sub!(x5411, x5381, 1), x6, 1);
    let x5422: BytePoly_1 = bigint_nondet_inv!(ctx, x5421, x6, 1);
    let x5423: BytePoly_2 = bigint_mul!(x5421, x5422, 2);
    let x5424: BytePoly_3 = bigint_nondet_quot!(ctx, x5423, x6, 3);
    let x5425: BytePoly_1 = bigint_nondet_rem!(ctx, x5423, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5424, x6, 4), x5425, 4), x5423, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5425, x1, 1), 34, 1)?;
    let x5426: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5417, x5383, 1), x6, 1), x5422, 2);
    let x5427: BytePoly_3 = bigint_nondet_quot!(ctx, x5426, x6, 3);
    let x5428: BytePoly_1 = bigint_nondet_rem!(ctx, x5426, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5427, x6, 4), x5428, 4), x5426, 4),
        24387,
        2,
    )?;
    let x5429: BytePoly_2 = bigint_mul!(x5428, x5381, 2);
    let x5430: BytePoly_3 = bigint_nondet_quot!(ctx, x5429, x6, 3);
    let x5431: BytePoly_1 = bigint_nondet_rem!(ctx, x5429, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5430, x6, 4), x5431, 4), x5429, 4),
        24387,
        2,
    )?;
    let x5432: BytePoly_1 = bigint_add!(bigint_sub!(x5383, x5431, 1), x6, 1);
    let x5433: BytePoly_1 = bigint_nondet_quot!(ctx, x5432, x6, 1);
    let x5434: BytePoly_1 = bigint_nondet_rem!(ctx, x5432, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5433, x6, 2), x5434, 2), x5432, 2),
        8131,
        2,
    )?;
    let x5435: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5428, x5428, 2), x5381, 2), x6, 2),
            x5411,
            2
        ),
        x6,
        2
    );
    let x5436: BytePoly_3 = bigint_nondet_quot!(ctx, x5435, x6, 3);
    let x5437: BytePoly_1 = bigint_nondet_rem!(ctx, x5435, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5436, x6, 4), x5437, 4), x5435, 4),
        24387,
        2,
    )?;
    let x5438: BytePoly_2 = bigint_mul!(x5428, x5437, 2);
    let x5439: BytePoly_3 = bigint_nondet_quot!(ctx, x5438, x6, 3);
    let x5440: BytePoly_1 = bigint_nondet_rem!(ctx, x5438, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5439, x6, 4), x5440, 4), x5438, 4),
        24387,
        2,
    )?;
    let x5441: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5440, x5434, 1), 1), x6, 1);
    let x5442: BytePoly_1 = bigint_nondet_quot!(ctx, x5441, x6, 1);
    let x5443: BytePoly_1 = bigint_nondet_rem!(ctx, x5441, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5442, x6, 2), x5443, 2), x5441, 2),
        8131,
        2,
    )?;
    let x5444: BytePoly_2 = bigint_add!(
        bigint_mul!(x5437, x5418, 2),
        bigint_mul!(x5381, x5420, 2),
        2
    );
    let x5445: BytePoly_2 = bigint_add!(
        bigint_mul!(x5443, x5418, 2),
        bigint_mul!(x5383, x5420, 2),
        2
    );
    let x5446: BytePoly_3 = bigint_nondet_quot!(ctx, x5444, x6, 3);
    let x5447: BytePoly_1 = bigint_nondet_rem!(ctx, x5444, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5446, x6, 4), x5447, 4), x5444, 4),
        24387,
        2,
    )?;
    let x5448: BytePoly_3 = bigint_nondet_quot!(ctx, x5445, x6, 3);
    let x5449: BytePoly_1 = bigint_nondet_rem!(ctx, x5445, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5448, x6, 4), x5449, 4), x5445, 4),
        24387,
        2,
    )?;
    let x5450: BytePoly_2 = bigint_mul!(x5411, x5411, 2);
    let x5451: BytePoly_3 = bigint_nondet_quot!(ctx, x5450, x6, 3);
    let x5452: BytePoly_1 = bigint_nondet_rem!(ctx, x5450, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5451, x6, 4), x5452, 4), x5450, 4),
        24387,
        2,
    )?;
    let x5453: BytePoly_2 = bigint_add!(bigint_mul!(x5452, x0, 2), x5, 2);
    let x5454: BytePoly_3 = bigint_nondet_quot!(ctx, x5453, x6, 3);
    let x5455: BytePoly_1 = bigint_nondet_rem!(ctx, x5453, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5454, x6, 4), x5455, 4), x5453, 4),
        24387,
        2,
    )?;
    let x5456: BytePoly_1 = bigint_add!(x5417, x5417, 1);
    let x5457: BytePoly_1 = bigint_nondet_quot!(ctx, x5456, x6, 1);
    let x5458: BytePoly_1 = bigint_nondet_rem!(ctx, x5456, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5457, x6, 2), x5458, 2), x5456, 2),
        8131,
        2,
    )?;
    let x5459: BytePoly_1 = bigint_nondet_inv!(ctx, x5458, x6, 1);
    let x5460: BytePoly_2 = bigint_mul!(x5458, x5459, 2);
    let x5461: BytePoly_3 = bigint_nondet_quot!(ctx, x5460, x6, 3);
    let x5462: BytePoly_1 = bigint_nondet_rem!(ctx, x5460, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5461, x6, 4), x5462, 4), x5460, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5462, x3, 1), 34, 1)?;
    let x5463: BytePoly_2 = bigint_mul!(x5455, x5459, 2);
    let x5464: BytePoly_3 = bigint_nondet_quot!(ctx, x5463, x6, 3);
    let x5465: BytePoly_1 = bigint_nondet_rem!(ctx, x5463, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5464, x6, 4), x5465, 4), x5463, 4),
        24387,
        2,
    )?;
    let x5466: BytePoly_2 = bigint_mul!(x5465, x5411, 2);
    let x5467: BytePoly_3 = bigint_nondet_quot!(ctx, x5466, x6, 3);
    let x5468: BytePoly_1 = bigint_nondet_rem!(ctx, x5466, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5467, x6, 4), x5468, 4), x5466, 4),
        24387,
        2,
    )?;
    let x5469: BytePoly_1 = bigint_add!(bigint_sub!(x5417, x5468, 1), x6, 1);
    let x5470: BytePoly_1 = bigint_nondet_quot!(ctx, x5469, x6, 1);
    let x5471: BytePoly_1 = bigint_nondet_rem!(ctx, x5469, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5470, x6, 2), x5471, 2), x5469, 2),
        8131,
        2,
    )?;
    let x5472: BytePoly_2 = bigint_mul!(x5465, x5465, 2);
    let x5473: BytePoly_3 = bigint_nondet_quot!(ctx, x5472, x6, 3);
    let x5474: BytePoly_1 = bigint_nondet_rem!(ctx, x5472, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5473, x6, 4), x5474, 4), x5472, 4),
        24387,
        2,
    )?;
    let x5475: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5474, x5411, 1), x6, 1), x5411, 1),
        x6,
        1
    );
    let x5476: BytePoly_1 = bigint_nondet_quot!(ctx, x5475, x6, 1);
    let x5477: BytePoly_1 = bigint_nondet_rem!(ctx, x5475, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5476, x6, 2), x5477, 2), x5475, 2),
        8131,
        2,
    )?;
    let x5478: BytePoly_2 = bigint_mul!(x5465, x5477, 2);
    let x5479: BytePoly_3 = bigint_nondet_quot!(ctx, x5478, x6, 3);
    let x5480: BytePoly_1 = bigint_nondet_rem!(ctx, x5478, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5479, x6, 4), x5480, 4), x5478, 4),
        24387,
        2,
    )?;
    let x5481: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5480, x5471, 1), 1), x6, 1);
    let x5482: BytePoly_1 = bigint_nondet_quot!(ctx, x5481, x6, 1);
    let x5483: BytePoly_1 = bigint_nondet_rem!(ctx, x5481, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5482, x6, 2), x5483, 2), x5481, 2),
        8131,
        2,
    )?;
    let x5484: BytePoly_1 = bigint_nondet_rem!(ctx, x5419, x2, 1);
    let x5485: BytePoly_2 = bigint_nondet_quot!(ctx, x5419, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5485, x2, 3), x5484, 3), x5419, 3),
        16259,
        2,
    )?;
    let x5486: BytePoly_1 = bigint_sub!(x3, x5484, 1);
    eqz(ctx, &bigint_mul!(x5484, x5486, 2), 8131, 2)?;
    let x5487: BytePoly_1 = bigint_add!(bigint_sub!(x5477, x5447, 1), x6, 1);
    let x5488: BytePoly_1 = bigint_nondet_inv!(ctx, x5487, x6, 1);
    let x5489: BytePoly_2 = bigint_mul!(x5487, x5488, 2);
    let x5490: BytePoly_3 = bigint_nondet_quot!(ctx, x5489, x6, 3);
    let x5491: BytePoly_1 = bigint_nondet_rem!(ctx, x5489, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5490, x6, 4), x5491, 4), x5489, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5491, x1, 1), 34, 1)?;
    let x5492: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5483, x5449, 1), x6, 1), x5488, 2);
    let x5493: BytePoly_3 = bigint_nondet_quot!(ctx, x5492, x6, 3);
    let x5494: BytePoly_1 = bigint_nondet_rem!(ctx, x5492, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5493, x6, 4), x5494, 4), x5492, 4),
        24387,
        2,
    )?;
    let x5495: BytePoly_2 = bigint_mul!(x5494, x5447, 2);
    let x5496: BytePoly_3 = bigint_nondet_quot!(ctx, x5495, x6, 3);
    let x5497: BytePoly_1 = bigint_nondet_rem!(ctx, x5495, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5496, x6, 4), x5497, 4), x5495, 4),
        24387,
        2,
    )?;
    let x5498: BytePoly_1 = bigint_add!(bigint_sub!(x5449, x5497, 1), x6, 1);
    let x5499: BytePoly_1 = bigint_nondet_quot!(ctx, x5498, x6, 1);
    let x5500: BytePoly_1 = bigint_nondet_rem!(ctx, x5498, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5499, x6, 2), x5500, 2), x5498, 2),
        8131,
        2,
    )?;
    let x5501: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5494, x5494, 2), x5447, 2), x6, 2),
            x5477,
            2
        ),
        x6,
        2
    );
    let x5502: BytePoly_3 = bigint_nondet_quot!(ctx, x5501, x6, 3);
    let x5503: BytePoly_1 = bigint_nondet_rem!(ctx, x5501, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5502, x6, 4), x5503, 4), x5501, 4),
        24387,
        2,
    )?;
    let x5504: BytePoly_2 = bigint_mul!(x5494, x5503, 2);
    let x5505: BytePoly_3 = bigint_nondet_quot!(ctx, x5504, x6, 3);
    let x5506: BytePoly_1 = bigint_nondet_rem!(ctx, x5504, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5505, x6, 4), x5506, 4), x5504, 4),
        24387,
        2,
    )?;
    let x5507: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5506, x5500, 1), 1), x6, 1);
    let x5508: BytePoly_1 = bigint_nondet_quot!(ctx, x5507, x6, 1);
    let x5509: BytePoly_1 = bigint_nondet_rem!(ctx, x5507, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5508, x6, 2), x5509, 2), x5507, 2),
        8131,
        2,
    )?;
    let x5510: BytePoly_2 = bigint_add!(
        bigint_mul!(x5503, x5484, 2),
        bigint_mul!(x5447, x5486, 2),
        2
    );
    let x5511: BytePoly_2 = bigint_add!(
        bigint_mul!(x5509, x5484, 2),
        bigint_mul!(x5449, x5486, 2),
        2
    );
    let x5512: BytePoly_3 = bigint_nondet_quot!(ctx, x5510, x6, 3);
    let x5513: BytePoly_1 = bigint_nondet_rem!(ctx, x5510, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5512, x6, 4), x5513, 4), x5510, 4),
        24387,
        2,
    )?;
    let x5514: BytePoly_3 = bigint_nondet_quot!(ctx, x5511, x6, 3);
    let x5515: BytePoly_1 = bigint_nondet_rem!(ctx, x5511, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5514, x6, 4), x5515, 4), x5511, 4),
        24387,
        2,
    )?;
    let x5516: BytePoly_2 = bigint_mul!(x5477, x5477, 2);
    let x5517: BytePoly_3 = bigint_nondet_quot!(ctx, x5516, x6, 3);
    let x5518: BytePoly_1 = bigint_nondet_rem!(ctx, x5516, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5517, x6, 4), x5518, 4), x5516, 4),
        24387,
        2,
    )?;
    let x5519: BytePoly_2 = bigint_add!(bigint_mul!(x5518, x0, 2), x5, 2);
    let x5520: BytePoly_3 = bigint_nondet_quot!(ctx, x5519, x6, 3);
    let x5521: BytePoly_1 = bigint_nondet_rem!(ctx, x5519, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5520, x6, 4), x5521, 4), x5519, 4),
        24387,
        2,
    )?;
    let x5522: BytePoly_1 = bigint_add!(x5483, x5483, 1);
    let x5523: BytePoly_1 = bigint_nondet_quot!(ctx, x5522, x6, 1);
    let x5524: BytePoly_1 = bigint_nondet_rem!(ctx, x5522, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5523, x6, 2), x5524, 2), x5522, 2),
        8131,
        2,
    )?;
    let x5525: BytePoly_1 = bigint_nondet_inv!(ctx, x5524, x6, 1);
    let x5526: BytePoly_2 = bigint_mul!(x5524, x5525, 2);
    let x5527: BytePoly_3 = bigint_nondet_quot!(ctx, x5526, x6, 3);
    let x5528: BytePoly_1 = bigint_nondet_rem!(ctx, x5526, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5527, x6, 4), x5528, 4), x5526, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5528, x3, 1), 34, 1)?;
    let x5529: BytePoly_2 = bigint_mul!(x5521, x5525, 2);
    let x5530: BytePoly_3 = bigint_nondet_quot!(ctx, x5529, x6, 3);
    let x5531: BytePoly_1 = bigint_nondet_rem!(ctx, x5529, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5530, x6, 4), x5531, 4), x5529, 4),
        24387,
        2,
    )?;
    let x5532: BytePoly_2 = bigint_mul!(x5531, x5477, 2);
    let x5533: BytePoly_3 = bigint_nondet_quot!(ctx, x5532, x6, 3);
    let x5534: BytePoly_1 = bigint_nondet_rem!(ctx, x5532, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5533, x6, 4), x5534, 4), x5532, 4),
        24387,
        2,
    )?;
    let x5535: BytePoly_1 = bigint_add!(bigint_sub!(x5483, x5534, 1), x6, 1);
    let x5536: BytePoly_1 = bigint_nondet_quot!(ctx, x5535, x6, 1);
    let x5537: BytePoly_1 = bigint_nondet_rem!(ctx, x5535, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5536, x6, 2), x5537, 2), x5535, 2),
        8131,
        2,
    )?;
    let x5538: BytePoly_2 = bigint_mul!(x5531, x5531, 2);
    let x5539: BytePoly_3 = bigint_nondet_quot!(ctx, x5538, x6, 3);
    let x5540: BytePoly_1 = bigint_nondet_rem!(ctx, x5538, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5539, x6, 4), x5540, 4), x5538, 4),
        24387,
        2,
    )?;
    let x5541: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5540, x5477, 1), x6, 1), x5477, 1),
        x6,
        1
    );
    let x5542: BytePoly_1 = bigint_nondet_quot!(ctx, x5541, x6, 1);
    let x5543: BytePoly_1 = bigint_nondet_rem!(ctx, x5541, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5542, x6, 2), x5543, 2), x5541, 2),
        8131,
        2,
    )?;
    let x5544: BytePoly_2 = bigint_mul!(x5531, x5543, 2);
    let x5545: BytePoly_3 = bigint_nondet_quot!(ctx, x5544, x6, 3);
    let x5546: BytePoly_1 = bigint_nondet_rem!(ctx, x5544, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5545, x6, 4), x5546, 4), x5544, 4),
        24387,
        2,
    )?;
    let x5547: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5546, x5537, 1), 1), x6, 1);
    let x5548: BytePoly_1 = bigint_nondet_quot!(ctx, x5547, x6, 1);
    let x5549: BytePoly_1 = bigint_nondet_rem!(ctx, x5547, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5548, x6, 2), x5549, 2), x5547, 2),
        8131,
        2,
    )?;
    let x5550: BytePoly_1 = bigint_nondet_rem!(ctx, x5485, x2, 1);
    let x5551: BytePoly_2 = bigint_nondet_quot!(ctx, x5485, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5551, x2, 3), x5550, 3), x5485, 3),
        16259,
        2,
    )?;
    let x5552: BytePoly_1 = bigint_sub!(x3, x5550, 1);
    eqz(ctx, &bigint_mul!(x5550, x5552, 2), 8131, 2)?;
    let x5553: BytePoly_1 = bigint_add!(bigint_sub!(x5543, x5513, 1), x6, 1);
    let x5554: BytePoly_1 = bigint_nondet_inv!(ctx, x5553, x6, 1);
    let x5555: BytePoly_2 = bigint_mul!(x5553, x5554, 2);
    let x5556: BytePoly_3 = bigint_nondet_quot!(ctx, x5555, x6, 3);
    let x5557: BytePoly_1 = bigint_nondet_rem!(ctx, x5555, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5556, x6, 4), x5557, 4), x5555, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5557, x1, 1), 34, 1)?;
    let x5558: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5549, x5515, 1), x6, 1), x5554, 2);
    let x5559: BytePoly_3 = bigint_nondet_quot!(ctx, x5558, x6, 3);
    let x5560: BytePoly_1 = bigint_nondet_rem!(ctx, x5558, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5559, x6, 4), x5560, 4), x5558, 4),
        24387,
        2,
    )?;
    let x5561: BytePoly_2 = bigint_mul!(x5560, x5513, 2);
    let x5562: BytePoly_3 = bigint_nondet_quot!(ctx, x5561, x6, 3);
    let x5563: BytePoly_1 = bigint_nondet_rem!(ctx, x5561, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5562, x6, 4), x5563, 4), x5561, 4),
        24387,
        2,
    )?;
    let x5564: BytePoly_1 = bigint_add!(bigint_sub!(x5515, x5563, 1), x6, 1);
    let x5565: BytePoly_1 = bigint_nondet_quot!(ctx, x5564, x6, 1);
    let x5566: BytePoly_1 = bigint_nondet_rem!(ctx, x5564, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5565, x6, 2), x5566, 2), x5564, 2),
        8131,
        2,
    )?;
    let x5567: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5560, x5560, 2), x5513, 2), x6, 2),
            x5543,
            2
        ),
        x6,
        2
    );
    let x5568: BytePoly_3 = bigint_nondet_quot!(ctx, x5567, x6, 3);
    let x5569: BytePoly_1 = bigint_nondet_rem!(ctx, x5567, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5568, x6, 4), x5569, 4), x5567, 4),
        24387,
        2,
    )?;
    let x5570: BytePoly_2 = bigint_mul!(x5560, x5569, 2);
    let x5571: BytePoly_3 = bigint_nondet_quot!(ctx, x5570, x6, 3);
    let x5572: BytePoly_1 = bigint_nondet_rem!(ctx, x5570, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5571, x6, 4), x5572, 4), x5570, 4),
        24387,
        2,
    )?;
    let x5573: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5572, x5566, 1), 1), x6, 1);
    let x5574: BytePoly_1 = bigint_nondet_quot!(ctx, x5573, x6, 1);
    let x5575: BytePoly_1 = bigint_nondet_rem!(ctx, x5573, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5574, x6, 2), x5575, 2), x5573, 2),
        8131,
        2,
    )?;
    let x5576: BytePoly_2 = bigint_add!(
        bigint_mul!(x5569, x5550, 2),
        bigint_mul!(x5513, x5552, 2),
        2
    );
    let x5577: BytePoly_2 = bigint_add!(
        bigint_mul!(x5575, x5550, 2),
        bigint_mul!(x5515, x5552, 2),
        2
    );
    let x5578: BytePoly_3 = bigint_nondet_quot!(ctx, x5576, x6, 3);
    let x5579: BytePoly_1 = bigint_nondet_rem!(ctx, x5576, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5578, x6, 4), x5579, 4), x5576, 4),
        24387,
        2,
    )?;
    let x5580: BytePoly_3 = bigint_nondet_quot!(ctx, x5577, x6, 3);
    let x5581: BytePoly_1 = bigint_nondet_rem!(ctx, x5577, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5580, x6, 4), x5581, 4), x5577, 4),
        24387,
        2,
    )?;
    let x5582: BytePoly_2 = bigint_mul!(x5543, x5543, 2);
    let x5583: BytePoly_3 = bigint_nondet_quot!(ctx, x5582, x6, 3);
    let x5584: BytePoly_1 = bigint_nondet_rem!(ctx, x5582, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5583, x6, 4), x5584, 4), x5582, 4),
        24387,
        2,
    )?;
    let x5585: BytePoly_2 = bigint_add!(bigint_mul!(x5584, x0, 2), x5, 2);
    let x5586: BytePoly_3 = bigint_nondet_quot!(ctx, x5585, x6, 3);
    let x5587: BytePoly_1 = bigint_nondet_rem!(ctx, x5585, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5586, x6, 4), x5587, 4), x5585, 4),
        24387,
        2,
    )?;
    let x5588: BytePoly_1 = bigint_add!(x5549, x5549, 1);
    let x5589: BytePoly_1 = bigint_nondet_quot!(ctx, x5588, x6, 1);
    let x5590: BytePoly_1 = bigint_nondet_rem!(ctx, x5588, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5589, x6, 2), x5590, 2), x5588, 2),
        8131,
        2,
    )?;
    let x5591: BytePoly_1 = bigint_nondet_inv!(ctx, x5590, x6, 1);
    let x5592: BytePoly_2 = bigint_mul!(x5590, x5591, 2);
    let x5593: BytePoly_3 = bigint_nondet_quot!(ctx, x5592, x6, 3);
    let x5594: BytePoly_1 = bigint_nondet_rem!(ctx, x5592, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5593, x6, 4), x5594, 4), x5592, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5594, x3, 1), 34, 1)?;
    let x5595: BytePoly_2 = bigint_mul!(x5587, x5591, 2);
    let x5596: BytePoly_3 = bigint_nondet_quot!(ctx, x5595, x6, 3);
    let x5597: BytePoly_1 = bigint_nondet_rem!(ctx, x5595, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5596, x6, 4), x5597, 4), x5595, 4),
        24387,
        2,
    )?;
    let x5598: BytePoly_2 = bigint_mul!(x5597, x5543, 2);
    let x5599: BytePoly_3 = bigint_nondet_quot!(ctx, x5598, x6, 3);
    let x5600: BytePoly_1 = bigint_nondet_rem!(ctx, x5598, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5599, x6, 4), x5600, 4), x5598, 4),
        24387,
        2,
    )?;
    let x5601: BytePoly_1 = bigint_add!(bigint_sub!(x5549, x5600, 1), x6, 1);
    let x5602: BytePoly_1 = bigint_nondet_quot!(ctx, x5601, x6, 1);
    let x5603: BytePoly_1 = bigint_nondet_rem!(ctx, x5601, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5602, x6, 2), x5603, 2), x5601, 2),
        8131,
        2,
    )?;
    let x5604: BytePoly_2 = bigint_mul!(x5597, x5597, 2);
    let x5605: BytePoly_3 = bigint_nondet_quot!(ctx, x5604, x6, 3);
    let x5606: BytePoly_1 = bigint_nondet_rem!(ctx, x5604, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5605, x6, 4), x5606, 4), x5604, 4),
        24387,
        2,
    )?;
    let x5607: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5606, x5543, 1), x6, 1), x5543, 1),
        x6,
        1
    );
    let x5608: BytePoly_1 = bigint_nondet_quot!(ctx, x5607, x6, 1);
    let x5609: BytePoly_1 = bigint_nondet_rem!(ctx, x5607, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5608, x6, 2), x5609, 2), x5607, 2),
        8131,
        2,
    )?;
    let x5610: BytePoly_2 = bigint_mul!(x5597, x5609, 2);
    let x5611: BytePoly_3 = bigint_nondet_quot!(ctx, x5610, x6, 3);
    let x5612: BytePoly_1 = bigint_nondet_rem!(ctx, x5610, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5611, x6, 4), x5612, 4), x5610, 4),
        24387,
        2,
    )?;
    let x5613: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5612, x5603, 1), 1), x6, 1);
    let x5614: BytePoly_1 = bigint_nondet_quot!(ctx, x5613, x6, 1);
    let x5615: BytePoly_1 = bigint_nondet_rem!(ctx, x5613, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5614, x6, 2), x5615, 2), x5613, 2),
        8131,
        2,
    )?;
    let x5616: BytePoly_1 = bigint_nondet_rem!(ctx, x5551, x2, 1);
    let x5617: BytePoly_2 = bigint_nondet_quot!(ctx, x5551, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5617, x2, 3), x5616, 3), x5551, 3),
        16259,
        2,
    )?;
    let x5618: BytePoly_1 = bigint_sub!(x3, x5616, 1);
    eqz(ctx, &bigint_mul!(x5616, x5618, 2), 8131, 2)?;
    let x5619: BytePoly_1 = bigint_add!(bigint_sub!(x5609, x5579, 1), x6, 1);
    let x5620: BytePoly_1 = bigint_nondet_inv!(ctx, x5619, x6, 1);
    let x5621: BytePoly_2 = bigint_mul!(x5619, x5620, 2);
    let x5622: BytePoly_3 = bigint_nondet_quot!(ctx, x5621, x6, 3);
    let x5623: BytePoly_1 = bigint_nondet_rem!(ctx, x5621, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5622, x6, 4), x5623, 4), x5621, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5623, x1, 1), 34, 1)?;
    let x5624: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5615, x5581, 1), x6, 1), x5620, 2);
    let x5625: BytePoly_3 = bigint_nondet_quot!(ctx, x5624, x6, 3);
    let x5626: BytePoly_1 = bigint_nondet_rem!(ctx, x5624, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5625, x6, 4), x5626, 4), x5624, 4),
        24387,
        2,
    )?;
    let x5627: BytePoly_2 = bigint_mul!(x5626, x5579, 2);
    let x5628: BytePoly_3 = bigint_nondet_quot!(ctx, x5627, x6, 3);
    let x5629: BytePoly_1 = bigint_nondet_rem!(ctx, x5627, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5628, x6, 4), x5629, 4), x5627, 4),
        24387,
        2,
    )?;
    let x5630: BytePoly_1 = bigint_add!(bigint_sub!(x5581, x5629, 1), x6, 1);
    let x5631: BytePoly_1 = bigint_nondet_quot!(ctx, x5630, x6, 1);
    let x5632: BytePoly_1 = bigint_nondet_rem!(ctx, x5630, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5631, x6, 2), x5632, 2), x5630, 2),
        8131,
        2,
    )?;
    let x5633: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5626, x5626, 2), x5579, 2), x6, 2),
            x5609,
            2
        ),
        x6,
        2
    );
    let x5634: BytePoly_3 = bigint_nondet_quot!(ctx, x5633, x6, 3);
    let x5635: BytePoly_1 = bigint_nondet_rem!(ctx, x5633, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5634, x6, 4), x5635, 4), x5633, 4),
        24387,
        2,
    )?;
    let x5636: BytePoly_2 = bigint_mul!(x5626, x5635, 2);
    let x5637: BytePoly_3 = bigint_nondet_quot!(ctx, x5636, x6, 3);
    let x5638: BytePoly_1 = bigint_nondet_rem!(ctx, x5636, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5637, x6, 4), x5638, 4), x5636, 4),
        24387,
        2,
    )?;
    let x5639: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5638, x5632, 1), 1), x6, 1);
    let x5640: BytePoly_1 = bigint_nondet_quot!(ctx, x5639, x6, 1);
    let x5641: BytePoly_1 = bigint_nondet_rem!(ctx, x5639, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5640, x6, 2), x5641, 2), x5639, 2),
        8131,
        2,
    )?;
    let x5642: BytePoly_2 = bigint_add!(
        bigint_mul!(x5635, x5616, 2),
        bigint_mul!(x5579, x5618, 2),
        2
    );
    let x5643: BytePoly_2 = bigint_add!(
        bigint_mul!(x5641, x5616, 2),
        bigint_mul!(x5581, x5618, 2),
        2
    );
    let x5644: BytePoly_3 = bigint_nondet_quot!(ctx, x5642, x6, 3);
    let x5645: BytePoly_1 = bigint_nondet_rem!(ctx, x5642, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5644, x6, 4), x5645, 4), x5642, 4),
        24387,
        2,
    )?;
    let x5646: BytePoly_3 = bigint_nondet_quot!(ctx, x5643, x6, 3);
    let x5647: BytePoly_1 = bigint_nondet_rem!(ctx, x5643, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5646, x6, 4), x5647, 4), x5643, 4),
        24387,
        2,
    )?;
    let x5648: BytePoly_2 = bigint_mul!(x5609, x5609, 2);
    let x5649: BytePoly_3 = bigint_nondet_quot!(ctx, x5648, x6, 3);
    let x5650: BytePoly_1 = bigint_nondet_rem!(ctx, x5648, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5649, x6, 4), x5650, 4), x5648, 4),
        24387,
        2,
    )?;
    let x5651: BytePoly_2 = bigint_add!(bigint_mul!(x5650, x0, 2), x5, 2);
    let x5652: BytePoly_3 = bigint_nondet_quot!(ctx, x5651, x6, 3);
    let x5653: BytePoly_1 = bigint_nondet_rem!(ctx, x5651, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5652, x6, 4), x5653, 4), x5651, 4),
        24387,
        2,
    )?;
    let x5654: BytePoly_1 = bigint_add!(x5615, x5615, 1);
    let x5655: BytePoly_1 = bigint_nondet_quot!(ctx, x5654, x6, 1);
    let x5656: BytePoly_1 = bigint_nondet_rem!(ctx, x5654, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5655, x6, 2), x5656, 2), x5654, 2),
        8131,
        2,
    )?;
    let x5657: BytePoly_1 = bigint_nondet_inv!(ctx, x5656, x6, 1);
    let x5658: BytePoly_2 = bigint_mul!(x5656, x5657, 2);
    let x5659: BytePoly_3 = bigint_nondet_quot!(ctx, x5658, x6, 3);
    let x5660: BytePoly_1 = bigint_nondet_rem!(ctx, x5658, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5659, x6, 4), x5660, 4), x5658, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5660, x3, 1), 34, 1)?;
    let x5661: BytePoly_2 = bigint_mul!(x5653, x5657, 2);
    let x5662: BytePoly_3 = bigint_nondet_quot!(ctx, x5661, x6, 3);
    let x5663: BytePoly_1 = bigint_nondet_rem!(ctx, x5661, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5662, x6, 4), x5663, 4), x5661, 4),
        24387,
        2,
    )?;
    let x5664: BytePoly_2 = bigint_mul!(x5663, x5609, 2);
    let x5665: BytePoly_3 = bigint_nondet_quot!(ctx, x5664, x6, 3);
    let x5666: BytePoly_1 = bigint_nondet_rem!(ctx, x5664, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5665, x6, 4), x5666, 4), x5664, 4),
        24387,
        2,
    )?;
    let x5667: BytePoly_1 = bigint_add!(bigint_sub!(x5615, x5666, 1), x6, 1);
    let x5668: BytePoly_1 = bigint_nondet_quot!(ctx, x5667, x6, 1);
    let x5669: BytePoly_1 = bigint_nondet_rem!(ctx, x5667, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5668, x6, 2), x5669, 2), x5667, 2),
        8131,
        2,
    )?;
    let x5670: BytePoly_2 = bigint_mul!(x5663, x5663, 2);
    let x5671: BytePoly_3 = bigint_nondet_quot!(ctx, x5670, x6, 3);
    let x5672: BytePoly_1 = bigint_nondet_rem!(ctx, x5670, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5671, x6, 4), x5672, 4), x5670, 4),
        24387,
        2,
    )?;
    let x5673: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5672, x5609, 1), x6, 1), x5609, 1),
        x6,
        1
    );
    let x5674: BytePoly_1 = bigint_nondet_quot!(ctx, x5673, x6, 1);
    let x5675: BytePoly_1 = bigint_nondet_rem!(ctx, x5673, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5674, x6, 2), x5675, 2), x5673, 2),
        8131,
        2,
    )?;
    let x5676: BytePoly_2 = bigint_mul!(x5663, x5675, 2);
    let x5677: BytePoly_3 = bigint_nondet_quot!(ctx, x5676, x6, 3);
    let x5678: BytePoly_1 = bigint_nondet_rem!(ctx, x5676, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5677, x6, 4), x5678, 4), x5676, 4),
        24387,
        2,
    )?;
    let x5679: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5678, x5669, 1), 1), x6, 1);
    let x5680: BytePoly_1 = bigint_nondet_quot!(ctx, x5679, x6, 1);
    let x5681: BytePoly_1 = bigint_nondet_rem!(ctx, x5679, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5680, x6, 2), x5681, 2), x5679, 2),
        8131,
        2,
    )?;
    let x5682: BytePoly_1 = bigint_nondet_rem!(ctx, x5617, x2, 1);
    let x5683: BytePoly_2 = bigint_nondet_quot!(ctx, x5617, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5683, x2, 3), x5682, 3), x5617, 3),
        16259,
        2,
    )?;
    let x5684: BytePoly_1 = bigint_sub!(x3, x5682, 1);
    eqz(ctx, &bigint_mul!(x5682, x5684, 2), 8131, 2)?;
    let x5685: BytePoly_1 = bigint_add!(bigint_sub!(x5675, x5645, 1), x6, 1);
    let x5686: BytePoly_1 = bigint_nondet_inv!(ctx, x5685, x6, 1);
    let x5687: BytePoly_2 = bigint_mul!(x5685, x5686, 2);
    let x5688: BytePoly_3 = bigint_nondet_quot!(ctx, x5687, x6, 3);
    let x5689: BytePoly_1 = bigint_nondet_rem!(ctx, x5687, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5688, x6, 4), x5689, 4), x5687, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5689, x1, 1), 34, 1)?;
    let x5690: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5681, x5647, 1), x6, 1), x5686, 2);
    let x5691: BytePoly_3 = bigint_nondet_quot!(ctx, x5690, x6, 3);
    let x5692: BytePoly_1 = bigint_nondet_rem!(ctx, x5690, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5691, x6, 4), x5692, 4), x5690, 4),
        24387,
        2,
    )?;
    let x5693: BytePoly_2 = bigint_mul!(x5692, x5645, 2);
    let x5694: BytePoly_3 = bigint_nondet_quot!(ctx, x5693, x6, 3);
    let x5695: BytePoly_1 = bigint_nondet_rem!(ctx, x5693, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5694, x6, 4), x5695, 4), x5693, 4),
        24387,
        2,
    )?;
    let x5696: BytePoly_1 = bigint_add!(bigint_sub!(x5647, x5695, 1), x6, 1);
    let x5697: BytePoly_1 = bigint_nondet_quot!(ctx, x5696, x6, 1);
    let x5698: BytePoly_1 = bigint_nondet_rem!(ctx, x5696, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5697, x6, 2), x5698, 2), x5696, 2),
        8131,
        2,
    )?;
    let x5699: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5692, x5692, 2), x5645, 2), x6, 2),
            x5675,
            2
        ),
        x6,
        2
    );
    let x5700: BytePoly_3 = bigint_nondet_quot!(ctx, x5699, x6, 3);
    let x5701: BytePoly_1 = bigint_nondet_rem!(ctx, x5699, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5700, x6, 4), x5701, 4), x5699, 4),
        24387,
        2,
    )?;
    let x5702: BytePoly_2 = bigint_mul!(x5692, x5701, 2);
    let x5703: BytePoly_3 = bigint_nondet_quot!(ctx, x5702, x6, 3);
    let x5704: BytePoly_1 = bigint_nondet_rem!(ctx, x5702, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5703, x6, 4), x5704, 4), x5702, 4),
        24387,
        2,
    )?;
    let x5705: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5704, x5698, 1), 1), x6, 1);
    let x5706: BytePoly_1 = bigint_nondet_quot!(ctx, x5705, x6, 1);
    let x5707: BytePoly_1 = bigint_nondet_rem!(ctx, x5705, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5706, x6, 2), x5707, 2), x5705, 2),
        8131,
        2,
    )?;
    let x5708: BytePoly_2 = bigint_add!(
        bigint_mul!(x5701, x5682, 2),
        bigint_mul!(x5645, x5684, 2),
        2
    );
    let x5709: BytePoly_2 = bigint_add!(
        bigint_mul!(x5707, x5682, 2),
        bigint_mul!(x5647, x5684, 2),
        2
    );
    let x5710: BytePoly_3 = bigint_nondet_quot!(ctx, x5708, x6, 3);
    let x5711: BytePoly_1 = bigint_nondet_rem!(ctx, x5708, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5710, x6, 4), x5711, 4), x5708, 4),
        24387,
        2,
    )?;
    let x5712: BytePoly_3 = bigint_nondet_quot!(ctx, x5709, x6, 3);
    let x5713: BytePoly_1 = bigint_nondet_rem!(ctx, x5709, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5712, x6, 4), x5713, 4), x5709, 4),
        24387,
        2,
    )?;
    let x5714: BytePoly_2 = bigint_mul!(x5675, x5675, 2);
    let x5715: BytePoly_3 = bigint_nondet_quot!(ctx, x5714, x6, 3);
    let x5716: BytePoly_1 = bigint_nondet_rem!(ctx, x5714, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5715, x6, 4), x5716, 4), x5714, 4),
        24387,
        2,
    )?;
    let x5717: BytePoly_2 = bigint_add!(bigint_mul!(x5716, x0, 2), x5, 2);
    let x5718: BytePoly_3 = bigint_nondet_quot!(ctx, x5717, x6, 3);
    let x5719: BytePoly_1 = bigint_nondet_rem!(ctx, x5717, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5718, x6, 4), x5719, 4), x5717, 4),
        24387,
        2,
    )?;
    let x5720: BytePoly_1 = bigint_add!(x5681, x5681, 1);
    let x5721: BytePoly_1 = bigint_nondet_quot!(ctx, x5720, x6, 1);
    let x5722: BytePoly_1 = bigint_nondet_rem!(ctx, x5720, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5721, x6, 2), x5722, 2), x5720, 2),
        8131,
        2,
    )?;
    let x5723: BytePoly_1 = bigint_nondet_inv!(ctx, x5722, x6, 1);
    let x5724: BytePoly_2 = bigint_mul!(x5722, x5723, 2);
    let x5725: BytePoly_3 = bigint_nondet_quot!(ctx, x5724, x6, 3);
    let x5726: BytePoly_1 = bigint_nondet_rem!(ctx, x5724, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5725, x6, 4), x5726, 4), x5724, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5726, x3, 1), 34, 1)?;
    let x5727: BytePoly_2 = bigint_mul!(x5719, x5723, 2);
    let x5728: BytePoly_3 = bigint_nondet_quot!(ctx, x5727, x6, 3);
    let x5729: BytePoly_1 = bigint_nondet_rem!(ctx, x5727, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5728, x6, 4), x5729, 4), x5727, 4),
        24387,
        2,
    )?;
    let x5730: BytePoly_2 = bigint_mul!(x5729, x5675, 2);
    let x5731: BytePoly_3 = bigint_nondet_quot!(ctx, x5730, x6, 3);
    let x5732: BytePoly_1 = bigint_nondet_rem!(ctx, x5730, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5731, x6, 4), x5732, 4), x5730, 4),
        24387,
        2,
    )?;
    let x5733: BytePoly_1 = bigint_add!(bigint_sub!(x5681, x5732, 1), x6, 1);
    let x5734: BytePoly_1 = bigint_nondet_quot!(ctx, x5733, x6, 1);
    let x5735: BytePoly_1 = bigint_nondet_rem!(ctx, x5733, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5734, x6, 2), x5735, 2), x5733, 2),
        8131,
        2,
    )?;
    let x5736: BytePoly_2 = bigint_mul!(x5729, x5729, 2);
    let x5737: BytePoly_3 = bigint_nondet_quot!(ctx, x5736, x6, 3);
    let x5738: BytePoly_1 = bigint_nondet_rem!(ctx, x5736, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5737, x6, 4), x5738, 4), x5736, 4),
        24387,
        2,
    )?;
    let x5739: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5738, x5675, 1), x6, 1), x5675, 1),
        x6,
        1
    );
    let x5740: BytePoly_1 = bigint_nondet_quot!(ctx, x5739, x6, 1);
    let x5741: BytePoly_1 = bigint_nondet_rem!(ctx, x5739, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5740, x6, 2), x5741, 2), x5739, 2),
        8131,
        2,
    )?;
    let x5742: BytePoly_2 = bigint_mul!(x5729, x5741, 2);
    let x5743: BytePoly_3 = bigint_nondet_quot!(ctx, x5742, x6, 3);
    let x5744: BytePoly_1 = bigint_nondet_rem!(ctx, x5742, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5743, x6, 4), x5744, 4), x5742, 4),
        24387,
        2,
    )?;
    let x5745: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5744, x5735, 1), 1), x6, 1);
    let x5746: BytePoly_1 = bigint_nondet_quot!(ctx, x5745, x6, 1);
    let x5747: BytePoly_1 = bigint_nondet_rem!(ctx, x5745, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5746, x6, 2), x5747, 2), x5745, 2),
        8131,
        2,
    )?;
    let x5748: BytePoly_1 = bigint_nondet_rem!(ctx, x5683, x2, 1);
    let x5749: BytePoly_2 = bigint_nondet_quot!(ctx, x5683, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5749, x2, 3), x5748, 3), x5683, 3),
        16259,
        2,
    )?;
    let x5750: BytePoly_1 = bigint_sub!(x3, x5748, 1);
    eqz(ctx, &bigint_mul!(x5748, x5750, 2), 8131, 2)?;
    let x5751: BytePoly_1 = bigint_add!(bigint_sub!(x5741, x5711, 1), x6, 1);
    let x5752: BytePoly_1 = bigint_nondet_inv!(ctx, x5751, x6, 1);
    let x5753: BytePoly_2 = bigint_mul!(x5751, x5752, 2);
    let x5754: BytePoly_3 = bigint_nondet_quot!(ctx, x5753, x6, 3);
    let x5755: BytePoly_1 = bigint_nondet_rem!(ctx, x5753, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5754, x6, 4), x5755, 4), x5753, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5755, x1, 1), 34, 1)?;
    let x5756: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5747, x5713, 1), x6, 1), x5752, 2);
    let x5757: BytePoly_3 = bigint_nondet_quot!(ctx, x5756, x6, 3);
    let x5758: BytePoly_1 = bigint_nondet_rem!(ctx, x5756, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5757, x6, 4), x5758, 4), x5756, 4),
        24387,
        2,
    )?;
    let x5759: BytePoly_2 = bigint_mul!(x5758, x5711, 2);
    let x5760: BytePoly_3 = bigint_nondet_quot!(ctx, x5759, x6, 3);
    let x5761: BytePoly_1 = bigint_nondet_rem!(ctx, x5759, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5760, x6, 4), x5761, 4), x5759, 4),
        24387,
        2,
    )?;
    let x5762: BytePoly_1 = bigint_add!(bigint_sub!(x5713, x5761, 1), x6, 1);
    let x5763: BytePoly_1 = bigint_nondet_quot!(ctx, x5762, x6, 1);
    let x5764: BytePoly_1 = bigint_nondet_rem!(ctx, x5762, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5763, x6, 2), x5764, 2), x5762, 2),
        8131,
        2,
    )?;
    let x5765: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5758, x5758, 2), x5711, 2), x6, 2),
            x5741,
            2
        ),
        x6,
        2
    );
    let x5766: BytePoly_3 = bigint_nondet_quot!(ctx, x5765, x6, 3);
    let x5767: BytePoly_1 = bigint_nondet_rem!(ctx, x5765, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5766, x6, 4), x5767, 4), x5765, 4),
        24387,
        2,
    )?;
    let x5768: BytePoly_2 = bigint_mul!(x5758, x5767, 2);
    let x5769: BytePoly_3 = bigint_nondet_quot!(ctx, x5768, x6, 3);
    let x5770: BytePoly_1 = bigint_nondet_rem!(ctx, x5768, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5769, x6, 4), x5770, 4), x5768, 4),
        24387,
        2,
    )?;
    let x5771: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5770, x5764, 1), 1), x6, 1);
    let x5772: BytePoly_1 = bigint_nondet_quot!(ctx, x5771, x6, 1);
    let x5773: BytePoly_1 = bigint_nondet_rem!(ctx, x5771, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5772, x6, 2), x5773, 2), x5771, 2),
        8131,
        2,
    )?;
    let x5774: BytePoly_2 = bigint_add!(
        bigint_mul!(x5767, x5748, 2),
        bigint_mul!(x5711, x5750, 2),
        2
    );
    let x5775: BytePoly_2 = bigint_add!(
        bigint_mul!(x5773, x5748, 2),
        bigint_mul!(x5713, x5750, 2),
        2
    );
    let x5776: BytePoly_3 = bigint_nondet_quot!(ctx, x5774, x6, 3);
    let x5777: BytePoly_1 = bigint_nondet_rem!(ctx, x5774, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5776, x6, 4), x5777, 4), x5774, 4),
        24387,
        2,
    )?;
    let x5778: BytePoly_3 = bigint_nondet_quot!(ctx, x5775, x6, 3);
    let x5779: BytePoly_1 = bigint_nondet_rem!(ctx, x5775, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5778, x6, 4), x5779, 4), x5775, 4),
        24387,
        2,
    )?;
    let x5780: BytePoly_2 = bigint_mul!(x5741, x5741, 2);
    let x5781: BytePoly_3 = bigint_nondet_quot!(ctx, x5780, x6, 3);
    let x5782: BytePoly_1 = bigint_nondet_rem!(ctx, x5780, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5781, x6, 4), x5782, 4), x5780, 4),
        24387,
        2,
    )?;
    let x5783: BytePoly_2 = bigint_add!(bigint_mul!(x5782, x0, 2), x5, 2);
    let x5784: BytePoly_3 = bigint_nondet_quot!(ctx, x5783, x6, 3);
    let x5785: BytePoly_1 = bigint_nondet_rem!(ctx, x5783, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5784, x6, 4), x5785, 4), x5783, 4),
        24387,
        2,
    )?;
    let x5786: BytePoly_1 = bigint_add!(x5747, x5747, 1);
    let x5787: BytePoly_1 = bigint_nondet_quot!(ctx, x5786, x6, 1);
    let x5788: BytePoly_1 = bigint_nondet_rem!(ctx, x5786, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5787, x6, 2), x5788, 2), x5786, 2),
        8131,
        2,
    )?;
    let x5789: BytePoly_1 = bigint_nondet_inv!(ctx, x5788, x6, 1);
    let x5790: BytePoly_2 = bigint_mul!(x5788, x5789, 2);
    let x5791: BytePoly_3 = bigint_nondet_quot!(ctx, x5790, x6, 3);
    let x5792: BytePoly_1 = bigint_nondet_rem!(ctx, x5790, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5791, x6, 4), x5792, 4), x5790, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5792, x3, 1), 34, 1)?;
    let x5793: BytePoly_2 = bigint_mul!(x5785, x5789, 2);
    let x5794: BytePoly_3 = bigint_nondet_quot!(ctx, x5793, x6, 3);
    let x5795: BytePoly_1 = bigint_nondet_rem!(ctx, x5793, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5794, x6, 4), x5795, 4), x5793, 4),
        24387,
        2,
    )?;
    let x5796: BytePoly_2 = bigint_mul!(x5795, x5741, 2);
    let x5797: BytePoly_3 = bigint_nondet_quot!(ctx, x5796, x6, 3);
    let x5798: BytePoly_1 = bigint_nondet_rem!(ctx, x5796, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5797, x6, 4), x5798, 4), x5796, 4),
        24387,
        2,
    )?;
    let x5799: BytePoly_1 = bigint_add!(bigint_sub!(x5747, x5798, 1), x6, 1);
    let x5800: BytePoly_1 = bigint_nondet_quot!(ctx, x5799, x6, 1);
    let x5801: BytePoly_1 = bigint_nondet_rem!(ctx, x5799, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5800, x6, 2), x5801, 2), x5799, 2),
        8131,
        2,
    )?;
    let x5802: BytePoly_2 = bigint_mul!(x5795, x5795, 2);
    let x5803: BytePoly_3 = bigint_nondet_quot!(ctx, x5802, x6, 3);
    let x5804: BytePoly_1 = bigint_nondet_rem!(ctx, x5802, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5803, x6, 4), x5804, 4), x5802, 4),
        24387,
        2,
    )?;
    let x5805: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5804, x5741, 1), x6, 1), x5741, 1),
        x6,
        1
    );
    let x5806: BytePoly_1 = bigint_nondet_quot!(ctx, x5805, x6, 1);
    let x5807: BytePoly_1 = bigint_nondet_rem!(ctx, x5805, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5806, x6, 2), x5807, 2), x5805, 2),
        8131,
        2,
    )?;
    let x5808: BytePoly_2 = bigint_mul!(x5795, x5807, 2);
    let x5809: BytePoly_3 = bigint_nondet_quot!(ctx, x5808, x6, 3);
    let x5810: BytePoly_1 = bigint_nondet_rem!(ctx, x5808, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5809, x6, 4), x5810, 4), x5808, 4),
        24387,
        2,
    )?;
    let x5811: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5810, x5801, 1), 1), x6, 1);
    let x5812: BytePoly_1 = bigint_nondet_quot!(ctx, x5811, x6, 1);
    let x5813: BytePoly_1 = bigint_nondet_rem!(ctx, x5811, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5812, x6, 2), x5813, 2), x5811, 2),
        8131,
        2,
    )?;
    let x5814: BytePoly_1 = bigint_nondet_rem!(ctx, x5749, x2, 1);
    let x5815: BytePoly_2 = bigint_nondet_quot!(ctx, x5749, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5815, x2, 3), x5814, 3), x5749, 3),
        16259,
        2,
    )?;
    let x5816: BytePoly_1 = bigint_sub!(x3, x5814, 1);
    eqz(ctx, &bigint_mul!(x5814, x5816, 2), 8131, 2)?;
    let x5817: BytePoly_1 = bigint_add!(bigint_sub!(x5807, x5777, 1), x6, 1);
    let x5818: BytePoly_1 = bigint_nondet_inv!(ctx, x5817, x6, 1);
    let x5819: BytePoly_2 = bigint_mul!(x5817, x5818, 2);
    let x5820: BytePoly_3 = bigint_nondet_quot!(ctx, x5819, x6, 3);
    let x5821: BytePoly_1 = bigint_nondet_rem!(ctx, x5819, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5820, x6, 4), x5821, 4), x5819, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5821, x1, 1), 34, 1)?;
    let x5822: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5813, x5779, 1), x6, 1), x5818, 2);
    let x5823: BytePoly_3 = bigint_nondet_quot!(ctx, x5822, x6, 3);
    let x5824: BytePoly_1 = bigint_nondet_rem!(ctx, x5822, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5823, x6, 4), x5824, 4), x5822, 4),
        24387,
        2,
    )?;
    let x5825: BytePoly_2 = bigint_mul!(x5824, x5777, 2);
    let x5826: BytePoly_3 = bigint_nondet_quot!(ctx, x5825, x6, 3);
    let x5827: BytePoly_1 = bigint_nondet_rem!(ctx, x5825, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5826, x6, 4), x5827, 4), x5825, 4),
        24387,
        2,
    )?;
    let x5828: BytePoly_1 = bigint_add!(bigint_sub!(x5779, x5827, 1), x6, 1);
    let x5829: BytePoly_1 = bigint_nondet_quot!(ctx, x5828, x6, 1);
    let x5830: BytePoly_1 = bigint_nondet_rem!(ctx, x5828, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5829, x6, 2), x5830, 2), x5828, 2),
        8131,
        2,
    )?;
    let x5831: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5824, x5824, 2), x5777, 2), x6, 2),
            x5807,
            2
        ),
        x6,
        2
    );
    let x5832: BytePoly_3 = bigint_nondet_quot!(ctx, x5831, x6, 3);
    let x5833: BytePoly_1 = bigint_nondet_rem!(ctx, x5831, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5832, x6, 4), x5833, 4), x5831, 4),
        24387,
        2,
    )?;
    let x5834: BytePoly_2 = bigint_mul!(x5824, x5833, 2);
    let x5835: BytePoly_3 = bigint_nondet_quot!(ctx, x5834, x6, 3);
    let x5836: BytePoly_1 = bigint_nondet_rem!(ctx, x5834, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5835, x6, 4), x5836, 4), x5834, 4),
        24387,
        2,
    )?;
    let x5837: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5836, x5830, 1), 1), x6, 1);
    let x5838: BytePoly_1 = bigint_nondet_quot!(ctx, x5837, x6, 1);
    let x5839: BytePoly_1 = bigint_nondet_rem!(ctx, x5837, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5838, x6, 2), x5839, 2), x5837, 2),
        8131,
        2,
    )?;
    let x5840: BytePoly_2 = bigint_add!(
        bigint_mul!(x5833, x5814, 2),
        bigint_mul!(x5777, x5816, 2),
        2
    );
    let x5841: BytePoly_2 = bigint_add!(
        bigint_mul!(x5839, x5814, 2),
        bigint_mul!(x5779, x5816, 2),
        2
    );
    let x5842: BytePoly_3 = bigint_nondet_quot!(ctx, x5840, x6, 3);
    let x5843: BytePoly_1 = bigint_nondet_rem!(ctx, x5840, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5842, x6, 4), x5843, 4), x5840, 4),
        24387,
        2,
    )?;
    let x5844: BytePoly_3 = bigint_nondet_quot!(ctx, x5841, x6, 3);
    let x5845: BytePoly_1 = bigint_nondet_rem!(ctx, x5841, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5844, x6, 4), x5845, 4), x5841, 4),
        24387,
        2,
    )?;
    let x5846: BytePoly_2 = bigint_mul!(x5807, x5807, 2);
    let x5847: BytePoly_3 = bigint_nondet_quot!(ctx, x5846, x6, 3);
    let x5848: BytePoly_1 = bigint_nondet_rem!(ctx, x5846, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5847, x6, 4), x5848, 4), x5846, 4),
        24387,
        2,
    )?;
    let x5849: BytePoly_2 = bigint_add!(bigint_mul!(x5848, x0, 2), x5, 2);
    let x5850: BytePoly_3 = bigint_nondet_quot!(ctx, x5849, x6, 3);
    let x5851: BytePoly_1 = bigint_nondet_rem!(ctx, x5849, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5850, x6, 4), x5851, 4), x5849, 4),
        24387,
        2,
    )?;
    let x5852: BytePoly_1 = bigint_add!(x5813, x5813, 1);
    let x5853: BytePoly_1 = bigint_nondet_quot!(ctx, x5852, x6, 1);
    let x5854: BytePoly_1 = bigint_nondet_rem!(ctx, x5852, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5853, x6, 2), x5854, 2), x5852, 2),
        8131,
        2,
    )?;
    let x5855: BytePoly_1 = bigint_nondet_inv!(ctx, x5854, x6, 1);
    let x5856: BytePoly_2 = bigint_mul!(x5854, x5855, 2);
    let x5857: BytePoly_3 = bigint_nondet_quot!(ctx, x5856, x6, 3);
    let x5858: BytePoly_1 = bigint_nondet_rem!(ctx, x5856, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5857, x6, 4), x5858, 4), x5856, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5858, x3, 1), 34, 1)?;
    let x5859: BytePoly_2 = bigint_mul!(x5851, x5855, 2);
    let x5860: BytePoly_3 = bigint_nondet_quot!(ctx, x5859, x6, 3);
    let x5861: BytePoly_1 = bigint_nondet_rem!(ctx, x5859, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5860, x6, 4), x5861, 4), x5859, 4),
        24387,
        2,
    )?;
    let x5862: BytePoly_2 = bigint_mul!(x5861, x5807, 2);
    let x5863: BytePoly_3 = bigint_nondet_quot!(ctx, x5862, x6, 3);
    let x5864: BytePoly_1 = bigint_nondet_rem!(ctx, x5862, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5863, x6, 4), x5864, 4), x5862, 4),
        24387,
        2,
    )?;
    let x5865: BytePoly_1 = bigint_add!(bigint_sub!(x5813, x5864, 1), x6, 1);
    let x5866: BytePoly_1 = bigint_nondet_quot!(ctx, x5865, x6, 1);
    let x5867: BytePoly_1 = bigint_nondet_rem!(ctx, x5865, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5866, x6, 2), x5867, 2), x5865, 2),
        8131,
        2,
    )?;
    let x5868: BytePoly_2 = bigint_mul!(x5861, x5861, 2);
    let x5869: BytePoly_3 = bigint_nondet_quot!(ctx, x5868, x6, 3);
    let x5870: BytePoly_1 = bigint_nondet_rem!(ctx, x5868, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5869, x6, 4), x5870, 4), x5868, 4),
        24387,
        2,
    )?;
    let x5871: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5870, x5807, 1), x6, 1), x5807, 1),
        x6,
        1
    );
    let x5872: BytePoly_1 = bigint_nondet_quot!(ctx, x5871, x6, 1);
    let x5873: BytePoly_1 = bigint_nondet_rem!(ctx, x5871, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5872, x6, 2), x5873, 2), x5871, 2),
        8131,
        2,
    )?;
    let x5874: BytePoly_2 = bigint_mul!(x5861, x5873, 2);
    let x5875: BytePoly_3 = bigint_nondet_quot!(ctx, x5874, x6, 3);
    let x5876: BytePoly_1 = bigint_nondet_rem!(ctx, x5874, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5875, x6, 4), x5876, 4), x5874, 4),
        24387,
        2,
    )?;
    let x5877: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5876, x5867, 1), 1), x6, 1);
    let x5878: BytePoly_1 = bigint_nondet_quot!(ctx, x5877, x6, 1);
    let x5879: BytePoly_1 = bigint_nondet_rem!(ctx, x5877, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5878, x6, 2), x5879, 2), x5877, 2),
        8131,
        2,
    )?;
    let x5880: BytePoly_1 = bigint_nondet_rem!(ctx, x5815, x2, 1);
    let x5881: BytePoly_2 = bigint_nondet_quot!(ctx, x5815, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5881, x2, 3), x5880, 3), x5815, 3),
        16259,
        2,
    )?;
    let x5882: BytePoly_1 = bigint_sub!(x3, x5880, 1);
    eqz(ctx, &bigint_mul!(x5880, x5882, 2), 8131, 2)?;
    let x5883: BytePoly_1 = bigint_add!(bigint_sub!(x5873, x5843, 1), x6, 1);
    let x5884: BytePoly_1 = bigint_nondet_inv!(ctx, x5883, x6, 1);
    let x5885: BytePoly_2 = bigint_mul!(x5883, x5884, 2);
    let x5886: BytePoly_3 = bigint_nondet_quot!(ctx, x5885, x6, 3);
    let x5887: BytePoly_1 = bigint_nondet_rem!(ctx, x5885, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5886, x6, 4), x5887, 4), x5885, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5887, x1, 1), 34, 1)?;
    let x5888: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5879, x5845, 1), x6, 1), x5884, 2);
    let x5889: BytePoly_3 = bigint_nondet_quot!(ctx, x5888, x6, 3);
    let x5890: BytePoly_1 = bigint_nondet_rem!(ctx, x5888, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5889, x6, 4), x5890, 4), x5888, 4),
        24387,
        2,
    )?;
    let x5891: BytePoly_2 = bigint_mul!(x5890, x5843, 2);
    let x5892: BytePoly_3 = bigint_nondet_quot!(ctx, x5891, x6, 3);
    let x5893: BytePoly_1 = bigint_nondet_rem!(ctx, x5891, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5892, x6, 4), x5893, 4), x5891, 4),
        24387,
        2,
    )?;
    let x5894: BytePoly_1 = bigint_add!(bigint_sub!(x5845, x5893, 1), x6, 1);
    let x5895: BytePoly_1 = bigint_nondet_quot!(ctx, x5894, x6, 1);
    let x5896: BytePoly_1 = bigint_nondet_rem!(ctx, x5894, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5895, x6, 2), x5896, 2), x5894, 2),
        8131,
        2,
    )?;
    let x5897: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5890, x5890, 2), x5843, 2), x6, 2),
            x5873,
            2
        ),
        x6,
        2
    );
    let x5898: BytePoly_3 = bigint_nondet_quot!(ctx, x5897, x6, 3);
    let x5899: BytePoly_1 = bigint_nondet_rem!(ctx, x5897, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5898, x6, 4), x5899, 4), x5897, 4),
        24387,
        2,
    )?;
    let x5900: BytePoly_2 = bigint_mul!(x5890, x5899, 2);
    let x5901: BytePoly_3 = bigint_nondet_quot!(ctx, x5900, x6, 3);
    let x5902: BytePoly_1 = bigint_nondet_rem!(ctx, x5900, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5901, x6, 4), x5902, 4), x5900, 4),
        24387,
        2,
    )?;
    let x5903: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5902, x5896, 1), 1), x6, 1);
    let x5904: BytePoly_1 = bigint_nondet_quot!(ctx, x5903, x6, 1);
    let x5905: BytePoly_1 = bigint_nondet_rem!(ctx, x5903, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5904, x6, 2), x5905, 2), x5903, 2),
        8131,
        2,
    )?;
    let x5906: BytePoly_2 = bigint_add!(
        bigint_mul!(x5899, x5880, 2),
        bigint_mul!(x5843, x5882, 2),
        2
    );
    let x5907: BytePoly_2 = bigint_add!(
        bigint_mul!(x5905, x5880, 2),
        bigint_mul!(x5845, x5882, 2),
        2
    );
    let x5908: BytePoly_3 = bigint_nondet_quot!(ctx, x5906, x6, 3);
    let x5909: BytePoly_1 = bigint_nondet_rem!(ctx, x5906, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5908, x6, 4), x5909, 4), x5906, 4),
        24387,
        2,
    )?;
    let x5910: BytePoly_3 = bigint_nondet_quot!(ctx, x5907, x6, 3);
    let x5911: BytePoly_1 = bigint_nondet_rem!(ctx, x5907, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5910, x6, 4), x5911, 4), x5907, 4),
        24387,
        2,
    )?;
    let x5912: BytePoly_2 = bigint_mul!(x5873, x5873, 2);
    let x5913: BytePoly_3 = bigint_nondet_quot!(ctx, x5912, x6, 3);
    let x5914: BytePoly_1 = bigint_nondet_rem!(ctx, x5912, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5913, x6, 4), x5914, 4), x5912, 4),
        24387,
        2,
    )?;
    let x5915: BytePoly_2 = bigint_add!(bigint_mul!(x5914, x0, 2), x5, 2);
    let x5916: BytePoly_3 = bigint_nondet_quot!(ctx, x5915, x6, 3);
    let x5917: BytePoly_1 = bigint_nondet_rem!(ctx, x5915, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5916, x6, 4), x5917, 4), x5915, 4),
        24387,
        2,
    )?;
    let x5918: BytePoly_1 = bigint_add!(x5879, x5879, 1);
    let x5919: BytePoly_1 = bigint_nondet_quot!(ctx, x5918, x6, 1);
    let x5920: BytePoly_1 = bigint_nondet_rem!(ctx, x5918, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5919, x6, 2), x5920, 2), x5918, 2),
        8131,
        2,
    )?;
    let x5921: BytePoly_1 = bigint_nondet_inv!(ctx, x5920, x6, 1);
    let x5922: BytePoly_2 = bigint_mul!(x5920, x5921, 2);
    let x5923: BytePoly_3 = bigint_nondet_quot!(ctx, x5922, x6, 3);
    let x5924: BytePoly_1 = bigint_nondet_rem!(ctx, x5922, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5923, x6, 4), x5924, 4), x5922, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5924, x3, 1), 34, 1)?;
    let x5925: BytePoly_2 = bigint_mul!(x5917, x5921, 2);
    let x5926: BytePoly_3 = bigint_nondet_quot!(ctx, x5925, x6, 3);
    let x5927: BytePoly_1 = bigint_nondet_rem!(ctx, x5925, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5926, x6, 4), x5927, 4), x5925, 4),
        24387,
        2,
    )?;
    let x5928: BytePoly_2 = bigint_mul!(x5927, x5873, 2);
    let x5929: BytePoly_3 = bigint_nondet_quot!(ctx, x5928, x6, 3);
    let x5930: BytePoly_1 = bigint_nondet_rem!(ctx, x5928, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5929, x6, 4), x5930, 4), x5928, 4),
        24387,
        2,
    )?;
    let x5931: BytePoly_1 = bigint_add!(bigint_sub!(x5879, x5930, 1), x6, 1);
    let x5932: BytePoly_1 = bigint_nondet_quot!(ctx, x5931, x6, 1);
    let x5933: BytePoly_1 = bigint_nondet_rem!(ctx, x5931, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5932, x6, 2), x5933, 2), x5931, 2),
        8131,
        2,
    )?;
    let x5934: BytePoly_2 = bigint_mul!(x5927, x5927, 2);
    let x5935: BytePoly_3 = bigint_nondet_quot!(ctx, x5934, x6, 3);
    let x5936: BytePoly_1 = bigint_nondet_rem!(ctx, x5934, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5935, x6, 4), x5936, 4), x5934, 4),
        24387,
        2,
    )?;
    let x5937: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x5936, x5873, 1), x6, 1), x5873, 1),
        x6,
        1
    );
    let x5938: BytePoly_1 = bigint_nondet_quot!(ctx, x5937, x6, 1);
    let x5939: BytePoly_1 = bigint_nondet_rem!(ctx, x5937, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5938, x6, 2), x5939, 2), x5937, 2),
        8131,
        2,
    )?;
    let x5940: BytePoly_2 = bigint_mul!(x5927, x5939, 2);
    let x5941: BytePoly_3 = bigint_nondet_quot!(ctx, x5940, x6, 3);
    let x5942: BytePoly_1 = bigint_nondet_rem!(ctx, x5940, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5941, x6, 4), x5942, 4), x5940, 4),
        24387,
        2,
    )?;
    let x5943: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5942, x5933, 1), 1), x6, 1);
    let x5944: BytePoly_1 = bigint_nondet_quot!(ctx, x5943, x6, 1);
    let x5945: BytePoly_1 = bigint_nondet_rem!(ctx, x5943, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5944, x6, 2), x5945, 2), x5943, 2),
        8131,
        2,
    )?;
    let x5946: BytePoly_1 = bigint_nondet_rem!(ctx, x5881, x2, 1);
    let x5947: BytePoly_2 = bigint_nondet_quot!(ctx, x5881, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5947, x2, 3), x5946, 3), x5881, 3),
        16259,
        2,
    )?;
    let x5948: BytePoly_1 = bigint_sub!(x3, x5946, 1);
    eqz(ctx, &bigint_mul!(x5946, x5948, 2), 8131, 2)?;
    let x5949: BytePoly_1 = bigint_add!(bigint_sub!(x5939, x5909, 1), x6, 1);
    let x5950: BytePoly_1 = bigint_nondet_inv!(ctx, x5949, x6, 1);
    let x5951: BytePoly_2 = bigint_mul!(x5949, x5950, 2);
    let x5952: BytePoly_3 = bigint_nondet_quot!(ctx, x5951, x6, 3);
    let x5953: BytePoly_1 = bigint_nondet_rem!(ctx, x5951, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5952, x6, 4), x5953, 4), x5951, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5953, x1, 1), 34, 1)?;
    let x5954: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x5945, x5911, 1), x6, 1), x5950, 2);
    let x5955: BytePoly_3 = bigint_nondet_quot!(ctx, x5954, x6, 3);
    let x5956: BytePoly_1 = bigint_nondet_rem!(ctx, x5954, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5955, x6, 4), x5956, 4), x5954, 4),
        24387,
        2,
    )?;
    let x5957: BytePoly_2 = bigint_mul!(x5956, x5909, 2);
    let x5958: BytePoly_3 = bigint_nondet_quot!(ctx, x5957, x6, 3);
    let x5959: BytePoly_1 = bigint_nondet_rem!(ctx, x5957, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5958, x6, 4), x5959, 4), x5957, 4),
        24387,
        2,
    )?;
    let x5960: BytePoly_1 = bigint_add!(bigint_sub!(x5911, x5959, 1), x6, 1);
    let x5961: BytePoly_1 = bigint_nondet_quot!(ctx, x5960, x6, 1);
    let x5962: BytePoly_1 = bigint_nondet_rem!(ctx, x5960, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5961, x6, 2), x5962, 2), x5960, 2),
        8131,
        2,
    )?;
    let x5963: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x5956, x5956, 2), x5909, 2), x6, 2),
            x5939,
            2
        ),
        x6,
        2
    );
    let x5964: BytePoly_3 = bigint_nondet_quot!(ctx, x5963, x6, 3);
    let x5965: BytePoly_1 = bigint_nondet_rem!(ctx, x5963, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5964, x6, 4), x5965, 4), x5963, 4),
        24387,
        2,
    )?;
    let x5966: BytePoly_2 = bigint_mul!(x5956, x5965, 2);
    let x5967: BytePoly_3 = bigint_nondet_quot!(ctx, x5966, x6, 3);
    let x5968: BytePoly_1 = bigint_nondet_rem!(ctx, x5966, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5967, x6, 4), x5968, 4), x5966, 4),
        24387,
        2,
    )?;
    let x5969: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x5968, x5962, 1), 1), x6, 1);
    let x5970: BytePoly_1 = bigint_nondet_quot!(ctx, x5969, x6, 1);
    let x5971: BytePoly_1 = bigint_nondet_rem!(ctx, x5969, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5970, x6, 2), x5971, 2), x5969, 2),
        8131,
        2,
    )?;
    let x5972: BytePoly_2 = bigint_add!(
        bigint_mul!(x5965, x5946, 2),
        bigint_mul!(x5909, x5948, 2),
        2
    );
    let x5973: BytePoly_2 = bigint_add!(
        bigint_mul!(x5971, x5946, 2),
        bigint_mul!(x5911, x5948, 2),
        2
    );
    let x5974: BytePoly_3 = bigint_nondet_quot!(ctx, x5972, x6, 3);
    let x5975: BytePoly_1 = bigint_nondet_rem!(ctx, x5972, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5974, x6, 4), x5975, 4), x5972, 4),
        24387,
        2,
    )?;
    let x5976: BytePoly_3 = bigint_nondet_quot!(ctx, x5973, x6, 3);
    let x5977: BytePoly_1 = bigint_nondet_rem!(ctx, x5973, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5976, x6, 4), x5977, 4), x5973, 4),
        24387,
        2,
    )?;
    let x5978: BytePoly_2 = bigint_mul!(x5939, x5939, 2);
    let x5979: BytePoly_3 = bigint_nondet_quot!(ctx, x5978, x6, 3);
    let x5980: BytePoly_1 = bigint_nondet_rem!(ctx, x5978, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5979, x6, 4), x5980, 4), x5978, 4),
        24387,
        2,
    )?;
    let x5981: BytePoly_2 = bigint_add!(bigint_mul!(x5980, x0, 2), x5, 2);
    let x5982: BytePoly_3 = bigint_nondet_quot!(ctx, x5981, x6, 3);
    let x5983: BytePoly_1 = bigint_nondet_rem!(ctx, x5981, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5982, x6, 4), x5983, 4), x5981, 4),
        24387,
        2,
    )?;
    let x5984: BytePoly_1 = bigint_add!(x5945, x5945, 1);
    let x5985: BytePoly_1 = bigint_nondet_quot!(ctx, x5984, x6, 1);
    let x5986: BytePoly_1 = bigint_nondet_rem!(ctx, x5984, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5985, x6, 2), x5986, 2), x5984, 2),
        8131,
        2,
    )?;
    let x5987: BytePoly_1 = bigint_nondet_inv!(ctx, x5986, x6, 1);
    let x5988: BytePoly_2 = bigint_mul!(x5986, x5987, 2);
    let x5989: BytePoly_3 = bigint_nondet_quot!(ctx, x5988, x6, 3);
    let x5990: BytePoly_1 = bigint_nondet_rem!(ctx, x5988, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5989, x6, 4), x5990, 4), x5988, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x5990, x3, 1), 34, 1)?;
    let x5991: BytePoly_2 = bigint_mul!(x5983, x5987, 2);
    let x5992: BytePoly_3 = bigint_nondet_quot!(ctx, x5991, x6, 3);
    let x5993: BytePoly_1 = bigint_nondet_rem!(ctx, x5991, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5992, x6, 4), x5993, 4), x5991, 4),
        24387,
        2,
    )?;
    let x5994: BytePoly_2 = bigint_mul!(x5993, x5939, 2);
    let x5995: BytePoly_3 = bigint_nondet_quot!(ctx, x5994, x6, 3);
    let x5996: BytePoly_1 = bigint_nondet_rem!(ctx, x5994, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5995, x6, 4), x5996, 4), x5994, 4),
        24387,
        2,
    )?;
    let x5997: BytePoly_1 = bigint_add!(bigint_sub!(x5945, x5996, 1), x6, 1);
    let x5998: BytePoly_1 = bigint_nondet_quot!(ctx, x5997, x6, 1);
    let x5999: BytePoly_1 = bigint_nondet_rem!(ctx, x5997, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x5998, x6, 2), x5999, 2), x5997, 2),
        8131,
        2,
    )?;
    let x6000: BytePoly_2 = bigint_mul!(x5993, x5993, 2);
    let x6001: BytePoly_3 = bigint_nondet_quot!(ctx, x6000, x6, 3);
    let x6002: BytePoly_1 = bigint_nondet_rem!(ctx, x6000, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6001, x6, 4), x6002, 4), x6000, 4),
        24387,
        2,
    )?;
    let x6003: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6002, x5939, 1), x6, 1), x5939, 1),
        x6,
        1
    );
    let x6004: BytePoly_1 = bigint_nondet_quot!(ctx, x6003, x6, 1);
    let x6005: BytePoly_1 = bigint_nondet_rem!(ctx, x6003, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6004, x6, 2), x6005, 2), x6003, 2),
        8131,
        2,
    )?;
    let x6006: BytePoly_2 = bigint_mul!(x5993, x6005, 2);
    let x6007: BytePoly_3 = bigint_nondet_quot!(ctx, x6006, x6, 3);
    let x6008: BytePoly_1 = bigint_nondet_rem!(ctx, x6006, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6007, x6, 4), x6008, 4), x6006, 4),
        24387,
        2,
    )?;
    let x6009: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6008, x5999, 1), 1), x6, 1);
    let x6010: BytePoly_1 = bigint_nondet_quot!(ctx, x6009, x6, 1);
    let x6011: BytePoly_1 = bigint_nondet_rem!(ctx, x6009, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6010, x6, 2), x6011, 2), x6009, 2),
        8131,
        2,
    )?;
    let x6012: BytePoly_1 = bigint_nondet_rem!(ctx, x5947, x2, 1);
    let x6013: BytePoly_2 = bigint_nondet_quot!(ctx, x5947, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6013, x2, 3), x6012, 3), x5947, 3),
        16259,
        2,
    )?;
    let x6014: BytePoly_1 = bigint_sub!(x3, x6012, 1);
    eqz(ctx, &bigint_mul!(x6012, x6014, 2), 8131, 2)?;
    let x6015: BytePoly_1 = bigint_add!(bigint_sub!(x6005, x5975, 1), x6, 1);
    let x6016: BytePoly_1 = bigint_nondet_inv!(ctx, x6015, x6, 1);
    let x6017: BytePoly_2 = bigint_mul!(x6015, x6016, 2);
    let x6018: BytePoly_3 = bigint_nondet_quot!(ctx, x6017, x6, 3);
    let x6019: BytePoly_1 = bigint_nondet_rem!(ctx, x6017, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6018, x6, 4), x6019, 4), x6017, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6019, x1, 1), 34, 1)?;
    let x6020: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6011, x5977, 1), x6, 1), x6016, 2);
    let x6021: BytePoly_3 = bigint_nondet_quot!(ctx, x6020, x6, 3);
    let x6022: BytePoly_1 = bigint_nondet_rem!(ctx, x6020, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6021, x6, 4), x6022, 4), x6020, 4),
        24387,
        2,
    )?;
    let x6023: BytePoly_2 = bigint_mul!(x6022, x5975, 2);
    let x6024: BytePoly_3 = bigint_nondet_quot!(ctx, x6023, x6, 3);
    let x6025: BytePoly_1 = bigint_nondet_rem!(ctx, x6023, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6024, x6, 4), x6025, 4), x6023, 4),
        24387,
        2,
    )?;
    let x6026: BytePoly_1 = bigint_add!(bigint_sub!(x5977, x6025, 1), x6, 1);
    let x6027: BytePoly_1 = bigint_nondet_quot!(ctx, x6026, x6, 1);
    let x6028: BytePoly_1 = bigint_nondet_rem!(ctx, x6026, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6027, x6, 2), x6028, 2), x6026, 2),
        8131,
        2,
    )?;
    let x6029: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6022, x6022, 2), x5975, 2), x6, 2),
            x6005,
            2
        ),
        x6,
        2
    );
    let x6030: BytePoly_3 = bigint_nondet_quot!(ctx, x6029, x6, 3);
    let x6031: BytePoly_1 = bigint_nondet_rem!(ctx, x6029, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6030, x6, 4), x6031, 4), x6029, 4),
        24387,
        2,
    )?;
    let x6032: BytePoly_2 = bigint_mul!(x6022, x6031, 2);
    let x6033: BytePoly_3 = bigint_nondet_quot!(ctx, x6032, x6, 3);
    let x6034: BytePoly_1 = bigint_nondet_rem!(ctx, x6032, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6033, x6, 4), x6034, 4), x6032, 4),
        24387,
        2,
    )?;
    let x6035: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6034, x6028, 1), 1), x6, 1);
    let x6036: BytePoly_1 = bigint_nondet_quot!(ctx, x6035, x6, 1);
    let x6037: BytePoly_1 = bigint_nondet_rem!(ctx, x6035, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6036, x6, 2), x6037, 2), x6035, 2),
        8131,
        2,
    )?;
    let x6038: BytePoly_2 = bigint_add!(
        bigint_mul!(x6031, x6012, 2),
        bigint_mul!(x5975, x6014, 2),
        2
    );
    let x6039: BytePoly_2 = bigint_add!(
        bigint_mul!(x6037, x6012, 2),
        bigint_mul!(x5977, x6014, 2),
        2
    );
    let x6040: BytePoly_3 = bigint_nondet_quot!(ctx, x6038, x6, 3);
    let x6041: BytePoly_1 = bigint_nondet_rem!(ctx, x6038, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6040, x6, 4), x6041, 4), x6038, 4),
        24387,
        2,
    )?;
    let x6042: BytePoly_3 = bigint_nondet_quot!(ctx, x6039, x6, 3);
    let x6043: BytePoly_1 = bigint_nondet_rem!(ctx, x6039, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6042, x6, 4), x6043, 4), x6039, 4),
        24387,
        2,
    )?;
    let x6044: BytePoly_2 = bigint_mul!(x6005, x6005, 2);
    let x6045: BytePoly_3 = bigint_nondet_quot!(ctx, x6044, x6, 3);
    let x6046: BytePoly_1 = bigint_nondet_rem!(ctx, x6044, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6045, x6, 4), x6046, 4), x6044, 4),
        24387,
        2,
    )?;
    let x6047: BytePoly_2 = bigint_add!(bigint_mul!(x6046, x0, 2), x5, 2);
    let x6048: BytePoly_3 = bigint_nondet_quot!(ctx, x6047, x6, 3);
    let x6049: BytePoly_1 = bigint_nondet_rem!(ctx, x6047, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6048, x6, 4), x6049, 4), x6047, 4),
        24387,
        2,
    )?;
    let x6050: BytePoly_1 = bigint_add!(x6011, x6011, 1);
    let x6051: BytePoly_1 = bigint_nondet_quot!(ctx, x6050, x6, 1);
    let x6052: BytePoly_1 = bigint_nondet_rem!(ctx, x6050, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6051, x6, 2), x6052, 2), x6050, 2),
        8131,
        2,
    )?;
    let x6053: BytePoly_1 = bigint_nondet_inv!(ctx, x6052, x6, 1);
    let x6054: BytePoly_2 = bigint_mul!(x6052, x6053, 2);
    let x6055: BytePoly_3 = bigint_nondet_quot!(ctx, x6054, x6, 3);
    let x6056: BytePoly_1 = bigint_nondet_rem!(ctx, x6054, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6055, x6, 4), x6056, 4), x6054, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6056, x3, 1), 34, 1)?;
    let x6057: BytePoly_2 = bigint_mul!(x6049, x6053, 2);
    let x6058: BytePoly_3 = bigint_nondet_quot!(ctx, x6057, x6, 3);
    let x6059: BytePoly_1 = bigint_nondet_rem!(ctx, x6057, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6058, x6, 4), x6059, 4), x6057, 4),
        24387,
        2,
    )?;
    let x6060: BytePoly_2 = bigint_mul!(x6059, x6005, 2);
    let x6061: BytePoly_3 = bigint_nondet_quot!(ctx, x6060, x6, 3);
    let x6062: BytePoly_1 = bigint_nondet_rem!(ctx, x6060, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6061, x6, 4), x6062, 4), x6060, 4),
        24387,
        2,
    )?;
    let x6063: BytePoly_1 = bigint_add!(bigint_sub!(x6011, x6062, 1), x6, 1);
    let x6064: BytePoly_1 = bigint_nondet_quot!(ctx, x6063, x6, 1);
    let x6065: BytePoly_1 = bigint_nondet_rem!(ctx, x6063, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6064, x6, 2), x6065, 2), x6063, 2),
        8131,
        2,
    )?;
    let x6066: BytePoly_2 = bigint_mul!(x6059, x6059, 2);
    let x6067: BytePoly_3 = bigint_nondet_quot!(ctx, x6066, x6, 3);
    let x6068: BytePoly_1 = bigint_nondet_rem!(ctx, x6066, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6067, x6, 4), x6068, 4), x6066, 4),
        24387,
        2,
    )?;
    let x6069: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6068, x6005, 1), x6, 1), x6005, 1),
        x6,
        1
    );
    let x6070: BytePoly_1 = bigint_nondet_quot!(ctx, x6069, x6, 1);
    let x6071: BytePoly_1 = bigint_nondet_rem!(ctx, x6069, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6070, x6, 2), x6071, 2), x6069, 2),
        8131,
        2,
    )?;
    let x6072: BytePoly_2 = bigint_mul!(x6059, x6071, 2);
    let x6073: BytePoly_3 = bigint_nondet_quot!(ctx, x6072, x6, 3);
    let x6074: BytePoly_1 = bigint_nondet_rem!(ctx, x6072, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6073, x6, 4), x6074, 4), x6072, 4),
        24387,
        2,
    )?;
    let x6075: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6074, x6065, 1), 1), x6, 1);
    let x6076: BytePoly_1 = bigint_nondet_quot!(ctx, x6075, x6, 1);
    let x6077: BytePoly_1 = bigint_nondet_rem!(ctx, x6075, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6076, x6, 2), x6077, 2), x6075, 2),
        8131,
        2,
    )?;
    let x6078: BytePoly_1 = bigint_nondet_rem!(ctx, x6013, x2, 1);
    let x6079: BytePoly_2 = bigint_nondet_quot!(ctx, x6013, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6079, x2, 3), x6078, 3), x6013, 3),
        16259,
        2,
    )?;
    let x6080: BytePoly_1 = bigint_sub!(x3, x6078, 1);
    eqz(ctx, &bigint_mul!(x6078, x6080, 2), 8131, 2)?;
    let x6081: BytePoly_1 = bigint_add!(bigint_sub!(x6071, x6041, 1), x6, 1);
    let x6082: BytePoly_1 = bigint_nondet_inv!(ctx, x6081, x6, 1);
    let x6083: BytePoly_2 = bigint_mul!(x6081, x6082, 2);
    let x6084: BytePoly_3 = bigint_nondet_quot!(ctx, x6083, x6, 3);
    let x6085: BytePoly_1 = bigint_nondet_rem!(ctx, x6083, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6084, x6, 4), x6085, 4), x6083, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6085, x1, 1), 34, 1)?;
    let x6086: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6077, x6043, 1), x6, 1), x6082, 2);
    let x6087: BytePoly_3 = bigint_nondet_quot!(ctx, x6086, x6, 3);
    let x6088: BytePoly_1 = bigint_nondet_rem!(ctx, x6086, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6087, x6, 4), x6088, 4), x6086, 4),
        24387,
        2,
    )?;
    let x6089: BytePoly_2 = bigint_mul!(x6088, x6041, 2);
    let x6090: BytePoly_3 = bigint_nondet_quot!(ctx, x6089, x6, 3);
    let x6091: BytePoly_1 = bigint_nondet_rem!(ctx, x6089, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6090, x6, 4), x6091, 4), x6089, 4),
        24387,
        2,
    )?;
    let x6092: BytePoly_1 = bigint_add!(bigint_sub!(x6043, x6091, 1), x6, 1);
    let x6093: BytePoly_1 = bigint_nondet_quot!(ctx, x6092, x6, 1);
    let x6094: BytePoly_1 = bigint_nondet_rem!(ctx, x6092, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6093, x6, 2), x6094, 2), x6092, 2),
        8131,
        2,
    )?;
    let x6095: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6088, x6088, 2), x6041, 2), x6, 2),
            x6071,
            2
        ),
        x6,
        2
    );
    let x6096: BytePoly_3 = bigint_nondet_quot!(ctx, x6095, x6, 3);
    let x6097: BytePoly_1 = bigint_nondet_rem!(ctx, x6095, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6096, x6, 4), x6097, 4), x6095, 4),
        24387,
        2,
    )?;
    let x6098: BytePoly_2 = bigint_mul!(x6088, x6097, 2);
    let x6099: BytePoly_3 = bigint_nondet_quot!(ctx, x6098, x6, 3);
    let x6100: BytePoly_1 = bigint_nondet_rem!(ctx, x6098, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6099, x6, 4), x6100, 4), x6098, 4),
        24387,
        2,
    )?;
    let x6101: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6100, x6094, 1), 1), x6, 1);
    let x6102: BytePoly_1 = bigint_nondet_quot!(ctx, x6101, x6, 1);
    let x6103: BytePoly_1 = bigint_nondet_rem!(ctx, x6101, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6102, x6, 2), x6103, 2), x6101, 2),
        8131,
        2,
    )?;
    let x6104: BytePoly_2 = bigint_add!(
        bigint_mul!(x6097, x6078, 2),
        bigint_mul!(x6041, x6080, 2),
        2
    );
    let x6105: BytePoly_2 = bigint_add!(
        bigint_mul!(x6103, x6078, 2),
        bigint_mul!(x6043, x6080, 2),
        2
    );
    let x6106: BytePoly_3 = bigint_nondet_quot!(ctx, x6104, x6, 3);
    let x6107: BytePoly_1 = bigint_nondet_rem!(ctx, x6104, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6106, x6, 4), x6107, 4), x6104, 4),
        24387,
        2,
    )?;
    let x6108: BytePoly_3 = bigint_nondet_quot!(ctx, x6105, x6, 3);
    let x6109: BytePoly_1 = bigint_nondet_rem!(ctx, x6105, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6108, x6, 4), x6109, 4), x6105, 4),
        24387,
        2,
    )?;
    let x6110: BytePoly_2 = bigint_mul!(x6071, x6071, 2);
    let x6111: BytePoly_3 = bigint_nondet_quot!(ctx, x6110, x6, 3);
    let x6112: BytePoly_1 = bigint_nondet_rem!(ctx, x6110, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6111, x6, 4), x6112, 4), x6110, 4),
        24387,
        2,
    )?;
    let x6113: BytePoly_2 = bigint_add!(bigint_mul!(x6112, x0, 2), x5, 2);
    let x6114: BytePoly_3 = bigint_nondet_quot!(ctx, x6113, x6, 3);
    let x6115: BytePoly_1 = bigint_nondet_rem!(ctx, x6113, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6114, x6, 4), x6115, 4), x6113, 4),
        24387,
        2,
    )?;
    let x6116: BytePoly_1 = bigint_add!(x6077, x6077, 1);
    let x6117: BytePoly_1 = bigint_nondet_quot!(ctx, x6116, x6, 1);
    let x6118: BytePoly_1 = bigint_nondet_rem!(ctx, x6116, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6117, x6, 2), x6118, 2), x6116, 2),
        8131,
        2,
    )?;
    let x6119: BytePoly_1 = bigint_nondet_inv!(ctx, x6118, x6, 1);
    let x6120: BytePoly_2 = bigint_mul!(x6118, x6119, 2);
    let x6121: BytePoly_3 = bigint_nondet_quot!(ctx, x6120, x6, 3);
    let x6122: BytePoly_1 = bigint_nondet_rem!(ctx, x6120, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6121, x6, 4), x6122, 4), x6120, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6122, x3, 1), 34, 1)?;
    let x6123: BytePoly_2 = bigint_mul!(x6115, x6119, 2);
    let x6124: BytePoly_3 = bigint_nondet_quot!(ctx, x6123, x6, 3);
    let x6125: BytePoly_1 = bigint_nondet_rem!(ctx, x6123, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6124, x6, 4), x6125, 4), x6123, 4),
        24387,
        2,
    )?;
    let x6126: BytePoly_2 = bigint_mul!(x6125, x6071, 2);
    let x6127: BytePoly_3 = bigint_nondet_quot!(ctx, x6126, x6, 3);
    let x6128: BytePoly_1 = bigint_nondet_rem!(ctx, x6126, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6127, x6, 4), x6128, 4), x6126, 4),
        24387,
        2,
    )?;
    let x6129: BytePoly_1 = bigint_add!(bigint_sub!(x6077, x6128, 1), x6, 1);
    let x6130: BytePoly_1 = bigint_nondet_quot!(ctx, x6129, x6, 1);
    let x6131: BytePoly_1 = bigint_nondet_rem!(ctx, x6129, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6130, x6, 2), x6131, 2), x6129, 2),
        8131,
        2,
    )?;
    let x6132: BytePoly_2 = bigint_mul!(x6125, x6125, 2);
    let x6133: BytePoly_3 = bigint_nondet_quot!(ctx, x6132, x6, 3);
    let x6134: BytePoly_1 = bigint_nondet_rem!(ctx, x6132, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6133, x6, 4), x6134, 4), x6132, 4),
        24387,
        2,
    )?;
    let x6135: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6134, x6071, 1), x6, 1), x6071, 1),
        x6,
        1
    );
    let x6136: BytePoly_1 = bigint_nondet_quot!(ctx, x6135, x6, 1);
    let x6137: BytePoly_1 = bigint_nondet_rem!(ctx, x6135, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6136, x6, 2), x6137, 2), x6135, 2),
        8131,
        2,
    )?;
    let x6138: BytePoly_2 = bigint_mul!(x6125, x6137, 2);
    let x6139: BytePoly_3 = bigint_nondet_quot!(ctx, x6138, x6, 3);
    let x6140: BytePoly_1 = bigint_nondet_rem!(ctx, x6138, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6139, x6, 4), x6140, 4), x6138, 4),
        24387,
        2,
    )?;
    let x6141: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6140, x6131, 1), 1), x6, 1);
    let x6142: BytePoly_1 = bigint_nondet_quot!(ctx, x6141, x6, 1);
    let x6143: BytePoly_1 = bigint_nondet_rem!(ctx, x6141, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6142, x6, 2), x6143, 2), x6141, 2),
        8131,
        2,
    )?;
    let x6144: BytePoly_1 = bigint_nondet_rem!(ctx, x6079, x2, 1);
    let x6145: BytePoly_2 = bigint_nondet_quot!(ctx, x6079, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6145, x2, 3), x6144, 3), x6079, 3),
        16259,
        2,
    )?;
    let x6146: BytePoly_1 = bigint_sub!(x3, x6144, 1);
    eqz(ctx, &bigint_mul!(x6144, x6146, 2), 8131, 2)?;
    let x6147: BytePoly_1 = bigint_add!(bigint_sub!(x6137, x6107, 1), x6, 1);
    let x6148: BytePoly_1 = bigint_nondet_inv!(ctx, x6147, x6, 1);
    let x6149: BytePoly_2 = bigint_mul!(x6147, x6148, 2);
    let x6150: BytePoly_3 = bigint_nondet_quot!(ctx, x6149, x6, 3);
    let x6151: BytePoly_1 = bigint_nondet_rem!(ctx, x6149, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6150, x6, 4), x6151, 4), x6149, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6151, x1, 1), 34, 1)?;
    let x6152: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6143, x6109, 1), x6, 1), x6148, 2);
    let x6153: BytePoly_3 = bigint_nondet_quot!(ctx, x6152, x6, 3);
    let x6154: BytePoly_1 = bigint_nondet_rem!(ctx, x6152, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6153, x6, 4), x6154, 4), x6152, 4),
        24387,
        2,
    )?;
    let x6155: BytePoly_2 = bigint_mul!(x6154, x6107, 2);
    let x6156: BytePoly_3 = bigint_nondet_quot!(ctx, x6155, x6, 3);
    let x6157: BytePoly_1 = bigint_nondet_rem!(ctx, x6155, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6156, x6, 4), x6157, 4), x6155, 4),
        24387,
        2,
    )?;
    let x6158: BytePoly_1 = bigint_add!(bigint_sub!(x6109, x6157, 1), x6, 1);
    let x6159: BytePoly_1 = bigint_nondet_quot!(ctx, x6158, x6, 1);
    let x6160: BytePoly_1 = bigint_nondet_rem!(ctx, x6158, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6159, x6, 2), x6160, 2), x6158, 2),
        8131,
        2,
    )?;
    let x6161: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6154, x6154, 2), x6107, 2), x6, 2),
            x6137,
            2
        ),
        x6,
        2
    );
    let x6162: BytePoly_3 = bigint_nondet_quot!(ctx, x6161, x6, 3);
    let x6163: BytePoly_1 = bigint_nondet_rem!(ctx, x6161, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6162, x6, 4), x6163, 4), x6161, 4),
        24387,
        2,
    )?;
    let x6164: BytePoly_2 = bigint_mul!(x6154, x6163, 2);
    let x6165: BytePoly_3 = bigint_nondet_quot!(ctx, x6164, x6, 3);
    let x6166: BytePoly_1 = bigint_nondet_rem!(ctx, x6164, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6165, x6, 4), x6166, 4), x6164, 4),
        24387,
        2,
    )?;
    let x6167: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6166, x6160, 1), 1), x6, 1);
    let x6168: BytePoly_1 = bigint_nondet_quot!(ctx, x6167, x6, 1);
    let x6169: BytePoly_1 = bigint_nondet_rem!(ctx, x6167, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6168, x6, 2), x6169, 2), x6167, 2),
        8131,
        2,
    )?;
    let x6170: BytePoly_2 = bigint_add!(
        bigint_mul!(x6163, x6144, 2),
        bigint_mul!(x6107, x6146, 2),
        2
    );
    let x6171: BytePoly_2 = bigint_add!(
        bigint_mul!(x6169, x6144, 2),
        bigint_mul!(x6109, x6146, 2),
        2
    );
    let x6172: BytePoly_3 = bigint_nondet_quot!(ctx, x6170, x6, 3);
    let x6173: BytePoly_1 = bigint_nondet_rem!(ctx, x6170, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6172, x6, 4), x6173, 4), x6170, 4),
        24387,
        2,
    )?;
    let x6174: BytePoly_3 = bigint_nondet_quot!(ctx, x6171, x6, 3);
    let x6175: BytePoly_1 = bigint_nondet_rem!(ctx, x6171, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6174, x6, 4), x6175, 4), x6171, 4),
        24387,
        2,
    )?;
    let x6176: BytePoly_2 = bigint_mul!(x6137, x6137, 2);
    let x6177: BytePoly_3 = bigint_nondet_quot!(ctx, x6176, x6, 3);
    let x6178: BytePoly_1 = bigint_nondet_rem!(ctx, x6176, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6177, x6, 4), x6178, 4), x6176, 4),
        24387,
        2,
    )?;
    let x6179: BytePoly_2 = bigint_add!(bigint_mul!(x6178, x0, 2), x5, 2);
    let x6180: BytePoly_3 = bigint_nondet_quot!(ctx, x6179, x6, 3);
    let x6181: BytePoly_1 = bigint_nondet_rem!(ctx, x6179, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6180, x6, 4), x6181, 4), x6179, 4),
        24387,
        2,
    )?;
    let x6182: BytePoly_1 = bigint_add!(x6143, x6143, 1);
    let x6183: BytePoly_1 = bigint_nondet_quot!(ctx, x6182, x6, 1);
    let x6184: BytePoly_1 = bigint_nondet_rem!(ctx, x6182, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6183, x6, 2), x6184, 2), x6182, 2),
        8131,
        2,
    )?;
    let x6185: BytePoly_1 = bigint_nondet_inv!(ctx, x6184, x6, 1);
    let x6186: BytePoly_2 = bigint_mul!(x6184, x6185, 2);
    let x6187: BytePoly_3 = bigint_nondet_quot!(ctx, x6186, x6, 3);
    let x6188: BytePoly_1 = bigint_nondet_rem!(ctx, x6186, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6187, x6, 4), x6188, 4), x6186, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6188, x3, 1), 34, 1)?;
    let x6189: BytePoly_2 = bigint_mul!(x6181, x6185, 2);
    let x6190: BytePoly_3 = bigint_nondet_quot!(ctx, x6189, x6, 3);
    let x6191: BytePoly_1 = bigint_nondet_rem!(ctx, x6189, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6190, x6, 4), x6191, 4), x6189, 4),
        24387,
        2,
    )?;
    let x6192: BytePoly_2 = bigint_mul!(x6191, x6137, 2);
    let x6193: BytePoly_3 = bigint_nondet_quot!(ctx, x6192, x6, 3);
    let x6194: BytePoly_1 = bigint_nondet_rem!(ctx, x6192, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6193, x6, 4), x6194, 4), x6192, 4),
        24387,
        2,
    )?;
    let x6195: BytePoly_1 = bigint_add!(bigint_sub!(x6143, x6194, 1), x6, 1);
    let x6196: BytePoly_1 = bigint_nondet_quot!(ctx, x6195, x6, 1);
    let x6197: BytePoly_1 = bigint_nondet_rem!(ctx, x6195, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6196, x6, 2), x6197, 2), x6195, 2),
        8131,
        2,
    )?;
    let x6198: BytePoly_2 = bigint_mul!(x6191, x6191, 2);
    let x6199: BytePoly_3 = bigint_nondet_quot!(ctx, x6198, x6, 3);
    let x6200: BytePoly_1 = bigint_nondet_rem!(ctx, x6198, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6199, x6, 4), x6200, 4), x6198, 4),
        24387,
        2,
    )?;
    let x6201: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6200, x6137, 1), x6, 1), x6137, 1),
        x6,
        1
    );
    let x6202: BytePoly_1 = bigint_nondet_quot!(ctx, x6201, x6, 1);
    let x6203: BytePoly_1 = bigint_nondet_rem!(ctx, x6201, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6202, x6, 2), x6203, 2), x6201, 2),
        8131,
        2,
    )?;
    let x6204: BytePoly_2 = bigint_mul!(x6191, x6203, 2);
    let x6205: BytePoly_3 = bigint_nondet_quot!(ctx, x6204, x6, 3);
    let x6206: BytePoly_1 = bigint_nondet_rem!(ctx, x6204, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6205, x6, 4), x6206, 4), x6204, 4),
        24387,
        2,
    )?;
    let x6207: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6206, x6197, 1), 1), x6, 1);
    let x6208: BytePoly_1 = bigint_nondet_quot!(ctx, x6207, x6, 1);
    let x6209: BytePoly_1 = bigint_nondet_rem!(ctx, x6207, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6208, x6, 2), x6209, 2), x6207, 2),
        8131,
        2,
    )?;
    let x6210: BytePoly_1 = bigint_nondet_rem!(ctx, x6145, x2, 1);
    let x6211: BytePoly_2 = bigint_nondet_quot!(ctx, x6145, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6211, x2, 3), x6210, 3), x6145, 3),
        16259,
        2,
    )?;
    let x6212: BytePoly_1 = bigint_sub!(x3, x6210, 1);
    eqz(ctx, &bigint_mul!(x6210, x6212, 2), 8131, 2)?;
    let x6213: BytePoly_1 = bigint_add!(bigint_sub!(x6203, x6173, 1), x6, 1);
    let x6214: BytePoly_1 = bigint_nondet_inv!(ctx, x6213, x6, 1);
    let x6215: BytePoly_2 = bigint_mul!(x6213, x6214, 2);
    let x6216: BytePoly_3 = bigint_nondet_quot!(ctx, x6215, x6, 3);
    let x6217: BytePoly_1 = bigint_nondet_rem!(ctx, x6215, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6216, x6, 4), x6217, 4), x6215, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6217, x1, 1), 34, 1)?;
    let x6218: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6209, x6175, 1), x6, 1), x6214, 2);
    let x6219: BytePoly_3 = bigint_nondet_quot!(ctx, x6218, x6, 3);
    let x6220: BytePoly_1 = bigint_nondet_rem!(ctx, x6218, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6219, x6, 4), x6220, 4), x6218, 4),
        24387,
        2,
    )?;
    let x6221: BytePoly_2 = bigint_mul!(x6220, x6173, 2);
    let x6222: BytePoly_3 = bigint_nondet_quot!(ctx, x6221, x6, 3);
    let x6223: BytePoly_1 = bigint_nondet_rem!(ctx, x6221, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6222, x6, 4), x6223, 4), x6221, 4),
        24387,
        2,
    )?;
    let x6224: BytePoly_1 = bigint_add!(bigint_sub!(x6175, x6223, 1), x6, 1);
    let x6225: BytePoly_1 = bigint_nondet_quot!(ctx, x6224, x6, 1);
    let x6226: BytePoly_1 = bigint_nondet_rem!(ctx, x6224, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6225, x6, 2), x6226, 2), x6224, 2),
        8131,
        2,
    )?;
    let x6227: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6220, x6220, 2), x6173, 2), x6, 2),
            x6203,
            2
        ),
        x6,
        2
    );
    let x6228: BytePoly_3 = bigint_nondet_quot!(ctx, x6227, x6, 3);
    let x6229: BytePoly_1 = bigint_nondet_rem!(ctx, x6227, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6228, x6, 4), x6229, 4), x6227, 4),
        24387,
        2,
    )?;
    let x6230: BytePoly_2 = bigint_mul!(x6220, x6229, 2);
    let x6231: BytePoly_3 = bigint_nondet_quot!(ctx, x6230, x6, 3);
    let x6232: BytePoly_1 = bigint_nondet_rem!(ctx, x6230, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6231, x6, 4), x6232, 4), x6230, 4),
        24387,
        2,
    )?;
    let x6233: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6232, x6226, 1), 1), x6, 1);
    let x6234: BytePoly_1 = bigint_nondet_quot!(ctx, x6233, x6, 1);
    let x6235: BytePoly_1 = bigint_nondet_rem!(ctx, x6233, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6234, x6, 2), x6235, 2), x6233, 2),
        8131,
        2,
    )?;
    let x6236: BytePoly_2 = bigint_add!(
        bigint_mul!(x6229, x6210, 2),
        bigint_mul!(x6173, x6212, 2),
        2
    );
    let x6237: BytePoly_2 = bigint_add!(
        bigint_mul!(x6235, x6210, 2),
        bigint_mul!(x6175, x6212, 2),
        2
    );
    let x6238: BytePoly_3 = bigint_nondet_quot!(ctx, x6236, x6, 3);
    let x6239: BytePoly_1 = bigint_nondet_rem!(ctx, x6236, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6238, x6, 4), x6239, 4), x6236, 4),
        24387,
        2,
    )?;
    let x6240: BytePoly_3 = bigint_nondet_quot!(ctx, x6237, x6, 3);
    let x6241: BytePoly_1 = bigint_nondet_rem!(ctx, x6237, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6240, x6, 4), x6241, 4), x6237, 4),
        24387,
        2,
    )?;
    let x6242: BytePoly_2 = bigint_mul!(x6203, x6203, 2);
    let x6243: BytePoly_3 = bigint_nondet_quot!(ctx, x6242, x6, 3);
    let x6244: BytePoly_1 = bigint_nondet_rem!(ctx, x6242, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6243, x6, 4), x6244, 4), x6242, 4),
        24387,
        2,
    )?;
    let x6245: BytePoly_2 = bigint_add!(bigint_mul!(x6244, x0, 2), x5, 2);
    let x6246: BytePoly_3 = bigint_nondet_quot!(ctx, x6245, x6, 3);
    let x6247: BytePoly_1 = bigint_nondet_rem!(ctx, x6245, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6246, x6, 4), x6247, 4), x6245, 4),
        24387,
        2,
    )?;
    let x6248: BytePoly_1 = bigint_add!(x6209, x6209, 1);
    let x6249: BytePoly_1 = bigint_nondet_quot!(ctx, x6248, x6, 1);
    let x6250: BytePoly_1 = bigint_nondet_rem!(ctx, x6248, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6249, x6, 2), x6250, 2), x6248, 2),
        8131,
        2,
    )?;
    let x6251: BytePoly_1 = bigint_nondet_inv!(ctx, x6250, x6, 1);
    let x6252: BytePoly_2 = bigint_mul!(x6250, x6251, 2);
    let x6253: BytePoly_3 = bigint_nondet_quot!(ctx, x6252, x6, 3);
    let x6254: BytePoly_1 = bigint_nondet_rem!(ctx, x6252, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6253, x6, 4), x6254, 4), x6252, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6254, x3, 1), 34, 1)?;
    let x6255: BytePoly_2 = bigint_mul!(x6247, x6251, 2);
    let x6256: BytePoly_3 = bigint_nondet_quot!(ctx, x6255, x6, 3);
    let x6257: BytePoly_1 = bigint_nondet_rem!(ctx, x6255, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6256, x6, 4), x6257, 4), x6255, 4),
        24387,
        2,
    )?;
    let x6258: BytePoly_2 = bigint_mul!(x6257, x6203, 2);
    let x6259: BytePoly_3 = bigint_nondet_quot!(ctx, x6258, x6, 3);
    let x6260: BytePoly_1 = bigint_nondet_rem!(ctx, x6258, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6259, x6, 4), x6260, 4), x6258, 4),
        24387,
        2,
    )?;
    let x6261: BytePoly_1 = bigint_add!(bigint_sub!(x6209, x6260, 1), x6, 1);
    let x6262: BytePoly_1 = bigint_nondet_quot!(ctx, x6261, x6, 1);
    let x6263: BytePoly_1 = bigint_nondet_rem!(ctx, x6261, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6262, x6, 2), x6263, 2), x6261, 2),
        8131,
        2,
    )?;
    let x6264: BytePoly_2 = bigint_mul!(x6257, x6257, 2);
    let x6265: BytePoly_3 = bigint_nondet_quot!(ctx, x6264, x6, 3);
    let x6266: BytePoly_1 = bigint_nondet_rem!(ctx, x6264, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6265, x6, 4), x6266, 4), x6264, 4),
        24387,
        2,
    )?;
    let x6267: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6266, x6203, 1), x6, 1), x6203, 1),
        x6,
        1
    );
    let x6268: BytePoly_1 = bigint_nondet_quot!(ctx, x6267, x6, 1);
    let x6269: BytePoly_1 = bigint_nondet_rem!(ctx, x6267, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6268, x6, 2), x6269, 2), x6267, 2),
        8131,
        2,
    )?;
    let x6270: BytePoly_2 = bigint_mul!(x6257, x6269, 2);
    let x6271: BytePoly_3 = bigint_nondet_quot!(ctx, x6270, x6, 3);
    let x6272: BytePoly_1 = bigint_nondet_rem!(ctx, x6270, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6271, x6, 4), x6272, 4), x6270, 4),
        24387,
        2,
    )?;
    let x6273: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6272, x6263, 1), 1), x6, 1);
    let x6274: BytePoly_1 = bigint_nondet_quot!(ctx, x6273, x6, 1);
    let x6275: BytePoly_1 = bigint_nondet_rem!(ctx, x6273, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6274, x6, 2), x6275, 2), x6273, 2),
        8131,
        2,
    )?;
    let x6276: BytePoly_1 = bigint_nondet_rem!(ctx, x6211, x2, 1);
    let x6277: BytePoly_2 = bigint_nondet_quot!(ctx, x6211, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6277, x2, 3), x6276, 3), x6211, 3),
        16259,
        2,
    )?;
    let x6278: BytePoly_1 = bigint_sub!(x3, x6276, 1);
    eqz(ctx, &bigint_mul!(x6276, x6278, 2), 8131, 2)?;
    let x6279: BytePoly_1 = bigint_add!(bigint_sub!(x6269, x6239, 1), x6, 1);
    let x6280: BytePoly_1 = bigint_nondet_inv!(ctx, x6279, x6, 1);
    let x6281: BytePoly_2 = bigint_mul!(x6279, x6280, 2);
    let x6282: BytePoly_3 = bigint_nondet_quot!(ctx, x6281, x6, 3);
    let x6283: BytePoly_1 = bigint_nondet_rem!(ctx, x6281, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6282, x6, 4), x6283, 4), x6281, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6283, x1, 1), 34, 1)?;
    let x6284: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6275, x6241, 1), x6, 1), x6280, 2);
    let x6285: BytePoly_3 = bigint_nondet_quot!(ctx, x6284, x6, 3);
    let x6286: BytePoly_1 = bigint_nondet_rem!(ctx, x6284, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6285, x6, 4), x6286, 4), x6284, 4),
        24387,
        2,
    )?;
    let x6287: BytePoly_2 = bigint_mul!(x6286, x6239, 2);
    let x6288: BytePoly_3 = bigint_nondet_quot!(ctx, x6287, x6, 3);
    let x6289: BytePoly_1 = bigint_nondet_rem!(ctx, x6287, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6288, x6, 4), x6289, 4), x6287, 4),
        24387,
        2,
    )?;
    let x6290: BytePoly_1 = bigint_add!(bigint_sub!(x6241, x6289, 1), x6, 1);
    let x6291: BytePoly_1 = bigint_nondet_quot!(ctx, x6290, x6, 1);
    let x6292: BytePoly_1 = bigint_nondet_rem!(ctx, x6290, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6291, x6, 2), x6292, 2), x6290, 2),
        8131,
        2,
    )?;
    let x6293: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6286, x6286, 2), x6239, 2), x6, 2),
            x6269,
            2
        ),
        x6,
        2
    );
    let x6294: BytePoly_3 = bigint_nondet_quot!(ctx, x6293, x6, 3);
    let x6295: BytePoly_1 = bigint_nondet_rem!(ctx, x6293, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6294, x6, 4), x6295, 4), x6293, 4),
        24387,
        2,
    )?;
    let x6296: BytePoly_2 = bigint_mul!(x6286, x6295, 2);
    let x6297: BytePoly_3 = bigint_nondet_quot!(ctx, x6296, x6, 3);
    let x6298: BytePoly_1 = bigint_nondet_rem!(ctx, x6296, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6297, x6, 4), x6298, 4), x6296, 4),
        24387,
        2,
    )?;
    let x6299: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6298, x6292, 1), 1), x6, 1);
    let x6300: BytePoly_1 = bigint_nondet_quot!(ctx, x6299, x6, 1);
    let x6301: BytePoly_1 = bigint_nondet_rem!(ctx, x6299, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6300, x6, 2), x6301, 2), x6299, 2),
        8131,
        2,
    )?;
    let x6302: BytePoly_2 = bigint_add!(
        bigint_mul!(x6295, x6276, 2),
        bigint_mul!(x6239, x6278, 2),
        2
    );
    let x6303: BytePoly_2 = bigint_add!(
        bigint_mul!(x6301, x6276, 2),
        bigint_mul!(x6241, x6278, 2),
        2
    );
    let x6304: BytePoly_3 = bigint_nondet_quot!(ctx, x6302, x6, 3);
    let x6305: BytePoly_1 = bigint_nondet_rem!(ctx, x6302, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6304, x6, 4), x6305, 4), x6302, 4),
        24387,
        2,
    )?;
    let x6306: BytePoly_3 = bigint_nondet_quot!(ctx, x6303, x6, 3);
    let x6307: BytePoly_1 = bigint_nondet_rem!(ctx, x6303, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6306, x6, 4), x6307, 4), x6303, 4),
        24387,
        2,
    )?;
    let x6308: BytePoly_2 = bigint_mul!(x6269, x6269, 2);
    let x6309: BytePoly_3 = bigint_nondet_quot!(ctx, x6308, x6, 3);
    let x6310: BytePoly_1 = bigint_nondet_rem!(ctx, x6308, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6309, x6, 4), x6310, 4), x6308, 4),
        24387,
        2,
    )?;
    let x6311: BytePoly_2 = bigint_add!(bigint_mul!(x6310, x0, 2), x5, 2);
    let x6312: BytePoly_3 = bigint_nondet_quot!(ctx, x6311, x6, 3);
    let x6313: BytePoly_1 = bigint_nondet_rem!(ctx, x6311, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6312, x6, 4), x6313, 4), x6311, 4),
        24387,
        2,
    )?;
    let x6314: BytePoly_1 = bigint_add!(x6275, x6275, 1);
    let x6315: BytePoly_1 = bigint_nondet_quot!(ctx, x6314, x6, 1);
    let x6316: BytePoly_1 = bigint_nondet_rem!(ctx, x6314, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6315, x6, 2), x6316, 2), x6314, 2),
        8131,
        2,
    )?;
    let x6317: BytePoly_1 = bigint_nondet_inv!(ctx, x6316, x6, 1);
    let x6318: BytePoly_2 = bigint_mul!(x6316, x6317, 2);
    let x6319: BytePoly_3 = bigint_nondet_quot!(ctx, x6318, x6, 3);
    let x6320: BytePoly_1 = bigint_nondet_rem!(ctx, x6318, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6319, x6, 4), x6320, 4), x6318, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6320, x3, 1), 34, 1)?;
    let x6321: BytePoly_2 = bigint_mul!(x6313, x6317, 2);
    let x6322: BytePoly_3 = bigint_nondet_quot!(ctx, x6321, x6, 3);
    let x6323: BytePoly_1 = bigint_nondet_rem!(ctx, x6321, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6322, x6, 4), x6323, 4), x6321, 4),
        24387,
        2,
    )?;
    let x6324: BytePoly_2 = bigint_mul!(x6323, x6269, 2);
    let x6325: BytePoly_3 = bigint_nondet_quot!(ctx, x6324, x6, 3);
    let x6326: BytePoly_1 = bigint_nondet_rem!(ctx, x6324, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6325, x6, 4), x6326, 4), x6324, 4),
        24387,
        2,
    )?;
    let x6327: BytePoly_1 = bigint_add!(bigint_sub!(x6275, x6326, 1), x6, 1);
    let x6328: BytePoly_1 = bigint_nondet_quot!(ctx, x6327, x6, 1);
    let x6329: BytePoly_1 = bigint_nondet_rem!(ctx, x6327, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6328, x6, 2), x6329, 2), x6327, 2),
        8131,
        2,
    )?;
    let x6330: BytePoly_2 = bigint_mul!(x6323, x6323, 2);
    let x6331: BytePoly_3 = bigint_nondet_quot!(ctx, x6330, x6, 3);
    let x6332: BytePoly_1 = bigint_nondet_rem!(ctx, x6330, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6331, x6, 4), x6332, 4), x6330, 4),
        24387,
        2,
    )?;
    let x6333: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6332, x6269, 1), x6, 1), x6269, 1),
        x6,
        1
    );
    let x6334: BytePoly_1 = bigint_nondet_quot!(ctx, x6333, x6, 1);
    let x6335: BytePoly_1 = bigint_nondet_rem!(ctx, x6333, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6334, x6, 2), x6335, 2), x6333, 2),
        8131,
        2,
    )?;
    let x6336: BytePoly_2 = bigint_mul!(x6323, x6335, 2);
    let x6337: BytePoly_3 = bigint_nondet_quot!(ctx, x6336, x6, 3);
    let x6338: BytePoly_1 = bigint_nondet_rem!(ctx, x6336, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6337, x6, 4), x6338, 4), x6336, 4),
        24387,
        2,
    )?;
    let x6339: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6338, x6329, 1), 1), x6, 1);
    let x6340: BytePoly_1 = bigint_nondet_quot!(ctx, x6339, x6, 1);
    let x6341: BytePoly_1 = bigint_nondet_rem!(ctx, x6339, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6340, x6, 2), x6341, 2), x6339, 2),
        8131,
        2,
    )?;
    let x6342: BytePoly_1 = bigint_nondet_rem!(ctx, x6277, x2, 1);
    let x6343: BytePoly_2 = bigint_nondet_quot!(ctx, x6277, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6343, x2, 3), x6342, 3), x6277, 3),
        16259,
        2,
    )?;
    let x6344: BytePoly_1 = bigint_sub!(x3, x6342, 1);
    eqz(ctx, &bigint_mul!(x6342, x6344, 2), 8131, 2)?;
    let x6345: BytePoly_1 = bigint_add!(bigint_sub!(x6335, x6305, 1), x6, 1);
    let x6346: BytePoly_1 = bigint_nondet_inv!(ctx, x6345, x6, 1);
    let x6347: BytePoly_2 = bigint_mul!(x6345, x6346, 2);
    let x6348: BytePoly_3 = bigint_nondet_quot!(ctx, x6347, x6, 3);
    let x6349: BytePoly_1 = bigint_nondet_rem!(ctx, x6347, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6348, x6, 4), x6349, 4), x6347, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6349, x1, 1), 34, 1)?;
    let x6350: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6341, x6307, 1), x6, 1), x6346, 2);
    let x6351: BytePoly_3 = bigint_nondet_quot!(ctx, x6350, x6, 3);
    let x6352: BytePoly_1 = bigint_nondet_rem!(ctx, x6350, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6351, x6, 4), x6352, 4), x6350, 4),
        24387,
        2,
    )?;
    let x6353: BytePoly_2 = bigint_mul!(x6352, x6305, 2);
    let x6354: BytePoly_3 = bigint_nondet_quot!(ctx, x6353, x6, 3);
    let x6355: BytePoly_1 = bigint_nondet_rem!(ctx, x6353, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6354, x6, 4), x6355, 4), x6353, 4),
        24387,
        2,
    )?;
    let x6356: BytePoly_1 = bigint_add!(bigint_sub!(x6307, x6355, 1), x6, 1);
    let x6357: BytePoly_1 = bigint_nondet_quot!(ctx, x6356, x6, 1);
    let x6358: BytePoly_1 = bigint_nondet_rem!(ctx, x6356, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6357, x6, 2), x6358, 2), x6356, 2),
        8131,
        2,
    )?;
    let x6359: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6352, x6352, 2), x6305, 2), x6, 2),
            x6335,
            2
        ),
        x6,
        2
    );
    let x6360: BytePoly_3 = bigint_nondet_quot!(ctx, x6359, x6, 3);
    let x6361: BytePoly_1 = bigint_nondet_rem!(ctx, x6359, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6360, x6, 4), x6361, 4), x6359, 4),
        24387,
        2,
    )?;
    let x6362: BytePoly_2 = bigint_mul!(x6352, x6361, 2);
    let x6363: BytePoly_3 = bigint_nondet_quot!(ctx, x6362, x6, 3);
    let x6364: BytePoly_1 = bigint_nondet_rem!(ctx, x6362, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6363, x6, 4), x6364, 4), x6362, 4),
        24387,
        2,
    )?;
    let x6365: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6364, x6358, 1), 1), x6, 1);
    let x6366: BytePoly_1 = bigint_nondet_quot!(ctx, x6365, x6, 1);
    let x6367: BytePoly_1 = bigint_nondet_rem!(ctx, x6365, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6366, x6, 2), x6367, 2), x6365, 2),
        8131,
        2,
    )?;
    let x6368: BytePoly_2 = bigint_add!(
        bigint_mul!(x6361, x6342, 2),
        bigint_mul!(x6305, x6344, 2),
        2
    );
    let x6369: BytePoly_2 = bigint_add!(
        bigint_mul!(x6367, x6342, 2),
        bigint_mul!(x6307, x6344, 2),
        2
    );
    let x6370: BytePoly_3 = bigint_nondet_quot!(ctx, x6368, x6, 3);
    let x6371: BytePoly_1 = bigint_nondet_rem!(ctx, x6368, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6370, x6, 4), x6371, 4), x6368, 4),
        24387,
        2,
    )?;
    let x6372: BytePoly_3 = bigint_nondet_quot!(ctx, x6369, x6, 3);
    let x6373: BytePoly_1 = bigint_nondet_rem!(ctx, x6369, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6372, x6, 4), x6373, 4), x6369, 4),
        24387,
        2,
    )?;
    let x6374: BytePoly_2 = bigint_mul!(x6335, x6335, 2);
    let x6375: BytePoly_3 = bigint_nondet_quot!(ctx, x6374, x6, 3);
    let x6376: BytePoly_1 = bigint_nondet_rem!(ctx, x6374, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6375, x6, 4), x6376, 4), x6374, 4),
        24387,
        2,
    )?;
    let x6377: BytePoly_2 = bigint_add!(bigint_mul!(x6376, x0, 2), x5, 2);
    let x6378: BytePoly_3 = bigint_nondet_quot!(ctx, x6377, x6, 3);
    let x6379: BytePoly_1 = bigint_nondet_rem!(ctx, x6377, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6378, x6, 4), x6379, 4), x6377, 4),
        24387,
        2,
    )?;
    let x6380: BytePoly_1 = bigint_add!(x6341, x6341, 1);
    let x6381: BytePoly_1 = bigint_nondet_quot!(ctx, x6380, x6, 1);
    let x6382: BytePoly_1 = bigint_nondet_rem!(ctx, x6380, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6381, x6, 2), x6382, 2), x6380, 2),
        8131,
        2,
    )?;
    let x6383: BytePoly_1 = bigint_nondet_inv!(ctx, x6382, x6, 1);
    let x6384: BytePoly_2 = bigint_mul!(x6382, x6383, 2);
    let x6385: BytePoly_3 = bigint_nondet_quot!(ctx, x6384, x6, 3);
    let x6386: BytePoly_1 = bigint_nondet_rem!(ctx, x6384, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6385, x6, 4), x6386, 4), x6384, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6386, x3, 1), 34, 1)?;
    let x6387: BytePoly_2 = bigint_mul!(x6379, x6383, 2);
    let x6388: BytePoly_3 = bigint_nondet_quot!(ctx, x6387, x6, 3);
    let x6389: BytePoly_1 = bigint_nondet_rem!(ctx, x6387, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6388, x6, 4), x6389, 4), x6387, 4),
        24387,
        2,
    )?;
    let x6390: BytePoly_2 = bigint_mul!(x6389, x6335, 2);
    let x6391: BytePoly_3 = bigint_nondet_quot!(ctx, x6390, x6, 3);
    let x6392: BytePoly_1 = bigint_nondet_rem!(ctx, x6390, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6391, x6, 4), x6392, 4), x6390, 4),
        24387,
        2,
    )?;
    let x6393: BytePoly_1 = bigint_add!(bigint_sub!(x6341, x6392, 1), x6, 1);
    let x6394: BytePoly_1 = bigint_nondet_quot!(ctx, x6393, x6, 1);
    let x6395: BytePoly_1 = bigint_nondet_rem!(ctx, x6393, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6394, x6, 2), x6395, 2), x6393, 2),
        8131,
        2,
    )?;
    let x6396: BytePoly_2 = bigint_mul!(x6389, x6389, 2);
    let x6397: BytePoly_3 = bigint_nondet_quot!(ctx, x6396, x6, 3);
    let x6398: BytePoly_1 = bigint_nondet_rem!(ctx, x6396, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6397, x6, 4), x6398, 4), x6396, 4),
        24387,
        2,
    )?;
    let x6399: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6398, x6335, 1), x6, 1), x6335, 1),
        x6,
        1
    );
    let x6400: BytePoly_1 = bigint_nondet_quot!(ctx, x6399, x6, 1);
    let x6401: BytePoly_1 = bigint_nondet_rem!(ctx, x6399, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6400, x6, 2), x6401, 2), x6399, 2),
        8131,
        2,
    )?;
    let x6402: BytePoly_2 = bigint_mul!(x6389, x6401, 2);
    let x6403: BytePoly_3 = bigint_nondet_quot!(ctx, x6402, x6, 3);
    let x6404: BytePoly_1 = bigint_nondet_rem!(ctx, x6402, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6403, x6, 4), x6404, 4), x6402, 4),
        24387,
        2,
    )?;
    let x6405: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6404, x6395, 1), 1), x6, 1);
    let x6406: BytePoly_1 = bigint_nondet_quot!(ctx, x6405, x6, 1);
    let x6407: BytePoly_1 = bigint_nondet_rem!(ctx, x6405, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6406, x6, 2), x6407, 2), x6405, 2),
        8131,
        2,
    )?;
    let x6408: BytePoly_1 = bigint_nondet_rem!(ctx, x6343, x2, 1);
    let x6409: BytePoly_2 = bigint_nondet_quot!(ctx, x6343, x2, 2);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6409, x2, 3), x6408, 3), x6343, 3),
        16259,
        2,
    )?;
    let x6410: BytePoly_1 = bigint_sub!(x3, x6408, 1);
    eqz(ctx, &bigint_mul!(x6408, x6410, 2), 8131, 2)?;
    let x6411: BytePoly_1 = bigint_add!(bigint_sub!(x6401, x6371, 1), x6, 1);
    let x6412: BytePoly_1 = bigint_nondet_inv!(ctx, x6411, x6, 1);
    let x6413: BytePoly_2 = bigint_mul!(x6411, x6412, 2);
    let x6414: BytePoly_3 = bigint_nondet_quot!(ctx, x6413, x6, 3);
    let x6415: BytePoly_1 = bigint_nondet_rem!(ctx, x6413, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6414, x6, 4), x6415, 4), x6413, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6415, x1, 1), 34, 1)?;
    let x6416: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6407, x6373, 1), x6, 1), x6412, 2);
    let x6417: BytePoly_3 = bigint_nondet_quot!(ctx, x6416, x6, 3);
    let x6418: BytePoly_1 = bigint_nondet_rem!(ctx, x6416, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6417, x6, 4), x6418, 4), x6416, 4),
        24387,
        2,
    )?;
    let x6419: BytePoly_2 = bigint_mul!(x6418, x6371, 2);
    let x6420: BytePoly_3 = bigint_nondet_quot!(ctx, x6419, x6, 3);
    let x6421: BytePoly_1 = bigint_nondet_rem!(ctx, x6419, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6420, x6, 4), x6421, 4), x6419, 4),
        24387,
        2,
    )?;
    let x6422: BytePoly_1 = bigint_add!(bigint_sub!(x6373, x6421, 1), x6, 1);
    let x6423: BytePoly_1 = bigint_nondet_quot!(ctx, x6422, x6, 1);
    let x6424: BytePoly_1 = bigint_nondet_rem!(ctx, x6422, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6423, x6, 2), x6424, 2), x6422, 2),
        8131,
        2,
    )?;
    let x6425: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6418, x6418, 2), x6371, 2), x6, 2),
            x6401,
            2
        ),
        x6,
        2
    );
    let x6426: BytePoly_3 = bigint_nondet_quot!(ctx, x6425, x6, 3);
    let x6427: BytePoly_1 = bigint_nondet_rem!(ctx, x6425, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6426, x6, 4), x6427, 4), x6425, 4),
        24387,
        2,
    )?;
    let x6428: BytePoly_2 = bigint_mul!(x6418, x6427, 2);
    let x6429: BytePoly_3 = bigint_nondet_quot!(ctx, x6428, x6, 3);
    let x6430: BytePoly_1 = bigint_nondet_rem!(ctx, x6428, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6429, x6, 4), x6430, 4), x6428, 4),
        24387,
        2,
    )?;
    let x6431: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6430, x6424, 1), 1), x6, 1);
    let x6432: BytePoly_1 = bigint_nondet_quot!(ctx, x6431, x6, 1);
    let x6433: BytePoly_1 = bigint_nondet_rem!(ctx, x6431, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6432, x6, 2), x6433, 2), x6431, 2),
        8131,
        2,
    )?;
    let x6434: BytePoly_2 = bigint_add!(
        bigint_mul!(x6427, x6408, 2),
        bigint_mul!(x6371, x6410, 2),
        2
    );
    let x6435: BytePoly_2 = bigint_add!(
        bigint_mul!(x6433, x6408, 2),
        bigint_mul!(x6373, x6410, 2),
        2
    );
    let x6436: BytePoly_3 = bigint_nondet_quot!(ctx, x6434, x6, 3);
    let x6437: BytePoly_1 = bigint_nondet_rem!(ctx, x6434, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6436, x6, 4), x6437, 4), x6434, 4),
        24387,
        2,
    )?;
    let x6438: BytePoly_3 = bigint_nondet_quot!(ctx, x6435, x6, 3);
    let x6439: BytePoly_1 = bigint_nondet_rem!(ctx, x6435, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6438, x6, 4), x6439, 4), x6435, 4),
        24387,
        2,
    )?;
    let x6440: BytePoly_2 = bigint_mul!(x6401, x6401, 2);
    let x6441: BytePoly_3 = bigint_nondet_quot!(ctx, x6440, x6, 3);
    let x6442: BytePoly_1 = bigint_nondet_rem!(ctx, x6440, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6441, x6, 4), x6442, 4), x6440, 4),
        24387,
        2,
    )?;
    let x6443: BytePoly_2 = bigint_add!(bigint_mul!(x6442, x0, 2), x5, 2);
    let x6444: BytePoly_3 = bigint_nondet_quot!(ctx, x6443, x6, 3);
    let x6445: BytePoly_1 = bigint_nondet_rem!(ctx, x6443, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6444, x6, 4), x6445, 4), x6443, 4),
        24387,
        2,
    )?;
    let x6446: BytePoly_1 = bigint_add!(x6407, x6407, 1);
    let x6447: BytePoly_1 = bigint_nondet_quot!(ctx, x6446, x6, 1);
    let x6448: BytePoly_1 = bigint_nondet_rem!(ctx, x6446, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6447, x6, 2), x6448, 2), x6446, 2),
        8131,
        2,
    )?;
    let x6449: BytePoly_1 = bigint_nondet_inv!(ctx, x6448, x6, 1);
    let x6450: BytePoly_2 = bigint_mul!(x6448, x6449, 2);
    let x6451: BytePoly_3 = bigint_nondet_quot!(ctx, x6450, x6, 3);
    let x6452: BytePoly_1 = bigint_nondet_rem!(ctx, x6450, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6451, x6, 4), x6452, 4), x6450, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6452, x3, 1), 34, 1)?;
    let x6453: BytePoly_2 = bigint_mul!(x6445, x6449, 2);
    let x6454: BytePoly_3 = bigint_nondet_quot!(ctx, x6453, x6, 3);
    let x6455: BytePoly_1 = bigint_nondet_rem!(ctx, x6453, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6454, x6, 4), x6455, 4), x6453, 4),
        24387,
        2,
    )?;
    let x6456: BytePoly_2 = bigint_mul!(x6455, x6401, 2);
    let x6457: BytePoly_3 = bigint_nondet_quot!(ctx, x6456, x6, 3);
    let x6458: BytePoly_1 = bigint_nondet_rem!(ctx, x6456, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6457, x6, 4), x6458, 4), x6456, 4),
        24387,
        2,
    )?;
    let x6459: BytePoly_1 = bigint_add!(bigint_sub!(x6407, x6458, 1), x6, 1);
    let x6460: BytePoly_1 = bigint_nondet_quot!(ctx, x6459, x6, 1);
    let x6461: BytePoly_1 = bigint_nondet_rem!(ctx, x6459, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6460, x6, 2), x6461, 2), x6459, 2),
        8131,
        2,
    )?;
    let x6462: BytePoly_2 = bigint_mul!(x6455, x6455, 2);
    let x6463: BytePoly_3 = bigint_nondet_quot!(ctx, x6462, x6, 3);
    let x6464: BytePoly_1 = bigint_nondet_rem!(ctx, x6462, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6463, x6, 4), x6464, 4), x6462, 4),
        24387,
        2,
    )?;
    let x6465: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x6464, x6401, 1), x6, 1), x6401, 1),
        x6,
        1
    );
    let x6466: BytePoly_1 = bigint_nondet_quot!(ctx, x6465, x6, 1);
    let x6467: BytePoly_1 = bigint_nondet_rem!(ctx, x6465, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6466, x6, 2), x6467, 2), x6465, 2),
        8131,
        2,
    )?;
    let x6468: BytePoly_2 = bigint_mul!(x6455, x6467, 2);
    let x6469: BytePoly_3 = bigint_nondet_quot!(ctx, x6468, x6, 3);
    let x6470: BytePoly_1 = bigint_nondet_rem!(ctx, x6468, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6469, x6, 4), x6470, 4), x6468, 4),
        24387,
        2,
    )?;
    let x6471: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6470, x6461, 1), 1), x6, 1);
    let x6472: BytePoly_1 = bigint_nondet_quot!(ctx, x6471, x6, 1);
    let x6473: BytePoly_1 = bigint_nondet_rem!(ctx, x6471, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6472, x6, 2), x6473, 2), x6471, 2),
        8131,
        2,
    )?;
    let x6474: BytePoly_1 = bigint_add!(bigint_sub!(x15, x6437, 1), x6, 1);
    let x6475: BytePoly_1 = bigint_nondet_inv!(ctx, x6474, x6, 1);
    let x6476: BytePoly_2 = bigint_mul!(x6474, x6475, 2);
    let x6477: BytePoly_3 = bigint_nondet_quot!(ctx, x6476, x6, 3);
    let x6478: BytePoly_1 = bigint_nondet_rem!(ctx, x6476, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6477, x6, 4), x6478, 4), x6476, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6478, x1, 1), 34, 1)?;
    let x6479: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2172, x6439, 1), x6, 1), x6475, 2);
    let x6480: BytePoly_3 = bigint_nondet_quot!(ctx, x6479, x6, 3);
    let x6481: BytePoly_1 = bigint_nondet_rem!(ctx, x6479, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6480, x6, 4), x6481, 4), x6479, 4),
        24387,
        2,
    )?;
    let x6482: BytePoly_2 = bigint_mul!(x6481, x6437, 2);
    let x6483: BytePoly_3 = bigint_nondet_quot!(ctx, x6482, x6, 3);
    let x6484: BytePoly_1 = bigint_nondet_rem!(ctx, x6482, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6483, x6, 4), x6484, 4), x6482, 4),
        24387,
        2,
    )?;
    let x6485: BytePoly_1 = bigint_add!(bigint_sub!(x6439, x6484, 1), x6, 1);
    let x6486: BytePoly_1 = bigint_nondet_quot!(ctx, x6485, x6, 1);
    let x6487: BytePoly_1 = bigint_nondet_rem!(ctx, x6485, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6486, x6, 2), x6487, 2), x6485, 2),
        8131,
        2,
    )?;
    let x6488: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6481, x6481, 2), x6437, 2), x6, 2),
            x15,
            2
        ),
        x6,
        2
    );
    let x6489: BytePoly_3 = bigint_nondet_quot!(ctx, x6488, x6, 3);
    let x6490: BytePoly_1 = bigint_nondet_rem!(ctx, x6488, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6489, x6, 4), x6490, 4), x6488, 4),
        24387,
        2,
    )?;
    let x6491: BytePoly_2 = bigint_mul!(x6481, x6490, 2);
    let x6492: BytePoly_3 = bigint_nondet_quot!(ctx, x6491, x6, 3);
    let x6493: BytePoly_1 = bigint_nondet_rem!(ctx, x6491, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6492, x6, 4), x6493, 4), x6491, 4),
        24387,
        2,
    )?;
    let x6494: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6493, x6487, 1), 1), x6, 1);
    let x6495: BytePoly_1 = bigint_nondet_quot!(ctx, x6494, x6, 1);
    let x6496: BytePoly_1 = bigint_nondet_rem!(ctx, x6494, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6495, x6, 2), x6496, 2), x6494, 2),
        8131,
        2,
    )?;
    let x6497: BytePoly_1 = bigint_add!(bigint_sub!(x6490, x4346, 1), x6, 1);
    let x6498: BytePoly_1 = bigint_nondet_inv!(ctx, x6497, x6, 1);
    let x6499: BytePoly_2 = bigint_mul!(x6497, x6498, 2);
    let x6500: BytePoly_3 = bigint_nondet_quot!(ctx, x6499, x6, 3);
    let x6501: BytePoly_1 = bigint_nondet_rem!(ctx, x6499, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6500, x6, 4), x6501, 4), x6499, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x6501, x1, 1), 34, 1)?;
    let x6502: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6496, x4352, 1), x6, 1), x6498, 2);
    let x6503: BytePoly_3 = bigint_nondet_quot!(ctx, x6502, x6, 3);
    let x6504: BytePoly_1 = bigint_nondet_rem!(ctx, x6502, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6503, x6, 4), x6504, 4), x6502, 4),
        24387,
        2,
    )?;
    let x6505: BytePoly_2 = bigint_mul!(x6504, x4346, 2);
    let x6506: BytePoly_3 = bigint_nondet_quot!(ctx, x6505, x6, 3);
    let x6507: BytePoly_1 = bigint_nondet_rem!(ctx, x6505, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6506, x6, 4), x6507, 4), x6505, 4),
        24387,
        2,
    )?;
    let x6508: BytePoly_1 = bigint_add!(bigint_sub!(x4352, x6507, 1), x6, 1);
    let x6509: BytePoly_1 = bigint_nondet_quot!(ctx, x6508, x6, 1);
    let x6510: BytePoly_1 = bigint_nondet_rem!(ctx, x6508, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6509, x6, 2), x6510, 2), x6508, 2),
        8131,
        2,
    )?;
    let x6511: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x6504, x6504, 2), x4346, 2), x6, 2),
            x6490,
            2
        ),
        x6,
        2
    );
    let x6512: BytePoly_3 = bigint_nondet_quot!(ctx, x6511, x6, 3);
    let x6513: BytePoly_1 = bigint_nondet_rem!(ctx, x6511, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6512, x6, 4), x6513, 4), x6511, 4),
        24387,
        2,
    )?;
    let x6514: BytePoly_2 = bigint_mul!(x6504, x6513, 2);
    let x6515: BytePoly_3 = bigint_nondet_quot!(ctx, x6514, x6, 3);
    let x6516: BytePoly_1 = bigint_nondet_rem!(ctx, x6514, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6515, x6, 4), x6516, 4), x6514, 4),
        24387,
        2,
    )?;
    let x6517: BytePoly_1 = bigint_add!(bigint_sub!(x6, bigint_add!(x6516, x6510, 1), 1), x6, 1);
    let x6518: BytePoly_1 = bigint_nondet_quot!(ctx, x6517, x6, 1);
    let x6519: BytePoly_1 = bigint_nondet_rem!(ctx, x6517, x6, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x6518, x6, 2), x6519, 2), x6517, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x13, x6513, 2), 34, 1)?;
    return Ok(());
}
pub fn ecdsa_verify_256(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 3);
    let x1: BytePoly_1 = bigint_const!(ctx, 1);
    let x2: BytePoly_1 = bigint_const!(ctx, 2);
    let x3: BytePoly_1 = bigint_const!(ctx, 1);
    let x4: BytePoly_32 = bigint_const!(
        ctx, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0
    );
    let x5: BytePoly_32 = bigint_const!(
        ctx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0
    );
    let x6: BytePoly_32 = bigint_const!(
        ctx, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0
    );
    let x7: BytePoly_32 = bigint_def!(ctx, 32, 0, 1);
    let x8: BytePoly_32 = bigint_def!(ctx, 32, 1, 1);
    let x9: BytePoly_33 = bigint_def!(ctx, 33, 2, 1);
    let x10: BytePoly_32 = bigint_def!(ctx, 32, 3, 1);
    let x11: BytePoly_32 = bigint_def!(ctx, 32, 4, 1);
    let x12: BytePoly_33 = bigint_def!(ctx, 33, 5, 1);
    let x13: BytePoly_33 = bigint_def!(ctx, 33, 6, 1);
    let x14: BytePoly_33 = bigint_def!(ctx, 33, 7, 1);
    let x15: BytePoly_32 = bigint_def!(ctx, 32, 8, 1);
    let x16: BytePoly_32 = bigint_def!(ctx, 32, 9, 1);
    let x17: BytePoly_64 = bigint_mul!(x11, x11, 64);
    let x18: BytePoly_66 = bigint_nondet_quot!(ctx, x17, x6, 66);
    let x19: BytePoly_32 = bigint_nondet_rem!(ctx, x17, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x18, x6, 98), x19, 98), x17, 98),
        536459,
        4,
    )?;
    let x20: BytePoly_64 = bigint_mul!(x10, x10, 64);
    let x21: BytePoly_66 = bigint_nondet_quot!(ctx, x20, x6, 66);
    let x22: BytePoly_32 = bigint_nondet_rem!(ctx, x20, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x21, x6, 98), x22, 98), x20, 98),
        536459,
        4,
    )?;
    let x23: BytePoly_64 = bigint_mul!(x10, x22, 64);
    let x24: BytePoly_66 = bigint_nondet_quot!(ctx, x23, x6, 66);
    let x25: BytePoly_32 = bigint_nondet_rem!(ctx, x23, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x24, x6, 98), x25, 98), x23, 98),
        536459,
        4,
    )?;
    let x26: BytePoly_64 = bigint_mul!(x10, x5, 64);
    let x27: BytePoly_66 = bigint_nondet_quot!(ctx, x26, x6, 66);
    let x28: BytePoly_32 = bigint_nondet_rem!(ctx, x26, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x27, x6, 98), x28, 98), x26, 98),
        536459,
        4,
    )?;
    let x29: BytePoly_32 = bigint_add!(bigint_add!(x25, x28, 32), x4, 32);
    let x30: BytePoly_32 = bigint_nondet_quot!(ctx, x29, x6, 32);
    let x31: BytePoly_32 = bigint_nondet_rem!(ctx, x29, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x30, x6, 64), x31, 64), x29, 64),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x19, x31, 32), 34, 1)?;
    let x32: BytePoly_64 = bigint_mul!(x16, x16, 64);
    let x33: BytePoly_66 = bigint_nondet_quot!(ctx, x32, x6, 66);
    let x34: BytePoly_32 = bigint_nondet_rem!(ctx, x32, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x33, x6, 98), x34, 98), x32, 98),
        536459,
        4,
    )?;
    let x35: BytePoly_64 = bigint_mul!(x15, x15, 64);
    let x36: BytePoly_66 = bigint_nondet_quot!(ctx, x35, x6, 66);
    let x37: BytePoly_32 = bigint_nondet_rem!(ctx, x35, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x36, x6, 98), x37, 98), x35, 98),
        536459,
        4,
    )?;
    let x38: BytePoly_64 = bigint_mul!(x15, x37, 64);
    let x39: BytePoly_66 = bigint_nondet_quot!(ctx, x38, x6, 66);
    let x40: BytePoly_32 = bigint_nondet_rem!(ctx, x38, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x39, x6, 98), x40, 98), x38, 98),
        536459,
        4,
    )?;
    let x41: BytePoly_64 = bigint_mul!(x15, x5, 64);
    let x42: BytePoly_66 = bigint_nondet_quot!(ctx, x41, x6, 66);
    let x43: BytePoly_32 = bigint_nondet_rem!(ctx, x41, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x42, x6, 98), x43, 98), x41, 98),
        536459,
        4,
    )?;
    let x44: BytePoly_32 = bigint_add!(bigint_add!(x40, x43, 32), x4, 32);
    let x45: BytePoly_32 = bigint_nondet_quot!(ctx, x44, x6, 32);
    let x46: BytePoly_32 = bigint_nondet_rem!(ctx, x44, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x45, x6, 64), x46, 64), x44, 64),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x34, x46, 32), 34, 1)?;
    let x47: BytePoly_33 = bigint_sub!(x9, x3, 33);
    let x48: BytePoly_66 = bigint_nondet_quot!(ctx, x32, x6, 66);
    let x49: BytePoly_32 = bigint_nondet_rem!(ctx, x32, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x48, x6, 98), x49, 98), x32, 98),
        536459,
        4,
    )?;
    let x50: BytePoly_66 = bigint_nondet_quot!(ctx, x35, x6, 66);
    let x51: BytePoly_32 = bigint_nondet_rem!(ctx, x35, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x50, x6, 98), x51, 98), x35, 98),
        536459,
        4,
    )?;
    let x52: BytePoly_64 = bigint_mul!(x15, x51, 64);
    let x53: BytePoly_66 = bigint_nondet_quot!(ctx, x52, x6, 66);
    let x54: BytePoly_32 = bigint_nondet_rem!(ctx, x52, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x53, x6, 98), x54, 98), x52, 98),
        536459,
        4,
    )?;
    let x55: BytePoly_66 = bigint_nondet_quot!(ctx, x41, x6, 66);
    let x56: BytePoly_32 = bigint_nondet_rem!(ctx, x41, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x55, x6, 98), x56, 98), x41, 98),
        536459,
        4,
    )?;
    let x57: BytePoly_32 = bigint_add!(bigint_add!(x54, x56, 32), x4, 32);
    let x58: BytePoly_32 = bigint_nondet_quot!(ctx, x57, x6, 32);
    let x59: BytePoly_32 = bigint_nondet_rem!(ctx, x57, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x58, x6, 64), x59, 64), x57, 64),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x49, x59, 32), 34, 1)?;
    let x60: BytePoly_1 = bigint_nondet_rem!(ctx, x47, x2, 1);
    let x61: BytePoly_33 = bigint_nondet_quot!(ctx, x47, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x61, x2, 34), x60, 34), x47, 34),
        268231,
        4,
    )?;
    let x62: BytePoly_1 = bigint_sub!(x3, x60, 1);
    eqz(ctx, &bigint_mul!(x60, x62, 2), 8131, 2)?;
    let x63: BytePoly_32 = bigint_add!(bigint_sub!(x11, x16, 32), x6, 32);
    let x64: BytePoly_32 = bigint_add!(bigint_sub!(x10, x15, 32), x6, 32);
    let x65: BytePoly_32 = bigint_nondet_inv!(ctx, x64, x6, 32);
    let x66: BytePoly_64 = bigint_mul!(x64, x65, 64);
    let x67: BytePoly_66 = bigint_nondet_quot!(ctx, x66, x6, 66);
    let x68: BytePoly_32 = bigint_nondet_rem!(ctx, x66, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x67, x6, 98), x68, 98), x66, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x68, x1, 32), 34, 1)?;
    let x69: BytePoly_64 = bigint_mul!(x63, x65, 64);
    let x70: BytePoly_66 = bigint_nondet_quot!(ctx, x69, x6, 66);
    let x71: BytePoly_32 = bigint_nondet_rem!(ctx, x69, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x70, x6, 98), x71, 98), x69, 98),
        536459,
        4,
    )?;
    let x72: BytePoly_64 = bigint_mul!(x71, x15, 64);
    let x73: BytePoly_66 = bigint_nondet_quot!(ctx, x72, x6, 66);
    let x74: BytePoly_32 = bigint_nondet_rem!(ctx, x72, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x73, x6, 98), x74, 98), x72, 98),
        536459,
        4,
    )?;
    let x75: BytePoly_32 = bigint_add!(bigint_sub!(x16, x74, 32), x6, 32);
    let x76: BytePoly_32 = bigint_nondet_quot!(ctx, x75, x6, 32);
    let x77: BytePoly_32 = bigint_nondet_rem!(ctx, x75, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x76, x6, 64), x77, 64), x75, 64),
        260103,
        4,
    )?;
    let x78: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x71, x71, 64), x15, 64), x6, 64),
            x10,
            64
        ),
        x6,
        64
    );
    let x79: BytePoly_66 = bigint_nondet_quot!(ctx, x78, x6, 66);
    let x80: BytePoly_32 = bigint_nondet_rem!(ctx, x78, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x79, x6, 98), x80, 98), x78, 98),
        536459,
        4,
    )?;
    let x81: BytePoly_64 = bigint_mul!(x71, x80, 64);
    let x82: BytePoly_66 = bigint_nondet_quot!(ctx, x81, x6, 66);
    let x83: BytePoly_32 = bigint_nondet_rem!(ctx, x81, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x82, x6, 98), x83, 98), x81, 98),
        536459,
        4,
    )?;
    let x84: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x83, x77, 32), 32), x6, 32);
    let x85: BytePoly_32 = bigint_nondet_quot!(ctx, x84, x6, 32);
    let x86: BytePoly_32 = bigint_nondet_rem!(ctx, x84, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x85, x6, 64), x86, 64), x84, 64),
        260103,
        4,
    )?;
    let x87: BytePoly_33 = bigint_add!(bigint_mul!(x80, x60, 33), bigint_mul!(x15, x62, 33), 33);
    let x88: BytePoly_33 = bigint_add!(bigint_mul!(x86, x60, 33), bigint_mul!(x16, x62, 33), 33);
    let x89: BytePoly_35 = bigint_nondet_quot!(ctx, x87, x6, 35);
    let x90: BytePoly_32 = bigint_nondet_rem!(ctx, x87, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x89, x6, 67), x90, 67), x87, 67),
        284487,
        4,
    )?;
    let x91: BytePoly_35 = bigint_nondet_quot!(ctx, x88, x6, 35);
    let x92: BytePoly_32 = bigint_nondet_rem!(ctx, x88, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x91, x6, 67), x92, 67), x88, 67),
        284487,
        4,
    )?;
    let x93: BytePoly_66 = bigint_nondet_quot!(ctx, x20, x6, 66);
    let x94: BytePoly_32 = bigint_nondet_rem!(ctx, x20, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x93, x6, 98), x94, 98), x20, 98),
        536459,
        4,
    )?;
    let x95: BytePoly_33 = bigint_add!(bigint_mul!(x94, x0, 33), x5, 33);
    let x96: BytePoly_35 = bigint_nondet_quot!(ctx, x95, x6, 35);
    let x97: BytePoly_32 = bigint_nondet_rem!(ctx, x95, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x96, x6, 67), x97, 67), x95, 67),
        284487,
        4,
    )?;
    let x98: BytePoly_32 = bigint_add!(x11, x11, 32);
    let x99: BytePoly_32 = bigint_nondet_quot!(ctx, x98, x6, 32);
    let x100: BytePoly_32 = bigint_nondet_rem!(ctx, x98, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x99, x6, 64), x100, 64), x98, 64),
        260103,
        4,
    )?;
    let x101: BytePoly_32 = bigint_nondet_inv!(ctx, x100, x6, 32);
    let x102: BytePoly_64 = bigint_mul!(x100, x101, 64);
    let x103: BytePoly_66 = bigint_nondet_quot!(ctx, x102, x6, 66);
    let x104: BytePoly_32 = bigint_nondet_rem!(ctx, x102, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x103, x6, 98), x104, 98), x102, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x104, x3, 32), 34, 1)?;
    let x105: BytePoly_64 = bigint_mul!(x97, x101, 64);
    let x106: BytePoly_66 = bigint_nondet_quot!(ctx, x105, x6, 66);
    let x107: BytePoly_32 = bigint_nondet_rem!(ctx, x105, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x106, x6, 98), x107, 98), x105, 98),
        536459,
        4,
    )?;
    let x108: BytePoly_64 = bigint_mul!(x107, x10, 64);
    let x109: BytePoly_66 = bigint_nondet_quot!(ctx, x108, x6, 66);
    let x110: BytePoly_32 = bigint_nondet_rem!(ctx, x108, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x109, x6, 98), x110, 98), x108, 98),
        536459,
        4,
    )?;
    let x111: BytePoly_32 = bigint_add!(bigint_sub!(x11, x110, 32), x6, 32);
    let x112: BytePoly_32 = bigint_nondet_quot!(ctx, x111, x6, 32);
    let x113: BytePoly_32 = bigint_nondet_rem!(ctx, x111, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x112, x6, 64), x113, 64), x111, 64),
        260103,
        4,
    )?;
    let x114: BytePoly_64 = bigint_mul!(x107, x107, 64);
    let x115: BytePoly_66 = bigint_nondet_quot!(ctx, x114, x6, 66);
    let x116: BytePoly_32 = bigint_nondet_rem!(ctx, x114, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x115, x6, 98), x116, 98), x114, 98),
        536459,
        4,
    )?;
    let x117: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x116, x10, 32), x6, 32), x10, 32),
        x6,
        32
    );
    let x118: BytePoly_32 = bigint_nondet_quot!(ctx, x117, x6, 32);
    let x119: BytePoly_32 = bigint_nondet_rem!(ctx, x117, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x118, x6, 64), x119, 64), x117, 64),
        260103,
        4,
    )?;
    let x120: BytePoly_64 = bigint_mul!(x107, x119, 64);
    let x121: BytePoly_66 = bigint_nondet_quot!(ctx, x120, x6, 66);
    let x122: BytePoly_32 = bigint_nondet_rem!(ctx, x120, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x121, x6, 98), x122, 98), x120, 98),
        536459,
        4,
    )?;
    let x123: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x122, x113, 32), 32), x6, 32);
    let x124: BytePoly_32 = bigint_nondet_quot!(ctx, x123, x6, 32);
    let x125: BytePoly_32 = bigint_nondet_rem!(ctx, x123, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x124, x6, 64), x125, 64), x123, 64),
        260103,
        4,
    )?;
    let x126: BytePoly_1 = bigint_nondet_rem!(ctx, x61, x2, 1);
    let x127: BytePoly_33 = bigint_nondet_quot!(ctx, x61, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x127, x2, 34), x126, 34), x61, 34),
        268231,
        4,
    )?;
    let x128: BytePoly_1 = bigint_sub!(x3, x126, 1);
    eqz(ctx, &bigint_mul!(x126, x128, 2), 8131, 2)?;
    let x129: BytePoly_32 = bigint_add!(bigint_sub!(x119, x90, 32), x6, 32);
    let x130: BytePoly_32 = bigint_nondet_inv!(ctx, x129, x6, 32);
    let x131: BytePoly_64 = bigint_mul!(x129, x130, 64);
    let x132: BytePoly_66 = bigint_nondet_quot!(ctx, x131, x6, 66);
    let x133: BytePoly_32 = bigint_nondet_rem!(ctx, x131, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x132, x6, 98), x133, 98), x131, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x133, x1, 32), 34, 1)?;
    let x134: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x125, x92, 32), x6, 32), x130, 64);
    let x135: BytePoly_66 = bigint_nondet_quot!(ctx, x134, x6, 66);
    let x136: BytePoly_32 = bigint_nondet_rem!(ctx, x134, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x135, x6, 98), x136, 98), x134, 98),
        536459,
        4,
    )?;
    let x137: BytePoly_64 = bigint_mul!(x136, x90, 64);
    let x138: BytePoly_66 = bigint_nondet_quot!(ctx, x137, x6, 66);
    let x139: BytePoly_32 = bigint_nondet_rem!(ctx, x137, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x138, x6, 98), x139, 98), x137, 98),
        536459,
        4,
    )?;
    let x140: BytePoly_32 = bigint_add!(bigint_sub!(x92, x139, 32), x6, 32);
    let x141: BytePoly_32 = bigint_nondet_quot!(ctx, x140, x6, 32);
    let x142: BytePoly_32 = bigint_nondet_rem!(ctx, x140, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x141, x6, 64), x142, 64), x140, 64),
        260103,
        4,
    )?;
    let x143: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x136, x136, 64), x90, 64), x6, 64),
            x119,
            64
        ),
        x6,
        64
    );
    let x144: BytePoly_66 = bigint_nondet_quot!(ctx, x143, x6, 66);
    let x145: BytePoly_32 = bigint_nondet_rem!(ctx, x143, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x144, x6, 98), x145, 98), x143, 98),
        536459,
        4,
    )?;
    let x146: BytePoly_64 = bigint_mul!(x136, x145, 64);
    let x147: BytePoly_66 = bigint_nondet_quot!(ctx, x146, x6, 66);
    let x148: BytePoly_32 = bigint_nondet_rem!(ctx, x146, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x147, x6, 98), x148, 98), x146, 98),
        536459,
        4,
    )?;
    let x149: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x148, x142, 32), 32), x6, 32);
    let x150: BytePoly_32 = bigint_nondet_quot!(ctx, x149, x6, 32);
    let x151: BytePoly_32 = bigint_nondet_rem!(ctx, x149, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x150, x6, 64), x151, 64), x149, 64),
        260103,
        4,
    )?;
    let x152: BytePoly_33 =
        bigint_add!(bigint_mul!(x145, x126, 33), bigint_mul!(x90, x128, 33), 33);
    let x153: BytePoly_33 =
        bigint_add!(bigint_mul!(x151, x126, 33), bigint_mul!(x92, x128, 33), 33);
    let x154: BytePoly_35 = bigint_nondet_quot!(ctx, x152, x6, 35);
    let x155: BytePoly_32 = bigint_nondet_rem!(ctx, x152, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x154, x6, 67), x155, 67), x152, 67),
        284487,
        4,
    )?;
    let x156: BytePoly_35 = bigint_nondet_quot!(ctx, x153, x6, 35);
    let x157: BytePoly_32 = bigint_nondet_rem!(ctx, x153, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x156, x6, 67), x157, 67), x153, 67),
        284487,
        4,
    )?;
    let x158: BytePoly_64 = bigint_mul!(x119, x119, 64);
    let x159: BytePoly_66 = bigint_nondet_quot!(ctx, x158, x6, 66);
    let x160: BytePoly_32 = bigint_nondet_rem!(ctx, x158, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x159, x6, 98), x160, 98), x158, 98),
        536459,
        4,
    )?;
    let x161: BytePoly_33 = bigint_add!(bigint_mul!(x160, x0, 33), x5, 33);
    let x162: BytePoly_35 = bigint_nondet_quot!(ctx, x161, x6, 35);
    let x163: BytePoly_32 = bigint_nondet_rem!(ctx, x161, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x162, x6, 67), x163, 67), x161, 67),
        284487,
        4,
    )?;
    let x164: BytePoly_32 = bigint_add!(x125, x125, 32);
    let x165: BytePoly_32 = bigint_nondet_quot!(ctx, x164, x6, 32);
    let x166: BytePoly_32 = bigint_nondet_rem!(ctx, x164, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x165, x6, 64), x166, 64), x164, 64),
        260103,
        4,
    )?;
    let x167: BytePoly_32 = bigint_nondet_inv!(ctx, x166, x6, 32);
    let x168: BytePoly_64 = bigint_mul!(x166, x167, 64);
    let x169: BytePoly_66 = bigint_nondet_quot!(ctx, x168, x6, 66);
    let x170: BytePoly_32 = bigint_nondet_rem!(ctx, x168, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x169, x6, 98), x170, 98), x168, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x170, x3, 32), 34, 1)?;
    let x171: BytePoly_64 = bigint_mul!(x163, x167, 64);
    let x172: BytePoly_66 = bigint_nondet_quot!(ctx, x171, x6, 66);
    let x173: BytePoly_32 = bigint_nondet_rem!(ctx, x171, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x172, x6, 98), x173, 98), x171, 98),
        536459,
        4,
    )?;
    let x174: BytePoly_64 = bigint_mul!(x173, x119, 64);
    let x175: BytePoly_66 = bigint_nondet_quot!(ctx, x174, x6, 66);
    let x176: BytePoly_32 = bigint_nondet_rem!(ctx, x174, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x175, x6, 98), x176, 98), x174, 98),
        536459,
        4,
    )?;
    let x177: BytePoly_32 = bigint_add!(bigint_sub!(x125, x176, 32), x6, 32);
    let x178: BytePoly_32 = bigint_nondet_quot!(ctx, x177, x6, 32);
    let x179: BytePoly_32 = bigint_nondet_rem!(ctx, x177, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x178, x6, 64), x179, 64), x177, 64),
        260103,
        4,
    )?;
    let x180: BytePoly_64 = bigint_mul!(x173, x173, 64);
    let x181: BytePoly_66 = bigint_nondet_quot!(ctx, x180, x6, 66);
    let x182: BytePoly_32 = bigint_nondet_rem!(ctx, x180, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x181, x6, 98), x182, 98), x180, 98),
        536459,
        4,
    )?;
    let x183: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x182, x119, 32), x6, 32), x119, 32),
        x6,
        32
    );
    let x184: BytePoly_32 = bigint_nondet_quot!(ctx, x183, x6, 32);
    let x185: BytePoly_32 = bigint_nondet_rem!(ctx, x183, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x184, x6, 64), x185, 64), x183, 64),
        260103,
        4,
    )?;
    let x186: BytePoly_64 = bigint_mul!(x173, x185, 64);
    let x187: BytePoly_66 = bigint_nondet_quot!(ctx, x186, x6, 66);
    let x188: BytePoly_32 = bigint_nondet_rem!(ctx, x186, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x187, x6, 98), x188, 98), x186, 98),
        536459,
        4,
    )?;
    let x189: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x188, x179, 32), 32), x6, 32);
    let x190: BytePoly_32 = bigint_nondet_quot!(ctx, x189, x6, 32);
    let x191: BytePoly_32 = bigint_nondet_rem!(ctx, x189, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x190, x6, 64), x191, 64), x189, 64),
        260103,
        4,
    )?;
    let x192: BytePoly_1 = bigint_nondet_rem!(ctx, x127, x2, 1);
    let x193: BytePoly_33 = bigint_nondet_quot!(ctx, x127, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x193, x2, 34), x192, 34), x127, 34),
        268231,
        4,
    )?;
    let x194: BytePoly_1 = bigint_sub!(x3, x192, 1);
    eqz(ctx, &bigint_mul!(x192, x194, 2), 8131, 2)?;
    let x195: BytePoly_32 = bigint_add!(bigint_sub!(x185, x155, 32), x6, 32);
    let x196: BytePoly_32 = bigint_nondet_inv!(ctx, x195, x6, 32);
    let x197: BytePoly_64 = bigint_mul!(x195, x196, 64);
    let x198: BytePoly_66 = bigint_nondet_quot!(ctx, x197, x6, 66);
    let x199: BytePoly_32 = bigint_nondet_rem!(ctx, x197, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x198, x6, 98), x199, 98), x197, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x199, x1, 32), 34, 1)?;
    let x200: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x191, x157, 32), x6, 32), x196, 64);
    let x201: BytePoly_66 = bigint_nondet_quot!(ctx, x200, x6, 66);
    let x202: BytePoly_32 = bigint_nondet_rem!(ctx, x200, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x201, x6, 98), x202, 98), x200, 98),
        536459,
        4,
    )?;
    let x203: BytePoly_64 = bigint_mul!(x202, x155, 64);
    let x204: BytePoly_66 = bigint_nondet_quot!(ctx, x203, x6, 66);
    let x205: BytePoly_32 = bigint_nondet_rem!(ctx, x203, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x204, x6, 98), x205, 98), x203, 98),
        536459,
        4,
    )?;
    let x206: BytePoly_32 = bigint_add!(bigint_sub!(x157, x205, 32), x6, 32);
    let x207: BytePoly_32 = bigint_nondet_quot!(ctx, x206, x6, 32);
    let x208: BytePoly_32 = bigint_nondet_rem!(ctx, x206, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x207, x6, 64), x208, 64), x206, 64),
        260103,
        4,
    )?;
    let x209: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x202, x202, 64), x155, 64), x6, 64),
            x185,
            64
        ),
        x6,
        64
    );
    let x210: BytePoly_66 = bigint_nondet_quot!(ctx, x209, x6, 66);
    let x211: BytePoly_32 = bigint_nondet_rem!(ctx, x209, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x210, x6, 98), x211, 98), x209, 98),
        536459,
        4,
    )?;
    let x212: BytePoly_64 = bigint_mul!(x202, x211, 64);
    let x213: BytePoly_66 = bigint_nondet_quot!(ctx, x212, x6, 66);
    let x214: BytePoly_32 = bigint_nondet_rem!(ctx, x212, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x213, x6, 98), x214, 98), x212, 98),
        536459,
        4,
    )?;
    let x215: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x214, x208, 32), 32), x6, 32);
    let x216: BytePoly_32 = bigint_nondet_quot!(ctx, x215, x6, 32);
    let x217: BytePoly_32 = bigint_nondet_rem!(ctx, x215, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x216, x6, 64), x217, 64), x215, 64),
        260103,
        4,
    )?;
    let x218: BytePoly_33 =
        bigint_add!(bigint_mul!(x211, x192, 33), bigint_mul!(x155, x194, 33), 33);
    let x219: BytePoly_33 =
        bigint_add!(bigint_mul!(x217, x192, 33), bigint_mul!(x157, x194, 33), 33);
    let x220: BytePoly_35 = bigint_nondet_quot!(ctx, x218, x6, 35);
    let x221: BytePoly_32 = bigint_nondet_rem!(ctx, x218, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x220, x6, 67), x221, 67), x218, 67),
        284487,
        4,
    )?;
    let x222: BytePoly_35 = bigint_nondet_quot!(ctx, x219, x6, 35);
    let x223: BytePoly_32 = bigint_nondet_rem!(ctx, x219, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x222, x6, 67), x223, 67), x219, 67),
        284487,
        4,
    )?;
    let x224: BytePoly_64 = bigint_mul!(x185, x185, 64);
    let x225: BytePoly_66 = bigint_nondet_quot!(ctx, x224, x6, 66);
    let x226: BytePoly_32 = bigint_nondet_rem!(ctx, x224, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x225, x6, 98), x226, 98), x224, 98),
        536459,
        4,
    )?;
    let x227: BytePoly_33 = bigint_add!(bigint_mul!(x226, x0, 33), x5, 33);
    let x228: BytePoly_35 = bigint_nondet_quot!(ctx, x227, x6, 35);
    let x229: BytePoly_32 = bigint_nondet_rem!(ctx, x227, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x228, x6, 67), x229, 67), x227, 67),
        284487,
        4,
    )?;
    let x230: BytePoly_32 = bigint_add!(x191, x191, 32);
    let x231: BytePoly_32 = bigint_nondet_quot!(ctx, x230, x6, 32);
    let x232: BytePoly_32 = bigint_nondet_rem!(ctx, x230, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x231, x6, 64), x232, 64), x230, 64),
        260103,
        4,
    )?;
    let x233: BytePoly_32 = bigint_nondet_inv!(ctx, x232, x6, 32);
    let x234: BytePoly_64 = bigint_mul!(x232, x233, 64);
    let x235: BytePoly_66 = bigint_nondet_quot!(ctx, x234, x6, 66);
    let x236: BytePoly_32 = bigint_nondet_rem!(ctx, x234, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x235, x6, 98), x236, 98), x234, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x236, x3, 32), 34, 1)?;
    let x237: BytePoly_64 = bigint_mul!(x229, x233, 64);
    let x238: BytePoly_66 = bigint_nondet_quot!(ctx, x237, x6, 66);
    let x239: BytePoly_32 = bigint_nondet_rem!(ctx, x237, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x238, x6, 98), x239, 98), x237, 98),
        536459,
        4,
    )?;
    let x240: BytePoly_64 = bigint_mul!(x239, x185, 64);
    let x241: BytePoly_66 = bigint_nondet_quot!(ctx, x240, x6, 66);
    let x242: BytePoly_32 = bigint_nondet_rem!(ctx, x240, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x241, x6, 98), x242, 98), x240, 98),
        536459,
        4,
    )?;
    let x243: BytePoly_32 = bigint_add!(bigint_sub!(x191, x242, 32), x6, 32);
    let x244: BytePoly_32 = bigint_nondet_quot!(ctx, x243, x6, 32);
    let x245: BytePoly_32 = bigint_nondet_rem!(ctx, x243, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x244, x6, 64), x245, 64), x243, 64),
        260103,
        4,
    )?;
    let x246: BytePoly_64 = bigint_mul!(x239, x239, 64);
    let x247: BytePoly_66 = bigint_nondet_quot!(ctx, x246, x6, 66);
    let x248: BytePoly_32 = bigint_nondet_rem!(ctx, x246, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x247, x6, 98), x248, 98), x246, 98),
        536459,
        4,
    )?;
    let x249: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x248, x185, 32), x6, 32), x185, 32),
        x6,
        32
    );
    let x250: BytePoly_32 = bigint_nondet_quot!(ctx, x249, x6, 32);
    let x251: BytePoly_32 = bigint_nondet_rem!(ctx, x249, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x250, x6, 64), x251, 64), x249, 64),
        260103,
        4,
    )?;
    let x252: BytePoly_64 = bigint_mul!(x239, x251, 64);
    let x253: BytePoly_66 = bigint_nondet_quot!(ctx, x252, x6, 66);
    let x254: BytePoly_32 = bigint_nondet_rem!(ctx, x252, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x253, x6, 98), x254, 98), x252, 98),
        536459,
        4,
    )?;
    let x255: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x254, x245, 32), 32), x6, 32);
    let x256: BytePoly_32 = bigint_nondet_quot!(ctx, x255, x6, 32);
    let x257: BytePoly_32 = bigint_nondet_rem!(ctx, x255, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x256, x6, 64), x257, 64), x255, 64),
        260103,
        4,
    )?;
    let x258: BytePoly_1 = bigint_nondet_rem!(ctx, x193, x2, 1);
    let x259: BytePoly_33 = bigint_nondet_quot!(ctx, x193, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x259, x2, 34), x258, 34), x193, 34),
        268231,
        4,
    )?;
    let x260: BytePoly_1 = bigint_sub!(x3, x258, 1);
    eqz(ctx, &bigint_mul!(x258, x260, 2), 8131, 2)?;
    let x261: BytePoly_32 = bigint_add!(bigint_sub!(x251, x221, 32), x6, 32);
    let x262: BytePoly_32 = bigint_nondet_inv!(ctx, x261, x6, 32);
    let x263: BytePoly_64 = bigint_mul!(x261, x262, 64);
    let x264: BytePoly_66 = bigint_nondet_quot!(ctx, x263, x6, 66);
    let x265: BytePoly_32 = bigint_nondet_rem!(ctx, x263, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x264, x6, 98), x265, 98), x263, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x265, x1, 32), 34, 1)?;
    let x266: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x257, x223, 32), x6, 32), x262, 64);
    let x267: BytePoly_66 = bigint_nondet_quot!(ctx, x266, x6, 66);
    let x268: BytePoly_32 = bigint_nondet_rem!(ctx, x266, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x267, x6, 98), x268, 98), x266, 98),
        536459,
        4,
    )?;
    let x269: BytePoly_64 = bigint_mul!(x268, x221, 64);
    let x270: BytePoly_66 = bigint_nondet_quot!(ctx, x269, x6, 66);
    let x271: BytePoly_32 = bigint_nondet_rem!(ctx, x269, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x270, x6, 98), x271, 98), x269, 98),
        536459,
        4,
    )?;
    let x272: BytePoly_32 = bigint_add!(bigint_sub!(x223, x271, 32), x6, 32);
    let x273: BytePoly_32 = bigint_nondet_quot!(ctx, x272, x6, 32);
    let x274: BytePoly_32 = bigint_nondet_rem!(ctx, x272, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x273, x6, 64), x274, 64), x272, 64),
        260103,
        4,
    )?;
    let x275: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x268, x268, 64), x221, 64), x6, 64),
            x251,
            64
        ),
        x6,
        64
    );
    let x276: BytePoly_66 = bigint_nondet_quot!(ctx, x275, x6, 66);
    let x277: BytePoly_32 = bigint_nondet_rem!(ctx, x275, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x276, x6, 98), x277, 98), x275, 98),
        536459,
        4,
    )?;
    let x278: BytePoly_64 = bigint_mul!(x268, x277, 64);
    let x279: BytePoly_66 = bigint_nondet_quot!(ctx, x278, x6, 66);
    let x280: BytePoly_32 = bigint_nondet_rem!(ctx, x278, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x279, x6, 98), x280, 98), x278, 98),
        536459,
        4,
    )?;
    let x281: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x280, x274, 32), 32), x6, 32);
    let x282: BytePoly_32 = bigint_nondet_quot!(ctx, x281, x6, 32);
    let x283: BytePoly_32 = bigint_nondet_rem!(ctx, x281, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x282, x6, 64), x283, 64), x281, 64),
        260103,
        4,
    )?;
    let x284: BytePoly_33 =
        bigint_add!(bigint_mul!(x277, x258, 33), bigint_mul!(x221, x260, 33), 33);
    let x285: BytePoly_33 =
        bigint_add!(bigint_mul!(x283, x258, 33), bigint_mul!(x223, x260, 33), 33);
    let x286: BytePoly_35 = bigint_nondet_quot!(ctx, x284, x6, 35);
    let x287: BytePoly_32 = bigint_nondet_rem!(ctx, x284, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x286, x6, 67), x287, 67), x284, 67),
        284487,
        4,
    )?;
    let x288: BytePoly_35 = bigint_nondet_quot!(ctx, x285, x6, 35);
    let x289: BytePoly_32 = bigint_nondet_rem!(ctx, x285, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x288, x6, 67), x289, 67), x285, 67),
        284487,
        4,
    )?;
    let x290: BytePoly_64 = bigint_mul!(x251, x251, 64);
    let x291: BytePoly_66 = bigint_nondet_quot!(ctx, x290, x6, 66);
    let x292: BytePoly_32 = bigint_nondet_rem!(ctx, x290, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x291, x6, 98), x292, 98), x290, 98),
        536459,
        4,
    )?;
    let x293: BytePoly_33 = bigint_add!(bigint_mul!(x292, x0, 33), x5, 33);
    let x294: BytePoly_35 = bigint_nondet_quot!(ctx, x293, x6, 35);
    let x295: BytePoly_32 = bigint_nondet_rem!(ctx, x293, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x294, x6, 67), x295, 67), x293, 67),
        284487,
        4,
    )?;
    let x296: BytePoly_32 = bigint_add!(x257, x257, 32);
    let x297: BytePoly_32 = bigint_nondet_quot!(ctx, x296, x6, 32);
    let x298: BytePoly_32 = bigint_nondet_rem!(ctx, x296, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x297, x6, 64), x298, 64), x296, 64),
        260103,
        4,
    )?;
    let x299: BytePoly_32 = bigint_nondet_inv!(ctx, x298, x6, 32);
    let x300: BytePoly_64 = bigint_mul!(x298, x299, 64);
    let x301: BytePoly_66 = bigint_nondet_quot!(ctx, x300, x6, 66);
    let x302: BytePoly_32 = bigint_nondet_rem!(ctx, x300, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x301, x6, 98), x302, 98), x300, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x302, x3, 32), 34, 1)?;
    let x303: BytePoly_64 = bigint_mul!(x295, x299, 64);
    let x304: BytePoly_66 = bigint_nondet_quot!(ctx, x303, x6, 66);
    let x305: BytePoly_32 = bigint_nondet_rem!(ctx, x303, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x304, x6, 98), x305, 98), x303, 98),
        536459,
        4,
    )?;
    let x306: BytePoly_64 = bigint_mul!(x305, x251, 64);
    let x307: BytePoly_66 = bigint_nondet_quot!(ctx, x306, x6, 66);
    let x308: BytePoly_32 = bigint_nondet_rem!(ctx, x306, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x307, x6, 98), x308, 98), x306, 98),
        536459,
        4,
    )?;
    let x309: BytePoly_32 = bigint_add!(bigint_sub!(x257, x308, 32), x6, 32);
    let x310: BytePoly_32 = bigint_nondet_quot!(ctx, x309, x6, 32);
    let x311: BytePoly_32 = bigint_nondet_rem!(ctx, x309, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x310, x6, 64), x311, 64), x309, 64),
        260103,
        4,
    )?;
    let x312: BytePoly_64 = bigint_mul!(x305, x305, 64);
    let x313: BytePoly_66 = bigint_nondet_quot!(ctx, x312, x6, 66);
    let x314: BytePoly_32 = bigint_nondet_rem!(ctx, x312, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x313, x6, 98), x314, 98), x312, 98),
        536459,
        4,
    )?;
    let x315: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x314, x251, 32), x6, 32), x251, 32),
        x6,
        32
    );
    let x316: BytePoly_32 = bigint_nondet_quot!(ctx, x315, x6, 32);
    let x317: BytePoly_32 = bigint_nondet_rem!(ctx, x315, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x316, x6, 64), x317, 64), x315, 64),
        260103,
        4,
    )?;
    let x318: BytePoly_64 = bigint_mul!(x305, x317, 64);
    let x319: BytePoly_66 = bigint_nondet_quot!(ctx, x318, x6, 66);
    let x320: BytePoly_32 = bigint_nondet_rem!(ctx, x318, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x319, x6, 98), x320, 98), x318, 98),
        536459,
        4,
    )?;
    let x321: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x320, x311, 32), 32), x6, 32);
    let x322: BytePoly_32 = bigint_nondet_quot!(ctx, x321, x6, 32);
    let x323: BytePoly_32 = bigint_nondet_rem!(ctx, x321, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x322, x6, 64), x323, 64), x321, 64),
        260103,
        4,
    )?;
    let x324: BytePoly_1 = bigint_nondet_rem!(ctx, x259, x2, 1);
    let x325: BytePoly_33 = bigint_nondet_quot!(ctx, x259, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x325, x2, 34), x324, 34), x259, 34),
        268231,
        4,
    )?;
    let x326: BytePoly_1 = bigint_sub!(x3, x324, 1);
    eqz(ctx, &bigint_mul!(x324, x326, 2), 8131, 2)?;
    let x327: BytePoly_32 = bigint_add!(bigint_sub!(x317, x287, 32), x6, 32);
    let x328: BytePoly_32 = bigint_nondet_inv!(ctx, x327, x6, 32);
    let x329: BytePoly_64 = bigint_mul!(x327, x328, 64);
    let x330: BytePoly_66 = bigint_nondet_quot!(ctx, x329, x6, 66);
    let x331: BytePoly_32 = bigint_nondet_rem!(ctx, x329, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x330, x6, 98), x331, 98), x329, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x331, x1, 32), 34, 1)?;
    let x332: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x323, x289, 32), x6, 32), x328, 64);
    let x333: BytePoly_66 = bigint_nondet_quot!(ctx, x332, x6, 66);
    let x334: BytePoly_32 = bigint_nondet_rem!(ctx, x332, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x333, x6, 98), x334, 98), x332, 98),
        536459,
        4,
    )?;
    let x335: BytePoly_64 = bigint_mul!(x334, x287, 64);
    let x336: BytePoly_66 = bigint_nondet_quot!(ctx, x335, x6, 66);
    let x337: BytePoly_32 = bigint_nondet_rem!(ctx, x335, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x336, x6, 98), x337, 98), x335, 98),
        536459,
        4,
    )?;
    let x338: BytePoly_32 = bigint_add!(bigint_sub!(x289, x337, 32), x6, 32);
    let x339: BytePoly_32 = bigint_nondet_quot!(ctx, x338, x6, 32);
    let x340: BytePoly_32 = bigint_nondet_rem!(ctx, x338, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x339, x6, 64), x340, 64), x338, 64),
        260103,
        4,
    )?;
    let x341: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x334, x334, 64), x287, 64), x6, 64),
            x317,
            64
        ),
        x6,
        64
    );
    let x342: BytePoly_66 = bigint_nondet_quot!(ctx, x341, x6, 66);
    let x343: BytePoly_32 = bigint_nondet_rem!(ctx, x341, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x342, x6, 98), x343, 98), x341, 98),
        536459,
        4,
    )?;
    let x344: BytePoly_64 = bigint_mul!(x334, x343, 64);
    let x345: BytePoly_66 = bigint_nondet_quot!(ctx, x344, x6, 66);
    let x346: BytePoly_32 = bigint_nondet_rem!(ctx, x344, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x345, x6, 98), x346, 98), x344, 98),
        536459,
        4,
    )?;
    let x347: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x346, x340, 32), 32), x6, 32);
    let x348: BytePoly_32 = bigint_nondet_quot!(ctx, x347, x6, 32);
    let x349: BytePoly_32 = bigint_nondet_rem!(ctx, x347, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x348, x6, 64), x349, 64), x347, 64),
        260103,
        4,
    )?;
    let x350: BytePoly_33 =
        bigint_add!(bigint_mul!(x343, x324, 33), bigint_mul!(x287, x326, 33), 33);
    let x351: BytePoly_33 =
        bigint_add!(bigint_mul!(x349, x324, 33), bigint_mul!(x289, x326, 33), 33);
    let x352: BytePoly_35 = bigint_nondet_quot!(ctx, x350, x6, 35);
    let x353: BytePoly_32 = bigint_nondet_rem!(ctx, x350, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x352, x6, 67), x353, 67), x350, 67),
        284487,
        4,
    )?;
    let x354: BytePoly_35 = bigint_nondet_quot!(ctx, x351, x6, 35);
    let x355: BytePoly_32 = bigint_nondet_rem!(ctx, x351, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x354, x6, 67), x355, 67), x351, 67),
        284487,
        4,
    )?;
    let x356: BytePoly_64 = bigint_mul!(x317, x317, 64);
    let x357: BytePoly_66 = bigint_nondet_quot!(ctx, x356, x6, 66);
    let x358: BytePoly_32 = bigint_nondet_rem!(ctx, x356, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x357, x6, 98), x358, 98), x356, 98),
        536459,
        4,
    )?;
    let x359: BytePoly_33 = bigint_add!(bigint_mul!(x358, x0, 33), x5, 33);
    let x360: BytePoly_35 = bigint_nondet_quot!(ctx, x359, x6, 35);
    let x361: BytePoly_32 = bigint_nondet_rem!(ctx, x359, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x360, x6, 67), x361, 67), x359, 67),
        284487,
        4,
    )?;
    let x362: BytePoly_32 = bigint_add!(x323, x323, 32);
    let x363: BytePoly_32 = bigint_nondet_quot!(ctx, x362, x6, 32);
    let x364: BytePoly_32 = bigint_nondet_rem!(ctx, x362, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x363, x6, 64), x364, 64), x362, 64),
        260103,
        4,
    )?;
    let x365: BytePoly_32 = bigint_nondet_inv!(ctx, x364, x6, 32);
    let x366: BytePoly_64 = bigint_mul!(x364, x365, 64);
    let x367: BytePoly_66 = bigint_nondet_quot!(ctx, x366, x6, 66);
    let x368: BytePoly_32 = bigint_nondet_rem!(ctx, x366, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x367, x6, 98), x368, 98), x366, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x368, x3, 32), 34, 1)?;
    let x369: BytePoly_64 = bigint_mul!(x361, x365, 64);
    let x370: BytePoly_66 = bigint_nondet_quot!(ctx, x369, x6, 66);
    let x371: BytePoly_32 = bigint_nondet_rem!(ctx, x369, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x370, x6, 98), x371, 98), x369, 98),
        536459,
        4,
    )?;
    let x372: BytePoly_64 = bigint_mul!(x371, x317, 64);
    let x373: BytePoly_66 = bigint_nondet_quot!(ctx, x372, x6, 66);
    let x374: BytePoly_32 = bigint_nondet_rem!(ctx, x372, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x373, x6, 98), x374, 98), x372, 98),
        536459,
        4,
    )?;
    let x375: BytePoly_32 = bigint_add!(bigint_sub!(x323, x374, 32), x6, 32);
    let x376: BytePoly_32 = bigint_nondet_quot!(ctx, x375, x6, 32);
    let x377: BytePoly_32 = bigint_nondet_rem!(ctx, x375, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x376, x6, 64), x377, 64), x375, 64),
        260103,
        4,
    )?;
    let x378: BytePoly_64 = bigint_mul!(x371, x371, 64);
    let x379: BytePoly_66 = bigint_nondet_quot!(ctx, x378, x6, 66);
    let x380: BytePoly_32 = bigint_nondet_rem!(ctx, x378, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x379, x6, 98), x380, 98), x378, 98),
        536459,
        4,
    )?;
    let x381: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x380, x317, 32), x6, 32), x317, 32),
        x6,
        32
    );
    let x382: BytePoly_32 = bigint_nondet_quot!(ctx, x381, x6, 32);
    let x383: BytePoly_32 = bigint_nondet_rem!(ctx, x381, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x382, x6, 64), x383, 64), x381, 64),
        260103,
        4,
    )?;
    let x384: BytePoly_64 = bigint_mul!(x371, x383, 64);
    let x385: BytePoly_66 = bigint_nondet_quot!(ctx, x384, x6, 66);
    let x386: BytePoly_32 = bigint_nondet_rem!(ctx, x384, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x385, x6, 98), x386, 98), x384, 98),
        536459,
        4,
    )?;
    let x387: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x386, x377, 32), 32), x6, 32);
    let x388: BytePoly_32 = bigint_nondet_quot!(ctx, x387, x6, 32);
    let x389: BytePoly_32 = bigint_nondet_rem!(ctx, x387, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x388, x6, 64), x389, 64), x387, 64),
        260103,
        4,
    )?;
    let x390: BytePoly_1 = bigint_nondet_rem!(ctx, x325, x2, 1);
    let x391: BytePoly_33 = bigint_nondet_quot!(ctx, x325, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x391, x2, 34), x390, 34), x325, 34),
        268231,
        4,
    )?;
    let x392: BytePoly_1 = bigint_sub!(x3, x390, 1);
    eqz(ctx, &bigint_mul!(x390, x392, 2), 8131, 2)?;
    let x393: BytePoly_32 = bigint_add!(bigint_sub!(x383, x353, 32), x6, 32);
    let x394: BytePoly_32 = bigint_nondet_inv!(ctx, x393, x6, 32);
    let x395: BytePoly_64 = bigint_mul!(x393, x394, 64);
    let x396: BytePoly_66 = bigint_nondet_quot!(ctx, x395, x6, 66);
    let x397: BytePoly_32 = bigint_nondet_rem!(ctx, x395, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x396, x6, 98), x397, 98), x395, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x397, x1, 32), 34, 1)?;
    let x398: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x389, x355, 32), x6, 32), x394, 64);
    let x399: BytePoly_66 = bigint_nondet_quot!(ctx, x398, x6, 66);
    let x400: BytePoly_32 = bigint_nondet_rem!(ctx, x398, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x399, x6, 98), x400, 98), x398, 98),
        536459,
        4,
    )?;
    let x401: BytePoly_64 = bigint_mul!(x400, x353, 64);
    let x402: BytePoly_66 = bigint_nondet_quot!(ctx, x401, x6, 66);
    let x403: BytePoly_32 = bigint_nondet_rem!(ctx, x401, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x402, x6, 98), x403, 98), x401, 98),
        536459,
        4,
    )?;
    let x404: BytePoly_32 = bigint_add!(bigint_sub!(x355, x403, 32), x6, 32);
    let x405: BytePoly_32 = bigint_nondet_quot!(ctx, x404, x6, 32);
    let x406: BytePoly_32 = bigint_nondet_rem!(ctx, x404, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x405, x6, 64), x406, 64), x404, 64),
        260103,
        4,
    )?;
    let x407: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x400, x400, 64), x353, 64), x6, 64),
            x383,
            64
        ),
        x6,
        64
    );
    let x408: BytePoly_66 = bigint_nondet_quot!(ctx, x407, x6, 66);
    let x409: BytePoly_32 = bigint_nondet_rem!(ctx, x407, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x408, x6, 98), x409, 98), x407, 98),
        536459,
        4,
    )?;
    let x410: BytePoly_64 = bigint_mul!(x400, x409, 64);
    let x411: BytePoly_66 = bigint_nondet_quot!(ctx, x410, x6, 66);
    let x412: BytePoly_32 = bigint_nondet_rem!(ctx, x410, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x411, x6, 98), x412, 98), x410, 98),
        536459,
        4,
    )?;
    let x413: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x412, x406, 32), 32), x6, 32);
    let x414: BytePoly_32 = bigint_nondet_quot!(ctx, x413, x6, 32);
    let x415: BytePoly_32 = bigint_nondet_rem!(ctx, x413, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x414, x6, 64), x415, 64), x413, 64),
        260103,
        4,
    )?;
    let x416: BytePoly_33 =
        bigint_add!(bigint_mul!(x409, x390, 33), bigint_mul!(x353, x392, 33), 33);
    let x417: BytePoly_33 =
        bigint_add!(bigint_mul!(x415, x390, 33), bigint_mul!(x355, x392, 33), 33);
    let x418: BytePoly_35 = bigint_nondet_quot!(ctx, x416, x6, 35);
    let x419: BytePoly_32 = bigint_nondet_rem!(ctx, x416, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x418, x6, 67), x419, 67), x416, 67),
        284487,
        4,
    )?;
    let x420: BytePoly_35 = bigint_nondet_quot!(ctx, x417, x6, 35);
    let x421: BytePoly_32 = bigint_nondet_rem!(ctx, x417, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x420, x6, 67), x421, 67), x417, 67),
        284487,
        4,
    )?;
    let x422: BytePoly_64 = bigint_mul!(x383, x383, 64);
    let x423: BytePoly_66 = bigint_nondet_quot!(ctx, x422, x6, 66);
    let x424: BytePoly_32 = bigint_nondet_rem!(ctx, x422, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x423, x6, 98), x424, 98), x422, 98),
        536459,
        4,
    )?;
    let x425: BytePoly_33 = bigint_add!(bigint_mul!(x424, x0, 33), x5, 33);
    let x426: BytePoly_35 = bigint_nondet_quot!(ctx, x425, x6, 35);
    let x427: BytePoly_32 = bigint_nondet_rem!(ctx, x425, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x426, x6, 67), x427, 67), x425, 67),
        284487,
        4,
    )?;
    let x428: BytePoly_32 = bigint_add!(x389, x389, 32);
    let x429: BytePoly_32 = bigint_nondet_quot!(ctx, x428, x6, 32);
    let x430: BytePoly_32 = bigint_nondet_rem!(ctx, x428, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x429, x6, 64), x430, 64), x428, 64),
        260103,
        4,
    )?;
    let x431: BytePoly_32 = bigint_nondet_inv!(ctx, x430, x6, 32);
    let x432: BytePoly_64 = bigint_mul!(x430, x431, 64);
    let x433: BytePoly_66 = bigint_nondet_quot!(ctx, x432, x6, 66);
    let x434: BytePoly_32 = bigint_nondet_rem!(ctx, x432, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x433, x6, 98), x434, 98), x432, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x434, x3, 32), 34, 1)?;
    let x435: BytePoly_64 = bigint_mul!(x427, x431, 64);
    let x436: BytePoly_66 = bigint_nondet_quot!(ctx, x435, x6, 66);
    let x437: BytePoly_32 = bigint_nondet_rem!(ctx, x435, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x436, x6, 98), x437, 98), x435, 98),
        536459,
        4,
    )?;
    let x438: BytePoly_64 = bigint_mul!(x437, x383, 64);
    let x439: BytePoly_66 = bigint_nondet_quot!(ctx, x438, x6, 66);
    let x440: BytePoly_32 = bigint_nondet_rem!(ctx, x438, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x439, x6, 98), x440, 98), x438, 98),
        536459,
        4,
    )?;
    let x441: BytePoly_32 = bigint_add!(bigint_sub!(x389, x440, 32), x6, 32);
    let x442: BytePoly_32 = bigint_nondet_quot!(ctx, x441, x6, 32);
    let x443: BytePoly_32 = bigint_nondet_rem!(ctx, x441, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x442, x6, 64), x443, 64), x441, 64),
        260103,
        4,
    )?;
    let x444: BytePoly_64 = bigint_mul!(x437, x437, 64);
    let x445: BytePoly_66 = bigint_nondet_quot!(ctx, x444, x6, 66);
    let x446: BytePoly_32 = bigint_nondet_rem!(ctx, x444, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x445, x6, 98), x446, 98), x444, 98),
        536459,
        4,
    )?;
    let x447: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x446, x383, 32), x6, 32), x383, 32),
        x6,
        32
    );
    let x448: BytePoly_32 = bigint_nondet_quot!(ctx, x447, x6, 32);
    let x449: BytePoly_32 = bigint_nondet_rem!(ctx, x447, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x448, x6, 64), x449, 64), x447, 64),
        260103,
        4,
    )?;
    let x450: BytePoly_64 = bigint_mul!(x437, x449, 64);
    let x451: BytePoly_66 = bigint_nondet_quot!(ctx, x450, x6, 66);
    let x452: BytePoly_32 = bigint_nondet_rem!(ctx, x450, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x451, x6, 98), x452, 98), x450, 98),
        536459,
        4,
    )?;
    let x453: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x452, x443, 32), 32), x6, 32);
    let x454: BytePoly_32 = bigint_nondet_quot!(ctx, x453, x6, 32);
    let x455: BytePoly_32 = bigint_nondet_rem!(ctx, x453, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x454, x6, 64), x455, 64), x453, 64),
        260103,
        4,
    )?;
    let x456: BytePoly_1 = bigint_nondet_rem!(ctx, x391, x2, 1);
    let x457: BytePoly_33 = bigint_nondet_quot!(ctx, x391, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x457, x2, 34), x456, 34), x391, 34),
        268231,
        4,
    )?;
    let x458: BytePoly_1 = bigint_sub!(x3, x456, 1);
    eqz(ctx, &bigint_mul!(x456, x458, 2), 8131, 2)?;
    let x459: BytePoly_32 = bigint_add!(bigint_sub!(x449, x419, 32), x6, 32);
    let x460: BytePoly_32 = bigint_nondet_inv!(ctx, x459, x6, 32);
    let x461: BytePoly_64 = bigint_mul!(x459, x460, 64);
    let x462: BytePoly_66 = bigint_nondet_quot!(ctx, x461, x6, 66);
    let x463: BytePoly_32 = bigint_nondet_rem!(ctx, x461, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x462, x6, 98), x463, 98), x461, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x463, x1, 32), 34, 1)?;
    let x464: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x455, x421, 32), x6, 32), x460, 64);
    let x465: BytePoly_66 = bigint_nondet_quot!(ctx, x464, x6, 66);
    let x466: BytePoly_32 = bigint_nondet_rem!(ctx, x464, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x465, x6, 98), x466, 98), x464, 98),
        536459,
        4,
    )?;
    let x467: BytePoly_64 = bigint_mul!(x466, x419, 64);
    let x468: BytePoly_66 = bigint_nondet_quot!(ctx, x467, x6, 66);
    let x469: BytePoly_32 = bigint_nondet_rem!(ctx, x467, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x468, x6, 98), x469, 98), x467, 98),
        536459,
        4,
    )?;
    let x470: BytePoly_32 = bigint_add!(bigint_sub!(x421, x469, 32), x6, 32);
    let x471: BytePoly_32 = bigint_nondet_quot!(ctx, x470, x6, 32);
    let x472: BytePoly_32 = bigint_nondet_rem!(ctx, x470, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x471, x6, 64), x472, 64), x470, 64),
        260103,
        4,
    )?;
    let x473: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x466, x466, 64), x419, 64), x6, 64),
            x449,
            64
        ),
        x6,
        64
    );
    let x474: BytePoly_66 = bigint_nondet_quot!(ctx, x473, x6, 66);
    let x475: BytePoly_32 = bigint_nondet_rem!(ctx, x473, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x474, x6, 98), x475, 98), x473, 98),
        536459,
        4,
    )?;
    let x476: BytePoly_64 = bigint_mul!(x466, x475, 64);
    let x477: BytePoly_66 = bigint_nondet_quot!(ctx, x476, x6, 66);
    let x478: BytePoly_32 = bigint_nondet_rem!(ctx, x476, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x477, x6, 98), x478, 98), x476, 98),
        536459,
        4,
    )?;
    let x479: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x478, x472, 32), 32), x6, 32);
    let x480: BytePoly_32 = bigint_nondet_quot!(ctx, x479, x6, 32);
    let x481: BytePoly_32 = bigint_nondet_rem!(ctx, x479, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x480, x6, 64), x481, 64), x479, 64),
        260103,
        4,
    )?;
    let x482: BytePoly_33 =
        bigint_add!(bigint_mul!(x475, x456, 33), bigint_mul!(x419, x458, 33), 33);
    let x483: BytePoly_33 =
        bigint_add!(bigint_mul!(x481, x456, 33), bigint_mul!(x421, x458, 33), 33);
    let x484: BytePoly_35 = bigint_nondet_quot!(ctx, x482, x6, 35);
    let x485: BytePoly_32 = bigint_nondet_rem!(ctx, x482, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x484, x6, 67), x485, 67), x482, 67),
        284487,
        4,
    )?;
    let x486: BytePoly_35 = bigint_nondet_quot!(ctx, x483, x6, 35);
    let x487: BytePoly_32 = bigint_nondet_rem!(ctx, x483, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x486, x6, 67), x487, 67), x483, 67),
        284487,
        4,
    )?;
    let x488: BytePoly_64 = bigint_mul!(x449, x449, 64);
    let x489: BytePoly_66 = bigint_nondet_quot!(ctx, x488, x6, 66);
    let x490: BytePoly_32 = bigint_nondet_rem!(ctx, x488, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x489, x6, 98), x490, 98), x488, 98),
        536459,
        4,
    )?;
    let x491: BytePoly_33 = bigint_add!(bigint_mul!(x490, x0, 33), x5, 33);
    let x492: BytePoly_35 = bigint_nondet_quot!(ctx, x491, x6, 35);
    let x493: BytePoly_32 = bigint_nondet_rem!(ctx, x491, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x492, x6, 67), x493, 67), x491, 67),
        284487,
        4,
    )?;
    let x494: BytePoly_32 = bigint_add!(x455, x455, 32);
    let x495: BytePoly_32 = bigint_nondet_quot!(ctx, x494, x6, 32);
    let x496: BytePoly_32 = bigint_nondet_rem!(ctx, x494, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x495, x6, 64), x496, 64), x494, 64),
        260103,
        4,
    )?;
    let x497: BytePoly_32 = bigint_nondet_inv!(ctx, x496, x6, 32);
    let x498: BytePoly_64 = bigint_mul!(x496, x497, 64);
    let x499: BytePoly_66 = bigint_nondet_quot!(ctx, x498, x6, 66);
    let x500: BytePoly_32 = bigint_nondet_rem!(ctx, x498, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x499, x6, 98), x500, 98), x498, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x500, x3, 32), 34, 1)?;
    let x501: BytePoly_64 = bigint_mul!(x493, x497, 64);
    let x502: BytePoly_66 = bigint_nondet_quot!(ctx, x501, x6, 66);
    let x503: BytePoly_32 = bigint_nondet_rem!(ctx, x501, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x502, x6, 98), x503, 98), x501, 98),
        536459,
        4,
    )?;
    let x504: BytePoly_64 = bigint_mul!(x503, x449, 64);
    let x505: BytePoly_66 = bigint_nondet_quot!(ctx, x504, x6, 66);
    let x506: BytePoly_32 = bigint_nondet_rem!(ctx, x504, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x505, x6, 98), x506, 98), x504, 98),
        536459,
        4,
    )?;
    let x507: BytePoly_32 = bigint_add!(bigint_sub!(x455, x506, 32), x6, 32);
    let x508: BytePoly_32 = bigint_nondet_quot!(ctx, x507, x6, 32);
    let x509: BytePoly_32 = bigint_nondet_rem!(ctx, x507, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x508, x6, 64), x509, 64), x507, 64),
        260103,
        4,
    )?;
    let x510: BytePoly_64 = bigint_mul!(x503, x503, 64);
    let x511: BytePoly_66 = bigint_nondet_quot!(ctx, x510, x6, 66);
    let x512: BytePoly_32 = bigint_nondet_rem!(ctx, x510, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x511, x6, 98), x512, 98), x510, 98),
        536459,
        4,
    )?;
    let x513: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x512, x449, 32), x6, 32), x449, 32),
        x6,
        32
    );
    let x514: BytePoly_32 = bigint_nondet_quot!(ctx, x513, x6, 32);
    let x515: BytePoly_32 = bigint_nondet_rem!(ctx, x513, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x514, x6, 64), x515, 64), x513, 64),
        260103,
        4,
    )?;
    let x516: BytePoly_64 = bigint_mul!(x503, x515, 64);
    let x517: BytePoly_66 = bigint_nondet_quot!(ctx, x516, x6, 66);
    let x518: BytePoly_32 = bigint_nondet_rem!(ctx, x516, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x517, x6, 98), x518, 98), x516, 98),
        536459,
        4,
    )?;
    let x519: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x518, x509, 32), 32), x6, 32);
    let x520: BytePoly_32 = bigint_nondet_quot!(ctx, x519, x6, 32);
    let x521: BytePoly_32 = bigint_nondet_rem!(ctx, x519, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x520, x6, 64), x521, 64), x519, 64),
        260103,
        4,
    )?;
    let x522: BytePoly_1 = bigint_nondet_rem!(ctx, x457, x2, 1);
    let x523: BytePoly_33 = bigint_nondet_quot!(ctx, x457, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x523, x2, 34), x522, 34), x457, 34),
        268231,
        4,
    )?;
    let x524: BytePoly_1 = bigint_sub!(x3, x522, 1);
    eqz(ctx, &bigint_mul!(x522, x524, 2), 8131, 2)?;
    let x525: BytePoly_32 = bigint_add!(bigint_sub!(x515, x485, 32), x6, 32);
    let x526: BytePoly_32 = bigint_nondet_inv!(ctx, x525, x6, 32);
    let x527: BytePoly_64 = bigint_mul!(x525, x526, 64);
    let x528: BytePoly_66 = bigint_nondet_quot!(ctx, x527, x6, 66);
    let x529: BytePoly_32 = bigint_nondet_rem!(ctx, x527, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x528, x6, 98), x529, 98), x527, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x529, x1, 32), 34, 1)?;
    let x530: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x521, x487, 32), x6, 32), x526, 64);
    let x531: BytePoly_66 = bigint_nondet_quot!(ctx, x530, x6, 66);
    let x532: BytePoly_32 = bigint_nondet_rem!(ctx, x530, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x531, x6, 98), x532, 98), x530, 98),
        536459,
        4,
    )?;
    let x533: BytePoly_64 = bigint_mul!(x532, x485, 64);
    let x534: BytePoly_66 = bigint_nondet_quot!(ctx, x533, x6, 66);
    let x535: BytePoly_32 = bigint_nondet_rem!(ctx, x533, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x534, x6, 98), x535, 98), x533, 98),
        536459,
        4,
    )?;
    let x536: BytePoly_32 = bigint_add!(bigint_sub!(x487, x535, 32), x6, 32);
    let x537: BytePoly_32 = bigint_nondet_quot!(ctx, x536, x6, 32);
    let x538: BytePoly_32 = bigint_nondet_rem!(ctx, x536, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x537, x6, 64), x538, 64), x536, 64),
        260103,
        4,
    )?;
    let x539: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x532, x532, 64), x485, 64), x6, 64),
            x515,
            64
        ),
        x6,
        64
    );
    let x540: BytePoly_66 = bigint_nondet_quot!(ctx, x539, x6, 66);
    let x541: BytePoly_32 = bigint_nondet_rem!(ctx, x539, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x540, x6, 98), x541, 98), x539, 98),
        536459,
        4,
    )?;
    let x542: BytePoly_64 = bigint_mul!(x532, x541, 64);
    let x543: BytePoly_66 = bigint_nondet_quot!(ctx, x542, x6, 66);
    let x544: BytePoly_32 = bigint_nondet_rem!(ctx, x542, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x543, x6, 98), x544, 98), x542, 98),
        536459,
        4,
    )?;
    let x545: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x544, x538, 32), 32), x6, 32);
    let x546: BytePoly_32 = bigint_nondet_quot!(ctx, x545, x6, 32);
    let x547: BytePoly_32 = bigint_nondet_rem!(ctx, x545, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x546, x6, 64), x547, 64), x545, 64),
        260103,
        4,
    )?;
    let x548: BytePoly_33 =
        bigint_add!(bigint_mul!(x541, x522, 33), bigint_mul!(x485, x524, 33), 33);
    let x549: BytePoly_33 =
        bigint_add!(bigint_mul!(x547, x522, 33), bigint_mul!(x487, x524, 33), 33);
    let x550: BytePoly_35 = bigint_nondet_quot!(ctx, x548, x6, 35);
    let x551: BytePoly_32 = bigint_nondet_rem!(ctx, x548, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x550, x6, 67), x551, 67), x548, 67),
        284487,
        4,
    )?;
    let x552: BytePoly_35 = bigint_nondet_quot!(ctx, x549, x6, 35);
    let x553: BytePoly_32 = bigint_nondet_rem!(ctx, x549, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x552, x6, 67), x553, 67), x549, 67),
        284487,
        4,
    )?;
    let x554: BytePoly_64 = bigint_mul!(x515, x515, 64);
    let x555: BytePoly_66 = bigint_nondet_quot!(ctx, x554, x6, 66);
    let x556: BytePoly_32 = bigint_nondet_rem!(ctx, x554, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x555, x6, 98), x556, 98), x554, 98),
        536459,
        4,
    )?;
    let x557: BytePoly_33 = bigint_add!(bigint_mul!(x556, x0, 33), x5, 33);
    let x558: BytePoly_35 = bigint_nondet_quot!(ctx, x557, x6, 35);
    let x559: BytePoly_32 = bigint_nondet_rem!(ctx, x557, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x558, x6, 67), x559, 67), x557, 67),
        284487,
        4,
    )?;
    let x560: BytePoly_32 = bigint_add!(x521, x521, 32);
    let x561: BytePoly_32 = bigint_nondet_quot!(ctx, x560, x6, 32);
    let x562: BytePoly_32 = bigint_nondet_rem!(ctx, x560, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x561, x6, 64), x562, 64), x560, 64),
        260103,
        4,
    )?;
    let x563: BytePoly_32 = bigint_nondet_inv!(ctx, x562, x6, 32);
    let x564: BytePoly_64 = bigint_mul!(x562, x563, 64);
    let x565: BytePoly_66 = bigint_nondet_quot!(ctx, x564, x6, 66);
    let x566: BytePoly_32 = bigint_nondet_rem!(ctx, x564, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x565, x6, 98), x566, 98), x564, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x566, x3, 32), 34, 1)?;
    let x567: BytePoly_64 = bigint_mul!(x559, x563, 64);
    let x568: BytePoly_66 = bigint_nondet_quot!(ctx, x567, x6, 66);
    let x569: BytePoly_32 = bigint_nondet_rem!(ctx, x567, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x568, x6, 98), x569, 98), x567, 98),
        536459,
        4,
    )?;
    let x570: BytePoly_64 = bigint_mul!(x569, x515, 64);
    let x571: BytePoly_66 = bigint_nondet_quot!(ctx, x570, x6, 66);
    let x572: BytePoly_32 = bigint_nondet_rem!(ctx, x570, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x571, x6, 98), x572, 98), x570, 98),
        536459,
        4,
    )?;
    let x573: BytePoly_32 = bigint_add!(bigint_sub!(x521, x572, 32), x6, 32);
    let x574: BytePoly_32 = bigint_nondet_quot!(ctx, x573, x6, 32);
    let x575: BytePoly_32 = bigint_nondet_rem!(ctx, x573, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x574, x6, 64), x575, 64), x573, 64),
        260103,
        4,
    )?;
    let x576: BytePoly_64 = bigint_mul!(x569, x569, 64);
    let x577: BytePoly_66 = bigint_nondet_quot!(ctx, x576, x6, 66);
    let x578: BytePoly_32 = bigint_nondet_rem!(ctx, x576, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x577, x6, 98), x578, 98), x576, 98),
        536459,
        4,
    )?;
    let x579: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x578, x515, 32), x6, 32), x515, 32),
        x6,
        32
    );
    let x580: BytePoly_32 = bigint_nondet_quot!(ctx, x579, x6, 32);
    let x581: BytePoly_32 = bigint_nondet_rem!(ctx, x579, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x580, x6, 64), x581, 64), x579, 64),
        260103,
        4,
    )?;
    let x582: BytePoly_64 = bigint_mul!(x569, x581, 64);
    let x583: BytePoly_66 = bigint_nondet_quot!(ctx, x582, x6, 66);
    let x584: BytePoly_32 = bigint_nondet_rem!(ctx, x582, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x583, x6, 98), x584, 98), x582, 98),
        536459,
        4,
    )?;
    let x585: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x584, x575, 32), 32), x6, 32);
    let x586: BytePoly_32 = bigint_nondet_quot!(ctx, x585, x6, 32);
    let x587: BytePoly_32 = bigint_nondet_rem!(ctx, x585, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x586, x6, 64), x587, 64), x585, 64),
        260103,
        4,
    )?;
    let x588: BytePoly_1 = bigint_nondet_rem!(ctx, x523, x2, 1);
    let x589: BytePoly_33 = bigint_nondet_quot!(ctx, x523, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x589, x2, 34), x588, 34), x523, 34),
        268231,
        4,
    )?;
    let x590: BytePoly_1 = bigint_sub!(x3, x588, 1);
    eqz(ctx, &bigint_mul!(x588, x590, 2), 8131, 2)?;
    let x591: BytePoly_32 = bigint_add!(bigint_sub!(x581, x551, 32), x6, 32);
    let x592: BytePoly_32 = bigint_nondet_inv!(ctx, x591, x6, 32);
    let x593: BytePoly_64 = bigint_mul!(x591, x592, 64);
    let x594: BytePoly_66 = bigint_nondet_quot!(ctx, x593, x6, 66);
    let x595: BytePoly_32 = bigint_nondet_rem!(ctx, x593, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x594, x6, 98), x595, 98), x593, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x595, x1, 32), 34, 1)?;
    let x596: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x587, x553, 32), x6, 32), x592, 64);
    let x597: BytePoly_66 = bigint_nondet_quot!(ctx, x596, x6, 66);
    let x598: BytePoly_32 = bigint_nondet_rem!(ctx, x596, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x597, x6, 98), x598, 98), x596, 98),
        536459,
        4,
    )?;
    let x599: BytePoly_64 = bigint_mul!(x598, x551, 64);
    let x600: BytePoly_66 = bigint_nondet_quot!(ctx, x599, x6, 66);
    let x601: BytePoly_32 = bigint_nondet_rem!(ctx, x599, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x600, x6, 98), x601, 98), x599, 98),
        536459,
        4,
    )?;
    let x602: BytePoly_32 = bigint_add!(bigint_sub!(x553, x601, 32), x6, 32);
    let x603: BytePoly_32 = bigint_nondet_quot!(ctx, x602, x6, 32);
    let x604: BytePoly_32 = bigint_nondet_rem!(ctx, x602, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x603, x6, 64), x604, 64), x602, 64),
        260103,
        4,
    )?;
    let x605: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x598, x598, 64), x551, 64), x6, 64),
            x581,
            64
        ),
        x6,
        64
    );
    let x606: BytePoly_66 = bigint_nondet_quot!(ctx, x605, x6, 66);
    let x607: BytePoly_32 = bigint_nondet_rem!(ctx, x605, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x606, x6, 98), x607, 98), x605, 98),
        536459,
        4,
    )?;
    let x608: BytePoly_64 = bigint_mul!(x598, x607, 64);
    let x609: BytePoly_66 = bigint_nondet_quot!(ctx, x608, x6, 66);
    let x610: BytePoly_32 = bigint_nondet_rem!(ctx, x608, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x609, x6, 98), x610, 98), x608, 98),
        536459,
        4,
    )?;
    let x611: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x610, x604, 32), 32), x6, 32);
    let x612: BytePoly_32 = bigint_nondet_quot!(ctx, x611, x6, 32);
    let x613: BytePoly_32 = bigint_nondet_rem!(ctx, x611, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x612, x6, 64), x613, 64), x611, 64),
        260103,
        4,
    )?;
    let x614: BytePoly_33 =
        bigint_add!(bigint_mul!(x607, x588, 33), bigint_mul!(x551, x590, 33), 33);
    let x615: BytePoly_33 =
        bigint_add!(bigint_mul!(x613, x588, 33), bigint_mul!(x553, x590, 33), 33);
    let x616: BytePoly_35 = bigint_nondet_quot!(ctx, x614, x6, 35);
    let x617: BytePoly_32 = bigint_nondet_rem!(ctx, x614, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x616, x6, 67), x617, 67), x614, 67),
        284487,
        4,
    )?;
    let x618: BytePoly_35 = bigint_nondet_quot!(ctx, x615, x6, 35);
    let x619: BytePoly_32 = bigint_nondet_rem!(ctx, x615, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x618, x6, 67), x619, 67), x615, 67),
        284487,
        4,
    )?;
    let x620: BytePoly_64 = bigint_mul!(x581, x581, 64);
    let x621: BytePoly_66 = bigint_nondet_quot!(ctx, x620, x6, 66);
    let x622: BytePoly_32 = bigint_nondet_rem!(ctx, x620, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x621, x6, 98), x622, 98), x620, 98),
        536459,
        4,
    )?;
    let x623: BytePoly_33 = bigint_add!(bigint_mul!(x622, x0, 33), x5, 33);
    let x624: BytePoly_35 = bigint_nondet_quot!(ctx, x623, x6, 35);
    let x625: BytePoly_32 = bigint_nondet_rem!(ctx, x623, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x624, x6, 67), x625, 67), x623, 67),
        284487,
        4,
    )?;
    let x626: BytePoly_32 = bigint_add!(x587, x587, 32);
    let x627: BytePoly_32 = bigint_nondet_quot!(ctx, x626, x6, 32);
    let x628: BytePoly_32 = bigint_nondet_rem!(ctx, x626, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x627, x6, 64), x628, 64), x626, 64),
        260103,
        4,
    )?;
    let x629: BytePoly_32 = bigint_nondet_inv!(ctx, x628, x6, 32);
    let x630: BytePoly_64 = bigint_mul!(x628, x629, 64);
    let x631: BytePoly_66 = bigint_nondet_quot!(ctx, x630, x6, 66);
    let x632: BytePoly_32 = bigint_nondet_rem!(ctx, x630, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x631, x6, 98), x632, 98), x630, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x632, x3, 32), 34, 1)?;
    let x633: BytePoly_64 = bigint_mul!(x625, x629, 64);
    let x634: BytePoly_66 = bigint_nondet_quot!(ctx, x633, x6, 66);
    let x635: BytePoly_32 = bigint_nondet_rem!(ctx, x633, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x634, x6, 98), x635, 98), x633, 98),
        536459,
        4,
    )?;
    let x636: BytePoly_64 = bigint_mul!(x635, x581, 64);
    let x637: BytePoly_66 = bigint_nondet_quot!(ctx, x636, x6, 66);
    let x638: BytePoly_32 = bigint_nondet_rem!(ctx, x636, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x637, x6, 98), x638, 98), x636, 98),
        536459,
        4,
    )?;
    let x639: BytePoly_32 = bigint_add!(bigint_sub!(x587, x638, 32), x6, 32);
    let x640: BytePoly_32 = bigint_nondet_quot!(ctx, x639, x6, 32);
    let x641: BytePoly_32 = bigint_nondet_rem!(ctx, x639, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x640, x6, 64), x641, 64), x639, 64),
        260103,
        4,
    )?;
    let x642: BytePoly_64 = bigint_mul!(x635, x635, 64);
    let x643: BytePoly_66 = bigint_nondet_quot!(ctx, x642, x6, 66);
    let x644: BytePoly_32 = bigint_nondet_rem!(ctx, x642, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x643, x6, 98), x644, 98), x642, 98),
        536459,
        4,
    )?;
    let x645: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x644, x581, 32), x6, 32), x581, 32),
        x6,
        32
    );
    let x646: BytePoly_32 = bigint_nondet_quot!(ctx, x645, x6, 32);
    let x647: BytePoly_32 = bigint_nondet_rem!(ctx, x645, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x646, x6, 64), x647, 64), x645, 64),
        260103,
        4,
    )?;
    let x648: BytePoly_64 = bigint_mul!(x635, x647, 64);
    let x649: BytePoly_66 = bigint_nondet_quot!(ctx, x648, x6, 66);
    let x650: BytePoly_32 = bigint_nondet_rem!(ctx, x648, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x649, x6, 98), x650, 98), x648, 98),
        536459,
        4,
    )?;
    let x651: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x650, x641, 32), 32), x6, 32);
    let x652: BytePoly_32 = bigint_nondet_quot!(ctx, x651, x6, 32);
    let x653: BytePoly_32 = bigint_nondet_rem!(ctx, x651, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x652, x6, 64), x653, 64), x651, 64),
        260103,
        4,
    )?;
    let x654: BytePoly_1 = bigint_nondet_rem!(ctx, x589, x2, 1);
    let x655: BytePoly_33 = bigint_nondet_quot!(ctx, x589, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x655, x2, 34), x654, 34), x589, 34),
        268231,
        4,
    )?;
    let x656: BytePoly_1 = bigint_sub!(x3, x654, 1);
    eqz(ctx, &bigint_mul!(x654, x656, 2), 8131, 2)?;
    let x657: BytePoly_32 = bigint_add!(bigint_sub!(x647, x617, 32), x6, 32);
    let x658: BytePoly_32 = bigint_nondet_inv!(ctx, x657, x6, 32);
    let x659: BytePoly_64 = bigint_mul!(x657, x658, 64);
    let x660: BytePoly_66 = bigint_nondet_quot!(ctx, x659, x6, 66);
    let x661: BytePoly_32 = bigint_nondet_rem!(ctx, x659, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x660, x6, 98), x661, 98), x659, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x661, x1, 32), 34, 1)?;
    let x662: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x653, x619, 32), x6, 32), x658, 64);
    let x663: BytePoly_66 = bigint_nondet_quot!(ctx, x662, x6, 66);
    let x664: BytePoly_32 = bigint_nondet_rem!(ctx, x662, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x663, x6, 98), x664, 98), x662, 98),
        536459,
        4,
    )?;
    let x665: BytePoly_64 = bigint_mul!(x664, x617, 64);
    let x666: BytePoly_66 = bigint_nondet_quot!(ctx, x665, x6, 66);
    let x667: BytePoly_32 = bigint_nondet_rem!(ctx, x665, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x666, x6, 98), x667, 98), x665, 98),
        536459,
        4,
    )?;
    let x668: BytePoly_32 = bigint_add!(bigint_sub!(x619, x667, 32), x6, 32);
    let x669: BytePoly_32 = bigint_nondet_quot!(ctx, x668, x6, 32);
    let x670: BytePoly_32 = bigint_nondet_rem!(ctx, x668, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x669, x6, 64), x670, 64), x668, 64),
        260103,
        4,
    )?;
    let x671: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x664, x664, 64), x617, 64), x6, 64),
            x647,
            64
        ),
        x6,
        64
    );
    let x672: BytePoly_66 = bigint_nondet_quot!(ctx, x671, x6, 66);
    let x673: BytePoly_32 = bigint_nondet_rem!(ctx, x671, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x672, x6, 98), x673, 98), x671, 98),
        536459,
        4,
    )?;
    let x674: BytePoly_64 = bigint_mul!(x664, x673, 64);
    let x675: BytePoly_66 = bigint_nondet_quot!(ctx, x674, x6, 66);
    let x676: BytePoly_32 = bigint_nondet_rem!(ctx, x674, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x675, x6, 98), x676, 98), x674, 98),
        536459,
        4,
    )?;
    let x677: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x676, x670, 32), 32), x6, 32);
    let x678: BytePoly_32 = bigint_nondet_quot!(ctx, x677, x6, 32);
    let x679: BytePoly_32 = bigint_nondet_rem!(ctx, x677, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x678, x6, 64), x679, 64), x677, 64),
        260103,
        4,
    )?;
    let x680: BytePoly_33 =
        bigint_add!(bigint_mul!(x673, x654, 33), bigint_mul!(x617, x656, 33), 33);
    let x681: BytePoly_33 =
        bigint_add!(bigint_mul!(x679, x654, 33), bigint_mul!(x619, x656, 33), 33);
    let x682: BytePoly_35 = bigint_nondet_quot!(ctx, x680, x6, 35);
    let x683: BytePoly_32 = bigint_nondet_rem!(ctx, x680, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x682, x6, 67), x683, 67), x680, 67),
        284487,
        4,
    )?;
    let x684: BytePoly_35 = bigint_nondet_quot!(ctx, x681, x6, 35);
    let x685: BytePoly_32 = bigint_nondet_rem!(ctx, x681, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x684, x6, 67), x685, 67), x681, 67),
        284487,
        4,
    )?;
    let x686: BytePoly_64 = bigint_mul!(x647, x647, 64);
    let x687: BytePoly_66 = bigint_nondet_quot!(ctx, x686, x6, 66);
    let x688: BytePoly_32 = bigint_nondet_rem!(ctx, x686, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x687, x6, 98), x688, 98), x686, 98),
        536459,
        4,
    )?;
    let x689: BytePoly_33 = bigint_add!(bigint_mul!(x688, x0, 33), x5, 33);
    let x690: BytePoly_35 = bigint_nondet_quot!(ctx, x689, x6, 35);
    let x691: BytePoly_32 = bigint_nondet_rem!(ctx, x689, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x690, x6, 67), x691, 67), x689, 67),
        284487,
        4,
    )?;
    let x692: BytePoly_32 = bigint_add!(x653, x653, 32);
    let x693: BytePoly_32 = bigint_nondet_quot!(ctx, x692, x6, 32);
    let x694: BytePoly_32 = bigint_nondet_rem!(ctx, x692, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x693, x6, 64), x694, 64), x692, 64),
        260103,
        4,
    )?;
    let x695: BytePoly_32 = bigint_nondet_inv!(ctx, x694, x6, 32);
    let x696: BytePoly_64 = bigint_mul!(x694, x695, 64);
    let x697: BytePoly_66 = bigint_nondet_quot!(ctx, x696, x6, 66);
    let x698: BytePoly_32 = bigint_nondet_rem!(ctx, x696, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x697, x6, 98), x698, 98), x696, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x698, x3, 32), 34, 1)?;
    let x699: BytePoly_64 = bigint_mul!(x691, x695, 64);
    let x700: BytePoly_66 = bigint_nondet_quot!(ctx, x699, x6, 66);
    let x701: BytePoly_32 = bigint_nondet_rem!(ctx, x699, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x700, x6, 98), x701, 98), x699, 98),
        536459,
        4,
    )?;
    let x702: BytePoly_64 = bigint_mul!(x701, x647, 64);
    let x703: BytePoly_66 = bigint_nondet_quot!(ctx, x702, x6, 66);
    let x704: BytePoly_32 = bigint_nondet_rem!(ctx, x702, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x703, x6, 98), x704, 98), x702, 98),
        536459,
        4,
    )?;
    let x705: BytePoly_32 = bigint_add!(bigint_sub!(x653, x704, 32), x6, 32);
    let x706: BytePoly_32 = bigint_nondet_quot!(ctx, x705, x6, 32);
    let x707: BytePoly_32 = bigint_nondet_rem!(ctx, x705, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x706, x6, 64), x707, 64), x705, 64),
        260103,
        4,
    )?;
    let x708: BytePoly_64 = bigint_mul!(x701, x701, 64);
    let x709: BytePoly_66 = bigint_nondet_quot!(ctx, x708, x6, 66);
    let x710: BytePoly_32 = bigint_nondet_rem!(ctx, x708, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x709, x6, 98), x710, 98), x708, 98),
        536459,
        4,
    )?;
    let x711: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x710, x647, 32), x6, 32), x647, 32),
        x6,
        32
    );
    let x712: BytePoly_32 = bigint_nondet_quot!(ctx, x711, x6, 32);
    let x713: BytePoly_32 = bigint_nondet_rem!(ctx, x711, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x712, x6, 64), x713, 64), x711, 64),
        260103,
        4,
    )?;
    let x714: BytePoly_64 = bigint_mul!(x701, x713, 64);
    let x715: BytePoly_66 = bigint_nondet_quot!(ctx, x714, x6, 66);
    let x716: BytePoly_32 = bigint_nondet_rem!(ctx, x714, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x715, x6, 98), x716, 98), x714, 98),
        536459,
        4,
    )?;
    let x717: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x716, x707, 32), 32), x6, 32);
    let x718: BytePoly_32 = bigint_nondet_quot!(ctx, x717, x6, 32);
    let x719: BytePoly_32 = bigint_nondet_rem!(ctx, x717, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x718, x6, 64), x719, 64), x717, 64),
        260103,
        4,
    )?;
    let x720: BytePoly_1 = bigint_nondet_rem!(ctx, x655, x2, 1);
    let x721: BytePoly_33 = bigint_nondet_quot!(ctx, x655, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x721, x2, 34), x720, 34), x655, 34),
        268231,
        4,
    )?;
    let x722: BytePoly_1 = bigint_sub!(x3, x720, 1);
    eqz(ctx, &bigint_mul!(x720, x722, 2), 8131, 2)?;
    let x723: BytePoly_32 = bigint_add!(bigint_sub!(x713, x683, 32), x6, 32);
    let x724: BytePoly_32 = bigint_nondet_inv!(ctx, x723, x6, 32);
    let x725: BytePoly_64 = bigint_mul!(x723, x724, 64);
    let x726: BytePoly_66 = bigint_nondet_quot!(ctx, x725, x6, 66);
    let x727: BytePoly_32 = bigint_nondet_rem!(ctx, x725, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x726, x6, 98), x727, 98), x725, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x727, x1, 32), 34, 1)?;
    let x728: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x719, x685, 32), x6, 32), x724, 64);
    let x729: BytePoly_66 = bigint_nondet_quot!(ctx, x728, x6, 66);
    let x730: BytePoly_32 = bigint_nondet_rem!(ctx, x728, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x729, x6, 98), x730, 98), x728, 98),
        536459,
        4,
    )?;
    let x731: BytePoly_64 = bigint_mul!(x730, x683, 64);
    let x732: BytePoly_66 = bigint_nondet_quot!(ctx, x731, x6, 66);
    let x733: BytePoly_32 = bigint_nondet_rem!(ctx, x731, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x732, x6, 98), x733, 98), x731, 98),
        536459,
        4,
    )?;
    let x734: BytePoly_32 = bigint_add!(bigint_sub!(x685, x733, 32), x6, 32);
    let x735: BytePoly_32 = bigint_nondet_quot!(ctx, x734, x6, 32);
    let x736: BytePoly_32 = bigint_nondet_rem!(ctx, x734, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x735, x6, 64), x736, 64), x734, 64),
        260103,
        4,
    )?;
    let x737: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x730, x730, 64), x683, 64), x6, 64),
            x713,
            64
        ),
        x6,
        64
    );
    let x738: BytePoly_66 = bigint_nondet_quot!(ctx, x737, x6, 66);
    let x739: BytePoly_32 = bigint_nondet_rem!(ctx, x737, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x738, x6, 98), x739, 98), x737, 98),
        536459,
        4,
    )?;
    let x740: BytePoly_64 = bigint_mul!(x730, x739, 64);
    let x741: BytePoly_66 = bigint_nondet_quot!(ctx, x740, x6, 66);
    let x742: BytePoly_32 = bigint_nondet_rem!(ctx, x740, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x741, x6, 98), x742, 98), x740, 98),
        536459,
        4,
    )?;
    let x743: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x742, x736, 32), 32), x6, 32);
    let x744: BytePoly_32 = bigint_nondet_quot!(ctx, x743, x6, 32);
    let x745: BytePoly_32 = bigint_nondet_rem!(ctx, x743, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x744, x6, 64), x745, 64), x743, 64),
        260103,
        4,
    )?;
    let x746: BytePoly_33 =
        bigint_add!(bigint_mul!(x739, x720, 33), bigint_mul!(x683, x722, 33), 33);
    let x747: BytePoly_33 =
        bigint_add!(bigint_mul!(x745, x720, 33), bigint_mul!(x685, x722, 33), 33);
    let x748: BytePoly_35 = bigint_nondet_quot!(ctx, x746, x6, 35);
    let x749: BytePoly_32 = bigint_nondet_rem!(ctx, x746, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x748, x6, 67), x749, 67), x746, 67),
        284487,
        4,
    )?;
    let x750: BytePoly_35 = bigint_nondet_quot!(ctx, x747, x6, 35);
    let x751: BytePoly_32 = bigint_nondet_rem!(ctx, x747, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x750, x6, 67), x751, 67), x747, 67),
        284487,
        4,
    )?;
    let x752: BytePoly_64 = bigint_mul!(x713, x713, 64);
    let x753: BytePoly_66 = bigint_nondet_quot!(ctx, x752, x6, 66);
    let x754: BytePoly_32 = bigint_nondet_rem!(ctx, x752, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x753, x6, 98), x754, 98), x752, 98),
        536459,
        4,
    )?;
    let x755: BytePoly_33 = bigint_add!(bigint_mul!(x754, x0, 33), x5, 33);
    let x756: BytePoly_35 = bigint_nondet_quot!(ctx, x755, x6, 35);
    let x757: BytePoly_32 = bigint_nondet_rem!(ctx, x755, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x756, x6, 67), x757, 67), x755, 67),
        284487,
        4,
    )?;
    let x758: BytePoly_32 = bigint_add!(x719, x719, 32);
    let x759: BytePoly_32 = bigint_nondet_quot!(ctx, x758, x6, 32);
    let x760: BytePoly_32 = bigint_nondet_rem!(ctx, x758, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x759, x6, 64), x760, 64), x758, 64),
        260103,
        4,
    )?;
    let x761: BytePoly_32 = bigint_nondet_inv!(ctx, x760, x6, 32);
    let x762: BytePoly_64 = bigint_mul!(x760, x761, 64);
    let x763: BytePoly_66 = bigint_nondet_quot!(ctx, x762, x6, 66);
    let x764: BytePoly_32 = bigint_nondet_rem!(ctx, x762, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x763, x6, 98), x764, 98), x762, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x764, x3, 32), 34, 1)?;
    let x765: BytePoly_64 = bigint_mul!(x757, x761, 64);
    let x766: BytePoly_66 = bigint_nondet_quot!(ctx, x765, x6, 66);
    let x767: BytePoly_32 = bigint_nondet_rem!(ctx, x765, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x766, x6, 98), x767, 98), x765, 98),
        536459,
        4,
    )?;
    let x768: BytePoly_64 = bigint_mul!(x767, x713, 64);
    let x769: BytePoly_66 = bigint_nondet_quot!(ctx, x768, x6, 66);
    let x770: BytePoly_32 = bigint_nondet_rem!(ctx, x768, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x769, x6, 98), x770, 98), x768, 98),
        536459,
        4,
    )?;
    let x771: BytePoly_32 = bigint_add!(bigint_sub!(x719, x770, 32), x6, 32);
    let x772: BytePoly_32 = bigint_nondet_quot!(ctx, x771, x6, 32);
    let x773: BytePoly_32 = bigint_nondet_rem!(ctx, x771, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x772, x6, 64), x773, 64), x771, 64),
        260103,
        4,
    )?;
    let x774: BytePoly_64 = bigint_mul!(x767, x767, 64);
    let x775: BytePoly_66 = bigint_nondet_quot!(ctx, x774, x6, 66);
    let x776: BytePoly_32 = bigint_nondet_rem!(ctx, x774, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x775, x6, 98), x776, 98), x774, 98),
        536459,
        4,
    )?;
    let x777: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x776, x713, 32), x6, 32), x713, 32),
        x6,
        32
    );
    let x778: BytePoly_32 = bigint_nondet_quot!(ctx, x777, x6, 32);
    let x779: BytePoly_32 = bigint_nondet_rem!(ctx, x777, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x778, x6, 64), x779, 64), x777, 64),
        260103,
        4,
    )?;
    let x780: BytePoly_64 = bigint_mul!(x767, x779, 64);
    let x781: BytePoly_66 = bigint_nondet_quot!(ctx, x780, x6, 66);
    let x782: BytePoly_32 = bigint_nondet_rem!(ctx, x780, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x781, x6, 98), x782, 98), x780, 98),
        536459,
        4,
    )?;
    let x783: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x782, x773, 32), 32), x6, 32);
    let x784: BytePoly_32 = bigint_nondet_quot!(ctx, x783, x6, 32);
    let x785: BytePoly_32 = bigint_nondet_rem!(ctx, x783, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x784, x6, 64), x785, 64), x783, 64),
        260103,
        4,
    )?;
    let x786: BytePoly_1 = bigint_nondet_rem!(ctx, x721, x2, 1);
    let x787: BytePoly_33 = bigint_nondet_quot!(ctx, x721, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x787, x2, 34), x786, 34), x721, 34),
        268231,
        4,
    )?;
    let x788: BytePoly_1 = bigint_sub!(x3, x786, 1);
    eqz(ctx, &bigint_mul!(x786, x788, 2), 8131, 2)?;
    let x789: BytePoly_32 = bigint_add!(bigint_sub!(x779, x749, 32), x6, 32);
    let x790: BytePoly_32 = bigint_nondet_inv!(ctx, x789, x6, 32);
    let x791: BytePoly_64 = bigint_mul!(x789, x790, 64);
    let x792: BytePoly_66 = bigint_nondet_quot!(ctx, x791, x6, 66);
    let x793: BytePoly_32 = bigint_nondet_rem!(ctx, x791, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x792, x6, 98), x793, 98), x791, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x793, x1, 32), 34, 1)?;
    let x794: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x785, x751, 32), x6, 32), x790, 64);
    let x795: BytePoly_66 = bigint_nondet_quot!(ctx, x794, x6, 66);
    let x796: BytePoly_32 = bigint_nondet_rem!(ctx, x794, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x795, x6, 98), x796, 98), x794, 98),
        536459,
        4,
    )?;
    let x797: BytePoly_64 = bigint_mul!(x796, x749, 64);
    let x798: BytePoly_66 = bigint_nondet_quot!(ctx, x797, x6, 66);
    let x799: BytePoly_32 = bigint_nondet_rem!(ctx, x797, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x798, x6, 98), x799, 98), x797, 98),
        536459,
        4,
    )?;
    let x800: BytePoly_32 = bigint_add!(bigint_sub!(x751, x799, 32), x6, 32);
    let x801: BytePoly_32 = bigint_nondet_quot!(ctx, x800, x6, 32);
    let x802: BytePoly_32 = bigint_nondet_rem!(ctx, x800, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x801, x6, 64), x802, 64), x800, 64),
        260103,
        4,
    )?;
    let x803: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x796, x796, 64), x749, 64), x6, 64),
            x779,
            64
        ),
        x6,
        64
    );
    let x804: BytePoly_66 = bigint_nondet_quot!(ctx, x803, x6, 66);
    let x805: BytePoly_32 = bigint_nondet_rem!(ctx, x803, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x804, x6, 98), x805, 98), x803, 98),
        536459,
        4,
    )?;
    let x806: BytePoly_64 = bigint_mul!(x796, x805, 64);
    let x807: BytePoly_66 = bigint_nondet_quot!(ctx, x806, x6, 66);
    let x808: BytePoly_32 = bigint_nondet_rem!(ctx, x806, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x807, x6, 98), x808, 98), x806, 98),
        536459,
        4,
    )?;
    let x809: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x808, x802, 32), 32), x6, 32);
    let x810: BytePoly_32 = bigint_nondet_quot!(ctx, x809, x6, 32);
    let x811: BytePoly_32 = bigint_nondet_rem!(ctx, x809, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x810, x6, 64), x811, 64), x809, 64),
        260103,
        4,
    )?;
    let x812: BytePoly_33 =
        bigint_add!(bigint_mul!(x805, x786, 33), bigint_mul!(x749, x788, 33), 33);
    let x813: BytePoly_33 =
        bigint_add!(bigint_mul!(x811, x786, 33), bigint_mul!(x751, x788, 33), 33);
    let x814: BytePoly_35 = bigint_nondet_quot!(ctx, x812, x6, 35);
    let x815: BytePoly_32 = bigint_nondet_rem!(ctx, x812, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x814, x6, 67), x815, 67), x812, 67),
        284487,
        4,
    )?;
    let x816: BytePoly_35 = bigint_nondet_quot!(ctx, x813, x6, 35);
    let x817: BytePoly_32 = bigint_nondet_rem!(ctx, x813, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x816, x6, 67), x817, 67), x813, 67),
        284487,
        4,
    )?;
    let x818: BytePoly_64 = bigint_mul!(x779, x779, 64);
    let x819: BytePoly_66 = bigint_nondet_quot!(ctx, x818, x6, 66);
    let x820: BytePoly_32 = bigint_nondet_rem!(ctx, x818, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x819, x6, 98), x820, 98), x818, 98),
        536459,
        4,
    )?;
    let x821: BytePoly_33 = bigint_add!(bigint_mul!(x820, x0, 33), x5, 33);
    let x822: BytePoly_35 = bigint_nondet_quot!(ctx, x821, x6, 35);
    let x823: BytePoly_32 = bigint_nondet_rem!(ctx, x821, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x822, x6, 67), x823, 67), x821, 67),
        284487,
        4,
    )?;
    let x824: BytePoly_32 = bigint_add!(x785, x785, 32);
    let x825: BytePoly_32 = bigint_nondet_quot!(ctx, x824, x6, 32);
    let x826: BytePoly_32 = bigint_nondet_rem!(ctx, x824, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x825, x6, 64), x826, 64), x824, 64),
        260103,
        4,
    )?;
    let x827: BytePoly_32 = bigint_nondet_inv!(ctx, x826, x6, 32);
    let x828: BytePoly_64 = bigint_mul!(x826, x827, 64);
    let x829: BytePoly_66 = bigint_nondet_quot!(ctx, x828, x6, 66);
    let x830: BytePoly_32 = bigint_nondet_rem!(ctx, x828, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x829, x6, 98), x830, 98), x828, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x830, x3, 32), 34, 1)?;
    let x831: BytePoly_64 = bigint_mul!(x823, x827, 64);
    let x832: BytePoly_66 = bigint_nondet_quot!(ctx, x831, x6, 66);
    let x833: BytePoly_32 = bigint_nondet_rem!(ctx, x831, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x832, x6, 98), x833, 98), x831, 98),
        536459,
        4,
    )?;
    let x834: BytePoly_64 = bigint_mul!(x833, x779, 64);
    let x835: BytePoly_66 = bigint_nondet_quot!(ctx, x834, x6, 66);
    let x836: BytePoly_32 = bigint_nondet_rem!(ctx, x834, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x835, x6, 98), x836, 98), x834, 98),
        536459,
        4,
    )?;
    let x837: BytePoly_32 = bigint_add!(bigint_sub!(x785, x836, 32), x6, 32);
    let x838: BytePoly_32 = bigint_nondet_quot!(ctx, x837, x6, 32);
    let x839: BytePoly_32 = bigint_nondet_rem!(ctx, x837, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x838, x6, 64), x839, 64), x837, 64),
        260103,
        4,
    )?;
    let x840: BytePoly_64 = bigint_mul!(x833, x833, 64);
    let x841: BytePoly_66 = bigint_nondet_quot!(ctx, x840, x6, 66);
    let x842: BytePoly_32 = bigint_nondet_rem!(ctx, x840, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x841, x6, 98), x842, 98), x840, 98),
        536459,
        4,
    )?;
    let x843: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x842, x779, 32), x6, 32), x779, 32),
        x6,
        32
    );
    let x844: BytePoly_32 = bigint_nondet_quot!(ctx, x843, x6, 32);
    let x845: BytePoly_32 = bigint_nondet_rem!(ctx, x843, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x844, x6, 64), x845, 64), x843, 64),
        260103,
        4,
    )?;
    let x846: BytePoly_64 = bigint_mul!(x833, x845, 64);
    let x847: BytePoly_66 = bigint_nondet_quot!(ctx, x846, x6, 66);
    let x848: BytePoly_32 = bigint_nondet_rem!(ctx, x846, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x847, x6, 98), x848, 98), x846, 98),
        536459,
        4,
    )?;
    let x849: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x848, x839, 32), 32), x6, 32);
    let x850: BytePoly_32 = bigint_nondet_quot!(ctx, x849, x6, 32);
    let x851: BytePoly_32 = bigint_nondet_rem!(ctx, x849, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x850, x6, 64), x851, 64), x849, 64),
        260103,
        4,
    )?;
    let x852: BytePoly_1 = bigint_nondet_rem!(ctx, x787, x2, 1);
    let x853: BytePoly_33 = bigint_nondet_quot!(ctx, x787, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x853, x2, 34), x852, 34), x787, 34),
        268231,
        4,
    )?;
    let x854: BytePoly_1 = bigint_sub!(x3, x852, 1);
    eqz(ctx, &bigint_mul!(x852, x854, 2), 8131, 2)?;
    let x855: BytePoly_32 = bigint_add!(bigint_sub!(x845, x815, 32), x6, 32);
    let x856: BytePoly_32 = bigint_nondet_inv!(ctx, x855, x6, 32);
    let x857: BytePoly_64 = bigint_mul!(x855, x856, 64);
    let x858: BytePoly_66 = bigint_nondet_quot!(ctx, x857, x6, 66);
    let x859: BytePoly_32 = bigint_nondet_rem!(ctx, x857, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x858, x6, 98), x859, 98), x857, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x859, x1, 32), 34, 1)?;
    let x860: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x851, x817, 32), x6, 32), x856, 64);
    let x861: BytePoly_66 = bigint_nondet_quot!(ctx, x860, x6, 66);
    let x862: BytePoly_32 = bigint_nondet_rem!(ctx, x860, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x861, x6, 98), x862, 98), x860, 98),
        536459,
        4,
    )?;
    let x863: BytePoly_64 = bigint_mul!(x862, x815, 64);
    let x864: BytePoly_66 = bigint_nondet_quot!(ctx, x863, x6, 66);
    let x865: BytePoly_32 = bigint_nondet_rem!(ctx, x863, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x864, x6, 98), x865, 98), x863, 98),
        536459,
        4,
    )?;
    let x866: BytePoly_32 = bigint_add!(bigint_sub!(x817, x865, 32), x6, 32);
    let x867: BytePoly_32 = bigint_nondet_quot!(ctx, x866, x6, 32);
    let x868: BytePoly_32 = bigint_nondet_rem!(ctx, x866, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x867, x6, 64), x868, 64), x866, 64),
        260103,
        4,
    )?;
    let x869: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x862, x862, 64), x815, 64), x6, 64),
            x845,
            64
        ),
        x6,
        64
    );
    let x870: BytePoly_66 = bigint_nondet_quot!(ctx, x869, x6, 66);
    let x871: BytePoly_32 = bigint_nondet_rem!(ctx, x869, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x870, x6, 98), x871, 98), x869, 98),
        536459,
        4,
    )?;
    let x872: BytePoly_64 = bigint_mul!(x862, x871, 64);
    let x873: BytePoly_66 = bigint_nondet_quot!(ctx, x872, x6, 66);
    let x874: BytePoly_32 = bigint_nondet_rem!(ctx, x872, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x873, x6, 98), x874, 98), x872, 98),
        536459,
        4,
    )?;
    let x875: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x874, x868, 32), 32), x6, 32);
    let x876: BytePoly_32 = bigint_nondet_quot!(ctx, x875, x6, 32);
    let x877: BytePoly_32 = bigint_nondet_rem!(ctx, x875, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x876, x6, 64), x877, 64), x875, 64),
        260103,
        4,
    )?;
    let x878: BytePoly_33 =
        bigint_add!(bigint_mul!(x871, x852, 33), bigint_mul!(x815, x854, 33), 33);
    let x879: BytePoly_33 =
        bigint_add!(bigint_mul!(x877, x852, 33), bigint_mul!(x817, x854, 33), 33);
    let x880: BytePoly_35 = bigint_nondet_quot!(ctx, x878, x6, 35);
    let x881: BytePoly_32 = bigint_nondet_rem!(ctx, x878, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x880, x6, 67), x881, 67), x878, 67),
        284487,
        4,
    )?;
    let x882: BytePoly_35 = bigint_nondet_quot!(ctx, x879, x6, 35);
    let x883: BytePoly_32 = bigint_nondet_rem!(ctx, x879, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x882, x6, 67), x883, 67), x879, 67),
        284487,
        4,
    )?;
    let x884: BytePoly_64 = bigint_mul!(x845, x845, 64);
    let x885: BytePoly_66 = bigint_nondet_quot!(ctx, x884, x6, 66);
    let x886: BytePoly_32 = bigint_nondet_rem!(ctx, x884, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x885, x6, 98), x886, 98), x884, 98),
        536459,
        4,
    )?;
    let x887: BytePoly_33 = bigint_add!(bigint_mul!(x886, x0, 33), x5, 33);
    let x888: BytePoly_35 = bigint_nondet_quot!(ctx, x887, x6, 35);
    let x889: BytePoly_32 = bigint_nondet_rem!(ctx, x887, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x888, x6, 67), x889, 67), x887, 67),
        284487,
        4,
    )?;
    let x890: BytePoly_32 = bigint_add!(x851, x851, 32);
    let x891: BytePoly_32 = bigint_nondet_quot!(ctx, x890, x6, 32);
    let x892: BytePoly_32 = bigint_nondet_rem!(ctx, x890, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x891, x6, 64), x892, 64), x890, 64),
        260103,
        4,
    )?;
    let x893: BytePoly_32 = bigint_nondet_inv!(ctx, x892, x6, 32);
    let x894: BytePoly_64 = bigint_mul!(x892, x893, 64);
    let x895: BytePoly_66 = bigint_nondet_quot!(ctx, x894, x6, 66);
    let x896: BytePoly_32 = bigint_nondet_rem!(ctx, x894, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x895, x6, 98), x896, 98), x894, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x896, x3, 32), 34, 1)?;
    let x897: BytePoly_64 = bigint_mul!(x889, x893, 64);
    let x898: BytePoly_66 = bigint_nondet_quot!(ctx, x897, x6, 66);
    let x899: BytePoly_32 = bigint_nondet_rem!(ctx, x897, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x898, x6, 98), x899, 98), x897, 98),
        536459,
        4,
    )?;
    let x900: BytePoly_64 = bigint_mul!(x899, x845, 64);
    let x901: BytePoly_66 = bigint_nondet_quot!(ctx, x900, x6, 66);
    let x902: BytePoly_32 = bigint_nondet_rem!(ctx, x900, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x901, x6, 98), x902, 98), x900, 98),
        536459,
        4,
    )?;
    let x903: BytePoly_32 = bigint_add!(bigint_sub!(x851, x902, 32), x6, 32);
    let x904: BytePoly_32 = bigint_nondet_quot!(ctx, x903, x6, 32);
    let x905: BytePoly_32 = bigint_nondet_rem!(ctx, x903, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x904, x6, 64), x905, 64), x903, 64),
        260103,
        4,
    )?;
    let x906: BytePoly_64 = bigint_mul!(x899, x899, 64);
    let x907: BytePoly_66 = bigint_nondet_quot!(ctx, x906, x6, 66);
    let x908: BytePoly_32 = bigint_nondet_rem!(ctx, x906, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x907, x6, 98), x908, 98), x906, 98),
        536459,
        4,
    )?;
    let x909: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x908, x845, 32), x6, 32), x845, 32),
        x6,
        32
    );
    let x910: BytePoly_32 = bigint_nondet_quot!(ctx, x909, x6, 32);
    let x911: BytePoly_32 = bigint_nondet_rem!(ctx, x909, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x910, x6, 64), x911, 64), x909, 64),
        260103,
        4,
    )?;
    let x912: BytePoly_64 = bigint_mul!(x899, x911, 64);
    let x913: BytePoly_66 = bigint_nondet_quot!(ctx, x912, x6, 66);
    let x914: BytePoly_32 = bigint_nondet_rem!(ctx, x912, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x913, x6, 98), x914, 98), x912, 98),
        536459,
        4,
    )?;
    let x915: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x914, x905, 32), 32), x6, 32);
    let x916: BytePoly_32 = bigint_nondet_quot!(ctx, x915, x6, 32);
    let x917: BytePoly_32 = bigint_nondet_rem!(ctx, x915, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x916, x6, 64), x917, 64), x915, 64),
        260103,
        4,
    )?;
    let x918: BytePoly_1 = bigint_nondet_rem!(ctx, x853, x2, 1);
    let x919: BytePoly_33 = bigint_nondet_quot!(ctx, x853, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x919, x2, 34), x918, 34), x853, 34),
        268231,
        4,
    )?;
    let x920: BytePoly_1 = bigint_sub!(x3, x918, 1);
    eqz(ctx, &bigint_mul!(x918, x920, 2), 8131, 2)?;
    let x921: BytePoly_32 = bigint_add!(bigint_sub!(x911, x881, 32), x6, 32);
    let x922: BytePoly_32 = bigint_nondet_inv!(ctx, x921, x6, 32);
    let x923: BytePoly_64 = bigint_mul!(x921, x922, 64);
    let x924: BytePoly_66 = bigint_nondet_quot!(ctx, x923, x6, 66);
    let x925: BytePoly_32 = bigint_nondet_rem!(ctx, x923, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x924, x6, 98), x925, 98), x923, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x925, x1, 32), 34, 1)?;
    let x926: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x917, x883, 32), x6, 32), x922, 64);
    let x927: BytePoly_66 = bigint_nondet_quot!(ctx, x926, x6, 66);
    let x928: BytePoly_32 = bigint_nondet_rem!(ctx, x926, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x927, x6, 98), x928, 98), x926, 98),
        536459,
        4,
    )?;
    let x929: BytePoly_64 = bigint_mul!(x928, x881, 64);
    let x930: BytePoly_66 = bigint_nondet_quot!(ctx, x929, x6, 66);
    let x931: BytePoly_32 = bigint_nondet_rem!(ctx, x929, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x930, x6, 98), x931, 98), x929, 98),
        536459,
        4,
    )?;
    let x932: BytePoly_32 = bigint_add!(bigint_sub!(x883, x931, 32), x6, 32);
    let x933: BytePoly_32 = bigint_nondet_quot!(ctx, x932, x6, 32);
    let x934: BytePoly_32 = bigint_nondet_rem!(ctx, x932, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x933, x6, 64), x934, 64), x932, 64),
        260103,
        4,
    )?;
    let x935: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x928, x928, 64), x881, 64), x6, 64),
            x911,
            64
        ),
        x6,
        64
    );
    let x936: BytePoly_66 = bigint_nondet_quot!(ctx, x935, x6, 66);
    let x937: BytePoly_32 = bigint_nondet_rem!(ctx, x935, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x936, x6, 98), x937, 98), x935, 98),
        536459,
        4,
    )?;
    let x938: BytePoly_64 = bigint_mul!(x928, x937, 64);
    let x939: BytePoly_66 = bigint_nondet_quot!(ctx, x938, x6, 66);
    let x940: BytePoly_32 = bigint_nondet_rem!(ctx, x938, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x939, x6, 98), x940, 98), x938, 98),
        536459,
        4,
    )?;
    let x941: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x940, x934, 32), 32), x6, 32);
    let x942: BytePoly_32 = bigint_nondet_quot!(ctx, x941, x6, 32);
    let x943: BytePoly_32 = bigint_nondet_rem!(ctx, x941, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x942, x6, 64), x943, 64), x941, 64),
        260103,
        4,
    )?;
    let x944: BytePoly_33 =
        bigint_add!(bigint_mul!(x937, x918, 33), bigint_mul!(x881, x920, 33), 33);
    let x945: BytePoly_33 =
        bigint_add!(bigint_mul!(x943, x918, 33), bigint_mul!(x883, x920, 33), 33);
    let x946: BytePoly_35 = bigint_nondet_quot!(ctx, x944, x6, 35);
    let x947: BytePoly_32 = bigint_nondet_rem!(ctx, x944, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x946, x6, 67), x947, 67), x944, 67),
        284487,
        4,
    )?;
    let x948: BytePoly_35 = bigint_nondet_quot!(ctx, x945, x6, 35);
    let x949: BytePoly_32 = bigint_nondet_rem!(ctx, x945, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x948, x6, 67), x949, 67), x945, 67),
        284487,
        4,
    )?;
    let x950: BytePoly_64 = bigint_mul!(x911, x911, 64);
    let x951: BytePoly_66 = bigint_nondet_quot!(ctx, x950, x6, 66);
    let x952: BytePoly_32 = bigint_nondet_rem!(ctx, x950, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x951, x6, 98), x952, 98), x950, 98),
        536459,
        4,
    )?;
    let x953: BytePoly_33 = bigint_add!(bigint_mul!(x952, x0, 33), x5, 33);
    let x954: BytePoly_35 = bigint_nondet_quot!(ctx, x953, x6, 35);
    let x955: BytePoly_32 = bigint_nondet_rem!(ctx, x953, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x954, x6, 67), x955, 67), x953, 67),
        284487,
        4,
    )?;
    let x956: BytePoly_32 = bigint_add!(x917, x917, 32);
    let x957: BytePoly_32 = bigint_nondet_quot!(ctx, x956, x6, 32);
    let x958: BytePoly_32 = bigint_nondet_rem!(ctx, x956, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x957, x6, 64), x958, 64), x956, 64),
        260103,
        4,
    )?;
    let x959: BytePoly_32 = bigint_nondet_inv!(ctx, x958, x6, 32);
    let x960: BytePoly_64 = bigint_mul!(x958, x959, 64);
    let x961: BytePoly_66 = bigint_nondet_quot!(ctx, x960, x6, 66);
    let x962: BytePoly_32 = bigint_nondet_rem!(ctx, x960, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x961, x6, 98), x962, 98), x960, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x962, x3, 32), 34, 1)?;
    let x963: BytePoly_64 = bigint_mul!(x955, x959, 64);
    let x964: BytePoly_66 = bigint_nondet_quot!(ctx, x963, x6, 66);
    let x965: BytePoly_32 = bigint_nondet_rem!(ctx, x963, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x964, x6, 98), x965, 98), x963, 98),
        536459,
        4,
    )?;
    let x966: BytePoly_64 = bigint_mul!(x965, x911, 64);
    let x967: BytePoly_66 = bigint_nondet_quot!(ctx, x966, x6, 66);
    let x968: BytePoly_32 = bigint_nondet_rem!(ctx, x966, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x967, x6, 98), x968, 98), x966, 98),
        536459,
        4,
    )?;
    let x969: BytePoly_32 = bigint_add!(bigint_sub!(x917, x968, 32), x6, 32);
    let x970: BytePoly_32 = bigint_nondet_quot!(ctx, x969, x6, 32);
    let x971: BytePoly_32 = bigint_nondet_rem!(ctx, x969, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x970, x6, 64), x971, 64), x969, 64),
        260103,
        4,
    )?;
    let x972: BytePoly_64 = bigint_mul!(x965, x965, 64);
    let x973: BytePoly_66 = bigint_nondet_quot!(ctx, x972, x6, 66);
    let x974: BytePoly_32 = bigint_nondet_rem!(ctx, x972, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x973, x6, 98), x974, 98), x972, 98),
        536459,
        4,
    )?;
    let x975: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x974, x911, 32), x6, 32), x911, 32),
        x6,
        32
    );
    let x976: BytePoly_32 = bigint_nondet_quot!(ctx, x975, x6, 32);
    let x977: BytePoly_32 = bigint_nondet_rem!(ctx, x975, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x976, x6, 64), x977, 64), x975, 64),
        260103,
        4,
    )?;
    let x978: BytePoly_64 = bigint_mul!(x965, x977, 64);
    let x979: BytePoly_66 = bigint_nondet_quot!(ctx, x978, x6, 66);
    let x980: BytePoly_32 = bigint_nondet_rem!(ctx, x978, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x979, x6, 98), x980, 98), x978, 98),
        536459,
        4,
    )?;
    let x981: BytePoly_32 = bigint_add!(bigint_sub!(x6, bigint_add!(x980, x971, 32), 32), x6, 32);
    let x982: BytePoly_32 = bigint_nondet_quot!(ctx, x981, x6, 32);
    let x983: BytePoly_32 = bigint_nondet_rem!(ctx, x981, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x982, x6, 64), x983, 64), x981, 64),
        260103,
        4,
    )?;
    let x984: BytePoly_1 = bigint_nondet_rem!(ctx, x919, x2, 1);
    let x985: BytePoly_33 = bigint_nondet_quot!(ctx, x919, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x985, x2, 34), x984, 34), x919, 34),
        268231,
        4,
    )?;
    let x986: BytePoly_1 = bigint_sub!(x3, x984, 1);
    eqz(ctx, &bigint_mul!(x984, x986, 2), 8131, 2)?;
    let x987: BytePoly_32 = bigint_add!(bigint_sub!(x977, x947, 32), x6, 32);
    let x988: BytePoly_32 = bigint_nondet_inv!(ctx, x987, x6, 32);
    let x989: BytePoly_64 = bigint_mul!(x987, x988, 64);
    let x990: BytePoly_66 = bigint_nondet_quot!(ctx, x989, x6, 66);
    let x991: BytePoly_32 = bigint_nondet_rem!(ctx, x989, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x990, x6, 98), x991, 98), x989, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x991, x1, 32), 34, 1)?;
    let x992: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x983, x949, 32), x6, 32), x988, 64);
    let x993: BytePoly_66 = bigint_nondet_quot!(ctx, x992, x6, 66);
    let x994: BytePoly_32 = bigint_nondet_rem!(ctx, x992, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x993, x6, 98), x994, 98), x992, 98),
        536459,
        4,
    )?;
    let x995: BytePoly_64 = bigint_mul!(x994, x947, 64);
    let x996: BytePoly_66 = bigint_nondet_quot!(ctx, x995, x6, 66);
    let x997: BytePoly_32 = bigint_nondet_rem!(ctx, x995, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x996, x6, 98), x997, 98), x995, 98),
        536459,
        4,
    )?;
    let x998: BytePoly_32 = bigint_add!(bigint_sub!(x949, x997, 32), x6, 32);
    let x999: BytePoly_32 = bigint_nondet_quot!(ctx, x998, x6, 32);
    let x1000: BytePoly_32 = bigint_nondet_rem!(ctx, x998, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x999, x6, 64), x1000, 64), x998, 64),
        260103,
        4,
    )?;
    let x1001: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x994, x994, 64), x947, 64), x6, 64),
            x977,
            64
        ),
        x6,
        64
    );
    let x1002: BytePoly_66 = bigint_nondet_quot!(ctx, x1001, x6, 66);
    let x1003: BytePoly_32 = bigint_nondet_rem!(ctx, x1001, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1002, x6, 98), x1003, 98),
            x1001,
            98
        ),
        536459,
        4,
    )?;
    let x1004: BytePoly_64 = bigint_mul!(x994, x1003, 64);
    let x1005: BytePoly_66 = bigint_nondet_quot!(ctx, x1004, x6, 66);
    let x1006: BytePoly_32 = bigint_nondet_rem!(ctx, x1004, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1005, x6, 98), x1006, 98),
            x1004,
            98
        ),
        536459,
        4,
    )?;
    let x1007: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1006, x1000, 32), 32), x6, 32);
    let x1008: BytePoly_32 = bigint_nondet_quot!(ctx, x1007, x6, 32);
    let x1009: BytePoly_32 = bigint_nondet_rem!(ctx, x1007, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1008, x6, 64), x1009, 64),
            x1007,
            64
        ),
        260103,
        4,
    )?;
    let x1010: BytePoly_33 = bigint_add!(
        bigint_mul!(x1003, x984, 33),
        bigint_mul!(x947, x986, 33),
        33
    );
    let x1011: BytePoly_33 = bigint_add!(
        bigint_mul!(x1009, x984, 33),
        bigint_mul!(x949, x986, 33),
        33
    );
    let x1012: BytePoly_35 = bigint_nondet_quot!(ctx, x1010, x6, 35);
    let x1013: BytePoly_32 = bigint_nondet_rem!(ctx, x1010, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1012, x6, 67), x1013, 67),
            x1010,
            67
        ),
        284487,
        4,
    )?;
    let x1014: BytePoly_35 = bigint_nondet_quot!(ctx, x1011, x6, 35);
    let x1015: BytePoly_32 = bigint_nondet_rem!(ctx, x1011, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1014, x6, 67), x1015, 67),
            x1011,
            67
        ),
        284487,
        4,
    )?;
    let x1016: BytePoly_64 = bigint_mul!(x977, x977, 64);
    let x1017: BytePoly_66 = bigint_nondet_quot!(ctx, x1016, x6, 66);
    let x1018: BytePoly_32 = bigint_nondet_rem!(ctx, x1016, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1017, x6, 98), x1018, 98),
            x1016,
            98
        ),
        536459,
        4,
    )?;
    let x1019: BytePoly_33 = bigint_add!(bigint_mul!(x1018, x0, 33), x5, 33);
    let x1020: BytePoly_35 = bigint_nondet_quot!(ctx, x1019, x6, 35);
    let x1021: BytePoly_32 = bigint_nondet_rem!(ctx, x1019, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1020, x6, 67), x1021, 67),
            x1019,
            67
        ),
        284487,
        4,
    )?;
    let x1022: BytePoly_32 = bigint_add!(x983, x983, 32);
    let x1023: BytePoly_32 = bigint_nondet_quot!(ctx, x1022, x6, 32);
    let x1024: BytePoly_32 = bigint_nondet_rem!(ctx, x1022, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1023, x6, 64), x1024, 64),
            x1022,
            64
        ),
        260103,
        4,
    )?;
    let x1025: BytePoly_32 = bigint_nondet_inv!(ctx, x1024, x6, 32);
    let x1026: BytePoly_64 = bigint_mul!(x1024, x1025, 64);
    let x1027: BytePoly_66 = bigint_nondet_quot!(ctx, x1026, x6, 66);
    let x1028: BytePoly_32 = bigint_nondet_rem!(ctx, x1026, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1027, x6, 98), x1028, 98),
            x1026,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1028, x3, 32), 34, 1)?;
    let x1029: BytePoly_64 = bigint_mul!(x1021, x1025, 64);
    let x1030: BytePoly_66 = bigint_nondet_quot!(ctx, x1029, x6, 66);
    let x1031: BytePoly_32 = bigint_nondet_rem!(ctx, x1029, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1030, x6, 98), x1031, 98),
            x1029,
            98
        ),
        536459,
        4,
    )?;
    let x1032: BytePoly_64 = bigint_mul!(x1031, x977, 64);
    let x1033: BytePoly_66 = bigint_nondet_quot!(ctx, x1032, x6, 66);
    let x1034: BytePoly_32 = bigint_nondet_rem!(ctx, x1032, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1033, x6, 98), x1034, 98),
            x1032,
            98
        ),
        536459,
        4,
    )?;
    let x1035: BytePoly_32 = bigint_add!(bigint_sub!(x983, x1034, 32), x6, 32);
    let x1036: BytePoly_32 = bigint_nondet_quot!(ctx, x1035, x6, 32);
    let x1037: BytePoly_32 = bigint_nondet_rem!(ctx, x1035, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1036, x6, 64), x1037, 64),
            x1035,
            64
        ),
        260103,
        4,
    )?;
    let x1038: BytePoly_64 = bigint_mul!(x1031, x1031, 64);
    let x1039: BytePoly_66 = bigint_nondet_quot!(ctx, x1038, x6, 66);
    let x1040: BytePoly_32 = bigint_nondet_rem!(ctx, x1038, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1039, x6, 98), x1040, 98),
            x1038,
            98
        ),
        536459,
        4,
    )?;
    let x1041: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1040, x977, 32), x6, 32), x977, 32),
        x6,
        32
    );
    let x1042: BytePoly_32 = bigint_nondet_quot!(ctx, x1041, x6, 32);
    let x1043: BytePoly_32 = bigint_nondet_rem!(ctx, x1041, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1042, x6, 64), x1043, 64),
            x1041,
            64
        ),
        260103,
        4,
    )?;
    let x1044: BytePoly_64 = bigint_mul!(x1031, x1043, 64);
    let x1045: BytePoly_66 = bigint_nondet_quot!(ctx, x1044, x6, 66);
    let x1046: BytePoly_32 = bigint_nondet_rem!(ctx, x1044, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1045, x6, 98), x1046, 98),
            x1044,
            98
        ),
        536459,
        4,
    )?;
    let x1047: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1046, x1037, 32), 32), x6, 32);
    let x1048: BytePoly_32 = bigint_nondet_quot!(ctx, x1047, x6, 32);
    let x1049: BytePoly_32 = bigint_nondet_rem!(ctx, x1047, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1048, x6, 64), x1049, 64),
            x1047,
            64
        ),
        260103,
        4,
    )?;
    let x1050: BytePoly_1 = bigint_nondet_rem!(ctx, x985, x2, 1);
    let x1051: BytePoly_33 = bigint_nondet_quot!(ctx, x985, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1051, x2, 34), x1050, 34), x985, 34),
        268231,
        4,
    )?;
    let x1052: BytePoly_1 = bigint_sub!(x3, x1050, 1);
    eqz(ctx, &bigint_mul!(x1050, x1052, 2), 8131, 2)?;
    let x1053: BytePoly_32 = bigint_add!(bigint_sub!(x1043, x1013, 32), x6, 32);
    let x1054: BytePoly_32 = bigint_nondet_inv!(ctx, x1053, x6, 32);
    let x1055: BytePoly_64 = bigint_mul!(x1053, x1054, 64);
    let x1056: BytePoly_66 = bigint_nondet_quot!(ctx, x1055, x6, 66);
    let x1057: BytePoly_32 = bigint_nondet_rem!(ctx, x1055, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1056, x6, 98), x1057, 98),
            x1055,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1057, x1, 32), 34, 1)?;
    let x1058: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1049, x1015, 32), x6, 32),
        x1054,
        64
    );
    let x1059: BytePoly_66 = bigint_nondet_quot!(ctx, x1058, x6, 66);
    let x1060: BytePoly_32 = bigint_nondet_rem!(ctx, x1058, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1059, x6, 98), x1060, 98),
            x1058,
            98
        ),
        536459,
        4,
    )?;
    let x1061: BytePoly_64 = bigint_mul!(x1060, x1013, 64);
    let x1062: BytePoly_66 = bigint_nondet_quot!(ctx, x1061, x6, 66);
    let x1063: BytePoly_32 = bigint_nondet_rem!(ctx, x1061, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1062, x6, 98), x1063, 98),
            x1061,
            98
        ),
        536459,
        4,
    )?;
    let x1064: BytePoly_32 = bigint_add!(bigint_sub!(x1015, x1063, 32), x6, 32);
    let x1065: BytePoly_32 = bigint_nondet_quot!(ctx, x1064, x6, 32);
    let x1066: BytePoly_32 = bigint_nondet_rem!(ctx, x1064, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1065, x6, 64), x1066, 64),
            x1064,
            64
        ),
        260103,
        4,
    )?;
    let x1067: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1060, x1060, 64), x1013, 64),
                x6,
                64
            ),
            x1043,
            64
        ),
        x6,
        64
    );
    let x1068: BytePoly_66 = bigint_nondet_quot!(ctx, x1067, x6, 66);
    let x1069: BytePoly_32 = bigint_nondet_rem!(ctx, x1067, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1068, x6, 98), x1069, 98),
            x1067,
            98
        ),
        536459,
        4,
    )?;
    let x1070: BytePoly_64 = bigint_mul!(x1060, x1069, 64);
    let x1071: BytePoly_66 = bigint_nondet_quot!(ctx, x1070, x6, 66);
    let x1072: BytePoly_32 = bigint_nondet_rem!(ctx, x1070, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1071, x6, 98), x1072, 98),
            x1070,
            98
        ),
        536459,
        4,
    )?;
    let x1073: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1072, x1066, 32), 32), x6, 32);
    let x1074: BytePoly_32 = bigint_nondet_quot!(ctx, x1073, x6, 32);
    let x1075: BytePoly_32 = bigint_nondet_rem!(ctx, x1073, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1074, x6, 64), x1075, 64),
            x1073,
            64
        ),
        260103,
        4,
    )?;
    let x1076: BytePoly_33 = bigint_add!(
        bigint_mul!(x1069, x1050, 33),
        bigint_mul!(x1013, x1052, 33),
        33
    );
    let x1077: BytePoly_33 = bigint_add!(
        bigint_mul!(x1075, x1050, 33),
        bigint_mul!(x1015, x1052, 33),
        33
    );
    let x1078: BytePoly_35 = bigint_nondet_quot!(ctx, x1076, x6, 35);
    let x1079: BytePoly_32 = bigint_nondet_rem!(ctx, x1076, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1078, x6, 67), x1079, 67),
            x1076,
            67
        ),
        284487,
        4,
    )?;
    let x1080: BytePoly_35 = bigint_nondet_quot!(ctx, x1077, x6, 35);
    let x1081: BytePoly_32 = bigint_nondet_rem!(ctx, x1077, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1080, x6, 67), x1081, 67),
            x1077,
            67
        ),
        284487,
        4,
    )?;
    let x1082: BytePoly_64 = bigint_mul!(x1043, x1043, 64);
    let x1083: BytePoly_66 = bigint_nondet_quot!(ctx, x1082, x6, 66);
    let x1084: BytePoly_32 = bigint_nondet_rem!(ctx, x1082, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1083, x6, 98), x1084, 98),
            x1082,
            98
        ),
        536459,
        4,
    )?;
    let x1085: BytePoly_33 = bigint_add!(bigint_mul!(x1084, x0, 33), x5, 33);
    let x1086: BytePoly_35 = bigint_nondet_quot!(ctx, x1085, x6, 35);
    let x1087: BytePoly_32 = bigint_nondet_rem!(ctx, x1085, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1086, x6, 67), x1087, 67),
            x1085,
            67
        ),
        284487,
        4,
    )?;
    let x1088: BytePoly_32 = bigint_add!(x1049, x1049, 32);
    let x1089: BytePoly_32 = bigint_nondet_quot!(ctx, x1088, x6, 32);
    let x1090: BytePoly_32 = bigint_nondet_rem!(ctx, x1088, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1089, x6, 64), x1090, 64),
            x1088,
            64
        ),
        260103,
        4,
    )?;
    let x1091: BytePoly_32 = bigint_nondet_inv!(ctx, x1090, x6, 32);
    let x1092: BytePoly_64 = bigint_mul!(x1090, x1091, 64);
    let x1093: BytePoly_66 = bigint_nondet_quot!(ctx, x1092, x6, 66);
    let x1094: BytePoly_32 = bigint_nondet_rem!(ctx, x1092, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1093, x6, 98), x1094, 98),
            x1092,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1094, x3, 32), 34, 1)?;
    let x1095: BytePoly_64 = bigint_mul!(x1087, x1091, 64);
    let x1096: BytePoly_66 = bigint_nondet_quot!(ctx, x1095, x6, 66);
    let x1097: BytePoly_32 = bigint_nondet_rem!(ctx, x1095, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1096, x6, 98), x1097, 98),
            x1095,
            98
        ),
        536459,
        4,
    )?;
    let x1098: BytePoly_64 = bigint_mul!(x1097, x1043, 64);
    let x1099: BytePoly_66 = bigint_nondet_quot!(ctx, x1098, x6, 66);
    let x1100: BytePoly_32 = bigint_nondet_rem!(ctx, x1098, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1099, x6, 98), x1100, 98),
            x1098,
            98
        ),
        536459,
        4,
    )?;
    let x1101: BytePoly_32 = bigint_add!(bigint_sub!(x1049, x1100, 32), x6, 32);
    let x1102: BytePoly_32 = bigint_nondet_quot!(ctx, x1101, x6, 32);
    let x1103: BytePoly_32 = bigint_nondet_rem!(ctx, x1101, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1102, x6, 64), x1103, 64),
            x1101,
            64
        ),
        260103,
        4,
    )?;
    let x1104: BytePoly_64 = bigint_mul!(x1097, x1097, 64);
    let x1105: BytePoly_66 = bigint_nondet_quot!(ctx, x1104, x6, 66);
    let x1106: BytePoly_32 = bigint_nondet_rem!(ctx, x1104, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1105, x6, 98), x1106, 98),
            x1104,
            98
        ),
        536459,
        4,
    )?;
    let x1107: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1106, x1043, 32), x6, 32),
            x1043,
            32
        ),
        x6,
        32
    );
    let x1108: BytePoly_32 = bigint_nondet_quot!(ctx, x1107, x6, 32);
    let x1109: BytePoly_32 = bigint_nondet_rem!(ctx, x1107, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1108, x6, 64), x1109, 64),
            x1107,
            64
        ),
        260103,
        4,
    )?;
    let x1110: BytePoly_64 = bigint_mul!(x1097, x1109, 64);
    let x1111: BytePoly_66 = bigint_nondet_quot!(ctx, x1110, x6, 66);
    let x1112: BytePoly_32 = bigint_nondet_rem!(ctx, x1110, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1111, x6, 98), x1112, 98),
            x1110,
            98
        ),
        536459,
        4,
    )?;
    let x1113: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1112, x1103, 32), 32), x6, 32);
    let x1114: BytePoly_32 = bigint_nondet_quot!(ctx, x1113, x6, 32);
    let x1115: BytePoly_32 = bigint_nondet_rem!(ctx, x1113, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1114, x6, 64), x1115, 64),
            x1113,
            64
        ),
        260103,
        4,
    )?;
    let x1116: BytePoly_1 = bigint_nondet_rem!(ctx, x1051, x2, 1);
    let x1117: BytePoly_33 = bigint_nondet_quot!(ctx, x1051, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1117, x2, 34), x1116, 34),
            x1051,
            34
        ),
        268231,
        4,
    )?;
    let x1118: BytePoly_1 = bigint_sub!(x3, x1116, 1);
    eqz(ctx, &bigint_mul!(x1116, x1118, 2), 8131, 2)?;
    let x1119: BytePoly_32 = bigint_add!(bigint_sub!(x1109, x1079, 32), x6, 32);
    let x1120: BytePoly_32 = bigint_nondet_inv!(ctx, x1119, x6, 32);
    let x1121: BytePoly_64 = bigint_mul!(x1119, x1120, 64);
    let x1122: BytePoly_66 = bigint_nondet_quot!(ctx, x1121, x6, 66);
    let x1123: BytePoly_32 = bigint_nondet_rem!(ctx, x1121, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1122, x6, 98), x1123, 98),
            x1121,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1123, x1, 32), 34, 1)?;
    let x1124: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1115, x1081, 32), x6, 32),
        x1120,
        64
    );
    let x1125: BytePoly_66 = bigint_nondet_quot!(ctx, x1124, x6, 66);
    let x1126: BytePoly_32 = bigint_nondet_rem!(ctx, x1124, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1125, x6, 98), x1126, 98),
            x1124,
            98
        ),
        536459,
        4,
    )?;
    let x1127: BytePoly_64 = bigint_mul!(x1126, x1079, 64);
    let x1128: BytePoly_66 = bigint_nondet_quot!(ctx, x1127, x6, 66);
    let x1129: BytePoly_32 = bigint_nondet_rem!(ctx, x1127, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1128, x6, 98), x1129, 98),
            x1127,
            98
        ),
        536459,
        4,
    )?;
    let x1130: BytePoly_32 = bigint_add!(bigint_sub!(x1081, x1129, 32), x6, 32);
    let x1131: BytePoly_32 = bigint_nondet_quot!(ctx, x1130, x6, 32);
    let x1132: BytePoly_32 = bigint_nondet_rem!(ctx, x1130, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1131, x6, 64), x1132, 64),
            x1130,
            64
        ),
        260103,
        4,
    )?;
    let x1133: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1126, x1126, 64), x1079, 64),
                x6,
                64
            ),
            x1109,
            64
        ),
        x6,
        64
    );
    let x1134: BytePoly_66 = bigint_nondet_quot!(ctx, x1133, x6, 66);
    let x1135: BytePoly_32 = bigint_nondet_rem!(ctx, x1133, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1134, x6, 98), x1135, 98),
            x1133,
            98
        ),
        536459,
        4,
    )?;
    let x1136: BytePoly_64 = bigint_mul!(x1126, x1135, 64);
    let x1137: BytePoly_66 = bigint_nondet_quot!(ctx, x1136, x6, 66);
    let x1138: BytePoly_32 = bigint_nondet_rem!(ctx, x1136, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1137, x6, 98), x1138, 98),
            x1136,
            98
        ),
        536459,
        4,
    )?;
    let x1139: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1138, x1132, 32), 32), x6, 32);
    let x1140: BytePoly_32 = bigint_nondet_quot!(ctx, x1139, x6, 32);
    let x1141: BytePoly_32 = bigint_nondet_rem!(ctx, x1139, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1140, x6, 64), x1141, 64),
            x1139,
            64
        ),
        260103,
        4,
    )?;
    let x1142: BytePoly_33 = bigint_add!(
        bigint_mul!(x1135, x1116, 33),
        bigint_mul!(x1079, x1118, 33),
        33
    );
    let x1143: BytePoly_33 = bigint_add!(
        bigint_mul!(x1141, x1116, 33),
        bigint_mul!(x1081, x1118, 33),
        33
    );
    let x1144: BytePoly_35 = bigint_nondet_quot!(ctx, x1142, x6, 35);
    let x1145: BytePoly_32 = bigint_nondet_rem!(ctx, x1142, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1144, x6, 67), x1145, 67),
            x1142,
            67
        ),
        284487,
        4,
    )?;
    let x1146: BytePoly_35 = bigint_nondet_quot!(ctx, x1143, x6, 35);
    let x1147: BytePoly_32 = bigint_nondet_rem!(ctx, x1143, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1146, x6, 67), x1147, 67),
            x1143,
            67
        ),
        284487,
        4,
    )?;
    let x1148: BytePoly_64 = bigint_mul!(x1109, x1109, 64);
    let x1149: BytePoly_66 = bigint_nondet_quot!(ctx, x1148, x6, 66);
    let x1150: BytePoly_32 = bigint_nondet_rem!(ctx, x1148, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1149, x6, 98), x1150, 98),
            x1148,
            98
        ),
        536459,
        4,
    )?;
    let x1151: BytePoly_33 = bigint_add!(bigint_mul!(x1150, x0, 33), x5, 33);
    let x1152: BytePoly_35 = bigint_nondet_quot!(ctx, x1151, x6, 35);
    let x1153: BytePoly_32 = bigint_nondet_rem!(ctx, x1151, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1152, x6, 67), x1153, 67),
            x1151,
            67
        ),
        284487,
        4,
    )?;
    let x1154: BytePoly_32 = bigint_add!(x1115, x1115, 32);
    let x1155: BytePoly_32 = bigint_nondet_quot!(ctx, x1154, x6, 32);
    let x1156: BytePoly_32 = bigint_nondet_rem!(ctx, x1154, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1155, x6, 64), x1156, 64),
            x1154,
            64
        ),
        260103,
        4,
    )?;
    let x1157: BytePoly_32 = bigint_nondet_inv!(ctx, x1156, x6, 32);
    let x1158: BytePoly_64 = bigint_mul!(x1156, x1157, 64);
    let x1159: BytePoly_66 = bigint_nondet_quot!(ctx, x1158, x6, 66);
    let x1160: BytePoly_32 = bigint_nondet_rem!(ctx, x1158, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1159, x6, 98), x1160, 98),
            x1158,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1160, x3, 32), 34, 1)?;
    let x1161: BytePoly_64 = bigint_mul!(x1153, x1157, 64);
    let x1162: BytePoly_66 = bigint_nondet_quot!(ctx, x1161, x6, 66);
    let x1163: BytePoly_32 = bigint_nondet_rem!(ctx, x1161, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1162, x6, 98), x1163, 98),
            x1161,
            98
        ),
        536459,
        4,
    )?;
    let x1164: BytePoly_64 = bigint_mul!(x1163, x1109, 64);
    let x1165: BytePoly_66 = bigint_nondet_quot!(ctx, x1164, x6, 66);
    let x1166: BytePoly_32 = bigint_nondet_rem!(ctx, x1164, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1165, x6, 98), x1166, 98),
            x1164,
            98
        ),
        536459,
        4,
    )?;
    let x1167: BytePoly_32 = bigint_add!(bigint_sub!(x1115, x1166, 32), x6, 32);
    let x1168: BytePoly_32 = bigint_nondet_quot!(ctx, x1167, x6, 32);
    let x1169: BytePoly_32 = bigint_nondet_rem!(ctx, x1167, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1168, x6, 64), x1169, 64),
            x1167,
            64
        ),
        260103,
        4,
    )?;
    let x1170: BytePoly_64 = bigint_mul!(x1163, x1163, 64);
    let x1171: BytePoly_66 = bigint_nondet_quot!(ctx, x1170, x6, 66);
    let x1172: BytePoly_32 = bigint_nondet_rem!(ctx, x1170, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1171, x6, 98), x1172, 98),
            x1170,
            98
        ),
        536459,
        4,
    )?;
    let x1173: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1172, x1109, 32), x6, 32),
            x1109,
            32
        ),
        x6,
        32
    );
    let x1174: BytePoly_32 = bigint_nondet_quot!(ctx, x1173, x6, 32);
    let x1175: BytePoly_32 = bigint_nondet_rem!(ctx, x1173, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1174, x6, 64), x1175, 64),
            x1173,
            64
        ),
        260103,
        4,
    )?;
    let x1176: BytePoly_64 = bigint_mul!(x1163, x1175, 64);
    let x1177: BytePoly_66 = bigint_nondet_quot!(ctx, x1176, x6, 66);
    let x1178: BytePoly_32 = bigint_nondet_rem!(ctx, x1176, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1177, x6, 98), x1178, 98),
            x1176,
            98
        ),
        536459,
        4,
    )?;
    let x1179: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1178, x1169, 32), 32), x6, 32);
    let x1180: BytePoly_32 = bigint_nondet_quot!(ctx, x1179, x6, 32);
    let x1181: BytePoly_32 = bigint_nondet_rem!(ctx, x1179, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1180, x6, 64), x1181, 64),
            x1179,
            64
        ),
        260103,
        4,
    )?;
    let x1182: BytePoly_1 = bigint_nondet_rem!(ctx, x1117, x2, 1);
    let x1183: BytePoly_33 = bigint_nondet_quot!(ctx, x1117, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1183, x2, 34), x1182, 34),
            x1117,
            34
        ),
        268231,
        4,
    )?;
    let x1184: BytePoly_1 = bigint_sub!(x3, x1182, 1);
    eqz(ctx, &bigint_mul!(x1182, x1184, 2), 8131, 2)?;
    let x1185: BytePoly_32 = bigint_add!(bigint_sub!(x1175, x1145, 32), x6, 32);
    let x1186: BytePoly_32 = bigint_nondet_inv!(ctx, x1185, x6, 32);
    let x1187: BytePoly_64 = bigint_mul!(x1185, x1186, 64);
    let x1188: BytePoly_66 = bigint_nondet_quot!(ctx, x1187, x6, 66);
    let x1189: BytePoly_32 = bigint_nondet_rem!(ctx, x1187, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1188, x6, 98), x1189, 98),
            x1187,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1189, x1, 32), 34, 1)?;
    let x1190: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1181, x1147, 32), x6, 32),
        x1186,
        64
    );
    let x1191: BytePoly_66 = bigint_nondet_quot!(ctx, x1190, x6, 66);
    let x1192: BytePoly_32 = bigint_nondet_rem!(ctx, x1190, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1191, x6, 98), x1192, 98),
            x1190,
            98
        ),
        536459,
        4,
    )?;
    let x1193: BytePoly_64 = bigint_mul!(x1192, x1145, 64);
    let x1194: BytePoly_66 = bigint_nondet_quot!(ctx, x1193, x6, 66);
    let x1195: BytePoly_32 = bigint_nondet_rem!(ctx, x1193, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1194, x6, 98), x1195, 98),
            x1193,
            98
        ),
        536459,
        4,
    )?;
    let x1196: BytePoly_32 = bigint_add!(bigint_sub!(x1147, x1195, 32), x6, 32);
    let x1197: BytePoly_32 = bigint_nondet_quot!(ctx, x1196, x6, 32);
    let x1198: BytePoly_32 = bigint_nondet_rem!(ctx, x1196, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1197, x6, 64), x1198, 64),
            x1196,
            64
        ),
        260103,
        4,
    )?;
    let x1199: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1192, x1192, 64), x1145, 64),
                x6,
                64
            ),
            x1175,
            64
        ),
        x6,
        64
    );
    let x1200: BytePoly_66 = bigint_nondet_quot!(ctx, x1199, x6, 66);
    let x1201: BytePoly_32 = bigint_nondet_rem!(ctx, x1199, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1200, x6, 98), x1201, 98),
            x1199,
            98
        ),
        536459,
        4,
    )?;
    let x1202: BytePoly_64 = bigint_mul!(x1192, x1201, 64);
    let x1203: BytePoly_66 = bigint_nondet_quot!(ctx, x1202, x6, 66);
    let x1204: BytePoly_32 = bigint_nondet_rem!(ctx, x1202, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1203, x6, 98), x1204, 98),
            x1202,
            98
        ),
        536459,
        4,
    )?;
    let x1205: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1204, x1198, 32), 32), x6, 32);
    let x1206: BytePoly_32 = bigint_nondet_quot!(ctx, x1205, x6, 32);
    let x1207: BytePoly_32 = bigint_nondet_rem!(ctx, x1205, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1206, x6, 64), x1207, 64),
            x1205,
            64
        ),
        260103,
        4,
    )?;
    let x1208: BytePoly_33 = bigint_add!(
        bigint_mul!(x1201, x1182, 33),
        bigint_mul!(x1145, x1184, 33),
        33
    );
    let x1209: BytePoly_33 = bigint_add!(
        bigint_mul!(x1207, x1182, 33),
        bigint_mul!(x1147, x1184, 33),
        33
    );
    let x1210: BytePoly_35 = bigint_nondet_quot!(ctx, x1208, x6, 35);
    let x1211: BytePoly_32 = bigint_nondet_rem!(ctx, x1208, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1210, x6, 67), x1211, 67),
            x1208,
            67
        ),
        284487,
        4,
    )?;
    let x1212: BytePoly_35 = bigint_nondet_quot!(ctx, x1209, x6, 35);
    let x1213: BytePoly_32 = bigint_nondet_rem!(ctx, x1209, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1212, x6, 67), x1213, 67),
            x1209,
            67
        ),
        284487,
        4,
    )?;
    let x1214: BytePoly_64 = bigint_mul!(x1175, x1175, 64);
    let x1215: BytePoly_66 = bigint_nondet_quot!(ctx, x1214, x6, 66);
    let x1216: BytePoly_32 = bigint_nondet_rem!(ctx, x1214, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1215, x6, 98), x1216, 98),
            x1214,
            98
        ),
        536459,
        4,
    )?;
    let x1217: BytePoly_33 = bigint_add!(bigint_mul!(x1216, x0, 33), x5, 33);
    let x1218: BytePoly_35 = bigint_nondet_quot!(ctx, x1217, x6, 35);
    let x1219: BytePoly_32 = bigint_nondet_rem!(ctx, x1217, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1218, x6, 67), x1219, 67),
            x1217,
            67
        ),
        284487,
        4,
    )?;
    let x1220: BytePoly_32 = bigint_add!(x1181, x1181, 32);
    let x1221: BytePoly_32 = bigint_nondet_quot!(ctx, x1220, x6, 32);
    let x1222: BytePoly_32 = bigint_nondet_rem!(ctx, x1220, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1221, x6, 64), x1222, 64),
            x1220,
            64
        ),
        260103,
        4,
    )?;
    let x1223: BytePoly_32 = bigint_nondet_inv!(ctx, x1222, x6, 32);
    let x1224: BytePoly_64 = bigint_mul!(x1222, x1223, 64);
    let x1225: BytePoly_66 = bigint_nondet_quot!(ctx, x1224, x6, 66);
    let x1226: BytePoly_32 = bigint_nondet_rem!(ctx, x1224, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1225, x6, 98), x1226, 98),
            x1224,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1226, x3, 32), 34, 1)?;
    let x1227: BytePoly_64 = bigint_mul!(x1219, x1223, 64);
    let x1228: BytePoly_66 = bigint_nondet_quot!(ctx, x1227, x6, 66);
    let x1229: BytePoly_32 = bigint_nondet_rem!(ctx, x1227, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1228, x6, 98), x1229, 98),
            x1227,
            98
        ),
        536459,
        4,
    )?;
    let x1230: BytePoly_64 = bigint_mul!(x1229, x1175, 64);
    let x1231: BytePoly_66 = bigint_nondet_quot!(ctx, x1230, x6, 66);
    let x1232: BytePoly_32 = bigint_nondet_rem!(ctx, x1230, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1231, x6, 98), x1232, 98),
            x1230,
            98
        ),
        536459,
        4,
    )?;
    let x1233: BytePoly_32 = bigint_add!(bigint_sub!(x1181, x1232, 32), x6, 32);
    let x1234: BytePoly_32 = bigint_nondet_quot!(ctx, x1233, x6, 32);
    let x1235: BytePoly_32 = bigint_nondet_rem!(ctx, x1233, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1234, x6, 64), x1235, 64),
            x1233,
            64
        ),
        260103,
        4,
    )?;
    let x1236: BytePoly_64 = bigint_mul!(x1229, x1229, 64);
    let x1237: BytePoly_66 = bigint_nondet_quot!(ctx, x1236, x6, 66);
    let x1238: BytePoly_32 = bigint_nondet_rem!(ctx, x1236, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1237, x6, 98), x1238, 98),
            x1236,
            98
        ),
        536459,
        4,
    )?;
    let x1239: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1238, x1175, 32), x6, 32),
            x1175,
            32
        ),
        x6,
        32
    );
    let x1240: BytePoly_32 = bigint_nondet_quot!(ctx, x1239, x6, 32);
    let x1241: BytePoly_32 = bigint_nondet_rem!(ctx, x1239, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1240, x6, 64), x1241, 64),
            x1239,
            64
        ),
        260103,
        4,
    )?;
    let x1242: BytePoly_64 = bigint_mul!(x1229, x1241, 64);
    let x1243: BytePoly_66 = bigint_nondet_quot!(ctx, x1242, x6, 66);
    let x1244: BytePoly_32 = bigint_nondet_rem!(ctx, x1242, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1243, x6, 98), x1244, 98),
            x1242,
            98
        ),
        536459,
        4,
    )?;
    let x1245: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1244, x1235, 32), 32), x6, 32);
    let x1246: BytePoly_32 = bigint_nondet_quot!(ctx, x1245, x6, 32);
    let x1247: BytePoly_32 = bigint_nondet_rem!(ctx, x1245, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1246, x6, 64), x1247, 64),
            x1245,
            64
        ),
        260103,
        4,
    )?;
    let x1248: BytePoly_1 = bigint_nondet_rem!(ctx, x1183, x2, 1);
    let x1249: BytePoly_33 = bigint_nondet_quot!(ctx, x1183, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1249, x2, 34), x1248, 34),
            x1183,
            34
        ),
        268231,
        4,
    )?;
    let x1250: BytePoly_1 = bigint_sub!(x3, x1248, 1);
    eqz(ctx, &bigint_mul!(x1248, x1250, 2), 8131, 2)?;
    let x1251: BytePoly_32 = bigint_add!(bigint_sub!(x1241, x1211, 32), x6, 32);
    let x1252: BytePoly_32 = bigint_nondet_inv!(ctx, x1251, x6, 32);
    let x1253: BytePoly_64 = bigint_mul!(x1251, x1252, 64);
    let x1254: BytePoly_66 = bigint_nondet_quot!(ctx, x1253, x6, 66);
    let x1255: BytePoly_32 = bigint_nondet_rem!(ctx, x1253, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1254, x6, 98), x1255, 98),
            x1253,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1255, x1, 32), 34, 1)?;
    let x1256: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1247, x1213, 32), x6, 32),
        x1252,
        64
    );
    let x1257: BytePoly_66 = bigint_nondet_quot!(ctx, x1256, x6, 66);
    let x1258: BytePoly_32 = bigint_nondet_rem!(ctx, x1256, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1257, x6, 98), x1258, 98),
            x1256,
            98
        ),
        536459,
        4,
    )?;
    let x1259: BytePoly_64 = bigint_mul!(x1258, x1211, 64);
    let x1260: BytePoly_66 = bigint_nondet_quot!(ctx, x1259, x6, 66);
    let x1261: BytePoly_32 = bigint_nondet_rem!(ctx, x1259, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1260, x6, 98), x1261, 98),
            x1259,
            98
        ),
        536459,
        4,
    )?;
    let x1262: BytePoly_32 = bigint_add!(bigint_sub!(x1213, x1261, 32), x6, 32);
    let x1263: BytePoly_32 = bigint_nondet_quot!(ctx, x1262, x6, 32);
    let x1264: BytePoly_32 = bigint_nondet_rem!(ctx, x1262, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1263, x6, 64), x1264, 64),
            x1262,
            64
        ),
        260103,
        4,
    )?;
    let x1265: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1258, x1258, 64), x1211, 64),
                x6,
                64
            ),
            x1241,
            64
        ),
        x6,
        64
    );
    let x1266: BytePoly_66 = bigint_nondet_quot!(ctx, x1265, x6, 66);
    let x1267: BytePoly_32 = bigint_nondet_rem!(ctx, x1265, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1266, x6, 98), x1267, 98),
            x1265,
            98
        ),
        536459,
        4,
    )?;
    let x1268: BytePoly_64 = bigint_mul!(x1258, x1267, 64);
    let x1269: BytePoly_66 = bigint_nondet_quot!(ctx, x1268, x6, 66);
    let x1270: BytePoly_32 = bigint_nondet_rem!(ctx, x1268, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1269, x6, 98), x1270, 98),
            x1268,
            98
        ),
        536459,
        4,
    )?;
    let x1271: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1270, x1264, 32), 32), x6, 32);
    let x1272: BytePoly_32 = bigint_nondet_quot!(ctx, x1271, x6, 32);
    let x1273: BytePoly_32 = bigint_nondet_rem!(ctx, x1271, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1272, x6, 64), x1273, 64),
            x1271,
            64
        ),
        260103,
        4,
    )?;
    let x1274: BytePoly_33 = bigint_add!(
        bigint_mul!(x1267, x1248, 33),
        bigint_mul!(x1211, x1250, 33),
        33
    );
    let x1275: BytePoly_33 = bigint_add!(
        bigint_mul!(x1273, x1248, 33),
        bigint_mul!(x1213, x1250, 33),
        33
    );
    let x1276: BytePoly_35 = bigint_nondet_quot!(ctx, x1274, x6, 35);
    let x1277: BytePoly_32 = bigint_nondet_rem!(ctx, x1274, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1276, x6, 67), x1277, 67),
            x1274,
            67
        ),
        284487,
        4,
    )?;
    let x1278: BytePoly_35 = bigint_nondet_quot!(ctx, x1275, x6, 35);
    let x1279: BytePoly_32 = bigint_nondet_rem!(ctx, x1275, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1278, x6, 67), x1279, 67),
            x1275,
            67
        ),
        284487,
        4,
    )?;
    let x1280: BytePoly_64 = bigint_mul!(x1241, x1241, 64);
    let x1281: BytePoly_66 = bigint_nondet_quot!(ctx, x1280, x6, 66);
    let x1282: BytePoly_32 = bigint_nondet_rem!(ctx, x1280, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1281, x6, 98), x1282, 98),
            x1280,
            98
        ),
        536459,
        4,
    )?;
    let x1283: BytePoly_33 = bigint_add!(bigint_mul!(x1282, x0, 33), x5, 33);
    let x1284: BytePoly_35 = bigint_nondet_quot!(ctx, x1283, x6, 35);
    let x1285: BytePoly_32 = bigint_nondet_rem!(ctx, x1283, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1284, x6, 67), x1285, 67),
            x1283,
            67
        ),
        284487,
        4,
    )?;
    let x1286: BytePoly_32 = bigint_add!(x1247, x1247, 32);
    let x1287: BytePoly_32 = bigint_nondet_quot!(ctx, x1286, x6, 32);
    let x1288: BytePoly_32 = bigint_nondet_rem!(ctx, x1286, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1287, x6, 64), x1288, 64),
            x1286,
            64
        ),
        260103,
        4,
    )?;
    let x1289: BytePoly_32 = bigint_nondet_inv!(ctx, x1288, x6, 32);
    let x1290: BytePoly_64 = bigint_mul!(x1288, x1289, 64);
    let x1291: BytePoly_66 = bigint_nondet_quot!(ctx, x1290, x6, 66);
    let x1292: BytePoly_32 = bigint_nondet_rem!(ctx, x1290, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1291, x6, 98), x1292, 98),
            x1290,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1292, x3, 32), 34, 1)?;
    let x1293: BytePoly_64 = bigint_mul!(x1285, x1289, 64);
    let x1294: BytePoly_66 = bigint_nondet_quot!(ctx, x1293, x6, 66);
    let x1295: BytePoly_32 = bigint_nondet_rem!(ctx, x1293, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1294, x6, 98), x1295, 98),
            x1293,
            98
        ),
        536459,
        4,
    )?;
    let x1296: BytePoly_64 = bigint_mul!(x1295, x1241, 64);
    let x1297: BytePoly_66 = bigint_nondet_quot!(ctx, x1296, x6, 66);
    let x1298: BytePoly_32 = bigint_nondet_rem!(ctx, x1296, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1297, x6, 98), x1298, 98),
            x1296,
            98
        ),
        536459,
        4,
    )?;
    let x1299: BytePoly_32 = bigint_add!(bigint_sub!(x1247, x1298, 32), x6, 32);
    let x1300: BytePoly_32 = bigint_nondet_quot!(ctx, x1299, x6, 32);
    let x1301: BytePoly_32 = bigint_nondet_rem!(ctx, x1299, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1300, x6, 64), x1301, 64),
            x1299,
            64
        ),
        260103,
        4,
    )?;
    let x1302: BytePoly_64 = bigint_mul!(x1295, x1295, 64);
    let x1303: BytePoly_66 = bigint_nondet_quot!(ctx, x1302, x6, 66);
    let x1304: BytePoly_32 = bigint_nondet_rem!(ctx, x1302, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1303, x6, 98), x1304, 98),
            x1302,
            98
        ),
        536459,
        4,
    )?;
    let x1305: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1304, x1241, 32), x6, 32),
            x1241,
            32
        ),
        x6,
        32
    );
    let x1306: BytePoly_32 = bigint_nondet_quot!(ctx, x1305, x6, 32);
    let x1307: BytePoly_32 = bigint_nondet_rem!(ctx, x1305, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1306, x6, 64), x1307, 64),
            x1305,
            64
        ),
        260103,
        4,
    )?;
    let x1308: BytePoly_64 = bigint_mul!(x1295, x1307, 64);
    let x1309: BytePoly_66 = bigint_nondet_quot!(ctx, x1308, x6, 66);
    let x1310: BytePoly_32 = bigint_nondet_rem!(ctx, x1308, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1309, x6, 98), x1310, 98),
            x1308,
            98
        ),
        536459,
        4,
    )?;
    let x1311: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1310, x1301, 32), 32), x6, 32);
    let x1312: BytePoly_32 = bigint_nondet_quot!(ctx, x1311, x6, 32);
    let x1313: BytePoly_32 = bigint_nondet_rem!(ctx, x1311, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1312, x6, 64), x1313, 64),
            x1311,
            64
        ),
        260103,
        4,
    )?;
    let x1314: BytePoly_1 = bigint_nondet_rem!(ctx, x1249, x2, 1);
    let x1315: BytePoly_33 = bigint_nondet_quot!(ctx, x1249, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1315, x2, 34), x1314, 34),
            x1249,
            34
        ),
        268231,
        4,
    )?;
    let x1316: BytePoly_1 = bigint_sub!(x3, x1314, 1);
    eqz(ctx, &bigint_mul!(x1314, x1316, 2), 8131, 2)?;
    let x1317: BytePoly_32 = bigint_add!(bigint_sub!(x1307, x1277, 32), x6, 32);
    let x1318: BytePoly_32 = bigint_nondet_inv!(ctx, x1317, x6, 32);
    let x1319: BytePoly_64 = bigint_mul!(x1317, x1318, 64);
    let x1320: BytePoly_66 = bigint_nondet_quot!(ctx, x1319, x6, 66);
    let x1321: BytePoly_32 = bigint_nondet_rem!(ctx, x1319, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1320, x6, 98), x1321, 98),
            x1319,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1321, x1, 32), 34, 1)?;
    let x1322: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1313, x1279, 32), x6, 32),
        x1318,
        64
    );
    let x1323: BytePoly_66 = bigint_nondet_quot!(ctx, x1322, x6, 66);
    let x1324: BytePoly_32 = bigint_nondet_rem!(ctx, x1322, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1323, x6, 98), x1324, 98),
            x1322,
            98
        ),
        536459,
        4,
    )?;
    let x1325: BytePoly_64 = bigint_mul!(x1324, x1277, 64);
    let x1326: BytePoly_66 = bigint_nondet_quot!(ctx, x1325, x6, 66);
    let x1327: BytePoly_32 = bigint_nondet_rem!(ctx, x1325, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1326, x6, 98), x1327, 98),
            x1325,
            98
        ),
        536459,
        4,
    )?;
    let x1328: BytePoly_32 = bigint_add!(bigint_sub!(x1279, x1327, 32), x6, 32);
    let x1329: BytePoly_32 = bigint_nondet_quot!(ctx, x1328, x6, 32);
    let x1330: BytePoly_32 = bigint_nondet_rem!(ctx, x1328, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1329, x6, 64), x1330, 64),
            x1328,
            64
        ),
        260103,
        4,
    )?;
    let x1331: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1324, x1324, 64), x1277, 64),
                x6,
                64
            ),
            x1307,
            64
        ),
        x6,
        64
    );
    let x1332: BytePoly_66 = bigint_nondet_quot!(ctx, x1331, x6, 66);
    let x1333: BytePoly_32 = bigint_nondet_rem!(ctx, x1331, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1332, x6, 98), x1333, 98),
            x1331,
            98
        ),
        536459,
        4,
    )?;
    let x1334: BytePoly_64 = bigint_mul!(x1324, x1333, 64);
    let x1335: BytePoly_66 = bigint_nondet_quot!(ctx, x1334, x6, 66);
    let x1336: BytePoly_32 = bigint_nondet_rem!(ctx, x1334, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1335, x6, 98), x1336, 98),
            x1334,
            98
        ),
        536459,
        4,
    )?;
    let x1337: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1336, x1330, 32), 32), x6, 32);
    let x1338: BytePoly_32 = bigint_nondet_quot!(ctx, x1337, x6, 32);
    let x1339: BytePoly_32 = bigint_nondet_rem!(ctx, x1337, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1338, x6, 64), x1339, 64),
            x1337,
            64
        ),
        260103,
        4,
    )?;
    let x1340: BytePoly_33 = bigint_add!(
        bigint_mul!(x1333, x1314, 33),
        bigint_mul!(x1277, x1316, 33),
        33
    );
    let x1341: BytePoly_33 = bigint_add!(
        bigint_mul!(x1339, x1314, 33),
        bigint_mul!(x1279, x1316, 33),
        33
    );
    let x1342: BytePoly_35 = bigint_nondet_quot!(ctx, x1340, x6, 35);
    let x1343: BytePoly_32 = bigint_nondet_rem!(ctx, x1340, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1342, x6, 67), x1343, 67),
            x1340,
            67
        ),
        284487,
        4,
    )?;
    let x1344: BytePoly_35 = bigint_nondet_quot!(ctx, x1341, x6, 35);
    let x1345: BytePoly_32 = bigint_nondet_rem!(ctx, x1341, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1344, x6, 67), x1345, 67),
            x1341,
            67
        ),
        284487,
        4,
    )?;
    let x1346: BytePoly_64 = bigint_mul!(x1307, x1307, 64);
    let x1347: BytePoly_66 = bigint_nondet_quot!(ctx, x1346, x6, 66);
    let x1348: BytePoly_32 = bigint_nondet_rem!(ctx, x1346, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1347, x6, 98), x1348, 98),
            x1346,
            98
        ),
        536459,
        4,
    )?;
    let x1349: BytePoly_33 = bigint_add!(bigint_mul!(x1348, x0, 33), x5, 33);
    let x1350: BytePoly_35 = bigint_nondet_quot!(ctx, x1349, x6, 35);
    let x1351: BytePoly_32 = bigint_nondet_rem!(ctx, x1349, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1350, x6, 67), x1351, 67),
            x1349,
            67
        ),
        284487,
        4,
    )?;
    let x1352: BytePoly_32 = bigint_add!(x1313, x1313, 32);
    let x1353: BytePoly_32 = bigint_nondet_quot!(ctx, x1352, x6, 32);
    let x1354: BytePoly_32 = bigint_nondet_rem!(ctx, x1352, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1353, x6, 64), x1354, 64),
            x1352,
            64
        ),
        260103,
        4,
    )?;
    let x1355: BytePoly_32 = bigint_nondet_inv!(ctx, x1354, x6, 32);
    let x1356: BytePoly_64 = bigint_mul!(x1354, x1355, 64);
    let x1357: BytePoly_66 = bigint_nondet_quot!(ctx, x1356, x6, 66);
    let x1358: BytePoly_32 = bigint_nondet_rem!(ctx, x1356, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1357, x6, 98), x1358, 98),
            x1356,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1358, x3, 32), 34, 1)?;
    let x1359: BytePoly_64 = bigint_mul!(x1351, x1355, 64);
    let x1360: BytePoly_66 = bigint_nondet_quot!(ctx, x1359, x6, 66);
    let x1361: BytePoly_32 = bigint_nondet_rem!(ctx, x1359, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1360, x6, 98), x1361, 98),
            x1359,
            98
        ),
        536459,
        4,
    )?;
    let x1362: BytePoly_64 = bigint_mul!(x1361, x1307, 64);
    let x1363: BytePoly_66 = bigint_nondet_quot!(ctx, x1362, x6, 66);
    let x1364: BytePoly_32 = bigint_nondet_rem!(ctx, x1362, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1363, x6, 98), x1364, 98),
            x1362,
            98
        ),
        536459,
        4,
    )?;
    let x1365: BytePoly_32 = bigint_add!(bigint_sub!(x1313, x1364, 32), x6, 32);
    let x1366: BytePoly_32 = bigint_nondet_quot!(ctx, x1365, x6, 32);
    let x1367: BytePoly_32 = bigint_nondet_rem!(ctx, x1365, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1366, x6, 64), x1367, 64),
            x1365,
            64
        ),
        260103,
        4,
    )?;
    let x1368: BytePoly_64 = bigint_mul!(x1361, x1361, 64);
    let x1369: BytePoly_66 = bigint_nondet_quot!(ctx, x1368, x6, 66);
    let x1370: BytePoly_32 = bigint_nondet_rem!(ctx, x1368, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1369, x6, 98), x1370, 98),
            x1368,
            98
        ),
        536459,
        4,
    )?;
    let x1371: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1370, x1307, 32), x6, 32),
            x1307,
            32
        ),
        x6,
        32
    );
    let x1372: BytePoly_32 = bigint_nondet_quot!(ctx, x1371, x6, 32);
    let x1373: BytePoly_32 = bigint_nondet_rem!(ctx, x1371, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1372, x6, 64), x1373, 64),
            x1371,
            64
        ),
        260103,
        4,
    )?;
    let x1374: BytePoly_64 = bigint_mul!(x1361, x1373, 64);
    let x1375: BytePoly_66 = bigint_nondet_quot!(ctx, x1374, x6, 66);
    let x1376: BytePoly_32 = bigint_nondet_rem!(ctx, x1374, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1375, x6, 98), x1376, 98),
            x1374,
            98
        ),
        536459,
        4,
    )?;
    let x1377: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1376, x1367, 32), 32), x6, 32);
    let x1378: BytePoly_32 = bigint_nondet_quot!(ctx, x1377, x6, 32);
    let x1379: BytePoly_32 = bigint_nondet_rem!(ctx, x1377, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1378, x6, 64), x1379, 64),
            x1377,
            64
        ),
        260103,
        4,
    )?;
    let x1380: BytePoly_1 = bigint_nondet_rem!(ctx, x1315, x2, 1);
    let x1381: BytePoly_33 = bigint_nondet_quot!(ctx, x1315, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1381, x2, 34), x1380, 34),
            x1315,
            34
        ),
        268231,
        4,
    )?;
    let x1382: BytePoly_1 = bigint_sub!(x3, x1380, 1);
    eqz(ctx, &bigint_mul!(x1380, x1382, 2), 8131, 2)?;
    let x1383: BytePoly_32 = bigint_add!(bigint_sub!(x1373, x1343, 32), x6, 32);
    let x1384: BytePoly_32 = bigint_nondet_inv!(ctx, x1383, x6, 32);
    let x1385: BytePoly_64 = bigint_mul!(x1383, x1384, 64);
    let x1386: BytePoly_66 = bigint_nondet_quot!(ctx, x1385, x6, 66);
    let x1387: BytePoly_32 = bigint_nondet_rem!(ctx, x1385, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1386, x6, 98), x1387, 98),
            x1385,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1387, x1, 32), 34, 1)?;
    let x1388: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1379, x1345, 32), x6, 32),
        x1384,
        64
    );
    let x1389: BytePoly_66 = bigint_nondet_quot!(ctx, x1388, x6, 66);
    let x1390: BytePoly_32 = bigint_nondet_rem!(ctx, x1388, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1389, x6, 98), x1390, 98),
            x1388,
            98
        ),
        536459,
        4,
    )?;
    let x1391: BytePoly_64 = bigint_mul!(x1390, x1343, 64);
    let x1392: BytePoly_66 = bigint_nondet_quot!(ctx, x1391, x6, 66);
    let x1393: BytePoly_32 = bigint_nondet_rem!(ctx, x1391, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1392, x6, 98), x1393, 98),
            x1391,
            98
        ),
        536459,
        4,
    )?;
    let x1394: BytePoly_32 = bigint_add!(bigint_sub!(x1345, x1393, 32), x6, 32);
    let x1395: BytePoly_32 = bigint_nondet_quot!(ctx, x1394, x6, 32);
    let x1396: BytePoly_32 = bigint_nondet_rem!(ctx, x1394, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1395, x6, 64), x1396, 64),
            x1394,
            64
        ),
        260103,
        4,
    )?;
    let x1397: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1390, x1390, 64), x1343, 64),
                x6,
                64
            ),
            x1373,
            64
        ),
        x6,
        64
    );
    let x1398: BytePoly_66 = bigint_nondet_quot!(ctx, x1397, x6, 66);
    let x1399: BytePoly_32 = bigint_nondet_rem!(ctx, x1397, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1398, x6, 98), x1399, 98),
            x1397,
            98
        ),
        536459,
        4,
    )?;
    let x1400: BytePoly_64 = bigint_mul!(x1390, x1399, 64);
    let x1401: BytePoly_66 = bigint_nondet_quot!(ctx, x1400, x6, 66);
    let x1402: BytePoly_32 = bigint_nondet_rem!(ctx, x1400, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1401, x6, 98), x1402, 98),
            x1400,
            98
        ),
        536459,
        4,
    )?;
    let x1403: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1402, x1396, 32), 32), x6, 32);
    let x1404: BytePoly_32 = bigint_nondet_quot!(ctx, x1403, x6, 32);
    let x1405: BytePoly_32 = bigint_nondet_rem!(ctx, x1403, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1404, x6, 64), x1405, 64),
            x1403,
            64
        ),
        260103,
        4,
    )?;
    let x1406: BytePoly_33 = bigint_add!(
        bigint_mul!(x1399, x1380, 33),
        bigint_mul!(x1343, x1382, 33),
        33
    );
    let x1407: BytePoly_33 = bigint_add!(
        bigint_mul!(x1405, x1380, 33),
        bigint_mul!(x1345, x1382, 33),
        33
    );
    let x1408: BytePoly_35 = bigint_nondet_quot!(ctx, x1406, x6, 35);
    let x1409: BytePoly_32 = bigint_nondet_rem!(ctx, x1406, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1408, x6, 67), x1409, 67),
            x1406,
            67
        ),
        284487,
        4,
    )?;
    let x1410: BytePoly_35 = bigint_nondet_quot!(ctx, x1407, x6, 35);
    let x1411: BytePoly_32 = bigint_nondet_rem!(ctx, x1407, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1410, x6, 67), x1411, 67),
            x1407,
            67
        ),
        284487,
        4,
    )?;
    let x1412: BytePoly_64 = bigint_mul!(x1373, x1373, 64);
    let x1413: BytePoly_66 = bigint_nondet_quot!(ctx, x1412, x6, 66);
    let x1414: BytePoly_32 = bigint_nondet_rem!(ctx, x1412, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1413, x6, 98), x1414, 98),
            x1412,
            98
        ),
        536459,
        4,
    )?;
    let x1415: BytePoly_33 = bigint_add!(bigint_mul!(x1414, x0, 33), x5, 33);
    let x1416: BytePoly_35 = bigint_nondet_quot!(ctx, x1415, x6, 35);
    let x1417: BytePoly_32 = bigint_nondet_rem!(ctx, x1415, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1416, x6, 67), x1417, 67),
            x1415,
            67
        ),
        284487,
        4,
    )?;
    let x1418: BytePoly_32 = bigint_add!(x1379, x1379, 32);
    let x1419: BytePoly_32 = bigint_nondet_quot!(ctx, x1418, x6, 32);
    let x1420: BytePoly_32 = bigint_nondet_rem!(ctx, x1418, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1419, x6, 64), x1420, 64),
            x1418,
            64
        ),
        260103,
        4,
    )?;
    let x1421: BytePoly_32 = bigint_nondet_inv!(ctx, x1420, x6, 32);
    let x1422: BytePoly_64 = bigint_mul!(x1420, x1421, 64);
    let x1423: BytePoly_66 = bigint_nondet_quot!(ctx, x1422, x6, 66);
    let x1424: BytePoly_32 = bigint_nondet_rem!(ctx, x1422, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1423, x6, 98), x1424, 98),
            x1422,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1424, x3, 32), 34, 1)?;
    let x1425: BytePoly_64 = bigint_mul!(x1417, x1421, 64);
    let x1426: BytePoly_66 = bigint_nondet_quot!(ctx, x1425, x6, 66);
    let x1427: BytePoly_32 = bigint_nondet_rem!(ctx, x1425, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1426, x6, 98), x1427, 98),
            x1425,
            98
        ),
        536459,
        4,
    )?;
    let x1428: BytePoly_64 = bigint_mul!(x1427, x1373, 64);
    let x1429: BytePoly_66 = bigint_nondet_quot!(ctx, x1428, x6, 66);
    let x1430: BytePoly_32 = bigint_nondet_rem!(ctx, x1428, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1429, x6, 98), x1430, 98),
            x1428,
            98
        ),
        536459,
        4,
    )?;
    let x1431: BytePoly_32 = bigint_add!(bigint_sub!(x1379, x1430, 32), x6, 32);
    let x1432: BytePoly_32 = bigint_nondet_quot!(ctx, x1431, x6, 32);
    let x1433: BytePoly_32 = bigint_nondet_rem!(ctx, x1431, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1432, x6, 64), x1433, 64),
            x1431,
            64
        ),
        260103,
        4,
    )?;
    let x1434: BytePoly_64 = bigint_mul!(x1427, x1427, 64);
    let x1435: BytePoly_66 = bigint_nondet_quot!(ctx, x1434, x6, 66);
    let x1436: BytePoly_32 = bigint_nondet_rem!(ctx, x1434, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1435, x6, 98), x1436, 98),
            x1434,
            98
        ),
        536459,
        4,
    )?;
    let x1437: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1436, x1373, 32), x6, 32),
            x1373,
            32
        ),
        x6,
        32
    );
    let x1438: BytePoly_32 = bigint_nondet_quot!(ctx, x1437, x6, 32);
    let x1439: BytePoly_32 = bigint_nondet_rem!(ctx, x1437, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1438, x6, 64), x1439, 64),
            x1437,
            64
        ),
        260103,
        4,
    )?;
    let x1440: BytePoly_64 = bigint_mul!(x1427, x1439, 64);
    let x1441: BytePoly_66 = bigint_nondet_quot!(ctx, x1440, x6, 66);
    let x1442: BytePoly_32 = bigint_nondet_rem!(ctx, x1440, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1441, x6, 98), x1442, 98),
            x1440,
            98
        ),
        536459,
        4,
    )?;
    let x1443: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1442, x1433, 32), 32), x6, 32);
    let x1444: BytePoly_32 = bigint_nondet_quot!(ctx, x1443, x6, 32);
    let x1445: BytePoly_32 = bigint_nondet_rem!(ctx, x1443, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1444, x6, 64), x1445, 64),
            x1443,
            64
        ),
        260103,
        4,
    )?;
    let x1446: BytePoly_1 = bigint_nondet_rem!(ctx, x1381, x2, 1);
    let x1447: BytePoly_33 = bigint_nondet_quot!(ctx, x1381, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1447, x2, 34), x1446, 34),
            x1381,
            34
        ),
        268231,
        4,
    )?;
    let x1448: BytePoly_1 = bigint_sub!(x3, x1446, 1);
    eqz(ctx, &bigint_mul!(x1446, x1448, 2), 8131, 2)?;
    let x1449: BytePoly_32 = bigint_add!(bigint_sub!(x1439, x1409, 32), x6, 32);
    let x1450: BytePoly_32 = bigint_nondet_inv!(ctx, x1449, x6, 32);
    let x1451: BytePoly_64 = bigint_mul!(x1449, x1450, 64);
    let x1452: BytePoly_66 = bigint_nondet_quot!(ctx, x1451, x6, 66);
    let x1453: BytePoly_32 = bigint_nondet_rem!(ctx, x1451, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1452, x6, 98), x1453, 98),
            x1451,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1453, x1, 32), 34, 1)?;
    let x1454: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1445, x1411, 32), x6, 32),
        x1450,
        64
    );
    let x1455: BytePoly_66 = bigint_nondet_quot!(ctx, x1454, x6, 66);
    let x1456: BytePoly_32 = bigint_nondet_rem!(ctx, x1454, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1455, x6, 98), x1456, 98),
            x1454,
            98
        ),
        536459,
        4,
    )?;
    let x1457: BytePoly_64 = bigint_mul!(x1456, x1409, 64);
    let x1458: BytePoly_66 = bigint_nondet_quot!(ctx, x1457, x6, 66);
    let x1459: BytePoly_32 = bigint_nondet_rem!(ctx, x1457, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1458, x6, 98), x1459, 98),
            x1457,
            98
        ),
        536459,
        4,
    )?;
    let x1460: BytePoly_32 = bigint_add!(bigint_sub!(x1411, x1459, 32), x6, 32);
    let x1461: BytePoly_32 = bigint_nondet_quot!(ctx, x1460, x6, 32);
    let x1462: BytePoly_32 = bigint_nondet_rem!(ctx, x1460, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1461, x6, 64), x1462, 64),
            x1460,
            64
        ),
        260103,
        4,
    )?;
    let x1463: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1456, x1456, 64), x1409, 64),
                x6,
                64
            ),
            x1439,
            64
        ),
        x6,
        64
    );
    let x1464: BytePoly_66 = bigint_nondet_quot!(ctx, x1463, x6, 66);
    let x1465: BytePoly_32 = bigint_nondet_rem!(ctx, x1463, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1464, x6, 98), x1465, 98),
            x1463,
            98
        ),
        536459,
        4,
    )?;
    let x1466: BytePoly_64 = bigint_mul!(x1456, x1465, 64);
    let x1467: BytePoly_66 = bigint_nondet_quot!(ctx, x1466, x6, 66);
    let x1468: BytePoly_32 = bigint_nondet_rem!(ctx, x1466, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1467, x6, 98), x1468, 98),
            x1466,
            98
        ),
        536459,
        4,
    )?;
    let x1469: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1468, x1462, 32), 32), x6, 32);
    let x1470: BytePoly_32 = bigint_nondet_quot!(ctx, x1469, x6, 32);
    let x1471: BytePoly_32 = bigint_nondet_rem!(ctx, x1469, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1470, x6, 64), x1471, 64),
            x1469,
            64
        ),
        260103,
        4,
    )?;
    let x1472: BytePoly_33 = bigint_add!(
        bigint_mul!(x1465, x1446, 33),
        bigint_mul!(x1409, x1448, 33),
        33
    );
    let x1473: BytePoly_33 = bigint_add!(
        bigint_mul!(x1471, x1446, 33),
        bigint_mul!(x1411, x1448, 33),
        33
    );
    let x1474: BytePoly_35 = bigint_nondet_quot!(ctx, x1472, x6, 35);
    let x1475: BytePoly_32 = bigint_nondet_rem!(ctx, x1472, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1474, x6, 67), x1475, 67),
            x1472,
            67
        ),
        284487,
        4,
    )?;
    let x1476: BytePoly_35 = bigint_nondet_quot!(ctx, x1473, x6, 35);
    let x1477: BytePoly_32 = bigint_nondet_rem!(ctx, x1473, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1476, x6, 67), x1477, 67),
            x1473,
            67
        ),
        284487,
        4,
    )?;
    let x1478: BytePoly_64 = bigint_mul!(x1439, x1439, 64);
    let x1479: BytePoly_66 = bigint_nondet_quot!(ctx, x1478, x6, 66);
    let x1480: BytePoly_32 = bigint_nondet_rem!(ctx, x1478, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1479, x6, 98), x1480, 98),
            x1478,
            98
        ),
        536459,
        4,
    )?;
    let x1481: BytePoly_33 = bigint_add!(bigint_mul!(x1480, x0, 33), x5, 33);
    let x1482: BytePoly_35 = bigint_nondet_quot!(ctx, x1481, x6, 35);
    let x1483: BytePoly_32 = bigint_nondet_rem!(ctx, x1481, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1482, x6, 67), x1483, 67),
            x1481,
            67
        ),
        284487,
        4,
    )?;
    let x1484: BytePoly_32 = bigint_add!(x1445, x1445, 32);
    let x1485: BytePoly_32 = bigint_nondet_quot!(ctx, x1484, x6, 32);
    let x1486: BytePoly_32 = bigint_nondet_rem!(ctx, x1484, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1485, x6, 64), x1486, 64),
            x1484,
            64
        ),
        260103,
        4,
    )?;
    let x1487: BytePoly_32 = bigint_nondet_inv!(ctx, x1486, x6, 32);
    let x1488: BytePoly_64 = bigint_mul!(x1486, x1487, 64);
    let x1489: BytePoly_66 = bigint_nondet_quot!(ctx, x1488, x6, 66);
    let x1490: BytePoly_32 = bigint_nondet_rem!(ctx, x1488, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1489, x6, 98), x1490, 98),
            x1488,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1490, x3, 32), 34, 1)?;
    let x1491: BytePoly_64 = bigint_mul!(x1483, x1487, 64);
    let x1492: BytePoly_66 = bigint_nondet_quot!(ctx, x1491, x6, 66);
    let x1493: BytePoly_32 = bigint_nondet_rem!(ctx, x1491, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1492, x6, 98), x1493, 98),
            x1491,
            98
        ),
        536459,
        4,
    )?;
    let x1494: BytePoly_64 = bigint_mul!(x1493, x1439, 64);
    let x1495: BytePoly_66 = bigint_nondet_quot!(ctx, x1494, x6, 66);
    let x1496: BytePoly_32 = bigint_nondet_rem!(ctx, x1494, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1495, x6, 98), x1496, 98),
            x1494,
            98
        ),
        536459,
        4,
    )?;
    let x1497: BytePoly_32 = bigint_add!(bigint_sub!(x1445, x1496, 32), x6, 32);
    let x1498: BytePoly_32 = bigint_nondet_quot!(ctx, x1497, x6, 32);
    let x1499: BytePoly_32 = bigint_nondet_rem!(ctx, x1497, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1498, x6, 64), x1499, 64),
            x1497,
            64
        ),
        260103,
        4,
    )?;
    let x1500: BytePoly_64 = bigint_mul!(x1493, x1493, 64);
    let x1501: BytePoly_66 = bigint_nondet_quot!(ctx, x1500, x6, 66);
    let x1502: BytePoly_32 = bigint_nondet_rem!(ctx, x1500, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1501, x6, 98), x1502, 98),
            x1500,
            98
        ),
        536459,
        4,
    )?;
    let x1503: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1502, x1439, 32), x6, 32),
            x1439,
            32
        ),
        x6,
        32
    );
    let x1504: BytePoly_32 = bigint_nondet_quot!(ctx, x1503, x6, 32);
    let x1505: BytePoly_32 = bigint_nondet_rem!(ctx, x1503, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1504, x6, 64), x1505, 64),
            x1503,
            64
        ),
        260103,
        4,
    )?;
    let x1506: BytePoly_64 = bigint_mul!(x1493, x1505, 64);
    let x1507: BytePoly_66 = bigint_nondet_quot!(ctx, x1506, x6, 66);
    let x1508: BytePoly_32 = bigint_nondet_rem!(ctx, x1506, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1507, x6, 98), x1508, 98),
            x1506,
            98
        ),
        536459,
        4,
    )?;
    let x1509: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1508, x1499, 32), 32), x6, 32);
    let x1510: BytePoly_32 = bigint_nondet_quot!(ctx, x1509, x6, 32);
    let x1511: BytePoly_32 = bigint_nondet_rem!(ctx, x1509, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1510, x6, 64), x1511, 64),
            x1509,
            64
        ),
        260103,
        4,
    )?;
    let x1512: BytePoly_1 = bigint_nondet_rem!(ctx, x1447, x2, 1);
    let x1513: BytePoly_33 = bigint_nondet_quot!(ctx, x1447, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1513, x2, 34), x1512, 34),
            x1447,
            34
        ),
        268231,
        4,
    )?;
    let x1514: BytePoly_1 = bigint_sub!(x3, x1512, 1);
    eqz(ctx, &bigint_mul!(x1512, x1514, 2), 8131, 2)?;
    let x1515: BytePoly_32 = bigint_add!(bigint_sub!(x1505, x1475, 32), x6, 32);
    let x1516: BytePoly_32 = bigint_nondet_inv!(ctx, x1515, x6, 32);
    let x1517: BytePoly_64 = bigint_mul!(x1515, x1516, 64);
    let x1518: BytePoly_66 = bigint_nondet_quot!(ctx, x1517, x6, 66);
    let x1519: BytePoly_32 = bigint_nondet_rem!(ctx, x1517, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1518, x6, 98), x1519, 98),
            x1517,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1519, x1, 32), 34, 1)?;
    let x1520: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1511, x1477, 32), x6, 32),
        x1516,
        64
    );
    let x1521: BytePoly_66 = bigint_nondet_quot!(ctx, x1520, x6, 66);
    let x1522: BytePoly_32 = bigint_nondet_rem!(ctx, x1520, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1521, x6, 98), x1522, 98),
            x1520,
            98
        ),
        536459,
        4,
    )?;
    let x1523: BytePoly_64 = bigint_mul!(x1522, x1475, 64);
    let x1524: BytePoly_66 = bigint_nondet_quot!(ctx, x1523, x6, 66);
    let x1525: BytePoly_32 = bigint_nondet_rem!(ctx, x1523, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1524, x6, 98), x1525, 98),
            x1523,
            98
        ),
        536459,
        4,
    )?;
    let x1526: BytePoly_32 = bigint_add!(bigint_sub!(x1477, x1525, 32), x6, 32);
    let x1527: BytePoly_32 = bigint_nondet_quot!(ctx, x1526, x6, 32);
    let x1528: BytePoly_32 = bigint_nondet_rem!(ctx, x1526, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1527, x6, 64), x1528, 64),
            x1526,
            64
        ),
        260103,
        4,
    )?;
    let x1529: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1522, x1522, 64), x1475, 64),
                x6,
                64
            ),
            x1505,
            64
        ),
        x6,
        64
    );
    let x1530: BytePoly_66 = bigint_nondet_quot!(ctx, x1529, x6, 66);
    let x1531: BytePoly_32 = bigint_nondet_rem!(ctx, x1529, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1530, x6, 98), x1531, 98),
            x1529,
            98
        ),
        536459,
        4,
    )?;
    let x1532: BytePoly_64 = bigint_mul!(x1522, x1531, 64);
    let x1533: BytePoly_66 = bigint_nondet_quot!(ctx, x1532, x6, 66);
    let x1534: BytePoly_32 = bigint_nondet_rem!(ctx, x1532, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1533, x6, 98), x1534, 98),
            x1532,
            98
        ),
        536459,
        4,
    )?;
    let x1535: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1534, x1528, 32), 32), x6, 32);
    let x1536: BytePoly_32 = bigint_nondet_quot!(ctx, x1535, x6, 32);
    let x1537: BytePoly_32 = bigint_nondet_rem!(ctx, x1535, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1536, x6, 64), x1537, 64),
            x1535,
            64
        ),
        260103,
        4,
    )?;
    let x1538: BytePoly_33 = bigint_add!(
        bigint_mul!(x1531, x1512, 33),
        bigint_mul!(x1475, x1514, 33),
        33
    );
    let x1539: BytePoly_33 = bigint_add!(
        bigint_mul!(x1537, x1512, 33),
        bigint_mul!(x1477, x1514, 33),
        33
    );
    let x1540: BytePoly_35 = bigint_nondet_quot!(ctx, x1538, x6, 35);
    let x1541: BytePoly_32 = bigint_nondet_rem!(ctx, x1538, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1540, x6, 67), x1541, 67),
            x1538,
            67
        ),
        284487,
        4,
    )?;
    let x1542: BytePoly_35 = bigint_nondet_quot!(ctx, x1539, x6, 35);
    let x1543: BytePoly_32 = bigint_nondet_rem!(ctx, x1539, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1542, x6, 67), x1543, 67),
            x1539,
            67
        ),
        284487,
        4,
    )?;
    let x1544: BytePoly_64 = bigint_mul!(x1505, x1505, 64);
    let x1545: BytePoly_66 = bigint_nondet_quot!(ctx, x1544, x6, 66);
    let x1546: BytePoly_32 = bigint_nondet_rem!(ctx, x1544, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1545, x6, 98), x1546, 98),
            x1544,
            98
        ),
        536459,
        4,
    )?;
    let x1547: BytePoly_33 = bigint_add!(bigint_mul!(x1546, x0, 33), x5, 33);
    let x1548: BytePoly_35 = bigint_nondet_quot!(ctx, x1547, x6, 35);
    let x1549: BytePoly_32 = bigint_nondet_rem!(ctx, x1547, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1548, x6, 67), x1549, 67),
            x1547,
            67
        ),
        284487,
        4,
    )?;
    let x1550: BytePoly_32 = bigint_add!(x1511, x1511, 32);
    let x1551: BytePoly_32 = bigint_nondet_quot!(ctx, x1550, x6, 32);
    let x1552: BytePoly_32 = bigint_nondet_rem!(ctx, x1550, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1551, x6, 64), x1552, 64),
            x1550,
            64
        ),
        260103,
        4,
    )?;
    let x1553: BytePoly_32 = bigint_nondet_inv!(ctx, x1552, x6, 32);
    let x1554: BytePoly_64 = bigint_mul!(x1552, x1553, 64);
    let x1555: BytePoly_66 = bigint_nondet_quot!(ctx, x1554, x6, 66);
    let x1556: BytePoly_32 = bigint_nondet_rem!(ctx, x1554, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1555, x6, 98), x1556, 98),
            x1554,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1556, x3, 32), 34, 1)?;
    let x1557: BytePoly_64 = bigint_mul!(x1549, x1553, 64);
    let x1558: BytePoly_66 = bigint_nondet_quot!(ctx, x1557, x6, 66);
    let x1559: BytePoly_32 = bigint_nondet_rem!(ctx, x1557, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1558, x6, 98), x1559, 98),
            x1557,
            98
        ),
        536459,
        4,
    )?;
    let x1560: BytePoly_64 = bigint_mul!(x1559, x1505, 64);
    let x1561: BytePoly_66 = bigint_nondet_quot!(ctx, x1560, x6, 66);
    let x1562: BytePoly_32 = bigint_nondet_rem!(ctx, x1560, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1561, x6, 98), x1562, 98),
            x1560,
            98
        ),
        536459,
        4,
    )?;
    let x1563: BytePoly_32 = bigint_add!(bigint_sub!(x1511, x1562, 32), x6, 32);
    let x1564: BytePoly_32 = bigint_nondet_quot!(ctx, x1563, x6, 32);
    let x1565: BytePoly_32 = bigint_nondet_rem!(ctx, x1563, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1564, x6, 64), x1565, 64),
            x1563,
            64
        ),
        260103,
        4,
    )?;
    let x1566: BytePoly_64 = bigint_mul!(x1559, x1559, 64);
    let x1567: BytePoly_66 = bigint_nondet_quot!(ctx, x1566, x6, 66);
    let x1568: BytePoly_32 = bigint_nondet_rem!(ctx, x1566, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1567, x6, 98), x1568, 98),
            x1566,
            98
        ),
        536459,
        4,
    )?;
    let x1569: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1568, x1505, 32), x6, 32),
            x1505,
            32
        ),
        x6,
        32
    );
    let x1570: BytePoly_32 = bigint_nondet_quot!(ctx, x1569, x6, 32);
    let x1571: BytePoly_32 = bigint_nondet_rem!(ctx, x1569, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1570, x6, 64), x1571, 64),
            x1569,
            64
        ),
        260103,
        4,
    )?;
    let x1572: BytePoly_64 = bigint_mul!(x1559, x1571, 64);
    let x1573: BytePoly_66 = bigint_nondet_quot!(ctx, x1572, x6, 66);
    let x1574: BytePoly_32 = bigint_nondet_rem!(ctx, x1572, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1573, x6, 98), x1574, 98),
            x1572,
            98
        ),
        536459,
        4,
    )?;
    let x1575: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1574, x1565, 32), 32), x6, 32);
    let x1576: BytePoly_32 = bigint_nondet_quot!(ctx, x1575, x6, 32);
    let x1577: BytePoly_32 = bigint_nondet_rem!(ctx, x1575, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1576, x6, 64), x1577, 64),
            x1575,
            64
        ),
        260103,
        4,
    )?;
    let x1578: BytePoly_1 = bigint_nondet_rem!(ctx, x1513, x2, 1);
    let x1579: BytePoly_33 = bigint_nondet_quot!(ctx, x1513, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1579, x2, 34), x1578, 34),
            x1513,
            34
        ),
        268231,
        4,
    )?;
    let x1580: BytePoly_1 = bigint_sub!(x3, x1578, 1);
    eqz(ctx, &bigint_mul!(x1578, x1580, 2), 8131, 2)?;
    let x1581: BytePoly_32 = bigint_add!(bigint_sub!(x1571, x1541, 32), x6, 32);
    let x1582: BytePoly_32 = bigint_nondet_inv!(ctx, x1581, x6, 32);
    let x1583: BytePoly_64 = bigint_mul!(x1581, x1582, 64);
    let x1584: BytePoly_66 = bigint_nondet_quot!(ctx, x1583, x6, 66);
    let x1585: BytePoly_32 = bigint_nondet_rem!(ctx, x1583, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1584, x6, 98), x1585, 98),
            x1583,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1585, x1, 32), 34, 1)?;
    let x1586: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1577, x1543, 32), x6, 32),
        x1582,
        64
    );
    let x1587: BytePoly_66 = bigint_nondet_quot!(ctx, x1586, x6, 66);
    let x1588: BytePoly_32 = bigint_nondet_rem!(ctx, x1586, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1587, x6, 98), x1588, 98),
            x1586,
            98
        ),
        536459,
        4,
    )?;
    let x1589: BytePoly_64 = bigint_mul!(x1588, x1541, 64);
    let x1590: BytePoly_66 = bigint_nondet_quot!(ctx, x1589, x6, 66);
    let x1591: BytePoly_32 = bigint_nondet_rem!(ctx, x1589, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1590, x6, 98), x1591, 98),
            x1589,
            98
        ),
        536459,
        4,
    )?;
    let x1592: BytePoly_32 = bigint_add!(bigint_sub!(x1543, x1591, 32), x6, 32);
    let x1593: BytePoly_32 = bigint_nondet_quot!(ctx, x1592, x6, 32);
    let x1594: BytePoly_32 = bigint_nondet_rem!(ctx, x1592, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1593, x6, 64), x1594, 64),
            x1592,
            64
        ),
        260103,
        4,
    )?;
    let x1595: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1588, x1588, 64), x1541, 64),
                x6,
                64
            ),
            x1571,
            64
        ),
        x6,
        64
    );
    let x1596: BytePoly_66 = bigint_nondet_quot!(ctx, x1595, x6, 66);
    let x1597: BytePoly_32 = bigint_nondet_rem!(ctx, x1595, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1596, x6, 98), x1597, 98),
            x1595,
            98
        ),
        536459,
        4,
    )?;
    let x1598: BytePoly_64 = bigint_mul!(x1588, x1597, 64);
    let x1599: BytePoly_66 = bigint_nondet_quot!(ctx, x1598, x6, 66);
    let x1600: BytePoly_32 = bigint_nondet_rem!(ctx, x1598, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1599, x6, 98), x1600, 98),
            x1598,
            98
        ),
        536459,
        4,
    )?;
    let x1601: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1600, x1594, 32), 32), x6, 32);
    let x1602: BytePoly_32 = bigint_nondet_quot!(ctx, x1601, x6, 32);
    let x1603: BytePoly_32 = bigint_nondet_rem!(ctx, x1601, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1602, x6, 64), x1603, 64),
            x1601,
            64
        ),
        260103,
        4,
    )?;
    let x1604: BytePoly_33 = bigint_add!(
        bigint_mul!(x1597, x1578, 33),
        bigint_mul!(x1541, x1580, 33),
        33
    );
    let x1605: BytePoly_33 = bigint_add!(
        bigint_mul!(x1603, x1578, 33),
        bigint_mul!(x1543, x1580, 33),
        33
    );
    let x1606: BytePoly_35 = bigint_nondet_quot!(ctx, x1604, x6, 35);
    let x1607: BytePoly_32 = bigint_nondet_rem!(ctx, x1604, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1606, x6, 67), x1607, 67),
            x1604,
            67
        ),
        284487,
        4,
    )?;
    let x1608: BytePoly_35 = bigint_nondet_quot!(ctx, x1605, x6, 35);
    let x1609: BytePoly_32 = bigint_nondet_rem!(ctx, x1605, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1608, x6, 67), x1609, 67),
            x1605,
            67
        ),
        284487,
        4,
    )?;
    let x1610: BytePoly_64 = bigint_mul!(x1571, x1571, 64);
    let x1611: BytePoly_66 = bigint_nondet_quot!(ctx, x1610, x6, 66);
    let x1612: BytePoly_32 = bigint_nondet_rem!(ctx, x1610, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1611, x6, 98), x1612, 98),
            x1610,
            98
        ),
        536459,
        4,
    )?;
    let x1613: BytePoly_33 = bigint_add!(bigint_mul!(x1612, x0, 33), x5, 33);
    let x1614: BytePoly_35 = bigint_nondet_quot!(ctx, x1613, x6, 35);
    let x1615: BytePoly_32 = bigint_nondet_rem!(ctx, x1613, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1614, x6, 67), x1615, 67),
            x1613,
            67
        ),
        284487,
        4,
    )?;
    let x1616: BytePoly_32 = bigint_add!(x1577, x1577, 32);
    let x1617: BytePoly_32 = bigint_nondet_quot!(ctx, x1616, x6, 32);
    let x1618: BytePoly_32 = bigint_nondet_rem!(ctx, x1616, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1617, x6, 64), x1618, 64),
            x1616,
            64
        ),
        260103,
        4,
    )?;
    let x1619: BytePoly_32 = bigint_nondet_inv!(ctx, x1618, x6, 32);
    let x1620: BytePoly_64 = bigint_mul!(x1618, x1619, 64);
    let x1621: BytePoly_66 = bigint_nondet_quot!(ctx, x1620, x6, 66);
    let x1622: BytePoly_32 = bigint_nondet_rem!(ctx, x1620, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1621, x6, 98), x1622, 98),
            x1620,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1622, x3, 32), 34, 1)?;
    let x1623: BytePoly_64 = bigint_mul!(x1615, x1619, 64);
    let x1624: BytePoly_66 = bigint_nondet_quot!(ctx, x1623, x6, 66);
    let x1625: BytePoly_32 = bigint_nondet_rem!(ctx, x1623, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1624, x6, 98), x1625, 98),
            x1623,
            98
        ),
        536459,
        4,
    )?;
    let x1626: BytePoly_64 = bigint_mul!(x1625, x1571, 64);
    let x1627: BytePoly_66 = bigint_nondet_quot!(ctx, x1626, x6, 66);
    let x1628: BytePoly_32 = bigint_nondet_rem!(ctx, x1626, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1627, x6, 98), x1628, 98),
            x1626,
            98
        ),
        536459,
        4,
    )?;
    let x1629: BytePoly_32 = bigint_add!(bigint_sub!(x1577, x1628, 32), x6, 32);
    let x1630: BytePoly_32 = bigint_nondet_quot!(ctx, x1629, x6, 32);
    let x1631: BytePoly_32 = bigint_nondet_rem!(ctx, x1629, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1630, x6, 64), x1631, 64),
            x1629,
            64
        ),
        260103,
        4,
    )?;
    let x1632: BytePoly_64 = bigint_mul!(x1625, x1625, 64);
    let x1633: BytePoly_66 = bigint_nondet_quot!(ctx, x1632, x6, 66);
    let x1634: BytePoly_32 = bigint_nondet_rem!(ctx, x1632, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1633, x6, 98), x1634, 98),
            x1632,
            98
        ),
        536459,
        4,
    )?;
    let x1635: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1634, x1571, 32), x6, 32),
            x1571,
            32
        ),
        x6,
        32
    );
    let x1636: BytePoly_32 = bigint_nondet_quot!(ctx, x1635, x6, 32);
    let x1637: BytePoly_32 = bigint_nondet_rem!(ctx, x1635, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1636, x6, 64), x1637, 64),
            x1635,
            64
        ),
        260103,
        4,
    )?;
    let x1638: BytePoly_64 = bigint_mul!(x1625, x1637, 64);
    let x1639: BytePoly_66 = bigint_nondet_quot!(ctx, x1638, x6, 66);
    let x1640: BytePoly_32 = bigint_nondet_rem!(ctx, x1638, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1639, x6, 98), x1640, 98),
            x1638,
            98
        ),
        536459,
        4,
    )?;
    let x1641: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1640, x1631, 32), 32), x6, 32);
    let x1642: BytePoly_32 = bigint_nondet_quot!(ctx, x1641, x6, 32);
    let x1643: BytePoly_32 = bigint_nondet_rem!(ctx, x1641, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1642, x6, 64), x1643, 64),
            x1641,
            64
        ),
        260103,
        4,
    )?;
    let x1644: BytePoly_1 = bigint_nondet_rem!(ctx, x1579, x2, 1);
    let x1645: BytePoly_33 = bigint_nondet_quot!(ctx, x1579, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1645, x2, 34), x1644, 34),
            x1579,
            34
        ),
        268231,
        4,
    )?;
    let x1646: BytePoly_1 = bigint_sub!(x3, x1644, 1);
    eqz(ctx, &bigint_mul!(x1644, x1646, 2), 8131, 2)?;
    let x1647: BytePoly_32 = bigint_add!(bigint_sub!(x1637, x1607, 32), x6, 32);
    let x1648: BytePoly_32 = bigint_nondet_inv!(ctx, x1647, x6, 32);
    let x1649: BytePoly_64 = bigint_mul!(x1647, x1648, 64);
    let x1650: BytePoly_66 = bigint_nondet_quot!(ctx, x1649, x6, 66);
    let x1651: BytePoly_32 = bigint_nondet_rem!(ctx, x1649, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1650, x6, 98), x1651, 98),
            x1649,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1651, x1, 32), 34, 1)?;
    let x1652: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1643, x1609, 32), x6, 32),
        x1648,
        64
    );
    let x1653: BytePoly_66 = bigint_nondet_quot!(ctx, x1652, x6, 66);
    let x1654: BytePoly_32 = bigint_nondet_rem!(ctx, x1652, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1653, x6, 98), x1654, 98),
            x1652,
            98
        ),
        536459,
        4,
    )?;
    let x1655: BytePoly_64 = bigint_mul!(x1654, x1607, 64);
    let x1656: BytePoly_66 = bigint_nondet_quot!(ctx, x1655, x6, 66);
    let x1657: BytePoly_32 = bigint_nondet_rem!(ctx, x1655, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1656, x6, 98), x1657, 98),
            x1655,
            98
        ),
        536459,
        4,
    )?;
    let x1658: BytePoly_32 = bigint_add!(bigint_sub!(x1609, x1657, 32), x6, 32);
    let x1659: BytePoly_32 = bigint_nondet_quot!(ctx, x1658, x6, 32);
    let x1660: BytePoly_32 = bigint_nondet_rem!(ctx, x1658, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1659, x6, 64), x1660, 64),
            x1658,
            64
        ),
        260103,
        4,
    )?;
    let x1661: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1654, x1654, 64), x1607, 64),
                x6,
                64
            ),
            x1637,
            64
        ),
        x6,
        64
    );
    let x1662: BytePoly_66 = bigint_nondet_quot!(ctx, x1661, x6, 66);
    let x1663: BytePoly_32 = bigint_nondet_rem!(ctx, x1661, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1662, x6, 98), x1663, 98),
            x1661,
            98
        ),
        536459,
        4,
    )?;
    let x1664: BytePoly_64 = bigint_mul!(x1654, x1663, 64);
    let x1665: BytePoly_66 = bigint_nondet_quot!(ctx, x1664, x6, 66);
    let x1666: BytePoly_32 = bigint_nondet_rem!(ctx, x1664, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1665, x6, 98), x1666, 98),
            x1664,
            98
        ),
        536459,
        4,
    )?;
    let x1667: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1666, x1660, 32), 32), x6, 32);
    let x1668: BytePoly_32 = bigint_nondet_quot!(ctx, x1667, x6, 32);
    let x1669: BytePoly_32 = bigint_nondet_rem!(ctx, x1667, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1668, x6, 64), x1669, 64),
            x1667,
            64
        ),
        260103,
        4,
    )?;
    let x1670: BytePoly_33 = bigint_add!(
        bigint_mul!(x1663, x1644, 33),
        bigint_mul!(x1607, x1646, 33),
        33
    );
    let x1671: BytePoly_33 = bigint_add!(
        bigint_mul!(x1669, x1644, 33),
        bigint_mul!(x1609, x1646, 33),
        33
    );
    let x1672: BytePoly_35 = bigint_nondet_quot!(ctx, x1670, x6, 35);
    let x1673: BytePoly_32 = bigint_nondet_rem!(ctx, x1670, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1672, x6, 67), x1673, 67),
            x1670,
            67
        ),
        284487,
        4,
    )?;
    let x1674: BytePoly_35 = bigint_nondet_quot!(ctx, x1671, x6, 35);
    let x1675: BytePoly_32 = bigint_nondet_rem!(ctx, x1671, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1674, x6, 67), x1675, 67),
            x1671,
            67
        ),
        284487,
        4,
    )?;
    let x1676: BytePoly_64 = bigint_mul!(x1637, x1637, 64);
    let x1677: BytePoly_66 = bigint_nondet_quot!(ctx, x1676, x6, 66);
    let x1678: BytePoly_32 = bigint_nondet_rem!(ctx, x1676, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1677, x6, 98), x1678, 98),
            x1676,
            98
        ),
        536459,
        4,
    )?;
    let x1679: BytePoly_33 = bigint_add!(bigint_mul!(x1678, x0, 33), x5, 33);
    let x1680: BytePoly_35 = bigint_nondet_quot!(ctx, x1679, x6, 35);
    let x1681: BytePoly_32 = bigint_nondet_rem!(ctx, x1679, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1680, x6, 67), x1681, 67),
            x1679,
            67
        ),
        284487,
        4,
    )?;
    let x1682: BytePoly_32 = bigint_add!(x1643, x1643, 32);
    let x1683: BytePoly_32 = bigint_nondet_quot!(ctx, x1682, x6, 32);
    let x1684: BytePoly_32 = bigint_nondet_rem!(ctx, x1682, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1683, x6, 64), x1684, 64),
            x1682,
            64
        ),
        260103,
        4,
    )?;
    let x1685: BytePoly_32 = bigint_nondet_inv!(ctx, x1684, x6, 32);
    let x1686: BytePoly_64 = bigint_mul!(x1684, x1685, 64);
    let x1687: BytePoly_66 = bigint_nondet_quot!(ctx, x1686, x6, 66);
    let x1688: BytePoly_32 = bigint_nondet_rem!(ctx, x1686, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1687, x6, 98), x1688, 98),
            x1686,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1688, x3, 32), 34, 1)?;
    let x1689: BytePoly_64 = bigint_mul!(x1681, x1685, 64);
    let x1690: BytePoly_66 = bigint_nondet_quot!(ctx, x1689, x6, 66);
    let x1691: BytePoly_32 = bigint_nondet_rem!(ctx, x1689, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1690, x6, 98), x1691, 98),
            x1689,
            98
        ),
        536459,
        4,
    )?;
    let x1692: BytePoly_64 = bigint_mul!(x1691, x1637, 64);
    let x1693: BytePoly_66 = bigint_nondet_quot!(ctx, x1692, x6, 66);
    let x1694: BytePoly_32 = bigint_nondet_rem!(ctx, x1692, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1693, x6, 98), x1694, 98),
            x1692,
            98
        ),
        536459,
        4,
    )?;
    let x1695: BytePoly_32 = bigint_add!(bigint_sub!(x1643, x1694, 32), x6, 32);
    let x1696: BytePoly_32 = bigint_nondet_quot!(ctx, x1695, x6, 32);
    let x1697: BytePoly_32 = bigint_nondet_rem!(ctx, x1695, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1696, x6, 64), x1697, 64),
            x1695,
            64
        ),
        260103,
        4,
    )?;
    let x1698: BytePoly_64 = bigint_mul!(x1691, x1691, 64);
    let x1699: BytePoly_66 = bigint_nondet_quot!(ctx, x1698, x6, 66);
    let x1700: BytePoly_32 = bigint_nondet_rem!(ctx, x1698, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1699, x6, 98), x1700, 98),
            x1698,
            98
        ),
        536459,
        4,
    )?;
    let x1701: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1700, x1637, 32), x6, 32),
            x1637,
            32
        ),
        x6,
        32
    );
    let x1702: BytePoly_32 = bigint_nondet_quot!(ctx, x1701, x6, 32);
    let x1703: BytePoly_32 = bigint_nondet_rem!(ctx, x1701, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1702, x6, 64), x1703, 64),
            x1701,
            64
        ),
        260103,
        4,
    )?;
    let x1704: BytePoly_64 = bigint_mul!(x1691, x1703, 64);
    let x1705: BytePoly_66 = bigint_nondet_quot!(ctx, x1704, x6, 66);
    let x1706: BytePoly_32 = bigint_nondet_rem!(ctx, x1704, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1705, x6, 98), x1706, 98),
            x1704,
            98
        ),
        536459,
        4,
    )?;
    let x1707: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1706, x1697, 32), 32), x6, 32);
    let x1708: BytePoly_32 = bigint_nondet_quot!(ctx, x1707, x6, 32);
    let x1709: BytePoly_32 = bigint_nondet_rem!(ctx, x1707, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1708, x6, 64), x1709, 64),
            x1707,
            64
        ),
        260103,
        4,
    )?;
    let x1710: BytePoly_1 = bigint_nondet_rem!(ctx, x1645, x2, 1);
    let x1711: BytePoly_33 = bigint_nondet_quot!(ctx, x1645, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1711, x2, 34), x1710, 34),
            x1645,
            34
        ),
        268231,
        4,
    )?;
    let x1712: BytePoly_1 = bigint_sub!(x3, x1710, 1);
    eqz(ctx, &bigint_mul!(x1710, x1712, 2), 8131, 2)?;
    let x1713: BytePoly_32 = bigint_add!(bigint_sub!(x1703, x1673, 32), x6, 32);
    let x1714: BytePoly_32 = bigint_nondet_inv!(ctx, x1713, x6, 32);
    let x1715: BytePoly_64 = bigint_mul!(x1713, x1714, 64);
    let x1716: BytePoly_66 = bigint_nondet_quot!(ctx, x1715, x6, 66);
    let x1717: BytePoly_32 = bigint_nondet_rem!(ctx, x1715, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1716, x6, 98), x1717, 98),
            x1715,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1717, x1, 32), 34, 1)?;
    let x1718: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1709, x1675, 32), x6, 32),
        x1714,
        64
    );
    let x1719: BytePoly_66 = bigint_nondet_quot!(ctx, x1718, x6, 66);
    let x1720: BytePoly_32 = bigint_nondet_rem!(ctx, x1718, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1719, x6, 98), x1720, 98),
            x1718,
            98
        ),
        536459,
        4,
    )?;
    let x1721: BytePoly_64 = bigint_mul!(x1720, x1673, 64);
    let x1722: BytePoly_66 = bigint_nondet_quot!(ctx, x1721, x6, 66);
    let x1723: BytePoly_32 = bigint_nondet_rem!(ctx, x1721, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1722, x6, 98), x1723, 98),
            x1721,
            98
        ),
        536459,
        4,
    )?;
    let x1724: BytePoly_32 = bigint_add!(bigint_sub!(x1675, x1723, 32), x6, 32);
    let x1725: BytePoly_32 = bigint_nondet_quot!(ctx, x1724, x6, 32);
    let x1726: BytePoly_32 = bigint_nondet_rem!(ctx, x1724, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1725, x6, 64), x1726, 64),
            x1724,
            64
        ),
        260103,
        4,
    )?;
    let x1727: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1720, x1720, 64), x1673, 64),
                x6,
                64
            ),
            x1703,
            64
        ),
        x6,
        64
    );
    let x1728: BytePoly_66 = bigint_nondet_quot!(ctx, x1727, x6, 66);
    let x1729: BytePoly_32 = bigint_nondet_rem!(ctx, x1727, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1728, x6, 98), x1729, 98),
            x1727,
            98
        ),
        536459,
        4,
    )?;
    let x1730: BytePoly_64 = bigint_mul!(x1720, x1729, 64);
    let x1731: BytePoly_66 = bigint_nondet_quot!(ctx, x1730, x6, 66);
    let x1732: BytePoly_32 = bigint_nondet_rem!(ctx, x1730, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1731, x6, 98), x1732, 98),
            x1730,
            98
        ),
        536459,
        4,
    )?;
    let x1733: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1732, x1726, 32), 32), x6, 32);
    let x1734: BytePoly_32 = bigint_nondet_quot!(ctx, x1733, x6, 32);
    let x1735: BytePoly_32 = bigint_nondet_rem!(ctx, x1733, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1734, x6, 64), x1735, 64),
            x1733,
            64
        ),
        260103,
        4,
    )?;
    let x1736: BytePoly_33 = bigint_add!(
        bigint_mul!(x1729, x1710, 33),
        bigint_mul!(x1673, x1712, 33),
        33
    );
    let x1737: BytePoly_33 = bigint_add!(
        bigint_mul!(x1735, x1710, 33),
        bigint_mul!(x1675, x1712, 33),
        33
    );
    let x1738: BytePoly_35 = bigint_nondet_quot!(ctx, x1736, x6, 35);
    let x1739: BytePoly_32 = bigint_nondet_rem!(ctx, x1736, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1738, x6, 67), x1739, 67),
            x1736,
            67
        ),
        284487,
        4,
    )?;
    let x1740: BytePoly_35 = bigint_nondet_quot!(ctx, x1737, x6, 35);
    let x1741: BytePoly_32 = bigint_nondet_rem!(ctx, x1737, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1740, x6, 67), x1741, 67),
            x1737,
            67
        ),
        284487,
        4,
    )?;
    let x1742: BytePoly_64 = bigint_mul!(x1703, x1703, 64);
    let x1743: BytePoly_66 = bigint_nondet_quot!(ctx, x1742, x6, 66);
    let x1744: BytePoly_32 = bigint_nondet_rem!(ctx, x1742, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1743, x6, 98), x1744, 98),
            x1742,
            98
        ),
        536459,
        4,
    )?;
    let x1745: BytePoly_33 = bigint_add!(bigint_mul!(x1744, x0, 33), x5, 33);
    let x1746: BytePoly_35 = bigint_nondet_quot!(ctx, x1745, x6, 35);
    let x1747: BytePoly_32 = bigint_nondet_rem!(ctx, x1745, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1746, x6, 67), x1747, 67),
            x1745,
            67
        ),
        284487,
        4,
    )?;
    let x1748: BytePoly_32 = bigint_add!(x1709, x1709, 32);
    let x1749: BytePoly_32 = bigint_nondet_quot!(ctx, x1748, x6, 32);
    let x1750: BytePoly_32 = bigint_nondet_rem!(ctx, x1748, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1749, x6, 64), x1750, 64),
            x1748,
            64
        ),
        260103,
        4,
    )?;
    let x1751: BytePoly_32 = bigint_nondet_inv!(ctx, x1750, x6, 32);
    let x1752: BytePoly_64 = bigint_mul!(x1750, x1751, 64);
    let x1753: BytePoly_66 = bigint_nondet_quot!(ctx, x1752, x6, 66);
    let x1754: BytePoly_32 = bigint_nondet_rem!(ctx, x1752, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1753, x6, 98), x1754, 98),
            x1752,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1754, x3, 32), 34, 1)?;
    let x1755: BytePoly_64 = bigint_mul!(x1747, x1751, 64);
    let x1756: BytePoly_66 = bigint_nondet_quot!(ctx, x1755, x6, 66);
    let x1757: BytePoly_32 = bigint_nondet_rem!(ctx, x1755, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1756, x6, 98), x1757, 98),
            x1755,
            98
        ),
        536459,
        4,
    )?;
    let x1758: BytePoly_64 = bigint_mul!(x1757, x1703, 64);
    let x1759: BytePoly_66 = bigint_nondet_quot!(ctx, x1758, x6, 66);
    let x1760: BytePoly_32 = bigint_nondet_rem!(ctx, x1758, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1759, x6, 98), x1760, 98),
            x1758,
            98
        ),
        536459,
        4,
    )?;
    let x1761: BytePoly_32 = bigint_add!(bigint_sub!(x1709, x1760, 32), x6, 32);
    let x1762: BytePoly_32 = bigint_nondet_quot!(ctx, x1761, x6, 32);
    let x1763: BytePoly_32 = bigint_nondet_rem!(ctx, x1761, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1762, x6, 64), x1763, 64),
            x1761,
            64
        ),
        260103,
        4,
    )?;
    let x1764: BytePoly_64 = bigint_mul!(x1757, x1757, 64);
    let x1765: BytePoly_66 = bigint_nondet_quot!(ctx, x1764, x6, 66);
    let x1766: BytePoly_32 = bigint_nondet_rem!(ctx, x1764, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1765, x6, 98), x1766, 98),
            x1764,
            98
        ),
        536459,
        4,
    )?;
    let x1767: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1766, x1703, 32), x6, 32),
            x1703,
            32
        ),
        x6,
        32
    );
    let x1768: BytePoly_32 = bigint_nondet_quot!(ctx, x1767, x6, 32);
    let x1769: BytePoly_32 = bigint_nondet_rem!(ctx, x1767, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1768, x6, 64), x1769, 64),
            x1767,
            64
        ),
        260103,
        4,
    )?;
    let x1770: BytePoly_64 = bigint_mul!(x1757, x1769, 64);
    let x1771: BytePoly_66 = bigint_nondet_quot!(ctx, x1770, x6, 66);
    let x1772: BytePoly_32 = bigint_nondet_rem!(ctx, x1770, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1771, x6, 98), x1772, 98),
            x1770,
            98
        ),
        536459,
        4,
    )?;
    let x1773: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1772, x1763, 32), 32), x6, 32);
    let x1774: BytePoly_32 = bigint_nondet_quot!(ctx, x1773, x6, 32);
    let x1775: BytePoly_32 = bigint_nondet_rem!(ctx, x1773, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1774, x6, 64), x1775, 64),
            x1773,
            64
        ),
        260103,
        4,
    )?;
    let x1776: BytePoly_1 = bigint_nondet_rem!(ctx, x1711, x2, 1);
    let x1777: BytePoly_33 = bigint_nondet_quot!(ctx, x1711, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1777, x2, 34), x1776, 34),
            x1711,
            34
        ),
        268231,
        4,
    )?;
    let x1778: BytePoly_1 = bigint_sub!(x3, x1776, 1);
    eqz(ctx, &bigint_mul!(x1776, x1778, 2), 8131, 2)?;
    let x1779: BytePoly_32 = bigint_add!(bigint_sub!(x1769, x1739, 32), x6, 32);
    let x1780: BytePoly_32 = bigint_nondet_inv!(ctx, x1779, x6, 32);
    let x1781: BytePoly_64 = bigint_mul!(x1779, x1780, 64);
    let x1782: BytePoly_66 = bigint_nondet_quot!(ctx, x1781, x6, 66);
    let x1783: BytePoly_32 = bigint_nondet_rem!(ctx, x1781, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1782, x6, 98), x1783, 98),
            x1781,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1783, x1, 32), 34, 1)?;
    let x1784: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1775, x1741, 32), x6, 32),
        x1780,
        64
    );
    let x1785: BytePoly_66 = bigint_nondet_quot!(ctx, x1784, x6, 66);
    let x1786: BytePoly_32 = bigint_nondet_rem!(ctx, x1784, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1785, x6, 98), x1786, 98),
            x1784,
            98
        ),
        536459,
        4,
    )?;
    let x1787: BytePoly_64 = bigint_mul!(x1786, x1739, 64);
    let x1788: BytePoly_66 = bigint_nondet_quot!(ctx, x1787, x6, 66);
    let x1789: BytePoly_32 = bigint_nondet_rem!(ctx, x1787, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1788, x6, 98), x1789, 98),
            x1787,
            98
        ),
        536459,
        4,
    )?;
    let x1790: BytePoly_32 = bigint_add!(bigint_sub!(x1741, x1789, 32), x6, 32);
    let x1791: BytePoly_32 = bigint_nondet_quot!(ctx, x1790, x6, 32);
    let x1792: BytePoly_32 = bigint_nondet_rem!(ctx, x1790, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1791, x6, 64), x1792, 64),
            x1790,
            64
        ),
        260103,
        4,
    )?;
    let x1793: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1786, x1786, 64), x1739, 64),
                x6,
                64
            ),
            x1769,
            64
        ),
        x6,
        64
    );
    let x1794: BytePoly_66 = bigint_nondet_quot!(ctx, x1793, x6, 66);
    let x1795: BytePoly_32 = bigint_nondet_rem!(ctx, x1793, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1794, x6, 98), x1795, 98),
            x1793,
            98
        ),
        536459,
        4,
    )?;
    let x1796: BytePoly_64 = bigint_mul!(x1786, x1795, 64);
    let x1797: BytePoly_66 = bigint_nondet_quot!(ctx, x1796, x6, 66);
    let x1798: BytePoly_32 = bigint_nondet_rem!(ctx, x1796, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1797, x6, 98), x1798, 98),
            x1796,
            98
        ),
        536459,
        4,
    )?;
    let x1799: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1798, x1792, 32), 32), x6, 32);
    let x1800: BytePoly_32 = bigint_nondet_quot!(ctx, x1799, x6, 32);
    let x1801: BytePoly_32 = bigint_nondet_rem!(ctx, x1799, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1800, x6, 64), x1801, 64),
            x1799,
            64
        ),
        260103,
        4,
    )?;
    let x1802: BytePoly_33 = bigint_add!(
        bigint_mul!(x1795, x1776, 33),
        bigint_mul!(x1739, x1778, 33),
        33
    );
    let x1803: BytePoly_33 = bigint_add!(
        bigint_mul!(x1801, x1776, 33),
        bigint_mul!(x1741, x1778, 33),
        33
    );
    let x1804: BytePoly_35 = bigint_nondet_quot!(ctx, x1802, x6, 35);
    let x1805: BytePoly_32 = bigint_nondet_rem!(ctx, x1802, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1804, x6, 67), x1805, 67),
            x1802,
            67
        ),
        284487,
        4,
    )?;
    let x1806: BytePoly_35 = bigint_nondet_quot!(ctx, x1803, x6, 35);
    let x1807: BytePoly_32 = bigint_nondet_rem!(ctx, x1803, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1806, x6, 67), x1807, 67),
            x1803,
            67
        ),
        284487,
        4,
    )?;
    let x1808: BytePoly_64 = bigint_mul!(x1769, x1769, 64);
    let x1809: BytePoly_66 = bigint_nondet_quot!(ctx, x1808, x6, 66);
    let x1810: BytePoly_32 = bigint_nondet_rem!(ctx, x1808, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1809, x6, 98), x1810, 98),
            x1808,
            98
        ),
        536459,
        4,
    )?;
    let x1811: BytePoly_33 = bigint_add!(bigint_mul!(x1810, x0, 33), x5, 33);
    let x1812: BytePoly_35 = bigint_nondet_quot!(ctx, x1811, x6, 35);
    let x1813: BytePoly_32 = bigint_nondet_rem!(ctx, x1811, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1812, x6, 67), x1813, 67),
            x1811,
            67
        ),
        284487,
        4,
    )?;
    let x1814: BytePoly_32 = bigint_add!(x1775, x1775, 32);
    let x1815: BytePoly_32 = bigint_nondet_quot!(ctx, x1814, x6, 32);
    let x1816: BytePoly_32 = bigint_nondet_rem!(ctx, x1814, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1815, x6, 64), x1816, 64),
            x1814,
            64
        ),
        260103,
        4,
    )?;
    let x1817: BytePoly_32 = bigint_nondet_inv!(ctx, x1816, x6, 32);
    let x1818: BytePoly_64 = bigint_mul!(x1816, x1817, 64);
    let x1819: BytePoly_66 = bigint_nondet_quot!(ctx, x1818, x6, 66);
    let x1820: BytePoly_32 = bigint_nondet_rem!(ctx, x1818, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1819, x6, 98), x1820, 98),
            x1818,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1820, x3, 32), 34, 1)?;
    let x1821: BytePoly_64 = bigint_mul!(x1813, x1817, 64);
    let x1822: BytePoly_66 = bigint_nondet_quot!(ctx, x1821, x6, 66);
    let x1823: BytePoly_32 = bigint_nondet_rem!(ctx, x1821, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1822, x6, 98), x1823, 98),
            x1821,
            98
        ),
        536459,
        4,
    )?;
    let x1824: BytePoly_64 = bigint_mul!(x1823, x1769, 64);
    let x1825: BytePoly_66 = bigint_nondet_quot!(ctx, x1824, x6, 66);
    let x1826: BytePoly_32 = bigint_nondet_rem!(ctx, x1824, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1825, x6, 98), x1826, 98),
            x1824,
            98
        ),
        536459,
        4,
    )?;
    let x1827: BytePoly_32 = bigint_add!(bigint_sub!(x1775, x1826, 32), x6, 32);
    let x1828: BytePoly_32 = bigint_nondet_quot!(ctx, x1827, x6, 32);
    let x1829: BytePoly_32 = bigint_nondet_rem!(ctx, x1827, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1828, x6, 64), x1829, 64),
            x1827,
            64
        ),
        260103,
        4,
    )?;
    let x1830: BytePoly_64 = bigint_mul!(x1823, x1823, 64);
    let x1831: BytePoly_66 = bigint_nondet_quot!(ctx, x1830, x6, 66);
    let x1832: BytePoly_32 = bigint_nondet_rem!(ctx, x1830, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1831, x6, 98), x1832, 98),
            x1830,
            98
        ),
        536459,
        4,
    )?;
    let x1833: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1832, x1769, 32), x6, 32),
            x1769,
            32
        ),
        x6,
        32
    );
    let x1834: BytePoly_32 = bigint_nondet_quot!(ctx, x1833, x6, 32);
    let x1835: BytePoly_32 = bigint_nondet_rem!(ctx, x1833, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1834, x6, 64), x1835, 64),
            x1833,
            64
        ),
        260103,
        4,
    )?;
    let x1836: BytePoly_64 = bigint_mul!(x1823, x1835, 64);
    let x1837: BytePoly_66 = bigint_nondet_quot!(ctx, x1836, x6, 66);
    let x1838: BytePoly_32 = bigint_nondet_rem!(ctx, x1836, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1837, x6, 98), x1838, 98),
            x1836,
            98
        ),
        536459,
        4,
    )?;
    let x1839: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1838, x1829, 32), 32), x6, 32);
    let x1840: BytePoly_32 = bigint_nondet_quot!(ctx, x1839, x6, 32);
    let x1841: BytePoly_32 = bigint_nondet_rem!(ctx, x1839, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1840, x6, 64), x1841, 64),
            x1839,
            64
        ),
        260103,
        4,
    )?;
    let x1842: BytePoly_1 = bigint_nondet_rem!(ctx, x1777, x2, 1);
    let x1843: BytePoly_33 = bigint_nondet_quot!(ctx, x1777, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1843, x2, 34), x1842, 34),
            x1777,
            34
        ),
        268231,
        4,
    )?;
    let x1844: BytePoly_1 = bigint_sub!(x3, x1842, 1);
    eqz(ctx, &bigint_mul!(x1842, x1844, 2), 8131, 2)?;
    let x1845: BytePoly_32 = bigint_add!(bigint_sub!(x1835, x1805, 32), x6, 32);
    let x1846: BytePoly_32 = bigint_nondet_inv!(ctx, x1845, x6, 32);
    let x1847: BytePoly_64 = bigint_mul!(x1845, x1846, 64);
    let x1848: BytePoly_66 = bigint_nondet_quot!(ctx, x1847, x6, 66);
    let x1849: BytePoly_32 = bigint_nondet_rem!(ctx, x1847, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1848, x6, 98), x1849, 98),
            x1847,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1849, x1, 32), 34, 1)?;
    let x1850: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1841, x1807, 32), x6, 32),
        x1846,
        64
    );
    let x1851: BytePoly_66 = bigint_nondet_quot!(ctx, x1850, x6, 66);
    let x1852: BytePoly_32 = bigint_nondet_rem!(ctx, x1850, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1851, x6, 98), x1852, 98),
            x1850,
            98
        ),
        536459,
        4,
    )?;
    let x1853: BytePoly_64 = bigint_mul!(x1852, x1805, 64);
    let x1854: BytePoly_66 = bigint_nondet_quot!(ctx, x1853, x6, 66);
    let x1855: BytePoly_32 = bigint_nondet_rem!(ctx, x1853, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1854, x6, 98), x1855, 98),
            x1853,
            98
        ),
        536459,
        4,
    )?;
    let x1856: BytePoly_32 = bigint_add!(bigint_sub!(x1807, x1855, 32), x6, 32);
    let x1857: BytePoly_32 = bigint_nondet_quot!(ctx, x1856, x6, 32);
    let x1858: BytePoly_32 = bigint_nondet_rem!(ctx, x1856, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1857, x6, 64), x1858, 64),
            x1856,
            64
        ),
        260103,
        4,
    )?;
    let x1859: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1852, x1852, 64), x1805, 64),
                x6,
                64
            ),
            x1835,
            64
        ),
        x6,
        64
    );
    let x1860: BytePoly_66 = bigint_nondet_quot!(ctx, x1859, x6, 66);
    let x1861: BytePoly_32 = bigint_nondet_rem!(ctx, x1859, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1860, x6, 98), x1861, 98),
            x1859,
            98
        ),
        536459,
        4,
    )?;
    let x1862: BytePoly_64 = bigint_mul!(x1852, x1861, 64);
    let x1863: BytePoly_66 = bigint_nondet_quot!(ctx, x1862, x6, 66);
    let x1864: BytePoly_32 = bigint_nondet_rem!(ctx, x1862, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1863, x6, 98), x1864, 98),
            x1862,
            98
        ),
        536459,
        4,
    )?;
    let x1865: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1864, x1858, 32), 32), x6, 32);
    let x1866: BytePoly_32 = bigint_nondet_quot!(ctx, x1865, x6, 32);
    let x1867: BytePoly_32 = bigint_nondet_rem!(ctx, x1865, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1866, x6, 64), x1867, 64),
            x1865,
            64
        ),
        260103,
        4,
    )?;
    let x1868: BytePoly_33 = bigint_add!(
        bigint_mul!(x1861, x1842, 33),
        bigint_mul!(x1805, x1844, 33),
        33
    );
    let x1869: BytePoly_33 = bigint_add!(
        bigint_mul!(x1867, x1842, 33),
        bigint_mul!(x1807, x1844, 33),
        33
    );
    let x1870: BytePoly_35 = bigint_nondet_quot!(ctx, x1868, x6, 35);
    let x1871: BytePoly_32 = bigint_nondet_rem!(ctx, x1868, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1870, x6, 67), x1871, 67),
            x1868,
            67
        ),
        284487,
        4,
    )?;
    let x1872: BytePoly_35 = bigint_nondet_quot!(ctx, x1869, x6, 35);
    let x1873: BytePoly_32 = bigint_nondet_rem!(ctx, x1869, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1872, x6, 67), x1873, 67),
            x1869,
            67
        ),
        284487,
        4,
    )?;
    let x1874: BytePoly_64 = bigint_mul!(x1835, x1835, 64);
    let x1875: BytePoly_66 = bigint_nondet_quot!(ctx, x1874, x6, 66);
    let x1876: BytePoly_32 = bigint_nondet_rem!(ctx, x1874, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1875, x6, 98), x1876, 98),
            x1874,
            98
        ),
        536459,
        4,
    )?;
    let x1877: BytePoly_33 = bigint_add!(bigint_mul!(x1876, x0, 33), x5, 33);
    let x1878: BytePoly_35 = bigint_nondet_quot!(ctx, x1877, x6, 35);
    let x1879: BytePoly_32 = bigint_nondet_rem!(ctx, x1877, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1878, x6, 67), x1879, 67),
            x1877,
            67
        ),
        284487,
        4,
    )?;
    let x1880: BytePoly_32 = bigint_add!(x1841, x1841, 32);
    let x1881: BytePoly_32 = bigint_nondet_quot!(ctx, x1880, x6, 32);
    let x1882: BytePoly_32 = bigint_nondet_rem!(ctx, x1880, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1881, x6, 64), x1882, 64),
            x1880,
            64
        ),
        260103,
        4,
    )?;
    let x1883: BytePoly_32 = bigint_nondet_inv!(ctx, x1882, x6, 32);
    let x1884: BytePoly_64 = bigint_mul!(x1882, x1883, 64);
    let x1885: BytePoly_66 = bigint_nondet_quot!(ctx, x1884, x6, 66);
    let x1886: BytePoly_32 = bigint_nondet_rem!(ctx, x1884, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1885, x6, 98), x1886, 98),
            x1884,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1886, x3, 32), 34, 1)?;
    let x1887: BytePoly_64 = bigint_mul!(x1879, x1883, 64);
    let x1888: BytePoly_66 = bigint_nondet_quot!(ctx, x1887, x6, 66);
    let x1889: BytePoly_32 = bigint_nondet_rem!(ctx, x1887, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1888, x6, 98), x1889, 98),
            x1887,
            98
        ),
        536459,
        4,
    )?;
    let x1890: BytePoly_64 = bigint_mul!(x1889, x1835, 64);
    let x1891: BytePoly_66 = bigint_nondet_quot!(ctx, x1890, x6, 66);
    let x1892: BytePoly_32 = bigint_nondet_rem!(ctx, x1890, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1891, x6, 98), x1892, 98),
            x1890,
            98
        ),
        536459,
        4,
    )?;
    let x1893: BytePoly_32 = bigint_add!(bigint_sub!(x1841, x1892, 32), x6, 32);
    let x1894: BytePoly_32 = bigint_nondet_quot!(ctx, x1893, x6, 32);
    let x1895: BytePoly_32 = bigint_nondet_rem!(ctx, x1893, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1894, x6, 64), x1895, 64),
            x1893,
            64
        ),
        260103,
        4,
    )?;
    let x1896: BytePoly_64 = bigint_mul!(x1889, x1889, 64);
    let x1897: BytePoly_66 = bigint_nondet_quot!(ctx, x1896, x6, 66);
    let x1898: BytePoly_32 = bigint_nondet_rem!(ctx, x1896, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1897, x6, 98), x1898, 98),
            x1896,
            98
        ),
        536459,
        4,
    )?;
    let x1899: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1898, x1835, 32), x6, 32),
            x1835,
            32
        ),
        x6,
        32
    );
    let x1900: BytePoly_32 = bigint_nondet_quot!(ctx, x1899, x6, 32);
    let x1901: BytePoly_32 = bigint_nondet_rem!(ctx, x1899, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1900, x6, 64), x1901, 64),
            x1899,
            64
        ),
        260103,
        4,
    )?;
    let x1902: BytePoly_64 = bigint_mul!(x1889, x1901, 64);
    let x1903: BytePoly_66 = bigint_nondet_quot!(ctx, x1902, x6, 66);
    let x1904: BytePoly_32 = bigint_nondet_rem!(ctx, x1902, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1903, x6, 98), x1904, 98),
            x1902,
            98
        ),
        536459,
        4,
    )?;
    let x1905: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1904, x1895, 32), 32), x6, 32);
    let x1906: BytePoly_32 = bigint_nondet_quot!(ctx, x1905, x6, 32);
    let x1907: BytePoly_32 = bigint_nondet_rem!(ctx, x1905, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1906, x6, 64), x1907, 64),
            x1905,
            64
        ),
        260103,
        4,
    )?;
    let x1908: BytePoly_1 = bigint_nondet_rem!(ctx, x1843, x2, 1);
    let x1909: BytePoly_33 = bigint_nondet_quot!(ctx, x1843, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1909, x2, 34), x1908, 34),
            x1843,
            34
        ),
        268231,
        4,
    )?;
    let x1910: BytePoly_1 = bigint_sub!(x3, x1908, 1);
    eqz(ctx, &bigint_mul!(x1908, x1910, 2), 8131, 2)?;
    let x1911: BytePoly_32 = bigint_add!(bigint_sub!(x1901, x1871, 32), x6, 32);
    let x1912: BytePoly_32 = bigint_nondet_inv!(ctx, x1911, x6, 32);
    let x1913: BytePoly_64 = bigint_mul!(x1911, x1912, 64);
    let x1914: BytePoly_66 = bigint_nondet_quot!(ctx, x1913, x6, 66);
    let x1915: BytePoly_32 = bigint_nondet_rem!(ctx, x1913, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1914, x6, 98), x1915, 98),
            x1913,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1915, x1, 32), 34, 1)?;
    let x1916: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1907, x1873, 32), x6, 32),
        x1912,
        64
    );
    let x1917: BytePoly_66 = bigint_nondet_quot!(ctx, x1916, x6, 66);
    let x1918: BytePoly_32 = bigint_nondet_rem!(ctx, x1916, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1917, x6, 98), x1918, 98),
            x1916,
            98
        ),
        536459,
        4,
    )?;
    let x1919: BytePoly_64 = bigint_mul!(x1918, x1871, 64);
    let x1920: BytePoly_66 = bigint_nondet_quot!(ctx, x1919, x6, 66);
    let x1921: BytePoly_32 = bigint_nondet_rem!(ctx, x1919, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1920, x6, 98), x1921, 98),
            x1919,
            98
        ),
        536459,
        4,
    )?;
    let x1922: BytePoly_32 = bigint_add!(bigint_sub!(x1873, x1921, 32), x6, 32);
    let x1923: BytePoly_32 = bigint_nondet_quot!(ctx, x1922, x6, 32);
    let x1924: BytePoly_32 = bigint_nondet_rem!(ctx, x1922, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1923, x6, 64), x1924, 64),
            x1922,
            64
        ),
        260103,
        4,
    )?;
    let x1925: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1918, x1918, 64), x1871, 64),
                x6,
                64
            ),
            x1901,
            64
        ),
        x6,
        64
    );
    let x1926: BytePoly_66 = bigint_nondet_quot!(ctx, x1925, x6, 66);
    let x1927: BytePoly_32 = bigint_nondet_rem!(ctx, x1925, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1926, x6, 98), x1927, 98),
            x1925,
            98
        ),
        536459,
        4,
    )?;
    let x1928: BytePoly_64 = bigint_mul!(x1918, x1927, 64);
    let x1929: BytePoly_66 = bigint_nondet_quot!(ctx, x1928, x6, 66);
    let x1930: BytePoly_32 = bigint_nondet_rem!(ctx, x1928, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1929, x6, 98), x1930, 98),
            x1928,
            98
        ),
        536459,
        4,
    )?;
    let x1931: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1930, x1924, 32), 32), x6, 32);
    let x1932: BytePoly_32 = bigint_nondet_quot!(ctx, x1931, x6, 32);
    let x1933: BytePoly_32 = bigint_nondet_rem!(ctx, x1931, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1932, x6, 64), x1933, 64),
            x1931,
            64
        ),
        260103,
        4,
    )?;
    let x1934: BytePoly_33 = bigint_add!(
        bigint_mul!(x1927, x1908, 33),
        bigint_mul!(x1871, x1910, 33),
        33
    );
    let x1935: BytePoly_33 = bigint_add!(
        bigint_mul!(x1933, x1908, 33),
        bigint_mul!(x1873, x1910, 33),
        33
    );
    let x1936: BytePoly_35 = bigint_nondet_quot!(ctx, x1934, x6, 35);
    let x1937: BytePoly_32 = bigint_nondet_rem!(ctx, x1934, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1936, x6, 67), x1937, 67),
            x1934,
            67
        ),
        284487,
        4,
    )?;
    let x1938: BytePoly_35 = bigint_nondet_quot!(ctx, x1935, x6, 35);
    let x1939: BytePoly_32 = bigint_nondet_rem!(ctx, x1935, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1938, x6, 67), x1939, 67),
            x1935,
            67
        ),
        284487,
        4,
    )?;
    let x1940: BytePoly_64 = bigint_mul!(x1901, x1901, 64);
    let x1941: BytePoly_66 = bigint_nondet_quot!(ctx, x1940, x6, 66);
    let x1942: BytePoly_32 = bigint_nondet_rem!(ctx, x1940, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1941, x6, 98), x1942, 98),
            x1940,
            98
        ),
        536459,
        4,
    )?;
    let x1943: BytePoly_33 = bigint_add!(bigint_mul!(x1942, x0, 33), x5, 33);
    let x1944: BytePoly_35 = bigint_nondet_quot!(ctx, x1943, x6, 35);
    let x1945: BytePoly_32 = bigint_nondet_rem!(ctx, x1943, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1944, x6, 67), x1945, 67),
            x1943,
            67
        ),
        284487,
        4,
    )?;
    let x1946: BytePoly_32 = bigint_add!(x1907, x1907, 32);
    let x1947: BytePoly_32 = bigint_nondet_quot!(ctx, x1946, x6, 32);
    let x1948: BytePoly_32 = bigint_nondet_rem!(ctx, x1946, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1947, x6, 64), x1948, 64),
            x1946,
            64
        ),
        260103,
        4,
    )?;
    let x1949: BytePoly_32 = bigint_nondet_inv!(ctx, x1948, x6, 32);
    let x1950: BytePoly_64 = bigint_mul!(x1948, x1949, 64);
    let x1951: BytePoly_66 = bigint_nondet_quot!(ctx, x1950, x6, 66);
    let x1952: BytePoly_32 = bigint_nondet_rem!(ctx, x1950, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1951, x6, 98), x1952, 98),
            x1950,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1952, x3, 32), 34, 1)?;
    let x1953: BytePoly_64 = bigint_mul!(x1945, x1949, 64);
    let x1954: BytePoly_66 = bigint_nondet_quot!(ctx, x1953, x6, 66);
    let x1955: BytePoly_32 = bigint_nondet_rem!(ctx, x1953, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1954, x6, 98), x1955, 98),
            x1953,
            98
        ),
        536459,
        4,
    )?;
    let x1956: BytePoly_64 = bigint_mul!(x1955, x1901, 64);
    let x1957: BytePoly_66 = bigint_nondet_quot!(ctx, x1956, x6, 66);
    let x1958: BytePoly_32 = bigint_nondet_rem!(ctx, x1956, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1957, x6, 98), x1958, 98),
            x1956,
            98
        ),
        536459,
        4,
    )?;
    let x1959: BytePoly_32 = bigint_add!(bigint_sub!(x1907, x1958, 32), x6, 32);
    let x1960: BytePoly_32 = bigint_nondet_quot!(ctx, x1959, x6, 32);
    let x1961: BytePoly_32 = bigint_nondet_rem!(ctx, x1959, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1960, x6, 64), x1961, 64),
            x1959,
            64
        ),
        260103,
        4,
    )?;
    let x1962: BytePoly_64 = bigint_mul!(x1955, x1955, 64);
    let x1963: BytePoly_66 = bigint_nondet_quot!(ctx, x1962, x6, 66);
    let x1964: BytePoly_32 = bigint_nondet_rem!(ctx, x1962, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1963, x6, 98), x1964, 98),
            x1962,
            98
        ),
        536459,
        4,
    )?;
    let x1965: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1964, x1901, 32), x6, 32),
            x1901,
            32
        ),
        x6,
        32
    );
    let x1966: BytePoly_32 = bigint_nondet_quot!(ctx, x1965, x6, 32);
    let x1967: BytePoly_32 = bigint_nondet_rem!(ctx, x1965, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1966, x6, 64), x1967, 64),
            x1965,
            64
        ),
        260103,
        4,
    )?;
    let x1968: BytePoly_64 = bigint_mul!(x1955, x1967, 64);
    let x1969: BytePoly_66 = bigint_nondet_quot!(ctx, x1968, x6, 66);
    let x1970: BytePoly_32 = bigint_nondet_rem!(ctx, x1968, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1969, x6, 98), x1970, 98),
            x1968,
            98
        ),
        536459,
        4,
    )?;
    let x1971: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1970, x1961, 32), 32), x6, 32);
    let x1972: BytePoly_32 = bigint_nondet_quot!(ctx, x1971, x6, 32);
    let x1973: BytePoly_32 = bigint_nondet_rem!(ctx, x1971, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1972, x6, 64), x1973, 64),
            x1971,
            64
        ),
        260103,
        4,
    )?;
    let x1974: BytePoly_1 = bigint_nondet_rem!(ctx, x1909, x2, 1);
    let x1975: BytePoly_33 = bigint_nondet_quot!(ctx, x1909, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1975, x2, 34), x1974, 34),
            x1909,
            34
        ),
        268231,
        4,
    )?;
    let x1976: BytePoly_1 = bigint_sub!(x3, x1974, 1);
    eqz(ctx, &bigint_mul!(x1974, x1976, 2), 8131, 2)?;
    let x1977: BytePoly_32 = bigint_add!(bigint_sub!(x1967, x1937, 32), x6, 32);
    let x1978: BytePoly_32 = bigint_nondet_inv!(ctx, x1977, x6, 32);
    let x1979: BytePoly_64 = bigint_mul!(x1977, x1978, 64);
    let x1980: BytePoly_66 = bigint_nondet_quot!(ctx, x1979, x6, 66);
    let x1981: BytePoly_32 = bigint_nondet_rem!(ctx, x1979, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1980, x6, 98), x1981, 98),
            x1979,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1981, x1, 32), 34, 1)?;
    let x1982: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1973, x1939, 32), x6, 32),
        x1978,
        64
    );
    let x1983: BytePoly_66 = bigint_nondet_quot!(ctx, x1982, x6, 66);
    let x1984: BytePoly_32 = bigint_nondet_rem!(ctx, x1982, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1983, x6, 98), x1984, 98),
            x1982,
            98
        ),
        536459,
        4,
    )?;
    let x1985: BytePoly_64 = bigint_mul!(x1984, x1937, 64);
    let x1986: BytePoly_66 = bigint_nondet_quot!(ctx, x1985, x6, 66);
    let x1987: BytePoly_32 = bigint_nondet_rem!(ctx, x1985, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1986, x6, 98), x1987, 98),
            x1985,
            98
        ),
        536459,
        4,
    )?;
    let x1988: BytePoly_32 = bigint_add!(bigint_sub!(x1939, x1987, 32), x6, 32);
    let x1989: BytePoly_32 = bigint_nondet_quot!(ctx, x1988, x6, 32);
    let x1990: BytePoly_32 = bigint_nondet_rem!(ctx, x1988, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1989, x6, 64), x1990, 64),
            x1988,
            64
        ),
        260103,
        4,
    )?;
    let x1991: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1984, x1984, 64), x1937, 64),
                x6,
                64
            ),
            x1967,
            64
        ),
        x6,
        64
    );
    let x1992: BytePoly_66 = bigint_nondet_quot!(ctx, x1991, x6, 66);
    let x1993: BytePoly_32 = bigint_nondet_rem!(ctx, x1991, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1992, x6, 98), x1993, 98),
            x1991,
            98
        ),
        536459,
        4,
    )?;
    let x1994: BytePoly_64 = bigint_mul!(x1984, x1993, 64);
    let x1995: BytePoly_66 = bigint_nondet_quot!(ctx, x1994, x6, 66);
    let x1996: BytePoly_32 = bigint_nondet_rem!(ctx, x1994, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1995, x6, 98), x1996, 98),
            x1994,
            98
        ),
        536459,
        4,
    )?;
    let x1997: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x1996, x1990, 32), 32), x6, 32);
    let x1998: BytePoly_32 = bigint_nondet_quot!(ctx, x1997, x6, 32);
    let x1999: BytePoly_32 = bigint_nondet_rem!(ctx, x1997, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1998, x6, 64), x1999, 64),
            x1997,
            64
        ),
        260103,
        4,
    )?;
    let x2000: BytePoly_33 = bigint_add!(
        bigint_mul!(x1993, x1974, 33),
        bigint_mul!(x1937, x1976, 33),
        33
    );
    let x2001: BytePoly_33 = bigint_add!(
        bigint_mul!(x1999, x1974, 33),
        bigint_mul!(x1939, x1976, 33),
        33
    );
    let x2002: BytePoly_35 = bigint_nondet_quot!(ctx, x2000, x6, 35);
    let x2003: BytePoly_32 = bigint_nondet_rem!(ctx, x2000, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2002, x6, 67), x2003, 67),
            x2000,
            67
        ),
        284487,
        4,
    )?;
    let x2004: BytePoly_35 = bigint_nondet_quot!(ctx, x2001, x6, 35);
    let x2005: BytePoly_32 = bigint_nondet_rem!(ctx, x2001, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2004, x6, 67), x2005, 67),
            x2001,
            67
        ),
        284487,
        4,
    )?;
    let x2006: BytePoly_64 = bigint_mul!(x1967, x1967, 64);
    let x2007: BytePoly_66 = bigint_nondet_quot!(ctx, x2006, x6, 66);
    let x2008: BytePoly_32 = bigint_nondet_rem!(ctx, x2006, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2007, x6, 98), x2008, 98),
            x2006,
            98
        ),
        536459,
        4,
    )?;
    let x2009: BytePoly_33 = bigint_add!(bigint_mul!(x2008, x0, 33), x5, 33);
    let x2010: BytePoly_35 = bigint_nondet_quot!(ctx, x2009, x6, 35);
    let x2011: BytePoly_32 = bigint_nondet_rem!(ctx, x2009, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2010, x6, 67), x2011, 67),
            x2009,
            67
        ),
        284487,
        4,
    )?;
    let x2012: BytePoly_32 = bigint_add!(x1973, x1973, 32);
    let x2013: BytePoly_32 = bigint_nondet_quot!(ctx, x2012, x6, 32);
    let x2014: BytePoly_32 = bigint_nondet_rem!(ctx, x2012, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2013, x6, 64), x2014, 64),
            x2012,
            64
        ),
        260103,
        4,
    )?;
    let x2015: BytePoly_32 = bigint_nondet_inv!(ctx, x2014, x6, 32);
    let x2016: BytePoly_64 = bigint_mul!(x2014, x2015, 64);
    let x2017: BytePoly_66 = bigint_nondet_quot!(ctx, x2016, x6, 66);
    let x2018: BytePoly_32 = bigint_nondet_rem!(ctx, x2016, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2017, x6, 98), x2018, 98),
            x2016,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2018, x3, 32), 34, 1)?;
    let x2019: BytePoly_64 = bigint_mul!(x2011, x2015, 64);
    let x2020: BytePoly_66 = bigint_nondet_quot!(ctx, x2019, x6, 66);
    let x2021: BytePoly_32 = bigint_nondet_rem!(ctx, x2019, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2020, x6, 98), x2021, 98),
            x2019,
            98
        ),
        536459,
        4,
    )?;
    let x2022: BytePoly_64 = bigint_mul!(x2021, x1967, 64);
    let x2023: BytePoly_66 = bigint_nondet_quot!(ctx, x2022, x6, 66);
    let x2024: BytePoly_32 = bigint_nondet_rem!(ctx, x2022, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2023, x6, 98), x2024, 98),
            x2022,
            98
        ),
        536459,
        4,
    )?;
    let x2025: BytePoly_32 = bigint_add!(bigint_sub!(x1973, x2024, 32), x6, 32);
    let x2026: BytePoly_32 = bigint_nondet_quot!(ctx, x2025, x6, 32);
    let x2027: BytePoly_32 = bigint_nondet_rem!(ctx, x2025, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2026, x6, 64), x2027, 64),
            x2025,
            64
        ),
        260103,
        4,
    )?;
    let x2028: BytePoly_64 = bigint_mul!(x2021, x2021, 64);
    let x2029: BytePoly_66 = bigint_nondet_quot!(ctx, x2028, x6, 66);
    let x2030: BytePoly_32 = bigint_nondet_rem!(ctx, x2028, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2029, x6, 98), x2030, 98),
            x2028,
            98
        ),
        536459,
        4,
    )?;
    let x2031: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2030, x1967, 32), x6, 32),
            x1967,
            32
        ),
        x6,
        32
    );
    let x2032: BytePoly_32 = bigint_nondet_quot!(ctx, x2031, x6, 32);
    let x2033: BytePoly_32 = bigint_nondet_rem!(ctx, x2031, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2032, x6, 64), x2033, 64),
            x2031,
            64
        ),
        260103,
        4,
    )?;
    let x2034: BytePoly_64 = bigint_mul!(x2021, x2033, 64);
    let x2035: BytePoly_66 = bigint_nondet_quot!(ctx, x2034, x6, 66);
    let x2036: BytePoly_32 = bigint_nondet_rem!(ctx, x2034, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2035, x6, 98), x2036, 98),
            x2034,
            98
        ),
        536459,
        4,
    )?;
    let x2037: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2036, x2027, 32), 32), x6, 32);
    let x2038: BytePoly_32 = bigint_nondet_quot!(ctx, x2037, x6, 32);
    let x2039: BytePoly_32 = bigint_nondet_rem!(ctx, x2037, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2038, x6, 64), x2039, 64),
            x2037,
            64
        ),
        260103,
        4,
    )?;
    let x2040: BytePoly_1 = bigint_nondet_rem!(ctx, x1975, x2, 1);
    let x2041: BytePoly_33 = bigint_nondet_quot!(ctx, x1975, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2041, x2, 34), x2040, 34),
            x1975,
            34
        ),
        268231,
        4,
    )?;
    let x2042: BytePoly_1 = bigint_sub!(x3, x2040, 1);
    eqz(ctx, &bigint_mul!(x2040, x2042, 2), 8131, 2)?;
    let x2043: BytePoly_32 = bigint_add!(bigint_sub!(x2033, x2003, 32), x6, 32);
    let x2044: BytePoly_32 = bigint_nondet_inv!(ctx, x2043, x6, 32);
    let x2045: BytePoly_64 = bigint_mul!(x2043, x2044, 64);
    let x2046: BytePoly_66 = bigint_nondet_quot!(ctx, x2045, x6, 66);
    let x2047: BytePoly_32 = bigint_nondet_rem!(ctx, x2045, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2046, x6, 98), x2047, 98),
            x2045,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2047, x1, 32), 34, 1)?;
    let x2048: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2039, x2005, 32), x6, 32),
        x2044,
        64
    );
    let x2049: BytePoly_66 = bigint_nondet_quot!(ctx, x2048, x6, 66);
    let x2050: BytePoly_32 = bigint_nondet_rem!(ctx, x2048, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2049, x6, 98), x2050, 98),
            x2048,
            98
        ),
        536459,
        4,
    )?;
    let x2051: BytePoly_64 = bigint_mul!(x2050, x2003, 64);
    let x2052: BytePoly_66 = bigint_nondet_quot!(ctx, x2051, x6, 66);
    let x2053: BytePoly_32 = bigint_nondet_rem!(ctx, x2051, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2052, x6, 98), x2053, 98),
            x2051,
            98
        ),
        536459,
        4,
    )?;
    let x2054: BytePoly_32 = bigint_add!(bigint_sub!(x2005, x2053, 32), x6, 32);
    let x2055: BytePoly_32 = bigint_nondet_quot!(ctx, x2054, x6, 32);
    let x2056: BytePoly_32 = bigint_nondet_rem!(ctx, x2054, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2055, x6, 64), x2056, 64),
            x2054,
            64
        ),
        260103,
        4,
    )?;
    let x2057: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2050, x2050, 64), x2003, 64),
                x6,
                64
            ),
            x2033,
            64
        ),
        x6,
        64
    );
    let x2058: BytePoly_66 = bigint_nondet_quot!(ctx, x2057, x6, 66);
    let x2059: BytePoly_32 = bigint_nondet_rem!(ctx, x2057, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2058, x6, 98), x2059, 98),
            x2057,
            98
        ),
        536459,
        4,
    )?;
    let x2060: BytePoly_64 = bigint_mul!(x2050, x2059, 64);
    let x2061: BytePoly_66 = bigint_nondet_quot!(ctx, x2060, x6, 66);
    let x2062: BytePoly_32 = bigint_nondet_rem!(ctx, x2060, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2061, x6, 98), x2062, 98),
            x2060,
            98
        ),
        536459,
        4,
    )?;
    let x2063: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2062, x2056, 32), 32), x6, 32);
    let x2064: BytePoly_32 = bigint_nondet_quot!(ctx, x2063, x6, 32);
    let x2065: BytePoly_32 = bigint_nondet_rem!(ctx, x2063, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2064, x6, 64), x2065, 64),
            x2063,
            64
        ),
        260103,
        4,
    )?;
    let x2066: BytePoly_33 = bigint_add!(
        bigint_mul!(x2059, x2040, 33),
        bigint_mul!(x2003, x2042, 33),
        33
    );
    let x2067: BytePoly_33 = bigint_add!(
        bigint_mul!(x2065, x2040, 33),
        bigint_mul!(x2005, x2042, 33),
        33
    );
    let x2068: BytePoly_35 = bigint_nondet_quot!(ctx, x2066, x6, 35);
    let x2069: BytePoly_32 = bigint_nondet_rem!(ctx, x2066, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2068, x6, 67), x2069, 67),
            x2066,
            67
        ),
        284487,
        4,
    )?;
    let x2070: BytePoly_35 = bigint_nondet_quot!(ctx, x2067, x6, 35);
    let x2071: BytePoly_32 = bigint_nondet_rem!(ctx, x2067, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2070, x6, 67), x2071, 67),
            x2067,
            67
        ),
        284487,
        4,
    )?;
    let x2072: BytePoly_64 = bigint_mul!(x2033, x2033, 64);
    let x2073: BytePoly_66 = bigint_nondet_quot!(ctx, x2072, x6, 66);
    let x2074: BytePoly_32 = bigint_nondet_rem!(ctx, x2072, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2073, x6, 98), x2074, 98),
            x2072,
            98
        ),
        536459,
        4,
    )?;
    let x2075: BytePoly_33 = bigint_add!(bigint_mul!(x2074, x0, 33), x5, 33);
    let x2076: BytePoly_35 = bigint_nondet_quot!(ctx, x2075, x6, 35);
    let x2077: BytePoly_32 = bigint_nondet_rem!(ctx, x2075, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2076, x6, 67), x2077, 67),
            x2075,
            67
        ),
        284487,
        4,
    )?;
    let x2078: BytePoly_32 = bigint_add!(x2039, x2039, 32);
    let x2079: BytePoly_32 = bigint_nondet_quot!(ctx, x2078, x6, 32);
    let x2080: BytePoly_32 = bigint_nondet_rem!(ctx, x2078, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2079, x6, 64), x2080, 64),
            x2078,
            64
        ),
        260103,
        4,
    )?;
    let x2081: BytePoly_32 = bigint_nondet_inv!(ctx, x2080, x6, 32);
    let x2082: BytePoly_64 = bigint_mul!(x2080, x2081, 64);
    let x2083: BytePoly_66 = bigint_nondet_quot!(ctx, x2082, x6, 66);
    let x2084: BytePoly_32 = bigint_nondet_rem!(ctx, x2082, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2083, x6, 98), x2084, 98),
            x2082,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2084, x3, 32), 34, 1)?;
    let x2085: BytePoly_64 = bigint_mul!(x2077, x2081, 64);
    let x2086: BytePoly_66 = bigint_nondet_quot!(ctx, x2085, x6, 66);
    let x2087: BytePoly_32 = bigint_nondet_rem!(ctx, x2085, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2086, x6, 98), x2087, 98),
            x2085,
            98
        ),
        536459,
        4,
    )?;
    let x2088: BytePoly_64 = bigint_mul!(x2087, x2033, 64);
    let x2089: BytePoly_66 = bigint_nondet_quot!(ctx, x2088, x6, 66);
    let x2090: BytePoly_32 = bigint_nondet_rem!(ctx, x2088, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2089, x6, 98), x2090, 98),
            x2088,
            98
        ),
        536459,
        4,
    )?;
    let x2091: BytePoly_32 = bigint_add!(bigint_sub!(x2039, x2090, 32), x6, 32);
    let x2092: BytePoly_32 = bigint_nondet_quot!(ctx, x2091, x6, 32);
    let x2093: BytePoly_32 = bigint_nondet_rem!(ctx, x2091, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2092, x6, 64), x2093, 64),
            x2091,
            64
        ),
        260103,
        4,
    )?;
    let x2094: BytePoly_64 = bigint_mul!(x2087, x2087, 64);
    let x2095: BytePoly_66 = bigint_nondet_quot!(ctx, x2094, x6, 66);
    let x2096: BytePoly_32 = bigint_nondet_rem!(ctx, x2094, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2095, x6, 98), x2096, 98),
            x2094,
            98
        ),
        536459,
        4,
    )?;
    let x2097: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2096, x2033, 32), x6, 32),
            x2033,
            32
        ),
        x6,
        32
    );
    let x2098: BytePoly_32 = bigint_nondet_quot!(ctx, x2097, x6, 32);
    let x2099: BytePoly_32 = bigint_nondet_rem!(ctx, x2097, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2098, x6, 64), x2099, 64),
            x2097,
            64
        ),
        260103,
        4,
    )?;
    let x2100: BytePoly_64 = bigint_mul!(x2087, x2099, 64);
    let x2101: BytePoly_66 = bigint_nondet_quot!(ctx, x2100, x6, 66);
    let x2102: BytePoly_32 = bigint_nondet_rem!(ctx, x2100, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2101, x6, 98), x2102, 98),
            x2100,
            98
        ),
        536459,
        4,
    )?;
    let x2103: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2102, x2093, 32), 32), x6, 32);
    let x2104: BytePoly_32 = bigint_nondet_quot!(ctx, x2103, x6, 32);
    let x2105: BytePoly_32 = bigint_nondet_rem!(ctx, x2103, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2104, x6, 64), x2105, 64),
            x2103,
            64
        ),
        260103,
        4,
    )?;
    let x2106: BytePoly_1 = bigint_nondet_rem!(ctx, x2041, x2, 1);
    let x2107: BytePoly_33 = bigint_nondet_quot!(ctx, x2041, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2107, x2, 34), x2106, 34),
            x2041,
            34
        ),
        268231,
        4,
    )?;
    let x2108: BytePoly_1 = bigint_sub!(x3, x2106, 1);
    eqz(ctx, &bigint_mul!(x2106, x2108, 2), 8131, 2)?;
    let x2109: BytePoly_32 = bigint_add!(bigint_sub!(x2099, x2069, 32), x6, 32);
    let x2110: BytePoly_32 = bigint_nondet_inv!(ctx, x2109, x6, 32);
    let x2111: BytePoly_64 = bigint_mul!(x2109, x2110, 64);
    let x2112: BytePoly_66 = bigint_nondet_quot!(ctx, x2111, x6, 66);
    let x2113: BytePoly_32 = bigint_nondet_rem!(ctx, x2111, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2112, x6, 98), x2113, 98),
            x2111,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2113, x1, 32), 34, 1)?;
    let x2114: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2105, x2071, 32), x6, 32),
        x2110,
        64
    );
    let x2115: BytePoly_66 = bigint_nondet_quot!(ctx, x2114, x6, 66);
    let x2116: BytePoly_32 = bigint_nondet_rem!(ctx, x2114, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2115, x6, 98), x2116, 98),
            x2114,
            98
        ),
        536459,
        4,
    )?;
    let x2117: BytePoly_64 = bigint_mul!(x2116, x2069, 64);
    let x2118: BytePoly_66 = bigint_nondet_quot!(ctx, x2117, x6, 66);
    let x2119: BytePoly_32 = bigint_nondet_rem!(ctx, x2117, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2118, x6, 98), x2119, 98),
            x2117,
            98
        ),
        536459,
        4,
    )?;
    let x2120: BytePoly_32 = bigint_add!(bigint_sub!(x2071, x2119, 32), x6, 32);
    let x2121: BytePoly_32 = bigint_nondet_quot!(ctx, x2120, x6, 32);
    let x2122: BytePoly_32 = bigint_nondet_rem!(ctx, x2120, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2121, x6, 64), x2122, 64),
            x2120,
            64
        ),
        260103,
        4,
    )?;
    let x2123: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2116, x2116, 64), x2069, 64),
                x6,
                64
            ),
            x2099,
            64
        ),
        x6,
        64
    );
    let x2124: BytePoly_66 = bigint_nondet_quot!(ctx, x2123, x6, 66);
    let x2125: BytePoly_32 = bigint_nondet_rem!(ctx, x2123, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2124, x6, 98), x2125, 98),
            x2123,
            98
        ),
        536459,
        4,
    )?;
    let x2126: BytePoly_64 = bigint_mul!(x2116, x2125, 64);
    let x2127: BytePoly_66 = bigint_nondet_quot!(ctx, x2126, x6, 66);
    let x2128: BytePoly_32 = bigint_nondet_rem!(ctx, x2126, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2127, x6, 98), x2128, 98),
            x2126,
            98
        ),
        536459,
        4,
    )?;
    let x2129: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2128, x2122, 32), 32), x6, 32);
    let x2130: BytePoly_32 = bigint_nondet_quot!(ctx, x2129, x6, 32);
    let x2131: BytePoly_32 = bigint_nondet_rem!(ctx, x2129, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2130, x6, 64), x2131, 64),
            x2129,
            64
        ),
        260103,
        4,
    )?;
    let x2132: BytePoly_33 = bigint_add!(
        bigint_mul!(x2125, x2106, 33),
        bigint_mul!(x2069, x2108, 33),
        33
    );
    let x2133: BytePoly_33 = bigint_add!(
        bigint_mul!(x2131, x2106, 33),
        bigint_mul!(x2071, x2108, 33),
        33
    );
    let x2134: BytePoly_35 = bigint_nondet_quot!(ctx, x2132, x6, 35);
    let x2135: BytePoly_32 = bigint_nondet_rem!(ctx, x2132, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2134, x6, 67), x2135, 67),
            x2132,
            67
        ),
        284487,
        4,
    )?;
    let x2136: BytePoly_35 = bigint_nondet_quot!(ctx, x2133, x6, 35);
    let x2137: BytePoly_32 = bigint_nondet_rem!(ctx, x2133, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2136, x6, 67), x2137, 67),
            x2133,
            67
        ),
        284487,
        4,
    )?;
    let x2138: BytePoly_64 = bigint_mul!(x2099, x2099, 64);
    let x2139: BytePoly_66 = bigint_nondet_quot!(ctx, x2138, x6, 66);
    let x2140: BytePoly_32 = bigint_nondet_rem!(ctx, x2138, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2139, x6, 98), x2140, 98),
            x2138,
            98
        ),
        536459,
        4,
    )?;
    let x2141: BytePoly_33 = bigint_add!(bigint_mul!(x2140, x0, 33), x5, 33);
    let x2142: BytePoly_35 = bigint_nondet_quot!(ctx, x2141, x6, 35);
    let x2143: BytePoly_32 = bigint_nondet_rem!(ctx, x2141, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2142, x6, 67), x2143, 67),
            x2141,
            67
        ),
        284487,
        4,
    )?;
    let x2144: BytePoly_32 = bigint_add!(x2105, x2105, 32);
    let x2145: BytePoly_32 = bigint_nondet_quot!(ctx, x2144, x6, 32);
    let x2146: BytePoly_32 = bigint_nondet_rem!(ctx, x2144, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2145, x6, 64), x2146, 64),
            x2144,
            64
        ),
        260103,
        4,
    )?;
    let x2147: BytePoly_32 = bigint_nondet_inv!(ctx, x2146, x6, 32);
    let x2148: BytePoly_64 = bigint_mul!(x2146, x2147, 64);
    let x2149: BytePoly_66 = bigint_nondet_quot!(ctx, x2148, x6, 66);
    let x2150: BytePoly_32 = bigint_nondet_rem!(ctx, x2148, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2149, x6, 98), x2150, 98),
            x2148,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2150, x3, 32), 34, 1)?;
    let x2151: BytePoly_64 = bigint_mul!(x2143, x2147, 64);
    let x2152: BytePoly_66 = bigint_nondet_quot!(ctx, x2151, x6, 66);
    let x2153: BytePoly_32 = bigint_nondet_rem!(ctx, x2151, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2152, x6, 98), x2153, 98),
            x2151,
            98
        ),
        536459,
        4,
    )?;
    let x2154: BytePoly_64 = bigint_mul!(x2153, x2099, 64);
    let x2155: BytePoly_66 = bigint_nondet_quot!(ctx, x2154, x6, 66);
    let x2156: BytePoly_32 = bigint_nondet_rem!(ctx, x2154, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2155, x6, 98), x2156, 98),
            x2154,
            98
        ),
        536459,
        4,
    )?;
    let x2157: BytePoly_32 = bigint_add!(bigint_sub!(x2105, x2156, 32), x6, 32);
    let x2158: BytePoly_32 = bigint_nondet_quot!(ctx, x2157, x6, 32);
    let x2159: BytePoly_32 = bigint_nondet_rem!(ctx, x2157, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2158, x6, 64), x2159, 64),
            x2157,
            64
        ),
        260103,
        4,
    )?;
    let x2160: BytePoly_64 = bigint_mul!(x2153, x2153, 64);
    let x2161: BytePoly_66 = bigint_nondet_quot!(ctx, x2160, x6, 66);
    let x2162: BytePoly_32 = bigint_nondet_rem!(ctx, x2160, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2161, x6, 98), x2162, 98),
            x2160,
            98
        ),
        536459,
        4,
    )?;
    let x2163: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2162, x2099, 32), x6, 32),
            x2099,
            32
        ),
        x6,
        32
    );
    let x2164: BytePoly_32 = bigint_nondet_quot!(ctx, x2163, x6, 32);
    let x2165: BytePoly_32 = bigint_nondet_rem!(ctx, x2163, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2164, x6, 64), x2165, 64),
            x2163,
            64
        ),
        260103,
        4,
    )?;
    let x2166: BytePoly_64 = bigint_mul!(x2153, x2165, 64);
    let x2167: BytePoly_66 = bigint_nondet_quot!(ctx, x2166, x6, 66);
    let x2168: BytePoly_32 = bigint_nondet_rem!(ctx, x2166, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2167, x6, 98), x2168, 98),
            x2166,
            98
        ),
        536459,
        4,
    )?;
    let x2169: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2168, x2159, 32), 32), x6, 32);
    let x2170: BytePoly_32 = bigint_nondet_quot!(ctx, x2169, x6, 32);
    let x2171: BytePoly_32 = bigint_nondet_rem!(ctx, x2169, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2170, x6, 64), x2171, 64),
            x2169,
            64
        ),
        260103,
        4,
    )?;
    let x2172: BytePoly_32 = bigint_sub!(x6, x16, 32);
    let x2173: BytePoly_32 = bigint_add!(bigint_sub!(x15, x2135, 32), x6, 32);
    let x2174: BytePoly_32 = bigint_nondet_inv!(ctx, x2173, x6, 32);
    let x2175: BytePoly_64 = bigint_mul!(x2173, x2174, 64);
    let x2176: BytePoly_66 = bigint_nondet_quot!(ctx, x2175, x6, 66);
    let x2177: BytePoly_32 = bigint_nondet_rem!(ctx, x2175, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2176, x6, 98), x2177, 98),
            x2175,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2177, x1, 32), 34, 1)?;
    let x2178: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2172, x2137, 32), x6, 32),
        x2174,
        64
    );
    let x2179: BytePoly_66 = bigint_nondet_quot!(ctx, x2178, x6, 66);
    let x2180: BytePoly_32 = bigint_nondet_rem!(ctx, x2178, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2179, x6, 98), x2180, 98),
            x2178,
            98
        ),
        536459,
        4,
    )?;
    let x2181: BytePoly_64 = bigint_mul!(x2180, x2135, 64);
    let x2182: BytePoly_66 = bigint_nondet_quot!(ctx, x2181, x6, 66);
    let x2183: BytePoly_32 = bigint_nondet_rem!(ctx, x2181, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2182, x6, 98), x2183, 98),
            x2181,
            98
        ),
        536459,
        4,
    )?;
    let x2184: BytePoly_32 = bigint_add!(bigint_sub!(x2137, x2183, 32), x6, 32);
    let x2185: BytePoly_32 = bigint_nondet_quot!(ctx, x2184, x6, 32);
    let x2186: BytePoly_32 = bigint_nondet_rem!(ctx, x2184, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2185, x6, 64), x2186, 64),
            x2184,
            64
        ),
        260103,
        4,
    )?;
    let x2187: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2180, x2180, 64), x2135, 64),
                x6,
                64
            ),
            x15,
            64
        ),
        x6,
        64
    );
    let x2188: BytePoly_66 = bigint_nondet_quot!(ctx, x2187, x6, 66);
    let x2189: BytePoly_32 = bigint_nondet_rem!(ctx, x2187, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2188, x6, 98), x2189, 98),
            x2187,
            98
        ),
        536459,
        4,
    )?;
    let x2190: BytePoly_64 = bigint_mul!(x2180, x2189, 64);
    let x2191: BytePoly_66 = bigint_nondet_quot!(ctx, x2190, x6, 66);
    let x2192: BytePoly_32 = bigint_nondet_rem!(ctx, x2190, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2191, x6, 98), x2192, 98),
            x2190,
            98
        ),
        536459,
        4,
    )?;
    let x2193: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2192, x2186, 32), 32), x6, 32);
    let x2194: BytePoly_32 = bigint_nondet_quot!(ctx, x2193, x6, 32);
    let x2195: BytePoly_32 = bigint_nondet_rem!(ctx, x2193, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2194, x6, 64), x2195, 64),
            x2193,
            64
        ),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2189, x10, 32), 34, 1)?;
    eqz(
        ctx,
        &bigint_sub!(x2195, bigint_sub!(x6, x11, 32), 32),
        34,
        1,
    )?;
    let x2196: BytePoly_33 = bigint_nondet_inv!(ctx, x14, x9, 33);
    let x2197: BytePoly_66 = bigint_mul!(x14, x2196, 66);
    let x2198: BytePoly_68 = bigint_nondet_quot!(ctx, x2197, x9, 68);
    let x2199: BytePoly_33 = bigint_nondet_rem!(ctx, x2197, x9, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2198, x9, 101), x2199, 101),
            x2197,
            101
        ),
        552715,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2199, x3, 33), 34, 1)?;
    let x2200: BytePoly_66 = bigint_mul!(x12, x2196, 66);
    let x2201: BytePoly_68 = bigint_nondet_quot!(ctx, x2200, x9, 68);
    let x2202: BytePoly_33 = bigint_nondet_rem!(ctx, x2200, x9, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2201, x9, 101), x2202, 101),
            x2200,
            101
        ),
        552715,
        4,
    )?;
    let x2203: BytePoly_66 = bigint_mul!(x13, x2196, 66);
    let x2204: BytePoly_68 = bigint_nondet_quot!(ctx, x2203, x9, 68);
    let x2205: BytePoly_33 = bigint_nondet_rem!(ctx, x2203, x9, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2204, x9, 101), x2205, 101),
            x2203,
            101
        ),
        552715,
        4,
    )?;
    let x2206: BytePoly_66 = bigint_nondet_quot!(ctx, x32, x6, 66);
    let x2207: BytePoly_32 = bigint_nondet_rem!(ctx, x32, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2206, x6, 98), x2207, 98), x32, 98),
        536459,
        4,
    )?;
    let x2208: BytePoly_66 = bigint_nondet_quot!(ctx, x35, x6, 66);
    let x2209: BytePoly_32 = bigint_nondet_rem!(ctx, x35, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2208, x6, 98), x2209, 98), x35, 98),
        536459,
        4,
    )?;
    let x2210: BytePoly_64 = bigint_mul!(x15, x2209, 64);
    let x2211: BytePoly_66 = bigint_nondet_quot!(ctx, x2210, x6, 66);
    let x2212: BytePoly_32 = bigint_nondet_rem!(ctx, x2210, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2211, x6, 98), x2212, 98),
            x2210,
            98
        ),
        536459,
        4,
    )?;
    let x2213: BytePoly_66 = bigint_nondet_quot!(ctx, x41, x6, 66);
    let x2214: BytePoly_32 = bigint_nondet_rem!(ctx, x41, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2213, x6, 98), x2214, 98), x41, 98),
        536459,
        4,
    )?;
    let x2215: BytePoly_32 = bigint_add!(bigint_add!(x2212, x2214, 32), x4, 32);
    let x2216: BytePoly_32 = bigint_nondet_quot!(ctx, x2215, x6, 32);
    let x2217: BytePoly_32 = bigint_nondet_rem!(ctx, x2215, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2216, x6, 64), x2217, 64),
            x2215,
            64
        ),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2207, x2217, 32), 34, 1)?;
    let x2218: BytePoly_1 = bigint_nondet_rem!(ctx, x2202, x2, 1);
    let x2219: BytePoly_33 = bigint_nondet_quot!(ctx, x2202, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2219, x2, 34), x2218, 34),
            x2202,
            34
        ),
        268231,
        4,
    )?;
    let x2220: BytePoly_1 = bigint_sub!(x3, x2218, 1);
    eqz(ctx, &bigint_mul!(x2218, x2220, 2), 8131, 2)?;
    let x2221: BytePoly_32 = bigint_add!(bigint_sub!(x7, x15, 32), x6, 32);
    let x2222: BytePoly_32 = bigint_nondet_inv!(ctx, x2221, x6, 32);
    let x2223: BytePoly_64 = bigint_mul!(x2221, x2222, 64);
    let x2224: BytePoly_66 = bigint_nondet_quot!(ctx, x2223, x6, 66);
    let x2225: BytePoly_32 = bigint_nondet_rem!(ctx, x2223, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2224, x6, 98), x2225, 98),
            x2223,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2225, x1, 32), 34, 1)?;
    let x2226: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x8, x16, 32), x6, 32), x2222, 64);
    let x2227: BytePoly_66 = bigint_nondet_quot!(ctx, x2226, x6, 66);
    let x2228: BytePoly_32 = bigint_nondet_rem!(ctx, x2226, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2227, x6, 98), x2228, 98),
            x2226,
            98
        ),
        536459,
        4,
    )?;
    let x2229: BytePoly_64 = bigint_mul!(x2228, x15, 64);
    let x2230: BytePoly_66 = bigint_nondet_quot!(ctx, x2229, x6, 66);
    let x2231: BytePoly_32 = bigint_nondet_rem!(ctx, x2229, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2230, x6, 98), x2231, 98),
            x2229,
            98
        ),
        536459,
        4,
    )?;
    let x2232: BytePoly_32 = bigint_add!(bigint_sub!(x16, x2231, 32), x6, 32);
    let x2233: BytePoly_32 = bigint_nondet_quot!(ctx, x2232, x6, 32);
    let x2234: BytePoly_32 = bigint_nondet_rem!(ctx, x2232, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2233, x6, 64), x2234, 64),
            x2232,
            64
        ),
        260103,
        4,
    )?;
    let x2235: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2228, x2228, 64), x15, 64), x6, 64),
            x7,
            64
        ),
        x6,
        64
    );
    let x2236: BytePoly_66 = bigint_nondet_quot!(ctx, x2235, x6, 66);
    let x2237: BytePoly_32 = bigint_nondet_rem!(ctx, x2235, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2236, x6, 98), x2237, 98),
            x2235,
            98
        ),
        536459,
        4,
    )?;
    let x2238: BytePoly_64 = bigint_mul!(x2228, x2237, 64);
    let x2239: BytePoly_66 = bigint_nondet_quot!(ctx, x2238, x6, 66);
    let x2240: BytePoly_32 = bigint_nondet_rem!(ctx, x2238, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2239, x6, 98), x2240, 98),
            x2238,
            98
        ),
        536459,
        4,
    )?;
    let x2241: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2240, x2234, 32), 32), x6, 32);
    let x2242: BytePoly_32 = bigint_nondet_quot!(ctx, x2241, x6, 32);
    let x2243: BytePoly_32 = bigint_nondet_rem!(ctx, x2241, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2242, x6, 64), x2243, 64),
            x2241,
            64
        ),
        260103,
        4,
    )?;
    let x2244: BytePoly_33 = bigint_add!(
        bigint_mul!(x2237, x2218, 33),
        bigint_mul!(x15, x2220, 33),
        33
    );
    let x2245: BytePoly_33 = bigint_add!(
        bigint_mul!(x2243, x2218, 33),
        bigint_mul!(x16, x2220, 33),
        33
    );
    let x2246: BytePoly_35 = bigint_nondet_quot!(ctx, x2244, x6, 35);
    let x2247: BytePoly_32 = bigint_nondet_rem!(ctx, x2244, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2246, x6, 67), x2247, 67),
            x2244,
            67
        ),
        284487,
        4,
    )?;
    let x2248: BytePoly_35 = bigint_nondet_quot!(ctx, x2245, x6, 35);
    let x2249: BytePoly_32 = bigint_nondet_rem!(ctx, x2245, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2248, x6, 67), x2249, 67),
            x2245,
            67
        ),
        284487,
        4,
    )?;
    let x2250: BytePoly_64 = bigint_mul!(x7, x7, 64);
    let x2251: BytePoly_66 = bigint_nondet_quot!(ctx, x2250, x6, 66);
    let x2252: BytePoly_32 = bigint_nondet_rem!(ctx, x2250, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2251, x6, 98), x2252, 98),
            x2250,
            98
        ),
        536459,
        4,
    )?;
    let x2253: BytePoly_33 = bigint_add!(bigint_mul!(x2252, x0, 33), x5, 33);
    let x2254: BytePoly_35 = bigint_nondet_quot!(ctx, x2253, x6, 35);
    let x2255: BytePoly_32 = bigint_nondet_rem!(ctx, x2253, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2254, x6, 67), x2255, 67),
            x2253,
            67
        ),
        284487,
        4,
    )?;
    let x2256: BytePoly_32 = bigint_add!(x8, x8, 32);
    let x2257: BytePoly_32 = bigint_nondet_quot!(ctx, x2256, x6, 32);
    let x2258: BytePoly_32 = bigint_nondet_rem!(ctx, x2256, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2257, x6, 64), x2258, 64),
            x2256,
            64
        ),
        260103,
        4,
    )?;
    let x2259: BytePoly_32 = bigint_nondet_inv!(ctx, x2258, x6, 32);
    let x2260: BytePoly_64 = bigint_mul!(x2258, x2259, 64);
    let x2261: BytePoly_66 = bigint_nondet_quot!(ctx, x2260, x6, 66);
    let x2262: BytePoly_32 = bigint_nondet_rem!(ctx, x2260, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2261, x6, 98), x2262, 98),
            x2260,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2262, x3, 32), 34, 1)?;
    let x2263: BytePoly_64 = bigint_mul!(x2255, x2259, 64);
    let x2264: BytePoly_66 = bigint_nondet_quot!(ctx, x2263, x6, 66);
    let x2265: BytePoly_32 = bigint_nondet_rem!(ctx, x2263, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2264, x6, 98), x2265, 98),
            x2263,
            98
        ),
        536459,
        4,
    )?;
    let x2266: BytePoly_64 = bigint_mul!(x2265, x7, 64);
    let x2267: BytePoly_66 = bigint_nondet_quot!(ctx, x2266, x6, 66);
    let x2268: BytePoly_32 = bigint_nondet_rem!(ctx, x2266, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2267, x6, 98), x2268, 98),
            x2266,
            98
        ),
        536459,
        4,
    )?;
    let x2269: BytePoly_32 = bigint_add!(bigint_sub!(x8, x2268, 32), x6, 32);
    let x2270: BytePoly_32 = bigint_nondet_quot!(ctx, x2269, x6, 32);
    let x2271: BytePoly_32 = bigint_nondet_rem!(ctx, x2269, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2270, x6, 64), x2271, 64),
            x2269,
            64
        ),
        260103,
        4,
    )?;
    let x2272: BytePoly_64 = bigint_mul!(x2265, x2265, 64);
    let x2273: BytePoly_66 = bigint_nondet_quot!(ctx, x2272, x6, 66);
    let x2274: BytePoly_32 = bigint_nondet_rem!(ctx, x2272, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2273, x6, 98), x2274, 98),
            x2272,
            98
        ),
        536459,
        4,
    )?;
    let x2275: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2274, x7, 32), x6, 32), x7, 32),
        x6,
        32
    );
    let x2276: BytePoly_32 = bigint_nondet_quot!(ctx, x2275, x6, 32);
    let x2277: BytePoly_32 = bigint_nondet_rem!(ctx, x2275, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2276, x6, 64), x2277, 64),
            x2275,
            64
        ),
        260103,
        4,
    )?;
    let x2278: BytePoly_64 = bigint_mul!(x2265, x2277, 64);
    let x2279: BytePoly_66 = bigint_nondet_quot!(ctx, x2278, x6, 66);
    let x2280: BytePoly_32 = bigint_nondet_rem!(ctx, x2278, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2279, x6, 98), x2280, 98),
            x2278,
            98
        ),
        536459,
        4,
    )?;
    let x2281: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2280, x2271, 32), 32), x6, 32);
    let x2282: BytePoly_32 = bigint_nondet_quot!(ctx, x2281, x6, 32);
    let x2283: BytePoly_32 = bigint_nondet_rem!(ctx, x2281, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2282, x6, 64), x2283, 64),
            x2281,
            64
        ),
        260103,
        4,
    )?;
    let x2284: BytePoly_1 = bigint_nondet_rem!(ctx, x2219, x2, 1);
    let x2285: BytePoly_33 = bigint_nondet_quot!(ctx, x2219, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2285, x2, 34), x2284, 34),
            x2219,
            34
        ),
        268231,
        4,
    )?;
    let x2286: BytePoly_1 = bigint_sub!(x3, x2284, 1);
    eqz(ctx, &bigint_mul!(x2284, x2286, 2), 8131, 2)?;
    let x2287: BytePoly_32 = bigint_add!(bigint_sub!(x2277, x2247, 32), x6, 32);
    let x2288: BytePoly_32 = bigint_nondet_inv!(ctx, x2287, x6, 32);
    let x2289: BytePoly_64 = bigint_mul!(x2287, x2288, 64);
    let x2290: BytePoly_66 = bigint_nondet_quot!(ctx, x2289, x6, 66);
    let x2291: BytePoly_32 = bigint_nondet_rem!(ctx, x2289, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2290, x6, 98), x2291, 98),
            x2289,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2291, x1, 32), 34, 1)?;
    let x2292: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2283, x2249, 32), x6, 32),
        x2288,
        64
    );
    let x2293: BytePoly_66 = bigint_nondet_quot!(ctx, x2292, x6, 66);
    let x2294: BytePoly_32 = bigint_nondet_rem!(ctx, x2292, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2293, x6, 98), x2294, 98),
            x2292,
            98
        ),
        536459,
        4,
    )?;
    let x2295: BytePoly_64 = bigint_mul!(x2294, x2247, 64);
    let x2296: BytePoly_66 = bigint_nondet_quot!(ctx, x2295, x6, 66);
    let x2297: BytePoly_32 = bigint_nondet_rem!(ctx, x2295, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2296, x6, 98), x2297, 98),
            x2295,
            98
        ),
        536459,
        4,
    )?;
    let x2298: BytePoly_32 = bigint_add!(bigint_sub!(x2249, x2297, 32), x6, 32);
    let x2299: BytePoly_32 = bigint_nondet_quot!(ctx, x2298, x6, 32);
    let x2300: BytePoly_32 = bigint_nondet_rem!(ctx, x2298, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2299, x6, 64), x2300, 64),
            x2298,
            64
        ),
        260103,
        4,
    )?;
    let x2301: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2294, x2294, 64), x2247, 64),
                x6,
                64
            ),
            x2277,
            64
        ),
        x6,
        64
    );
    let x2302: BytePoly_66 = bigint_nondet_quot!(ctx, x2301, x6, 66);
    let x2303: BytePoly_32 = bigint_nondet_rem!(ctx, x2301, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2302, x6, 98), x2303, 98),
            x2301,
            98
        ),
        536459,
        4,
    )?;
    let x2304: BytePoly_64 = bigint_mul!(x2294, x2303, 64);
    let x2305: BytePoly_66 = bigint_nondet_quot!(ctx, x2304, x6, 66);
    let x2306: BytePoly_32 = bigint_nondet_rem!(ctx, x2304, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2305, x6, 98), x2306, 98),
            x2304,
            98
        ),
        536459,
        4,
    )?;
    let x2307: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2306, x2300, 32), 32), x6, 32);
    let x2308: BytePoly_32 = bigint_nondet_quot!(ctx, x2307, x6, 32);
    let x2309: BytePoly_32 = bigint_nondet_rem!(ctx, x2307, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2308, x6, 64), x2309, 64),
            x2307,
            64
        ),
        260103,
        4,
    )?;
    let x2310: BytePoly_33 = bigint_add!(
        bigint_mul!(x2303, x2284, 33),
        bigint_mul!(x2247, x2286, 33),
        33
    );
    let x2311: BytePoly_33 = bigint_add!(
        bigint_mul!(x2309, x2284, 33),
        bigint_mul!(x2249, x2286, 33),
        33
    );
    let x2312: BytePoly_35 = bigint_nondet_quot!(ctx, x2310, x6, 35);
    let x2313: BytePoly_32 = bigint_nondet_rem!(ctx, x2310, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2312, x6, 67), x2313, 67),
            x2310,
            67
        ),
        284487,
        4,
    )?;
    let x2314: BytePoly_35 = bigint_nondet_quot!(ctx, x2311, x6, 35);
    let x2315: BytePoly_32 = bigint_nondet_rem!(ctx, x2311, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2314, x6, 67), x2315, 67),
            x2311,
            67
        ),
        284487,
        4,
    )?;
    let x2316: BytePoly_64 = bigint_mul!(x2277, x2277, 64);
    let x2317: BytePoly_66 = bigint_nondet_quot!(ctx, x2316, x6, 66);
    let x2318: BytePoly_32 = bigint_nondet_rem!(ctx, x2316, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2317, x6, 98), x2318, 98),
            x2316,
            98
        ),
        536459,
        4,
    )?;
    let x2319: BytePoly_33 = bigint_add!(bigint_mul!(x2318, x0, 33), x5, 33);
    let x2320: BytePoly_35 = bigint_nondet_quot!(ctx, x2319, x6, 35);
    let x2321: BytePoly_32 = bigint_nondet_rem!(ctx, x2319, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2320, x6, 67), x2321, 67),
            x2319,
            67
        ),
        284487,
        4,
    )?;
    let x2322: BytePoly_32 = bigint_add!(x2283, x2283, 32);
    let x2323: BytePoly_32 = bigint_nondet_quot!(ctx, x2322, x6, 32);
    let x2324: BytePoly_32 = bigint_nondet_rem!(ctx, x2322, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2323, x6, 64), x2324, 64),
            x2322,
            64
        ),
        260103,
        4,
    )?;
    let x2325: BytePoly_32 = bigint_nondet_inv!(ctx, x2324, x6, 32);
    let x2326: BytePoly_64 = bigint_mul!(x2324, x2325, 64);
    let x2327: BytePoly_66 = bigint_nondet_quot!(ctx, x2326, x6, 66);
    let x2328: BytePoly_32 = bigint_nondet_rem!(ctx, x2326, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2327, x6, 98), x2328, 98),
            x2326,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2328, x3, 32), 34, 1)?;
    let x2329: BytePoly_64 = bigint_mul!(x2321, x2325, 64);
    let x2330: BytePoly_66 = bigint_nondet_quot!(ctx, x2329, x6, 66);
    let x2331: BytePoly_32 = bigint_nondet_rem!(ctx, x2329, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2330, x6, 98), x2331, 98),
            x2329,
            98
        ),
        536459,
        4,
    )?;
    let x2332: BytePoly_64 = bigint_mul!(x2331, x2277, 64);
    let x2333: BytePoly_66 = bigint_nondet_quot!(ctx, x2332, x6, 66);
    let x2334: BytePoly_32 = bigint_nondet_rem!(ctx, x2332, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2333, x6, 98), x2334, 98),
            x2332,
            98
        ),
        536459,
        4,
    )?;
    let x2335: BytePoly_32 = bigint_add!(bigint_sub!(x2283, x2334, 32), x6, 32);
    let x2336: BytePoly_32 = bigint_nondet_quot!(ctx, x2335, x6, 32);
    let x2337: BytePoly_32 = bigint_nondet_rem!(ctx, x2335, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2336, x6, 64), x2337, 64),
            x2335,
            64
        ),
        260103,
        4,
    )?;
    let x2338: BytePoly_64 = bigint_mul!(x2331, x2331, 64);
    let x2339: BytePoly_66 = bigint_nondet_quot!(ctx, x2338, x6, 66);
    let x2340: BytePoly_32 = bigint_nondet_rem!(ctx, x2338, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2339, x6, 98), x2340, 98),
            x2338,
            98
        ),
        536459,
        4,
    )?;
    let x2341: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2340, x2277, 32), x6, 32),
            x2277,
            32
        ),
        x6,
        32
    );
    let x2342: BytePoly_32 = bigint_nondet_quot!(ctx, x2341, x6, 32);
    let x2343: BytePoly_32 = bigint_nondet_rem!(ctx, x2341, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2342, x6, 64), x2343, 64),
            x2341,
            64
        ),
        260103,
        4,
    )?;
    let x2344: BytePoly_64 = bigint_mul!(x2331, x2343, 64);
    let x2345: BytePoly_66 = bigint_nondet_quot!(ctx, x2344, x6, 66);
    let x2346: BytePoly_32 = bigint_nondet_rem!(ctx, x2344, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2345, x6, 98), x2346, 98),
            x2344,
            98
        ),
        536459,
        4,
    )?;
    let x2347: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2346, x2337, 32), 32), x6, 32);
    let x2348: BytePoly_32 = bigint_nondet_quot!(ctx, x2347, x6, 32);
    let x2349: BytePoly_32 = bigint_nondet_rem!(ctx, x2347, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2348, x6, 64), x2349, 64),
            x2347,
            64
        ),
        260103,
        4,
    )?;
    let x2350: BytePoly_1 = bigint_nondet_rem!(ctx, x2285, x2, 1);
    let x2351: BytePoly_33 = bigint_nondet_quot!(ctx, x2285, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2351, x2, 34), x2350, 34),
            x2285,
            34
        ),
        268231,
        4,
    )?;
    let x2352: BytePoly_1 = bigint_sub!(x3, x2350, 1);
    eqz(ctx, &bigint_mul!(x2350, x2352, 2), 8131, 2)?;
    let x2353: BytePoly_32 = bigint_add!(bigint_sub!(x2343, x2313, 32), x6, 32);
    let x2354: BytePoly_32 = bigint_nondet_inv!(ctx, x2353, x6, 32);
    let x2355: BytePoly_64 = bigint_mul!(x2353, x2354, 64);
    let x2356: BytePoly_66 = bigint_nondet_quot!(ctx, x2355, x6, 66);
    let x2357: BytePoly_32 = bigint_nondet_rem!(ctx, x2355, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2356, x6, 98), x2357, 98),
            x2355,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2357, x1, 32), 34, 1)?;
    let x2358: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2349, x2315, 32), x6, 32),
        x2354,
        64
    );
    let x2359: BytePoly_66 = bigint_nondet_quot!(ctx, x2358, x6, 66);
    let x2360: BytePoly_32 = bigint_nondet_rem!(ctx, x2358, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2359, x6, 98), x2360, 98),
            x2358,
            98
        ),
        536459,
        4,
    )?;
    let x2361: BytePoly_64 = bigint_mul!(x2360, x2313, 64);
    let x2362: BytePoly_66 = bigint_nondet_quot!(ctx, x2361, x6, 66);
    let x2363: BytePoly_32 = bigint_nondet_rem!(ctx, x2361, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2362, x6, 98), x2363, 98),
            x2361,
            98
        ),
        536459,
        4,
    )?;
    let x2364: BytePoly_32 = bigint_add!(bigint_sub!(x2315, x2363, 32), x6, 32);
    let x2365: BytePoly_32 = bigint_nondet_quot!(ctx, x2364, x6, 32);
    let x2366: BytePoly_32 = bigint_nondet_rem!(ctx, x2364, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2365, x6, 64), x2366, 64),
            x2364,
            64
        ),
        260103,
        4,
    )?;
    let x2367: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2360, x2360, 64), x2313, 64),
                x6,
                64
            ),
            x2343,
            64
        ),
        x6,
        64
    );
    let x2368: BytePoly_66 = bigint_nondet_quot!(ctx, x2367, x6, 66);
    let x2369: BytePoly_32 = bigint_nondet_rem!(ctx, x2367, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2368, x6, 98), x2369, 98),
            x2367,
            98
        ),
        536459,
        4,
    )?;
    let x2370: BytePoly_64 = bigint_mul!(x2360, x2369, 64);
    let x2371: BytePoly_66 = bigint_nondet_quot!(ctx, x2370, x6, 66);
    let x2372: BytePoly_32 = bigint_nondet_rem!(ctx, x2370, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2371, x6, 98), x2372, 98),
            x2370,
            98
        ),
        536459,
        4,
    )?;
    let x2373: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2372, x2366, 32), 32), x6, 32);
    let x2374: BytePoly_32 = bigint_nondet_quot!(ctx, x2373, x6, 32);
    let x2375: BytePoly_32 = bigint_nondet_rem!(ctx, x2373, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2374, x6, 64), x2375, 64),
            x2373,
            64
        ),
        260103,
        4,
    )?;
    let x2376: BytePoly_33 = bigint_add!(
        bigint_mul!(x2369, x2350, 33),
        bigint_mul!(x2313, x2352, 33),
        33
    );
    let x2377: BytePoly_33 = bigint_add!(
        bigint_mul!(x2375, x2350, 33),
        bigint_mul!(x2315, x2352, 33),
        33
    );
    let x2378: BytePoly_35 = bigint_nondet_quot!(ctx, x2376, x6, 35);
    let x2379: BytePoly_32 = bigint_nondet_rem!(ctx, x2376, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2378, x6, 67), x2379, 67),
            x2376,
            67
        ),
        284487,
        4,
    )?;
    let x2380: BytePoly_35 = bigint_nondet_quot!(ctx, x2377, x6, 35);
    let x2381: BytePoly_32 = bigint_nondet_rem!(ctx, x2377, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2380, x6, 67), x2381, 67),
            x2377,
            67
        ),
        284487,
        4,
    )?;
    let x2382: BytePoly_64 = bigint_mul!(x2343, x2343, 64);
    let x2383: BytePoly_66 = bigint_nondet_quot!(ctx, x2382, x6, 66);
    let x2384: BytePoly_32 = bigint_nondet_rem!(ctx, x2382, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2383, x6, 98), x2384, 98),
            x2382,
            98
        ),
        536459,
        4,
    )?;
    let x2385: BytePoly_33 = bigint_add!(bigint_mul!(x2384, x0, 33), x5, 33);
    let x2386: BytePoly_35 = bigint_nondet_quot!(ctx, x2385, x6, 35);
    let x2387: BytePoly_32 = bigint_nondet_rem!(ctx, x2385, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2386, x6, 67), x2387, 67),
            x2385,
            67
        ),
        284487,
        4,
    )?;
    let x2388: BytePoly_32 = bigint_add!(x2349, x2349, 32);
    let x2389: BytePoly_32 = bigint_nondet_quot!(ctx, x2388, x6, 32);
    let x2390: BytePoly_32 = bigint_nondet_rem!(ctx, x2388, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2389, x6, 64), x2390, 64),
            x2388,
            64
        ),
        260103,
        4,
    )?;
    let x2391: BytePoly_32 = bigint_nondet_inv!(ctx, x2390, x6, 32);
    let x2392: BytePoly_64 = bigint_mul!(x2390, x2391, 64);
    let x2393: BytePoly_66 = bigint_nondet_quot!(ctx, x2392, x6, 66);
    let x2394: BytePoly_32 = bigint_nondet_rem!(ctx, x2392, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2393, x6, 98), x2394, 98),
            x2392,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2394, x3, 32), 34, 1)?;
    let x2395: BytePoly_64 = bigint_mul!(x2387, x2391, 64);
    let x2396: BytePoly_66 = bigint_nondet_quot!(ctx, x2395, x6, 66);
    let x2397: BytePoly_32 = bigint_nondet_rem!(ctx, x2395, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2396, x6, 98), x2397, 98),
            x2395,
            98
        ),
        536459,
        4,
    )?;
    let x2398: BytePoly_64 = bigint_mul!(x2397, x2343, 64);
    let x2399: BytePoly_66 = bigint_nondet_quot!(ctx, x2398, x6, 66);
    let x2400: BytePoly_32 = bigint_nondet_rem!(ctx, x2398, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2399, x6, 98), x2400, 98),
            x2398,
            98
        ),
        536459,
        4,
    )?;
    let x2401: BytePoly_32 = bigint_add!(bigint_sub!(x2349, x2400, 32), x6, 32);
    let x2402: BytePoly_32 = bigint_nondet_quot!(ctx, x2401, x6, 32);
    let x2403: BytePoly_32 = bigint_nondet_rem!(ctx, x2401, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2402, x6, 64), x2403, 64),
            x2401,
            64
        ),
        260103,
        4,
    )?;
    let x2404: BytePoly_64 = bigint_mul!(x2397, x2397, 64);
    let x2405: BytePoly_66 = bigint_nondet_quot!(ctx, x2404, x6, 66);
    let x2406: BytePoly_32 = bigint_nondet_rem!(ctx, x2404, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2405, x6, 98), x2406, 98),
            x2404,
            98
        ),
        536459,
        4,
    )?;
    let x2407: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2406, x2343, 32), x6, 32),
            x2343,
            32
        ),
        x6,
        32
    );
    let x2408: BytePoly_32 = bigint_nondet_quot!(ctx, x2407, x6, 32);
    let x2409: BytePoly_32 = bigint_nondet_rem!(ctx, x2407, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2408, x6, 64), x2409, 64),
            x2407,
            64
        ),
        260103,
        4,
    )?;
    let x2410: BytePoly_64 = bigint_mul!(x2397, x2409, 64);
    let x2411: BytePoly_66 = bigint_nondet_quot!(ctx, x2410, x6, 66);
    let x2412: BytePoly_32 = bigint_nondet_rem!(ctx, x2410, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2411, x6, 98), x2412, 98),
            x2410,
            98
        ),
        536459,
        4,
    )?;
    let x2413: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2412, x2403, 32), 32), x6, 32);
    let x2414: BytePoly_32 = bigint_nondet_quot!(ctx, x2413, x6, 32);
    let x2415: BytePoly_32 = bigint_nondet_rem!(ctx, x2413, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2414, x6, 64), x2415, 64),
            x2413,
            64
        ),
        260103,
        4,
    )?;
    let x2416: BytePoly_1 = bigint_nondet_rem!(ctx, x2351, x2, 1);
    let x2417: BytePoly_33 = bigint_nondet_quot!(ctx, x2351, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2417, x2, 34), x2416, 34),
            x2351,
            34
        ),
        268231,
        4,
    )?;
    let x2418: BytePoly_1 = bigint_sub!(x3, x2416, 1);
    eqz(ctx, &bigint_mul!(x2416, x2418, 2), 8131, 2)?;
    let x2419: BytePoly_32 = bigint_add!(bigint_sub!(x2409, x2379, 32), x6, 32);
    let x2420: BytePoly_32 = bigint_nondet_inv!(ctx, x2419, x6, 32);
    let x2421: BytePoly_64 = bigint_mul!(x2419, x2420, 64);
    let x2422: BytePoly_66 = bigint_nondet_quot!(ctx, x2421, x6, 66);
    let x2423: BytePoly_32 = bigint_nondet_rem!(ctx, x2421, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2422, x6, 98), x2423, 98),
            x2421,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2423, x1, 32), 34, 1)?;
    let x2424: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2415, x2381, 32), x6, 32),
        x2420,
        64
    );
    let x2425: BytePoly_66 = bigint_nondet_quot!(ctx, x2424, x6, 66);
    let x2426: BytePoly_32 = bigint_nondet_rem!(ctx, x2424, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2425, x6, 98), x2426, 98),
            x2424,
            98
        ),
        536459,
        4,
    )?;
    let x2427: BytePoly_64 = bigint_mul!(x2426, x2379, 64);
    let x2428: BytePoly_66 = bigint_nondet_quot!(ctx, x2427, x6, 66);
    let x2429: BytePoly_32 = bigint_nondet_rem!(ctx, x2427, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2428, x6, 98), x2429, 98),
            x2427,
            98
        ),
        536459,
        4,
    )?;
    let x2430: BytePoly_32 = bigint_add!(bigint_sub!(x2381, x2429, 32), x6, 32);
    let x2431: BytePoly_32 = bigint_nondet_quot!(ctx, x2430, x6, 32);
    let x2432: BytePoly_32 = bigint_nondet_rem!(ctx, x2430, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2431, x6, 64), x2432, 64),
            x2430,
            64
        ),
        260103,
        4,
    )?;
    let x2433: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2426, x2426, 64), x2379, 64),
                x6,
                64
            ),
            x2409,
            64
        ),
        x6,
        64
    );
    let x2434: BytePoly_66 = bigint_nondet_quot!(ctx, x2433, x6, 66);
    let x2435: BytePoly_32 = bigint_nondet_rem!(ctx, x2433, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2434, x6, 98), x2435, 98),
            x2433,
            98
        ),
        536459,
        4,
    )?;
    let x2436: BytePoly_64 = bigint_mul!(x2426, x2435, 64);
    let x2437: BytePoly_66 = bigint_nondet_quot!(ctx, x2436, x6, 66);
    let x2438: BytePoly_32 = bigint_nondet_rem!(ctx, x2436, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2437, x6, 98), x2438, 98),
            x2436,
            98
        ),
        536459,
        4,
    )?;
    let x2439: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2438, x2432, 32), 32), x6, 32);
    let x2440: BytePoly_32 = bigint_nondet_quot!(ctx, x2439, x6, 32);
    let x2441: BytePoly_32 = bigint_nondet_rem!(ctx, x2439, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2440, x6, 64), x2441, 64),
            x2439,
            64
        ),
        260103,
        4,
    )?;
    let x2442: BytePoly_33 = bigint_add!(
        bigint_mul!(x2435, x2416, 33),
        bigint_mul!(x2379, x2418, 33),
        33
    );
    let x2443: BytePoly_33 = bigint_add!(
        bigint_mul!(x2441, x2416, 33),
        bigint_mul!(x2381, x2418, 33),
        33
    );
    let x2444: BytePoly_35 = bigint_nondet_quot!(ctx, x2442, x6, 35);
    let x2445: BytePoly_32 = bigint_nondet_rem!(ctx, x2442, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2444, x6, 67), x2445, 67),
            x2442,
            67
        ),
        284487,
        4,
    )?;
    let x2446: BytePoly_35 = bigint_nondet_quot!(ctx, x2443, x6, 35);
    let x2447: BytePoly_32 = bigint_nondet_rem!(ctx, x2443, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2446, x6, 67), x2447, 67),
            x2443,
            67
        ),
        284487,
        4,
    )?;
    let x2448: BytePoly_64 = bigint_mul!(x2409, x2409, 64);
    let x2449: BytePoly_66 = bigint_nondet_quot!(ctx, x2448, x6, 66);
    let x2450: BytePoly_32 = bigint_nondet_rem!(ctx, x2448, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2449, x6, 98), x2450, 98),
            x2448,
            98
        ),
        536459,
        4,
    )?;
    let x2451: BytePoly_33 = bigint_add!(bigint_mul!(x2450, x0, 33), x5, 33);
    let x2452: BytePoly_35 = bigint_nondet_quot!(ctx, x2451, x6, 35);
    let x2453: BytePoly_32 = bigint_nondet_rem!(ctx, x2451, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2452, x6, 67), x2453, 67),
            x2451,
            67
        ),
        284487,
        4,
    )?;
    let x2454: BytePoly_32 = bigint_add!(x2415, x2415, 32);
    let x2455: BytePoly_32 = bigint_nondet_quot!(ctx, x2454, x6, 32);
    let x2456: BytePoly_32 = bigint_nondet_rem!(ctx, x2454, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2455, x6, 64), x2456, 64),
            x2454,
            64
        ),
        260103,
        4,
    )?;
    let x2457: BytePoly_32 = bigint_nondet_inv!(ctx, x2456, x6, 32);
    let x2458: BytePoly_64 = bigint_mul!(x2456, x2457, 64);
    let x2459: BytePoly_66 = bigint_nondet_quot!(ctx, x2458, x6, 66);
    let x2460: BytePoly_32 = bigint_nondet_rem!(ctx, x2458, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2459, x6, 98), x2460, 98),
            x2458,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2460, x3, 32), 34, 1)?;
    let x2461: BytePoly_64 = bigint_mul!(x2453, x2457, 64);
    let x2462: BytePoly_66 = bigint_nondet_quot!(ctx, x2461, x6, 66);
    let x2463: BytePoly_32 = bigint_nondet_rem!(ctx, x2461, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2462, x6, 98), x2463, 98),
            x2461,
            98
        ),
        536459,
        4,
    )?;
    let x2464: BytePoly_64 = bigint_mul!(x2463, x2409, 64);
    let x2465: BytePoly_66 = bigint_nondet_quot!(ctx, x2464, x6, 66);
    let x2466: BytePoly_32 = bigint_nondet_rem!(ctx, x2464, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2465, x6, 98), x2466, 98),
            x2464,
            98
        ),
        536459,
        4,
    )?;
    let x2467: BytePoly_32 = bigint_add!(bigint_sub!(x2415, x2466, 32), x6, 32);
    let x2468: BytePoly_32 = bigint_nondet_quot!(ctx, x2467, x6, 32);
    let x2469: BytePoly_32 = bigint_nondet_rem!(ctx, x2467, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2468, x6, 64), x2469, 64),
            x2467,
            64
        ),
        260103,
        4,
    )?;
    let x2470: BytePoly_64 = bigint_mul!(x2463, x2463, 64);
    let x2471: BytePoly_66 = bigint_nondet_quot!(ctx, x2470, x6, 66);
    let x2472: BytePoly_32 = bigint_nondet_rem!(ctx, x2470, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2471, x6, 98), x2472, 98),
            x2470,
            98
        ),
        536459,
        4,
    )?;
    let x2473: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2472, x2409, 32), x6, 32),
            x2409,
            32
        ),
        x6,
        32
    );
    let x2474: BytePoly_32 = bigint_nondet_quot!(ctx, x2473, x6, 32);
    let x2475: BytePoly_32 = bigint_nondet_rem!(ctx, x2473, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2474, x6, 64), x2475, 64),
            x2473,
            64
        ),
        260103,
        4,
    )?;
    let x2476: BytePoly_64 = bigint_mul!(x2463, x2475, 64);
    let x2477: BytePoly_66 = bigint_nondet_quot!(ctx, x2476, x6, 66);
    let x2478: BytePoly_32 = bigint_nondet_rem!(ctx, x2476, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2477, x6, 98), x2478, 98),
            x2476,
            98
        ),
        536459,
        4,
    )?;
    let x2479: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2478, x2469, 32), 32), x6, 32);
    let x2480: BytePoly_32 = bigint_nondet_quot!(ctx, x2479, x6, 32);
    let x2481: BytePoly_32 = bigint_nondet_rem!(ctx, x2479, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2480, x6, 64), x2481, 64),
            x2479,
            64
        ),
        260103,
        4,
    )?;
    let x2482: BytePoly_1 = bigint_nondet_rem!(ctx, x2417, x2, 1);
    let x2483: BytePoly_33 = bigint_nondet_quot!(ctx, x2417, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2483, x2, 34), x2482, 34),
            x2417,
            34
        ),
        268231,
        4,
    )?;
    let x2484: BytePoly_1 = bigint_sub!(x3, x2482, 1);
    eqz(ctx, &bigint_mul!(x2482, x2484, 2), 8131, 2)?;
    let x2485: BytePoly_32 = bigint_add!(bigint_sub!(x2475, x2445, 32), x6, 32);
    let x2486: BytePoly_32 = bigint_nondet_inv!(ctx, x2485, x6, 32);
    let x2487: BytePoly_64 = bigint_mul!(x2485, x2486, 64);
    let x2488: BytePoly_66 = bigint_nondet_quot!(ctx, x2487, x6, 66);
    let x2489: BytePoly_32 = bigint_nondet_rem!(ctx, x2487, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2488, x6, 98), x2489, 98),
            x2487,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2489, x1, 32), 34, 1)?;
    let x2490: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2481, x2447, 32), x6, 32),
        x2486,
        64
    );
    let x2491: BytePoly_66 = bigint_nondet_quot!(ctx, x2490, x6, 66);
    let x2492: BytePoly_32 = bigint_nondet_rem!(ctx, x2490, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2491, x6, 98), x2492, 98),
            x2490,
            98
        ),
        536459,
        4,
    )?;
    let x2493: BytePoly_64 = bigint_mul!(x2492, x2445, 64);
    let x2494: BytePoly_66 = bigint_nondet_quot!(ctx, x2493, x6, 66);
    let x2495: BytePoly_32 = bigint_nondet_rem!(ctx, x2493, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2494, x6, 98), x2495, 98),
            x2493,
            98
        ),
        536459,
        4,
    )?;
    let x2496: BytePoly_32 = bigint_add!(bigint_sub!(x2447, x2495, 32), x6, 32);
    let x2497: BytePoly_32 = bigint_nondet_quot!(ctx, x2496, x6, 32);
    let x2498: BytePoly_32 = bigint_nondet_rem!(ctx, x2496, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2497, x6, 64), x2498, 64),
            x2496,
            64
        ),
        260103,
        4,
    )?;
    let x2499: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2492, x2492, 64), x2445, 64),
                x6,
                64
            ),
            x2475,
            64
        ),
        x6,
        64
    );
    let x2500: BytePoly_66 = bigint_nondet_quot!(ctx, x2499, x6, 66);
    let x2501: BytePoly_32 = bigint_nondet_rem!(ctx, x2499, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2500, x6, 98), x2501, 98),
            x2499,
            98
        ),
        536459,
        4,
    )?;
    let x2502: BytePoly_64 = bigint_mul!(x2492, x2501, 64);
    let x2503: BytePoly_66 = bigint_nondet_quot!(ctx, x2502, x6, 66);
    let x2504: BytePoly_32 = bigint_nondet_rem!(ctx, x2502, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2503, x6, 98), x2504, 98),
            x2502,
            98
        ),
        536459,
        4,
    )?;
    let x2505: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2504, x2498, 32), 32), x6, 32);
    let x2506: BytePoly_32 = bigint_nondet_quot!(ctx, x2505, x6, 32);
    let x2507: BytePoly_32 = bigint_nondet_rem!(ctx, x2505, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2506, x6, 64), x2507, 64),
            x2505,
            64
        ),
        260103,
        4,
    )?;
    let x2508: BytePoly_33 = bigint_add!(
        bigint_mul!(x2501, x2482, 33),
        bigint_mul!(x2445, x2484, 33),
        33
    );
    let x2509: BytePoly_33 = bigint_add!(
        bigint_mul!(x2507, x2482, 33),
        bigint_mul!(x2447, x2484, 33),
        33
    );
    let x2510: BytePoly_35 = bigint_nondet_quot!(ctx, x2508, x6, 35);
    let x2511: BytePoly_32 = bigint_nondet_rem!(ctx, x2508, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2510, x6, 67), x2511, 67),
            x2508,
            67
        ),
        284487,
        4,
    )?;
    let x2512: BytePoly_35 = bigint_nondet_quot!(ctx, x2509, x6, 35);
    let x2513: BytePoly_32 = bigint_nondet_rem!(ctx, x2509, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2512, x6, 67), x2513, 67),
            x2509,
            67
        ),
        284487,
        4,
    )?;
    let x2514: BytePoly_64 = bigint_mul!(x2475, x2475, 64);
    let x2515: BytePoly_66 = bigint_nondet_quot!(ctx, x2514, x6, 66);
    let x2516: BytePoly_32 = bigint_nondet_rem!(ctx, x2514, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2515, x6, 98), x2516, 98),
            x2514,
            98
        ),
        536459,
        4,
    )?;
    let x2517: BytePoly_33 = bigint_add!(bigint_mul!(x2516, x0, 33), x5, 33);
    let x2518: BytePoly_35 = bigint_nondet_quot!(ctx, x2517, x6, 35);
    let x2519: BytePoly_32 = bigint_nondet_rem!(ctx, x2517, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2518, x6, 67), x2519, 67),
            x2517,
            67
        ),
        284487,
        4,
    )?;
    let x2520: BytePoly_32 = bigint_add!(x2481, x2481, 32);
    let x2521: BytePoly_32 = bigint_nondet_quot!(ctx, x2520, x6, 32);
    let x2522: BytePoly_32 = bigint_nondet_rem!(ctx, x2520, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2521, x6, 64), x2522, 64),
            x2520,
            64
        ),
        260103,
        4,
    )?;
    let x2523: BytePoly_32 = bigint_nondet_inv!(ctx, x2522, x6, 32);
    let x2524: BytePoly_64 = bigint_mul!(x2522, x2523, 64);
    let x2525: BytePoly_66 = bigint_nondet_quot!(ctx, x2524, x6, 66);
    let x2526: BytePoly_32 = bigint_nondet_rem!(ctx, x2524, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2525, x6, 98), x2526, 98),
            x2524,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2526, x3, 32), 34, 1)?;
    let x2527: BytePoly_64 = bigint_mul!(x2519, x2523, 64);
    let x2528: BytePoly_66 = bigint_nondet_quot!(ctx, x2527, x6, 66);
    let x2529: BytePoly_32 = bigint_nondet_rem!(ctx, x2527, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2528, x6, 98), x2529, 98),
            x2527,
            98
        ),
        536459,
        4,
    )?;
    let x2530: BytePoly_64 = bigint_mul!(x2529, x2475, 64);
    let x2531: BytePoly_66 = bigint_nondet_quot!(ctx, x2530, x6, 66);
    let x2532: BytePoly_32 = bigint_nondet_rem!(ctx, x2530, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2531, x6, 98), x2532, 98),
            x2530,
            98
        ),
        536459,
        4,
    )?;
    let x2533: BytePoly_32 = bigint_add!(bigint_sub!(x2481, x2532, 32), x6, 32);
    let x2534: BytePoly_32 = bigint_nondet_quot!(ctx, x2533, x6, 32);
    let x2535: BytePoly_32 = bigint_nondet_rem!(ctx, x2533, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2534, x6, 64), x2535, 64),
            x2533,
            64
        ),
        260103,
        4,
    )?;
    let x2536: BytePoly_64 = bigint_mul!(x2529, x2529, 64);
    let x2537: BytePoly_66 = bigint_nondet_quot!(ctx, x2536, x6, 66);
    let x2538: BytePoly_32 = bigint_nondet_rem!(ctx, x2536, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2537, x6, 98), x2538, 98),
            x2536,
            98
        ),
        536459,
        4,
    )?;
    let x2539: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2538, x2475, 32), x6, 32),
            x2475,
            32
        ),
        x6,
        32
    );
    let x2540: BytePoly_32 = bigint_nondet_quot!(ctx, x2539, x6, 32);
    let x2541: BytePoly_32 = bigint_nondet_rem!(ctx, x2539, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2540, x6, 64), x2541, 64),
            x2539,
            64
        ),
        260103,
        4,
    )?;
    let x2542: BytePoly_64 = bigint_mul!(x2529, x2541, 64);
    let x2543: BytePoly_66 = bigint_nondet_quot!(ctx, x2542, x6, 66);
    let x2544: BytePoly_32 = bigint_nondet_rem!(ctx, x2542, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2543, x6, 98), x2544, 98),
            x2542,
            98
        ),
        536459,
        4,
    )?;
    let x2545: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2544, x2535, 32), 32), x6, 32);
    let x2546: BytePoly_32 = bigint_nondet_quot!(ctx, x2545, x6, 32);
    let x2547: BytePoly_32 = bigint_nondet_rem!(ctx, x2545, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2546, x6, 64), x2547, 64),
            x2545,
            64
        ),
        260103,
        4,
    )?;
    let x2548: BytePoly_1 = bigint_nondet_rem!(ctx, x2483, x2, 1);
    let x2549: BytePoly_33 = bigint_nondet_quot!(ctx, x2483, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2549, x2, 34), x2548, 34),
            x2483,
            34
        ),
        268231,
        4,
    )?;
    let x2550: BytePoly_1 = bigint_sub!(x3, x2548, 1);
    eqz(ctx, &bigint_mul!(x2548, x2550, 2), 8131, 2)?;
    let x2551: BytePoly_32 = bigint_add!(bigint_sub!(x2541, x2511, 32), x6, 32);
    let x2552: BytePoly_32 = bigint_nondet_inv!(ctx, x2551, x6, 32);
    let x2553: BytePoly_64 = bigint_mul!(x2551, x2552, 64);
    let x2554: BytePoly_66 = bigint_nondet_quot!(ctx, x2553, x6, 66);
    let x2555: BytePoly_32 = bigint_nondet_rem!(ctx, x2553, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2554, x6, 98), x2555, 98),
            x2553,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2555, x1, 32), 34, 1)?;
    let x2556: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2547, x2513, 32), x6, 32),
        x2552,
        64
    );
    let x2557: BytePoly_66 = bigint_nondet_quot!(ctx, x2556, x6, 66);
    let x2558: BytePoly_32 = bigint_nondet_rem!(ctx, x2556, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2557, x6, 98), x2558, 98),
            x2556,
            98
        ),
        536459,
        4,
    )?;
    let x2559: BytePoly_64 = bigint_mul!(x2558, x2511, 64);
    let x2560: BytePoly_66 = bigint_nondet_quot!(ctx, x2559, x6, 66);
    let x2561: BytePoly_32 = bigint_nondet_rem!(ctx, x2559, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2560, x6, 98), x2561, 98),
            x2559,
            98
        ),
        536459,
        4,
    )?;
    let x2562: BytePoly_32 = bigint_add!(bigint_sub!(x2513, x2561, 32), x6, 32);
    let x2563: BytePoly_32 = bigint_nondet_quot!(ctx, x2562, x6, 32);
    let x2564: BytePoly_32 = bigint_nondet_rem!(ctx, x2562, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2563, x6, 64), x2564, 64),
            x2562,
            64
        ),
        260103,
        4,
    )?;
    let x2565: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2558, x2558, 64), x2511, 64),
                x6,
                64
            ),
            x2541,
            64
        ),
        x6,
        64
    );
    let x2566: BytePoly_66 = bigint_nondet_quot!(ctx, x2565, x6, 66);
    let x2567: BytePoly_32 = bigint_nondet_rem!(ctx, x2565, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2566, x6, 98), x2567, 98),
            x2565,
            98
        ),
        536459,
        4,
    )?;
    let x2568: BytePoly_64 = bigint_mul!(x2558, x2567, 64);
    let x2569: BytePoly_66 = bigint_nondet_quot!(ctx, x2568, x6, 66);
    let x2570: BytePoly_32 = bigint_nondet_rem!(ctx, x2568, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2569, x6, 98), x2570, 98),
            x2568,
            98
        ),
        536459,
        4,
    )?;
    let x2571: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2570, x2564, 32), 32), x6, 32);
    let x2572: BytePoly_32 = bigint_nondet_quot!(ctx, x2571, x6, 32);
    let x2573: BytePoly_32 = bigint_nondet_rem!(ctx, x2571, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2572, x6, 64), x2573, 64),
            x2571,
            64
        ),
        260103,
        4,
    )?;
    let x2574: BytePoly_33 = bigint_add!(
        bigint_mul!(x2567, x2548, 33),
        bigint_mul!(x2511, x2550, 33),
        33
    );
    let x2575: BytePoly_33 = bigint_add!(
        bigint_mul!(x2573, x2548, 33),
        bigint_mul!(x2513, x2550, 33),
        33
    );
    let x2576: BytePoly_35 = bigint_nondet_quot!(ctx, x2574, x6, 35);
    let x2577: BytePoly_32 = bigint_nondet_rem!(ctx, x2574, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2576, x6, 67), x2577, 67),
            x2574,
            67
        ),
        284487,
        4,
    )?;
    let x2578: BytePoly_35 = bigint_nondet_quot!(ctx, x2575, x6, 35);
    let x2579: BytePoly_32 = bigint_nondet_rem!(ctx, x2575, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2578, x6, 67), x2579, 67),
            x2575,
            67
        ),
        284487,
        4,
    )?;
    let x2580: BytePoly_64 = bigint_mul!(x2541, x2541, 64);
    let x2581: BytePoly_66 = bigint_nondet_quot!(ctx, x2580, x6, 66);
    let x2582: BytePoly_32 = bigint_nondet_rem!(ctx, x2580, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2581, x6, 98), x2582, 98),
            x2580,
            98
        ),
        536459,
        4,
    )?;
    let x2583: BytePoly_33 = bigint_add!(bigint_mul!(x2582, x0, 33), x5, 33);
    let x2584: BytePoly_35 = bigint_nondet_quot!(ctx, x2583, x6, 35);
    let x2585: BytePoly_32 = bigint_nondet_rem!(ctx, x2583, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2584, x6, 67), x2585, 67),
            x2583,
            67
        ),
        284487,
        4,
    )?;
    let x2586: BytePoly_32 = bigint_add!(x2547, x2547, 32);
    let x2587: BytePoly_32 = bigint_nondet_quot!(ctx, x2586, x6, 32);
    let x2588: BytePoly_32 = bigint_nondet_rem!(ctx, x2586, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2587, x6, 64), x2588, 64),
            x2586,
            64
        ),
        260103,
        4,
    )?;
    let x2589: BytePoly_32 = bigint_nondet_inv!(ctx, x2588, x6, 32);
    let x2590: BytePoly_64 = bigint_mul!(x2588, x2589, 64);
    let x2591: BytePoly_66 = bigint_nondet_quot!(ctx, x2590, x6, 66);
    let x2592: BytePoly_32 = bigint_nondet_rem!(ctx, x2590, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2591, x6, 98), x2592, 98),
            x2590,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2592, x3, 32), 34, 1)?;
    let x2593: BytePoly_64 = bigint_mul!(x2585, x2589, 64);
    let x2594: BytePoly_66 = bigint_nondet_quot!(ctx, x2593, x6, 66);
    let x2595: BytePoly_32 = bigint_nondet_rem!(ctx, x2593, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2594, x6, 98), x2595, 98),
            x2593,
            98
        ),
        536459,
        4,
    )?;
    let x2596: BytePoly_64 = bigint_mul!(x2595, x2541, 64);
    let x2597: BytePoly_66 = bigint_nondet_quot!(ctx, x2596, x6, 66);
    let x2598: BytePoly_32 = bigint_nondet_rem!(ctx, x2596, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2597, x6, 98), x2598, 98),
            x2596,
            98
        ),
        536459,
        4,
    )?;
    let x2599: BytePoly_32 = bigint_add!(bigint_sub!(x2547, x2598, 32), x6, 32);
    let x2600: BytePoly_32 = bigint_nondet_quot!(ctx, x2599, x6, 32);
    let x2601: BytePoly_32 = bigint_nondet_rem!(ctx, x2599, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2600, x6, 64), x2601, 64),
            x2599,
            64
        ),
        260103,
        4,
    )?;
    let x2602: BytePoly_64 = bigint_mul!(x2595, x2595, 64);
    let x2603: BytePoly_66 = bigint_nondet_quot!(ctx, x2602, x6, 66);
    let x2604: BytePoly_32 = bigint_nondet_rem!(ctx, x2602, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2603, x6, 98), x2604, 98),
            x2602,
            98
        ),
        536459,
        4,
    )?;
    let x2605: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2604, x2541, 32), x6, 32),
            x2541,
            32
        ),
        x6,
        32
    );
    let x2606: BytePoly_32 = bigint_nondet_quot!(ctx, x2605, x6, 32);
    let x2607: BytePoly_32 = bigint_nondet_rem!(ctx, x2605, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2606, x6, 64), x2607, 64),
            x2605,
            64
        ),
        260103,
        4,
    )?;
    let x2608: BytePoly_64 = bigint_mul!(x2595, x2607, 64);
    let x2609: BytePoly_66 = bigint_nondet_quot!(ctx, x2608, x6, 66);
    let x2610: BytePoly_32 = bigint_nondet_rem!(ctx, x2608, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2609, x6, 98), x2610, 98),
            x2608,
            98
        ),
        536459,
        4,
    )?;
    let x2611: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2610, x2601, 32), 32), x6, 32);
    let x2612: BytePoly_32 = bigint_nondet_quot!(ctx, x2611, x6, 32);
    let x2613: BytePoly_32 = bigint_nondet_rem!(ctx, x2611, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2612, x6, 64), x2613, 64),
            x2611,
            64
        ),
        260103,
        4,
    )?;
    let x2614: BytePoly_1 = bigint_nondet_rem!(ctx, x2549, x2, 1);
    let x2615: BytePoly_33 = bigint_nondet_quot!(ctx, x2549, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2615, x2, 34), x2614, 34),
            x2549,
            34
        ),
        268231,
        4,
    )?;
    let x2616: BytePoly_1 = bigint_sub!(x3, x2614, 1);
    eqz(ctx, &bigint_mul!(x2614, x2616, 2), 8131, 2)?;
    let x2617: BytePoly_32 = bigint_add!(bigint_sub!(x2607, x2577, 32), x6, 32);
    let x2618: BytePoly_32 = bigint_nondet_inv!(ctx, x2617, x6, 32);
    let x2619: BytePoly_64 = bigint_mul!(x2617, x2618, 64);
    let x2620: BytePoly_66 = bigint_nondet_quot!(ctx, x2619, x6, 66);
    let x2621: BytePoly_32 = bigint_nondet_rem!(ctx, x2619, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2620, x6, 98), x2621, 98),
            x2619,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2621, x1, 32), 34, 1)?;
    let x2622: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2613, x2579, 32), x6, 32),
        x2618,
        64
    );
    let x2623: BytePoly_66 = bigint_nondet_quot!(ctx, x2622, x6, 66);
    let x2624: BytePoly_32 = bigint_nondet_rem!(ctx, x2622, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2623, x6, 98), x2624, 98),
            x2622,
            98
        ),
        536459,
        4,
    )?;
    let x2625: BytePoly_64 = bigint_mul!(x2624, x2577, 64);
    let x2626: BytePoly_66 = bigint_nondet_quot!(ctx, x2625, x6, 66);
    let x2627: BytePoly_32 = bigint_nondet_rem!(ctx, x2625, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2626, x6, 98), x2627, 98),
            x2625,
            98
        ),
        536459,
        4,
    )?;
    let x2628: BytePoly_32 = bigint_add!(bigint_sub!(x2579, x2627, 32), x6, 32);
    let x2629: BytePoly_32 = bigint_nondet_quot!(ctx, x2628, x6, 32);
    let x2630: BytePoly_32 = bigint_nondet_rem!(ctx, x2628, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2629, x6, 64), x2630, 64),
            x2628,
            64
        ),
        260103,
        4,
    )?;
    let x2631: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2624, x2624, 64), x2577, 64),
                x6,
                64
            ),
            x2607,
            64
        ),
        x6,
        64
    );
    let x2632: BytePoly_66 = bigint_nondet_quot!(ctx, x2631, x6, 66);
    let x2633: BytePoly_32 = bigint_nondet_rem!(ctx, x2631, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2632, x6, 98), x2633, 98),
            x2631,
            98
        ),
        536459,
        4,
    )?;
    let x2634: BytePoly_64 = bigint_mul!(x2624, x2633, 64);
    let x2635: BytePoly_66 = bigint_nondet_quot!(ctx, x2634, x6, 66);
    let x2636: BytePoly_32 = bigint_nondet_rem!(ctx, x2634, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2635, x6, 98), x2636, 98),
            x2634,
            98
        ),
        536459,
        4,
    )?;
    let x2637: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2636, x2630, 32), 32), x6, 32);
    let x2638: BytePoly_32 = bigint_nondet_quot!(ctx, x2637, x6, 32);
    let x2639: BytePoly_32 = bigint_nondet_rem!(ctx, x2637, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2638, x6, 64), x2639, 64),
            x2637,
            64
        ),
        260103,
        4,
    )?;
    let x2640: BytePoly_33 = bigint_add!(
        bigint_mul!(x2633, x2614, 33),
        bigint_mul!(x2577, x2616, 33),
        33
    );
    let x2641: BytePoly_33 = bigint_add!(
        bigint_mul!(x2639, x2614, 33),
        bigint_mul!(x2579, x2616, 33),
        33
    );
    let x2642: BytePoly_35 = bigint_nondet_quot!(ctx, x2640, x6, 35);
    let x2643: BytePoly_32 = bigint_nondet_rem!(ctx, x2640, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2642, x6, 67), x2643, 67),
            x2640,
            67
        ),
        284487,
        4,
    )?;
    let x2644: BytePoly_35 = bigint_nondet_quot!(ctx, x2641, x6, 35);
    let x2645: BytePoly_32 = bigint_nondet_rem!(ctx, x2641, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2644, x6, 67), x2645, 67),
            x2641,
            67
        ),
        284487,
        4,
    )?;
    let x2646: BytePoly_64 = bigint_mul!(x2607, x2607, 64);
    let x2647: BytePoly_66 = bigint_nondet_quot!(ctx, x2646, x6, 66);
    let x2648: BytePoly_32 = bigint_nondet_rem!(ctx, x2646, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2647, x6, 98), x2648, 98),
            x2646,
            98
        ),
        536459,
        4,
    )?;
    let x2649: BytePoly_33 = bigint_add!(bigint_mul!(x2648, x0, 33), x5, 33);
    let x2650: BytePoly_35 = bigint_nondet_quot!(ctx, x2649, x6, 35);
    let x2651: BytePoly_32 = bigint_nondet_rem!(ctx, x2649, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2650, x6, 67), x2651, 67),
            x2649,
            67
        ),
        284487,
        4,
    )?;
    let x2652: BytePoly_32 = bigint_add!(x2613, x2613, 32);
    let x2653: BytePoly_32 = bigint_nondet_quot!(ctx, x2652, x6, 32);
    let x2654: BytePoly_32 = bigint_nondet_rem!(ctx, x2652, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2653, x6, 64), x2654, 64),
            x2652,
            64
        ),
        260103,
        4,
    )?;
    let x2655: BytePoly_32 = bigint_nondet_inv!(ctx, x2654, x6, 32);
    let x2656: BytePoly_64 = bigint_mul!(x2654, x2655, 64);
    let x2657: BytePoly_66 = bigint_nondet_quot!(ctx, x2656, x6, 66);
    let x2658: BytePoly_32 = bigint_nondet_rem!(ctx, x2656, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2657, x6, 98), x2658, 98),
            x2656,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2658, x3, 32), 34, 1)?;
    let x2659: BytePoly_64 = bigint_mul!(x2651, x2655, 64);
    let x2660: BytePoly_66 = bigint_nondet_quot!(ctx, x2659, x6, 66);
    let x2661: BytePoly_32 = bigint_nondet_rem!(ctx, x2659, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2660, x6, 98), x2661, 98),
            x2659,
            98
        ),
        536459,
        4,
    )?;
    let x2662: BytePoly_64 = bigint_mul!(x2661, x2607, 64);
    let x2663: BytePoly_66 = bigint_nondet_quot!(ctx, x2662, x6, 66);
    let x2664: BytePoly_32 = bigint_nondet_rem!(ctx, x2662, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2663, x6, 98), x2664, 98),
            x2662,
            98
        ),
        536459,
        4,
    )?;
    let x2665: BytePoly_32 = bigint_add!(bigint_sub!(x2613, x2664, 32), x6, 32);
    let x2666: BytePoly_32 = bigint_nondet_quot!(ctx, x2665, x6, 32);
    let x2667: BytePoly_32 = bigint_nondet_rem!(ctx, x2665, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2666, x6, 64), x2667, 64),
            x2665,
            64
        ),
        260103,
        4,
    )?;
    let x2668: BytePoly_64 = bigint_mul!(x2661, x2661, 64);
    let x2669: BytePoly_66 = bigint_nondet_quot!(ctx, x2668, x6, 66);
    let x2670: BytePoly_32 = bigint_nondet_rem!(ctx, x2668, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2669, x6, 98), x2670, 98),
            x2668,
            98
        ),
        536459,
        4,
    )?;
    let x2671: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2670, x2607, 32), x6, 32),
            x2607,
            32
        ),
        x6,
        32
    );
    let x2672: BytePoly_32 = bigint_nondet_quot!(ctx, x2671, x6, 32);
    let x2673: BytePoly_32 = bigint_nondet_rem!(ctx, x2671, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2672, x6, 64), x2673, 64),
            x2671,
            64
        ),
        260103,
        4,
    )?;
    let x2674: BytePoly_64 = bigint_mul!(x2661, x2673, 64);
    let x2675: BytePoly_66 = bigint_nondet_quot!(ctx, x2674, x6, 66);
    let x2676: BytePoly_32 = bigint_nondet_rem!(ctx, x2674, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2675, x6, 98), x2676, 98),
            x2674,
            98
        ),
        536459,
        4,
    )?;
    let x2677: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2676, x2667, 32), 32), x6, 32);
    let x2678: BytePoly_32 = bigint_nondet_quot!(ctx, x2677, x6, 32);
    let x2679: BytePoly_32 = bigint_nondet_rem!(ctx, x2677, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2678, x6, 64), x2679, 64),
            x2677,
            64
        ),
        260103,
        4,
    )?;
    let x2680: BytePoly_1 = bigint_nondet_rem!(ctx, x2615, x2, 1);
    let x2681: BytePoly_33 = bigint_nondet_quot!(ctx, x2615, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2681, x2, 34), x2680, 34),
            x2615,
            34
        ),
        268231,
        4,
    )?;
    let x2682: BytePoly_1 = bigint_sub!(x3, x2680, 1);
    eqz(ctx, &bigint_mul!(x2680, x2682, 2), 8131, 2)?;
    let x2683: BytePoly_32 = bigint_add!(bigint_sub!(x2673, x2643, 32), x6, 32);
    let x2684: BytePoly_32 = bigint_nondet_inv!(ctx, x2683, x6, 32);
    let x2685: BytePoly_64 = bigint_mul!(x2683, x2684, 64);
    let x2686: BytePoly_66 = bigint_nondet_quot!(ctx, x2685, x6, 66);
    let x2687: BytePoly_32 = bigint_nondet_rem!(ctx, x2685, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2686, x6, 98), x2687, 98),
            x2685,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2687, x1, 32), 34, 1)?;
    let x2688: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2679, x2645, 32), x6, 32),
        x2684,
        64
    );
    let x2689: BytePoly_66 = bigint_nondet_quot!(ctx, x2688, x6, 66);
    let x2690: BytePoly_32 = bigint_nondet_rem!(ctx, x2688, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2689, x6, 98), x2690, 98),
            x2688,
            98
        ),
        536459,
        4,
    )?;
    let x2691: BytePoly_64 = bigint_mul!(x2690, x2643, 64);
    let x2692: BytePoly_66 = bigint_nondet_quot!(ctx, x2691, x6, 66);
    let x2693: BytePoly_32 = bigint_nondet_rem!(ctx, x2691, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2692, x6, 98), x2693, 98),
            x2691,
            98
        ),
        536459,
        4,
    )?;
    let x2694: BytePoly_32 = bigint_add!(bigint_sub!(x2645, x2693, 32), x6, 32);
    let x2695: BytePoly_32 = bigint_nondet_quot!(ctx, x2694, x6, 32);
    let x2696: BytePoly_32 = bigint_nondet_rem!(ctx, x2694, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2695, x6, 64), x2696, 64),
            x2694,
            64
        ),
        260103,
        4,
    )?;
    let x2697: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2690, x2690, 64), x2643, 64),
                x6,
                64
            ),
            x2673,
            64
        ),
        x6,
        64
    );
    let x2698: BytePoly_66 = bigint_nondet_quot!(ctx, x2697, x6, 66);
    let x2699: BytePoly_32 = bigint_nondet_rem!(ctx, x2697, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2698, x6, 98), x2699, 98),
            x2697,
            98
        ),
        536459,
        4,
    )?;
    let x2700: BytePoly_64 = bigint_mul!(x2690, x2699, 64);
    let x2701: BytePoly_66 = bigint_nondet_quot!(ctx, x2700, x6, 66);
    let x2702: BytePoly_32 = bigint_nondet_rem!(ctx, x2700, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2701, x6, 98), x2702, 98),
            x2700,
            98
        ),
        536459,
        4,
    )?;
    let x2703: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2702, x2696, 32), 32), x6, 32);
    let x2704: BytePoly_32 = bigint_nondet_quot!(ctx, x2703, x6, 32);
    let x2705: BytePoly_32 = bigint_nondet_rem!(ctx, x2703, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2704, x6, 64), x2705, 64),
            x2703,
            64
        ),
        260103,
        4,
    )?;
    let x2706: BytePoly_33 = bigint_add!(
        bigint_mul!(x2699, x2680, 33),
        bigint_mul!(x2643, x2682, 33),
        33
    );
    let x2707: BytePoly_33 = bigint_add!(
        bigint_mul!(x2705, x2680, 33),
        bigint_mul!(x2645, x2682, 33),
        33
    );
    let x2708: BytePoly_35 = bigint_nondet_quot!(ctx, x2706, x6, 35);
    let x2709: BytePoly_32 = bigint_nondet_rem!(ctx, x2706, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2708, x6, 67), x2709, 67),
            x2706,
            67
        ),
        284487,
        4,
    )?;
    let x2710: BytePoly_35 = bigint_nondet_quot!(ctx, x2707, x6, 35);
    let x2711: BytePoly_32 = bigint_nondet_rem!(ctx, x2707, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2710, x6, 67), x2711, 67),
            x2707,
            67
        ),
        284487,
        4,
    )?;
    let x2712: BytePoly_64 = bigint_mul!(x2673, x2673, 64);
    let x2713: BytePoly_66 = bigint_nondet_quot!(ctx, x2712, x6, 66);
    let x2714: BytePoly_32 = bigint_nondet_rem!(ctx, x2712, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2713, x6, 98), x2714, 98),
            x2712,
            98
        ),
        536459,
        4,
    )?;
    let x2715: BytePoly_33 = bigint_add!(bigint_mul!(x2714, x0, 33), x5, 33);
    let x2716: BytePoly_35 = bigint_nondet_quot!(ctx, x2715, x6, 35);
    let x2717: BytePoly_32 = bigint_nondet_rem!(ctx, x2715, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2716, x6, 67), x2717, 67),
            x2715,
            67
        ),
        284487,
        4,
    )?;
    let x2718: BytePoly_32 = bigint_add!(x2679, x2679, 32);
    let x2719: BytePoly_32 = bigint_nondet_quot!(ctx, x2718, x6, 32);
    let x2720: BytePoly_32 = bigint_nondet_rem!(ctx, x2718, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2719, x6, 64), x2720, 64),
            x2718,
            64
        ),
        260103,
        4,
    )?;
    let x2721: BytePoly_32 = bigint_nondet_inv!(ctx, x2720, x6, 32);
    let x2722: BytePoly_64 = bigint_mul!(x2720, x2721, 64);
    let x2723: BytePoly_66 = bigint_nondet_quot!(ctx, x2722, x6, 66);
    let x2724: BytePoly_32 = bigint_nondet_rem!(ctx, x2722, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2723, x6, 98), x2724, 98),
            x2722,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2724, x3, 32), 34, 1)?;
    let x2725: BytePoly_64 = bigint_mul!(x2717, x2721, 64);
    let x2726: BytePoly_66 = bigint_nondet_quot!(ctx, x2725, x6, 66);
    let x2727: BytePoly_32 = bigint_nondet_rem!(ctx, x2725, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2726, x6, 98), x2727, 98),
            x2725,
            98
        ),
        536459,
        4,
    )?;
    let x2728: BytePoly_64 = bigint_mul!(x2727, x2673, 64);
    let x2729: BytePoly_66 = bigint_nondet_quot!(ctx, x2728, x6, 66);
    let x2730: BytePoly_32 = bigint_nondet_rem!(ctx, x2728, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2729, x6, 98), x2730, 98),
            x2728,
            98
        ),
        536459,
        4,
    )?;
    let x2731: BytePoly_32 = bigint_add!(bigint_sub!(x2679, x2730, 32), x6, 32);
    let x2732: BytePoly_32 = bigint_nondet_quot!(ctx, x2731, x6, 32);
    let x2733: BytePoly_32 = bigint_nondet_rem!(ctx, x2731, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2732, x6, 64), x2733, 64),
            x2731,
            64
        ),
        260103,
        4,
    )?;
    let x2734: BytePoly_64 = bigint_mul!(x2727, x2727, 64);
    let x2735: BytePoly_66 = bigint_nondet_quot!(ctx, x2734, x6, 66);
    let x2736: BytePoly_32 = bigint_nondet_rem!(ctx, x2734, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2735, x6, 98), x2736, 98),
            x2734,
            98
        ),
        536459,
        4,
    )?;
    let x2737: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2736, x2673, 32), x6, 32),
            x2673,
            32
        ),
        x6,
        32
    );
    let x2738: BytePoly_32 = bigint_nondet_quot!(ctx, x2737, x6, 32);
    let x2739: BytePoly_32 = bigint_nondet_rem!(ctx, x2737, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2738, x6, 64), x2739, 64),
            x2737,
            64
        ),
        260103,
        4,
    )?;
    let x2740: BytePoly_64 = bigint_mul!(x2727, x2739, 64);
    let x2741: BytePoly_66 = bigint_nondet_quot!(ctx, x2740, x6, 66);
    let x2742: BytePoly_32 = bigint_nondet_rem!(ctx, x2740, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2741, x6, 98), x2742, 98),
            x2740,
            98
        ),
        536459,
        4,
    )?;
    let x2743: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2742, x2733, 32), 32), x6, 32);
    let x2744: BytePoly_32 = bigint_nondet_quot!(ctx, x2743, x6, 32);
    let x2745: BytePoly_32 = bigint_nondet_rem!(ctx, x2743, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2744, x6, 64), x2745, 64),
            x2743,
            64
        ),
        260103,
        4,
    )?;
    let x2746: BytePoly_1 = bigint_nondet_rem!(ctx, x2681, x2, 1);
    let x2747: BytePoly_33 = bigint_nondet_quot!(ctx, x2681, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2747, x2, 34), x2746, 34),
            x2681,
            34
        ),
        268231,
        4,
    )?;
    let x2748: BytePoly_1 = bigint_sub!(x3, x2746, 1);
    eqz(ctx, &bigint_mul!(x2746, x2748, 2), 8131, 2)?;
    let x2749: BytePoly_32 = bigint_add!(bigint_sub!(x2739, x2709, 32), x6, 32);
    let x2750: BytePoly_32 = bigint_nondet_inv!(ctx, x2749, x6, 32);
    let x2751: BytePoly_64 = bigint_mul!(x2749, x2750, 64);
    let x2752: BytePoly_66 = bigint_nondet_quot!(ctx, x2751, x6, 66);
    let x2753: BytePoly_32 = bigint_nondet_rem!(ctx, x2751, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2752, x6, 98), x2753, 98),
            x2751,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2753, x1, 32), 34, 1)?;
    let x2754: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2745, x2711, 32), x6, 32),
        x2750,
        64
    );
    let x2755: BytePoly_66 = bigint_nondet_quot!(ctx, x2754, x6, 66);
    let x2756: BytePoly_32 = bigint_nondet_rem!(ctx, x2754, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2755, x6, 98), x2756, 98),
            x2754,
            98
        ),
        536459,
        4,
    )?;
    let x2757: BytePoly_64 = bigint_mul!(x2756, x2709, 64);
    let x2758: BytePoly_66 = bigint_nondet_quot!(ctx, x2757, x6, 66);
    let x2759: BytePoly_32 = bigint_nondet_rem!(ctx, x2757, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2758, x6, 98), x2759, 98),
            x2757,
            98
        ),
        536459,
        4,
    )?;
    let x2760: BytePoly_32 = bigint_add!(bigint_sub!(x2711, x2759, 32), x6, 32);
    let x2761: BytePoly_32 = bigint_nondet_quot!(ctx, x2760, x6, 32);
    let x2762: BytePoly_32 = bigint_nondet_rem!(ctx, x2760, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2761, x6, 64), x2762, 64),
            x2760,
            64
        ),
        260103,
        4,
    )?;
    let x2763: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2756, x2756, 64), x2709, 64),
                x6,
                64
            ),
            x2739,
            64
        ),
        x6,
        64
    );
    let x2764: BytePoly_66 = bigint_nondet_quot!(ctx, x2763, x6, 66);
    let x2765: BytePoly_32 = bigint_nondet_rem!(ctx, x2763, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2764, x6, 98), x2765, 98),
            x2763,
            98
        ),
        536459,
        4,
    )?;
    let x2766: BytePoly_64 = bigint_mul!(x2756, x2765, 64);
    let x2767: BytePoly_66 = bigint_nondet_quot!(ctx, x2766, x6, 66);
    let x2768: BytePoly_32 = bigint_nondet_rem!(ctx, x2766, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2767, x6, 98), x2768, 98),
            x2766,
            98
        ),
        536459,
        4,
    )?;
    let x2769: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2768, x2762, 32), 32), x6, 32);
    let x2770: BytePoly_32 = bigint_nondet_quot!(ctx, x2769, x6, 32);
    let x2771: BytePoly_32 = bigint_nondet_rem!(ctx, x2769, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2770, x6, 64), x2771, 64),
            x2769,
            64
        ),
        260103,
        4,
    )?;
    let x2772: BytePoly_33 = bigint_add!(
        bigint_mul!(x2765, x2746, 33),
        bigint_mul!(x2709, x2748, 33),
        33
    );
    let x2773: BytePoly_33 = bigint_add!(
        bigint_mul!(x2771, x2746, 33),
        bigint_mul!(x2711, x2748, 33),
        33
    );
    let x2774: BytePoly_35 = bigint_nondet_quot!(ctx, x2772, x6, 35);
    let x2775: BytePoly_32 = bigint_nondet_rem!(ctx, x2772, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2774, x6, 67), x2775, 67),
            x2772,
            67
        ),
        284487,
        4,
    )?;
    let x2776: BytePoly_35 = bigint_nondet_quot!(ctx, x2773, x6, 35);
    let x2777: BytePoly_32 = bigint_nondet_rem!(ctx, x2773, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2776, x6, 67), x2777, 67),
            x2773,
            67
        ),
        284487,
        4,
    )?;
    let x2778: BytePoly_64 = bigint_mul!(x2739, x2739, 64);
    let x2779: BytePoly_66 = bigint_nondet_quot!(ctx, x2778, x6, 66);
    let x2780: BytePoly_32 = bigint_nondet_rem!(ctx, x2778, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2779, x6, 98), x2780, 98),
            x2778,
            98
        ),
        536459,
        4,
    )?;
    let x2781: BytePoly_33 = bigint_add!(bigint_mul!(x2780, x0, 33), x5, 33);
    let x2782: BytePoly_35 = bigint_nondet_quot!(ctx, x2781, x6, 35);
    let x2783: BytePoly_32 = bigint_nondet_rem!(ctx, x2781, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2782, x6, 67), x2783, 67),
            x2781,
            67
        ),
        284487,
        4,
    )?;
    let x2784: BytePoly_32 = bigint_add!(x2745, x2745, 32);
    let x2785: BytePoly_32 = bigint_nondet_quot!(ctx, x2784, x6, 32);
    let x2786: BytePoly_32 = bigint_nondet_rem!(ctx, x2784, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2785, x6, 64), x2786, 64),
            x2784,
            64
        ),
        260103,
        4,
    )?;
    let x2787: BytePoly_32 = bigint_nondet_inv!(ctx, x2786, x6, 32);
    let x2788: BytePoly_64 = bigint_mul!(x2786, x2787, 64);
    let x2789: BytePoly_66 = bigint_nondet_quot!(ctx, x2788, x6, 66);
    let x2790: BytePoly_32 = bigint_nondet_rem!(ctx, x2788, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2789, x6, 98), x2790, 98),
            x2788,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2790, x3, 32), 34, 1)?;
    let x2791: BytePoly_64 = bigint_mul!(x2783, x2787, 64);
    let x2792: BytePoly_66 = bigint_nondet_quot!(ctx, x2791, x6, 66);
    let x2793: BytePoly_32 = bigint_nondet_rem!(ctx, x2791, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2792, x6, 98), x2793, 98),
            x2791,
            98
        ),
        536459,
        4,
    )?;
    let x2794: BytePoly_64 = bigint_mul!(x2793, x2739, 64);
    let x2795: BytePoly_66 = bigint_nondet_quot!(ctx, x2794, x6, 66);
    let x2796: BytePoly_32 = bigint_nondet_rem!(ctx, x2794, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2795, x6, 98), x2796, 98),
            x2794,
            98
        ),
        536459,
        4,
    )?;
    let x2797: BytePoly_32 = bigint_add!(bigint_sub!(x2745, x2796, 32), x6, 32);
    let x2798: BytePoly_32 = bigint_nondet_quot!(ctx, x2797, x6, 32);
    let x2799: BytePoly_32 = bigint_nondet_rem!(ctx, x2797, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2798, x6, 64), x2799, 64),
            x2797,
            64
        ),
        260103,
        4,
    )?;
    let x2800: BytePoly_64 = bigint_mul!(x2793, x2793, 64);
    let x2801: BytePoly_66 = bigint_nondet_quot!(ctx, x2800, x6, 66);
    let x2802: BytePoly_32 = bigint_nondet_rem!(ctx, x2800, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2801, x6, 98), x2802, 98),
            x2800,
            98
        ),
        536459,
        4,
    )?;
    let x2803: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2802, x2739, 32), x6, 32),
            x2739,
            32
        ),
        x6,
        32
    );
    let x2804: BytePoly_32 = bigint_nondet_quot!(ctx, x2803, x6, 32);
    let x2805: BytePoly_32 = bigint_nondet_rem!(ctx, x2803, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2804, x6, 64), x2805, 64),
            x2803,
            64
        ),
        260103,
        4,
    )?;
    let x2806: BytePoly_64 = bigint_mul!(x2793, x2805, 64);
    let x2807: BytePoly_66 = bigint_nondet_quot!(ctx, x2806, x6, 66);
    let x2808: BytePoly_32 = bigint_nondet_rem!(ctx, x2806, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2807, x6, 98), x2808, 98),
            x2806,
            98
        ),
        536459,
        4,
    )?;
    let x2809: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2808, x2799, 32), 32), x6, 32);
    let x2810: BytePoly_32 = bigint_nondet_quot!(ctx, x2809, x6, 32);
    let x2811: BytePoly_32 = bigint_nondet_rem!(ctx, x2809, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2810, x6, 64), x2811, 64),
            x2809,
            64
        ),
        260103,
        4,
    )?;
    let x2812: BytePoly_1 = bigint_nondet_rem!(ctx, x2747, x2, 1);
    let x2813: BytePoly_33 = bigint_nondet_quot!(ctx, x2747, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2813, x2, 34), x2812, 34),
            x2747,
            34
        ),
        268231,
        4,
    )?;
    let x2814: BytePoly_1 = bigint_sub!(x3, x2812, 1);
    eqz(ctx, &bigint_mul!(x2812, x2814, 2), 8131, 2)?;
    let x2815: BytePoly_32 = bigint_add!(bigint_sub!(x2805, x2775, 32), x6, 32);
    let x2816: BytePoly_32 = bigint_nondet_inv!(ctx, x2815, x6, 32);
    let x2817: BytePoly_64 = bigint_mul!(x2815, x2816, 64);
    let x2818: BytePoly_66 = bigint_nondet_quot!(ctx, x2817, x6, 66);
    let x2819: BytePoly_32 = bigint_nondet_rem!(ctx, x2817, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2818, x6, 98), x2819, 98),
            x2817,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2819, x1, 32), 34, 1)?;
    let x2820: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2811, x2777, 32), x6, 32),
        x2816,
        64
    );
    let x2821: BytePoly_66 = bigint_nondet_quot!(ctx, x2820, x6, 66);
    let x2822: BytePoly_32 = bigint_nondet_rem!(ctx, x2820, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2821, x6, 98), x2822, 98),
            x2820,
            98
        ),
        536459,
        4,
    )?;
    let x2823: BytePoly_64 = bigint_mul!(x2822, x2775, 64);
    let x2824: BytePoly_66 = bigint_nondet_quot!(ctx, x2823, x6, 66);
    let x2825: BytePoly_32 = bigint_nondet_rem!(ctx, x2823, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2824, x6, 98), x2825, 98),
            x2823,
            98
        ),
        536459,
        4,
    )?;
    let x2826: BytePoly_32 = bigint_add!(bigint_sub!(x2777, x2825, 32), x6, 32);
    let x2827: BytePoly_32 = bigint_nondet_quot!(ctx, x2826, x6, 32);
    let x2828: BytePoly_32 = bigint_nondet_rem!(ctx, x2826, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2827, x6, 64), x2828, 64),
            x2826,
            64
        ),
        260103,
        4,
    )?;
    let x2829: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2822, x2822, 64), x2775, 64),
                x6,
                64
            ),
            x2805,
            64
        ),
        x6,
        64
    );
    let x2830: BytePoly_66 = bigint_nondet_quot!(ctx, x2829, x6, 66);
    let x2831: BytePoly_32 = bigint_nondet_rem!(ctx, x2829, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2830, x6, 98), x2831, 98),
            x2829,
            98
        ),
        536459,
        4,
    )?;
    let x2832: BytePoly_64 = bigint_mul!(x2822, x2831, 64);
    let x2833: BytePoly_66 = bigint_nondet_quot!(ctx, x2832, x6, 66);
    let x2834: BytePoly_32 = bigint_nondet_rem!(ctx, x2832, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2833, x6, 98), x2834, 98),
            x2832,
            98
        ),
        536459,
        4,
    )?;
    let x2835: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2834, x2828, 32), 32), x6, 32);
    let x2836: BytePoly_32 = bigint_nondet_quot!(ctx, x2835, x6, 32);
    let x2837: BytePoly_32 = bigint_nondet_rem!(ctx, x2835, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2836, x6, 64), x2837, 64),
            x2835,
            64
        ),
        260103,
        4,
    )?;
    let x2838: BytePoly_33 = bigint_add!(
        bigint_mul!(x2831, x2812, 33),
        bigint_mul!(x2775, x2814, 33),
        33
    );
    let x2839: BytePoly_33 = bigint_add!(
        bigint_mul!(x2837, x2812, 33),
        bigint_mul!(x2777, x2814, 33),
        33
    );
    let x2840: BytePoly_35 = bigint_nondet_quot!(ctx, x2838, x6, 35);
    let x2841: BytePoly_32 = bigint_nondet_rem!(ctx, x2838, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2840, x6, 67), x2841, 67),
            x2838,
            67
        ),
        284487,
        4,
    )?;
    let x2842: BytePoly_35 = bigint_nondet_quot!(ctx, x2839, x6, 35);
    let x2843: BytePoly_32 = bigint_nondet_rem!(ctx, x2839, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2842, x6, 67), x2843, 67),
            x2839,
            67
        ),
        284487,
        4,
    )?;
    let x2844: BytePoly_64 = bigint_mul!(x2805, x2805, 64);
    let x2845: BytePoly_66 = bigint_nondet_quot!(ctx, x2844, x6, 66);
    let x2846: BytePoly_32 = bigint_nondet_rem!(ctx, x2844, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2845, x6, 98), x2846, 98),
            x2844,
            98
        ),
        536459,
        4,
    )?;
    let x2847: BytePoly_33 = bigint_add!(bigint_mul!(x2846, x0, 33), x5, 33);
    let x2848: BytePoly_35 = bigint_nondet_quot!(ctx, x2847, x6, 35);
    let x2849: BytePoly_32 = bigint_nondet_rem!(ctx, x2847, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2848, x6, 67), x2849, 67),
            x2847,
            67
        ),
        284487,
        4,
    )?;
    let x2850: BytePoly_32 = bigint_add!(x2811, x2811, 32);
    let x2851: BytePoly_32 = bigint_nondet_quot!(ctx, x2850, x6, 32);
    let x2852: BytePoly_32 = bigint_nondet_rem!(ctx, x2850, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2851, x6, 64), x2852, 64),
            x2850,
            64
        ),
        260103,
        4,
    )?;
    let x2853: BytePoly_32 = bigint_nondet_inv!(ctx, x2852, x6, 32);
    let x2854: BytePoly_64 = bigint_mul!(x2852, x2853, 64);
    let x2855: BytePoly_66 = bigint_nondet_quot!(ctx, x2854, x6, 66);
    let x2856: BytePoly_32 = bigint_nondet_rem!(ctx, x2854, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2855, x6, 98), x2856, 98),
            x2854,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2856, x3, 32), 34, 1)?;
    let x2857: BytePoly_64 = bigint_mul!(x2849, x2853, 64);
    let x2858: BytePoly_66 = bigint_nondet_quot!(ctx, x2857, x6, 66);
    let x2859: BytePoly_32 = bigint_nondet_rem!(ctx, x2857, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2858, x6, 98), x2859, 98),
            x2857,
            98
        ),
        536459,
        4,
    )?;
    let x2860: BytePoly_64 = bigint_mul!(x2859, x2805, 64);
    let x2861: BytePoly_66 = bigint_nondet_quot!(ctx, x2860, x6, 66);
    let x2862: BytePoly_32 = bigint_nondet_rem!(ctx, x2860, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2861, x6, 98), x2862, 98),
            x2860,
            98
        ),
        536459,
        4,
    )?;
    let x2863: BytePoly_32 = bigint_add!(bigint_sub!(x2811, x2862, 32), x6, 32);
    let x2864: BytePoly_32 = bigint_nondet_quot!(ctx, x2863, x6, 32);
    let x2865: BytePoly_32 = bigint_nondet_rem!(ctx, x2863, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2864, x6, 64), x2865, 64),
            x2863,
            64
        ),
        260103,
        4,
    )?;
    let x2866: BytePoly_64 = bigint_mul!(x2859, x2859, 64);
    let x2867: BytePoly_66 = bigint_nondet_quot!(ctx, x2866, x6, 66);
    let x2868: BytePoly_32 = bigint_nondet_rem!(ctx, x2866, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2867, x6, 98), x2868, 98),
            x2866,
            98
        ),
        536459,
        4,
    )?;
    let x2869: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2868, x2805, 32), x6, 32),
            x2805,
            32
        ),
        x6,
        32
    );
    let x2870: BytePoly_32 = bigint_nondet_quot!(ctx, x2869, x6, 32);
    let x2871: BytePoly_32 = bigint_nondet_rem!(ctx, x2869, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2870, x6, 64), x2871, 64),
            x2869,
            64
        ),
        260103,
        4,
    )?;
    let x2872: BytePoly_64 = bigint_mul!(x2859, x2871, 64);
    let x2873: BytePoly_66 = bigint_nondet_quot!(ctx, x2872, x6, 66);
    let x2874: BytePoly_32 = bigint_nondet_rem!(ctx, x2872, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2873, x6, 98), x2874, 98),
            x2872,
            98
        ),
        536459,
        4,
    )?;
    let x2875: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2874, x2865, 32), 32), x6, 32);
    let x2876: BytePoly_32 = bigint_nondet_quot!(ctx, x2875, x6, 32);
    let x2877: BytePoly_32 = bigint_nondet_rem!(ctx, x2875, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2876, x6, 64), x2877, 64),
            x2875,
            64
        ),
        260103,
        4,
    )?;
    let x2878: BytePoly_1 = bigint_nondet_rem!(ctx, x2813, x2, 1);
    let x2879: BytePoly_33 = bigint_nondet_quot!(ctx, x2813, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2879, x2, 34), x2878, 34),
            x2813,
            34
        ),
        268231,
        4,
    )?;
    let x2880: BytePoly_1 = bigint_sub!(x3, x2878, 1);
    eqz(ctx, &bigint_mul!(x2878, x2880, 2), 8131, 2)?;
    let x2881: BytePoly_32 = bigint_add!(bigint_sub!(x2871, x2841, 32), x6, 32);
    let x2882: BytePoly_32 = bigint_nondet_inv!(ctx, x2881, x6, 32);
    let x2883: BytePoly_64 = bigint_mul!(x2881, x2882, 64);
    let x2884: BytePoly_66 = bigint_nondet_quot!(ctx, x2883, x6, 66);
    let x2885: BytePoly_32 = bigint_nondet_rem!(ctx, x2883, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2884, x6, 98), x2885, 98),
            x2883,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2885, x1, 32), 34, 1)?;
    let x2886: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2877, x2843, 32), x6, 32),
        x2882,
        64
    );
    let x2887: BytePoly_66 = bigint_nondet_quot!(ctx, x2886, x6, 66);
    let x2888: BytePoly_32 = bigint_nondet_rem!(ctx, x2886, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2887, x6, 98), x2888, 98),
            x2886,
            98
        ),
        536459,
        4,
    )?;
    let x2889: BytePoly_64 = bigint_mul!(x2888, x2841, 64);
    let x2890: BytePoly_66 = bigint_nondet_quot!(ctx, x2889, x6, 66);
    let x2891: BytePoly_32 = bigint_nondet_rem!(ctx, x2889, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2890, x6, 98), x2891, 98),
            x2889,
            98
        ),
        536459,
        4,
    )?;
    let x2892: BytePoly_32 = bigint_add!(bigint_sub!(x2843, x2891, 32), x6, 32);
    let x2893: BytePoly_32 = bigint_nondet_quot!(ctx, x2892, x6, 32);
    let x2894: BytePoly_32 = bigint_nondet_rem!(ctx, x2892, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2893, x6, 64), x2894, 64),
            x2892,
            64
        ),
        260103,
        4,
    )?;
    let x2895: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2888, x2888, 64), x2841, 64),
                x6,
                64
            ),
            x2871,
            64
        ),
        x6,
        64
    );
    let x2896: BytePoly_66 = bigint_nondet_quot!(ctx, x2895, x6, 66);
    let x2897: BytePoly_32 = bigint_nondet_rem!(ctx, x2895, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2896, x6, 98), x2897, 98),
            x2895,
            98
        ),
        536459,
        4,
    )?;
    let x2898: BytePoly_64 = bigint_mul!(x2888, x2897, 64);
    let x2899: BytePoly_66 = bigint_nondet_quot!(ctx, x2898, x6, 66);
    let x2900: BytePoly_32 = bigint_nondet_rem!(ctx, x2898, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2899, x6, 98), x2900, 98),
            x2898,
            98
        ),
        536459,
        4,
    )?;
    let x2901: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2900, x2894, 32), 32), x6, 32);
    let x2902: BytePoly_32 = bigint_nondet_quot!(ctx, x2901, x6, 32);
    let x2903: BytePoly_32 = bigint_nondet_rem!(ctx, x2901, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2902, x6, 64), x2903, 64),
            x2901,
            64
        ),
        260103,
        4,
    )?;
    let x2904: BytePoly_33 = bigint_add!(
        bigint_mul!(x2897, x2878, 33),
        bigint_mul!(x2841, x2880, 33),
        33
    );
    let x2905: BytePoly_33 = bigint_add!(
        bigint_mul!(x2903, x2878, 33),
        bigint_mul!(x2843, x2880, 33),
        33
    );
    let x2906: BytePoly_35 = bigint_nondet_quot!(ctx, x2904, x6, 35);
    let x2907: BytePoly_32 = bigint_nondet_rem!(ctx, x2904, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2906, x6, 67), x2907, 67),
            x2904,
            67
        ),
        284487,
        4,
    )?;
    let x2908: BytePoly_35 = bigint_nondet_quot!(ctx, x2905, x6, 35);
    let x2909: BytePoly_32 = bigint_nondet_rem!(ctx, x2905, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2908, x6, 67), x2909, 67),
            x2905,
            67
        ),
        284487,
        4,
    )?;
    let x2910: BytePoly_64 = bigint_mul!(x2871, x2871, 64);
    let x2911: BytePoly_66 = bigint_nondet_quot!(ctx, x2910, x6, 66);
    let x2912: BytePoly_32 = bigint_nondet_rem!(ctx, x2910, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2911, x6, 98), x2912, 98),
            x2910,
            98
        ),
        536459,
        4,
    )?;
    let x2913: BytePoly_33 = bigint_add!(bigint_mul!(x2912, x0, 33), x5, 33);
    let x2914: BytePoly_35 = bigint_nondet_quot!(ctx, x2913, x6, 35);
    let x2915: BytePoly_32 = bigint_nondet_rem!(ctx, x2913, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2914, x6, 67), x2915, 67),
            x2913,
            67
        ),
        284487,
        4,
    )?;
    let x2916: BytePoly_32 = bigint_add!(x2877, x2877, 32);
    let x2917: BytePoly_32 = bigint_nondet_quot!(ctx, x2916, x6, 32);
    let x2918: BytePoly_32 = bigint_nondet_rem!(ctx, x2916, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2917, x6, 64), x2918, 64),
            x2916,
            64
        ),
        260103,
        4,
    )?;
    let x2919: BytePoly_32 = bigint_nondet_inv!(ctx, x2918, x6, 32);
    let x2920: BytePoly_64 = bigint_mul!(x2918, x2919, 64);
    let x2921: BytePoly_66 = bigint_nondet_quot!(ctx, x2920, x6, 66);
    let x2922: BytePoly_32 = bigint_nondet_rem!(ctx, x2920, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2921, x6, 98), x2922, 98),
            x2920,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2922, x3, 32), 34, 1)?;
    let x2923: BytePoly_64 = bigint_mul!(x2915, x2919, 64);
    let x2924: BytePoly_66 = bigint_nondet_quot!(ctx, x2923, x6, 66);
    let x2925: BytePoly_32 = bigint_nondet_rem!(ctx, x2923, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2924, x6, 98), x2925, 98),
            x2923,
            98
        ),
        536459,
        4,
    )?;
    let x2926: BytePoly_64 = bigint_mul!(x2925, x2871, 64);
    let x2927: BytePoly_66 = bigint_nondet_quot!(ctx, x2926, x6, 66);
    let x2928: BytePoly_32 = bigint_nondet_rem!(ctx, x2926, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2927, x6, 98), x2928, 98),
            x2926,
            98
        ),
        536459,
        4,
    )?;
    let x2929: BytePoly_32 = bigint_add!(bigint_sub!(x2877, x2928, 32), x6, 32);
    let x2930: BytePoly_32 = bigint_nondet_quot!(ctx, x2929, x6, 32);
    let x2931: BytePoly_32 = bigint_nondet_rem!(ctx, x2929, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2930, x6, 64), x2931, 64),
            x2929,
            64
        ),
        260103,
        4,
    )?;
    let x2932: BytePoly_64 = bigint_mul!(x2925, x2925, 64);
    let x2933: BytePoly_66 = bigint_nondet_quot!(ctx, x2932, x6, 66);
    let x2934: BytePoly_32 = bigint_nondet_rem!(ctx, x2932, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2933, x6, 98), x2934, 98),
            x2932,
            98
        ),
        536459,
        4,
    )?;
    let x2935: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2934, x2871, 32), x6, 32),
            x2871,
            32
        ),
        x6,
        32
    );
    let x2936: BytePoly_32 = bigint_nondet_quot!(ctx, x2935, x6, 32);
    let x2937: BytePoly_32 = bigint_nondet_rem!(ctx, x2935, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2936, x6, 64), x2937, 64),
            x2935,
            64
        ),
        260103,
        4,
    )?;
    let x2938: BytePoly_64 = bigint_mul!(x2925, x2937, 64);
    let x2939: BytePoly_66 = bigint_nondet_quot!(ctx, x2938, x6, 66);
    let x2940: BytePoly_32 = bigint_nondet_rem!(ctx, x2938, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2939, x6, 98), x2940, 98),
            x2938,
            98
        ),
        536459,
        4,
    )?;
    let x2941: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2940, x2931, 32), 32), x6, 32);
    let x2942: BytePoly_32 = bigint_nondet_quot!(ctx, x2941, x6, 32);
    let x2943: BytePoly_32 = bigint_nondet_rem!(ctx, x2941, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2942, x6, 64), x2943, 64),
            x2941,
            64
        ),
        260103,
        4,
    )?;
    let x2944: BytePoly_1 = bigint_nondet_rem!(ctx, x2879, x2, 1);
    let x2945: BytePoly_33 = bigint_nondet_quot!(ctx, x2879, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2945, x2, 34), x2944, 34),
            x2879,
            34
        ),
        268231,
        4,
    )?;
    let x2946: BytePoly_1 = bigint_sub!(x3, x2944, 1);
    eqz(ctx, &bigint_mul!(x2944, x2946, 2), 8131, 2)?;
    let x2947: BytePoly_32 = bigint_add!(bigint_sub!(x2937, x2907, 32), x6, 32);
    let x2948: BytePoly_32 = bigint_nondet_inv!(ctx, x2947, x6, 32);
    let x2949: BytePoly_64 = bigint_mul!(x2947, x2948, 64);
    let x2950: BytePoly_66 = bigint_nondet_quot!(ctx, x2949, x6, 66);
    let x2951: BytePoly_32 = bigint_nondet_rem!(ctx, x2949, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2950, x6, 98), x2951, 98),
            x2949,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2951, x1, 32), 34, 1)?;
    let x2952: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2943, x2909, 32), x6, 32),
        x2948,
        64
    );
    let x2953: BytePoly_66 = bigint_nondet_quot!(ctx, x2952, x6, 66);
    let x2954: BytePoly_32 = bigint_nondet_rem!(ctx, x2952, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2953, x6, 98), x2954, 98),
            x2952,
            98
        ),
        536459,
        4,
    )?;
    let x2955: BytePoly_64 = bigint_mul!(x2954, x2907, 64);
    let x2956: BytePoly_66 = bigint_nondet_quot!(ctx, x2955, x6, 66);
    let x2957: BytePoly_32 = bigint_nondet_rem!(ctx, x2955, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2956, x6, 98), x2957, 98),
            x2955,
            98
        ),
        536459,
        4,
    )?;
    let x2958: BytePoly_32 = bigint_add!(bigint_sub!(x2909, x2957, 32), x6, 32);
    let x2959: BytePoly_32 = bigint_nondet_quot!(ctx, x2958, x6, 32);
    let x2960: BytePoly_32 = bigint_nondet_rem!(ctx, x2958, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2959, x6, 64), x2960, 64),
            x2958,
            64
        ),
        260103,
        4,
    )?;
    let x2961: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2954, x2954, 64), x2907, 64),
                x6,
                64
            ),
            x2937,
            64
        ),
        x6,
        64
    );
    let x2962: BytePoly_66 = bigint_nondet_quot!(ctx, x2961, x6, 66);
    let x2963: BytePoly_32 = bigint_nondet_rem!(ctx, x2961, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2962, x6, 98), x2963, 98),
            x2961,
            98
        ),
        536459,
        4,
    )?;
    let x2964: BytePoly_64 = bigint_mul!(x2954, x2963, 64);
    let x2965: BytePoly_66 = bigint_nondet_quot!(ctx, x2964, x6, 66);
    let x2966: BytePoly_32 = bigint_nondet_rem!(ctx, x2964, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2965, x6, 98), x2966, 98),
            x2964,
            98
        ),
        536459,
        4,
    )?;
    let x2967: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x2966, x2960, 32), 32), x6, 32);
    let x2968: BytePoly_32 = bigint_nondet_quot!(ctx, x2967, x6, 32);
    let x2969: BytePoly_32 = bigint_nondet_rem!(ctx, x2967, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2968, x6, 64), x2969, 64),
            x2967,
            64
        ),
        260103,
        4,
    )?;
    let x2970: BytePoly_33 = bigint_add!(
        bigint_mul!(x2963, x2944, 33),
        bigint_mul!(x2907, x2946, 33),
        33
    );
    let x2971: BytePoly_33 = bigint_add!(
        bigint_mul!(x2969, x2944, 33),
        bigint_mul!(x2909, x2946, 33),
        33
    );
    let x2972: BytePoly_35 = bigint_nondet_quot!(ctx, x2970, x6, 35);
    let x2973: BytePoly_32 = bigint_nondet_rem!(ctx, x2970, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2972, x6, 67), x2973, 67),
            x2970,
            67
        ),
        284487,
        4,
    )?;
    let x2974: BytePoly_35 = bigint_nondet_quot!(ctx, x2971, x6, 35);
    let x2975: BytePoly_32 = bigint_nondet_rem!(ctx, x2971, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2974, x6, 67), x2975, 67),
            x2971,
            67
        ),
        284487,
        4,
    )?;
    let x2976: BytePoly_64 = bigint_mul!(x2937, x2937, 64);
    let x2977: BytePoly_66 = bigint_nondet_quot!(ctx, x2976, x6, 66);
    let x2978: BytePoly_32 = bigint_nondet_rem!(ctx, x2976, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2977, x6, 98), x2978, 98),
            x2976,
            98
        ),
        536459,
        4,
    )?;
    let x2979: BytePoly_33 = bigint_add!(bigint_mul!(x2978, x0, 33), x5, 33);
    let x2980: BytePoly_35 = bigint_nondet_quot!(ctx, x2979, x6, 35);
    let x2981: BytePoly_32 = bigint_nondet_rem!(ctx, x2979, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2980, x6, 67), x2981, 67),
            x2979,
            67
        ),
        284487,
        4,
    )?;
    let x2982: BytePoly_32 = bigint_add!(x2943, x2943, 32);
    let x2983: BytePoly_32 = bigint_nondet_quot!(ctx, x2982, x6, 32);
    let x2984: BytePoly_32 = bigint_nondet_rem!(ctx, x2982, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2983, x6, 64), x2984, 64),
            x2982,
            64
        ),
        260103,
        4,
    )?;
    let x2985: BytePoly_32 = bigint_nondet_inv!(ctx, x2984, x6, 32);
    let x2986: BytePoly_64 = bigint_mul!(x2984, x2985, 64);
    let x2987: BytePoly_66 = bigint_nondet_quot!(ctx, x2986, x6, 66);
    let x2988: BytePoly_32 = bigint_nondet_rem!(ctx, x2986, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2987, x6, 98), x2988, 98),
            x2986,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2988, x3, 32), 34, 1)?;
    let x2989: BytePoly_64 = bigint_mul!(x2981, x2985, 64);
    let x2990: BytePoly_66 = bigint_nondet_quot!(ctx, x2989, x6, 66);
    let x2991: BytePoly_32 = bigint_nondet_rem!(ctx, x2989, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2990, x6, 98), x2991, 98),
            x2989,
            98
        ),
        536459,
        4,
    )?;
    let x2992: BytePoly_64 = bigint_mul!(x2991, x2937, 64);
    let x2993: BytePoly_66 = bigint_nondet_quot!(ctx, x2992, x6, 66);
    let x2994: BytePoly_32 = bigint_nondet_rem!(ctx, x2992, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2993, x6, 98), x2994, 98),
            x2992,
            98
        ),
        536459,
        4,
    )?;
    let x2995: BytePoly_32 = bigint_add!(bigint_sub!(x2943, x2994, 32), x6, 32);
    let x2996: BytePoly_32 = bigint_nondet_quot!(ctx, x2995, x6, 32);
    let x2997: BytePoly_32 = bigint_nondet_rem!(ctx, x2995, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2996, x6, 64), x2997, 64),
            x2995,
            64
        ),
        260103,
        4,
    )?;
    let x2998: BytePoly_64 = bigint_mul!(x2991, x2991, 64);
    let x2999: BytePoly_66 = bigint_nondet_quot!(ctx, x2998, x6, 66);
    let x3000: BytePoly_32 = bigint_nondet_rem!(ctx, x2998, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2999, x6, 98), x3000, 98),
            x2998,
            98
        ),
        536459,
        4,
    )?;
    let x3001: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3000, x2937, 32), x6, 32),
            x2937,
            32
        ),
        x6,
        32
    );
    let x3002: BytePoly_32 = bigint_nondet_quot!(ctx, x3001, x6, 32);
    let x3003: BytePoly_32 = bigint_nondet_rem!(ctx, x3001, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3002, x6, 64), x3003, 64),
            x3001,
            64
        ),
        260103,
        4,
    )?;
    let x3004: BytePoly_64 = bigint_mul!(x2991, x3003, 64);
    let x3005: BytePoly_66 = bigint_nondet_quot!(ctx, x3004, x6, 66);
    let x3006: BytePoly_32 = bigint_nondet_rem!(ctx, x3004, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3005, x6, 98), x3006, 98),
            x3004,
            98
        ),
        536459,
        4,
    )?;
    let x3007: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3006, x2997, 32), 32), x6, 32);
    let x3008: BytePoly_32 = bigint_nondet_quot!(ctx, x3007, x6, 32);
    let x3009: BytePoly_32 = bigint_nondet_rem!(ctx, x3007, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3008, x6, 64), x3009, 64),
            x3007,
            64
        ),
        260103,
        4,
    )?;
    let x3010: BytePoly_1 = bigint_nondet_rem!(ctx, x2945, x2, 1);
    let x3011: BytePoly_33 = bigint_nondet_quot!(ctx, x2945, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3011, x2, 34), x3010, 34),
            x2945,
            34
        ),
        268231,
        4,
    )?;
    let x3012: BytePoly_1 = bigint_sub!(x3, x3010, 1);
    eqz(ctx, &bigint_mul!(x3010, x3012, 2), 8131, 2)?;
    let x3013: BytePoly_32 = bigint_add!(bigint_sub!(x3003, x2973, 32), x6, 32);
    let x3014: BytePoly_32 = bigint_nondet_inv!(ctx, x3013, x6, 32);
    let x3015: BytePoly_64 = bigint_mul!(x3013, x3014, 64);
    let x3016: BytePoly_66 = bigint_nondet_quot!(ctx, x3015, x6, 66);
    let x3017: BytePoly_32 = bigint_nondet_rem!(ctx, x3015, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3016, x6, 98), x3017, 98),
            x3015,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3017, x1, 32), 34, 1)?;
    let x3018: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3009, x2975, 32), x6, 32),
        x3014,
        64
    );
    let x3019: BytePoly_66 = bigint_nondet_quot!(ctx, x3018, x6, 66);
    let x3020: BytePoly_32 = bigint_nondet_rem!(ctx, x3018, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3019, x6, 98), x3020, 98),
            x3018,
            98
        ),
        536459,
        4,
    )?;
    let x3021: BytePoly_64 = bigint_mul!(x3020, x2973, 64);
    let x3022: BytePoly_66 = bigint_nondet_quot!(ctx, x3021, x6, 66);
    let x3023: BytePoly_32 = bigint_nondet_rem!(ctx, x3021, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3022, x6, 98), x3023, 98),
            x3021,
            98
        ),
        536459,
        4,
    )?;
    let x3024: BytePoly_32 = bigint_add!(bigint_sub!(x2975, x3023, 32), x6, 32);
    let x3025: BytePoly_32 = bigint_nondet_quot!(ctx, x3024, x6, 32);
    let x3026: BytePoly_32 = bigint_nondet_rem!(ctx, x3024, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3025, x6, 64), x3026, 64),
            x3024,
            64
        ),
        260103,
        4,
    )?;
    let x3027: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3020, x3020, 64), x2973, 64),
                x6,
                64
            ),
            x3003,
            64
        ),
        x6,
        64
    );
    let x3028: BytePoly_66 = bigint_nondet_quot!(ctx, x3027, x6, 66);
    let x3029: BytePoly_32 = bigint_nondet_rem!(ctx, x3027, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3028, x6, 98), x3029, 98),
            x3027,
            98
        ),
        536459,
        4,
    )?;
    let x3030: BytePoly_64 = bigint_mul!(x3020, x3029, 64);
    let x3031: BytePoly_66 = bigint_nondet_quot!(ctx, x3030, x6, 66);
    let x3032: BytePoly_32 = bigint_nondet_rem!(ctx, x3030, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3031, x6, 98), x3032, 98),
            x3030,
            98
        ),
        536459,
        4,
    )?;
    let x3033: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3032, x3026, 32), 32), x6, 32);
    let x3034: BytePoly_32 = bigint_nondet_quot!(ctx, x3033, x6, 32);
    let x3035: BytePoly_32 = bigint_nondet_rem!(ctx, x3033, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3034, x6, 64), x3035, 64),
            x3033,
            64
        ),
        260103,
        4,
    )?;
    let x3036: BytePoly_33 = bigint_add!(
        bigint_mul!(x3029, x3010, 33),
        bigint_mul!(x2973, x3012, 33),
        33
    );
    let x3037: BytePoly_33 = bigint_add!(
        bigint_mul!(x3035, x3010, 33),
        bigint_mul!(x2975, x3012, 33),
        33
    );
    let x3038: BytePoly_35 = bigint_nondet_quot!(ctx, x3036, x6, 35);
    let x3039: BytePoly_32 = bigint_nondet_rem!(ctx, x3036, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3038, x6, 67), x3039, 67),
            x3036,
            67
        ),
        284487,
        4,
    )?;
    let x3040: BytePoly_35 = bigint_nondet_quot!(ctx, x3037, x6, 35);
    let x3041: BytePoly_32 = bigint_nondet_rem!(ctx, x3037, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3040, x6, 67), x3041, 67),
            x3037,
            67
        ),
        284487,
        4,
    )?;
    let x3042: BytePoly_64 = bigint_mul!(x3003, x3003, 64);
    let x3043: BytePoly_66 = bigint_nondet_quot!(ctx, x3042, x6, 66);
    let x3044: BytePoly_32 = bigint_nondet_rem!(ctx, x3042, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3043, x6, 98), x3044, 98),
            x3042,
            98
        ),
        536459,
        4,
    )?;
    let x3045: BytePoly_33 = bigint_add!(bigint_mul!(x3044, x0, 33), x5, 33);
    let x3046: BytePoly_35 = bigint_nondet_quot!(ctx, x3045, x6, 35);
    let x3047: BytePoly_32 = bigint_nondet_rem!(ctx, x3045, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3046, x6, 67), x3047, 67),
            x3045,
            67
        ),
        284487,
        4,
    )?;
    let x3048: BytePoly_32 = bigint_add!(x3009, x3009, 32);
    let x3049: BytePoly_32 = bigint_nondet_quot!(ctx, x3048, x6, 32);
    let x3050: BytePoly_32 = bigint_nondet_rem!(ctx, x3048, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3049, x6, 64), x3050, 64),
            x3048,
            64
        ),
        260103,
        4,
    )?;
    let x3051: BytePoly_32 = bigint_nondet_inv!(ctx, x3050, x6, 32);
    let x3052: BytePoly_64 = bigint_mul!(x3050, x3051, 64);
    let x3053: BytePoly_66 = bigint_nondet_quot!(ctx, x3052, x6, 66);
    let x3054: BytePoly_32 = bigint_nondet_rem!(ctx, x3052, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3053, x6, 98), x3054, 98),
            x3052,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3054, x3, 32), 34, 1)?;
    let x3055: BytePoly_64 = bigint_mul!(x3047, x3051, 64);
    let x3056: BytePoly_66 = bigint_nondet_quot!(ctx, x3055, x6, 66);
    let x3057: BytePoly_32 = bigint_nondet_rem!(ctx, x3055, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3056, x6, 98), x3057, 98),
            x3055,
            98
        ),
        536459,
        4,
    )?;
    let x3058: BytePoly_64 = bigint_mul!(x3057, x3003, 64);
    let x3059: BytePoly_66 = bigint_nondet_quot!(ctx, x3058, x6, 66);
    let x3060: BytePoly_32 = bigint_nondet_rem!(ctx, x3058, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3059, x6, 98), x3060, 98),
            x3058,
            98
        ),
        536459,
        4,
    )?;
    let x3061: BytePoly_32 = bigint_add!(bigint_sub!(x3009, x3060, 32), x6, 32);
    let x3062: BytePoly_32 = bigint_nondet_quot!(ctx, x3061, x6, 32);
    let x3063: BytePoly_32 = bigint_nondet_rem!(ctx, x3061, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3062, x6, 64), x3063, 64),
            x3061,
            64
        ),
        260103,
        4,
    )?;
    let x3064: BytePoly_64 = bigint_mul!(x3057, x3057, 64);
    let x3065: BytePoly_66 = bigint_nondet_quot!(ctx, x3064, x6, 66);
    let x3066: BytePoly_32 = bigint_nondet_rem!(ctx, x3064, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3065, x6, 98), x3066, 98),
            x3064,
            98
        ),
        536459,
        4,
    )?;
    let x3067: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3066, x3003, 32), x6, 32),
            x3003,
            32
        ),
        x6,
        32
    );
    let x3068: BytePoly_32 = bigint_nondet_quot!(ctx, x3067, x6, 32);
    let x3069: BytePoly_32 = bigint_nondet_rem!(ctx, x3067, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3068, x6, 64), x3069, 64),
            x3067,
            64
        ),
        260103,
        4,
    )?;
    let x3070: BytePoly_64 = bigint_mul!(x3057, x3069, 64);
    let x3071: BytePoly_66 = bigint_nondet_quot!(ctx, x3070, x6, 66);
    let x3072: BytePoly_32 = bigint_nondet_rem!(ctx, x3070, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3071, x6, 98), x3072, 98),
            x3070,
            98
        ),
        536459,
        4,
    )?;
    let x3073: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3072, x3063, 32), 32), x6, 32);
    let x3074: BytePoly_32 = bigint_nondet_quot!(ctx, x3073, x6, 32);
    let x3075: BytePoly_32 = bigint_nondet_rem!(ctx, x3073, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3074, x6, 64), x3075, 64),
            x3073,
            64
        ),
        260103,
        4,
    )?;
    let x3076: BytePoly_1 = bigint_nondet_rem!(ctx, x3011, x2, 1);
    let x3077: BytePoly_33 = bigint_nondet_quot!(ctx, x3011, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3077, x2, 34), x3076, 34),
            x3011,
            34
        ),
        268231,
        4,
    )?;
    let x3078: BytePoly_1 = bigint_sub!(x3, x3076, 1);
    eqz(ctx, &bigint_mul!(x3076, x3078, 2), 8131, 2)?;
    let x3079: BytePoly_32 = bigint_add!(bigint_sub!(x3069, x3039, 32), x6, 32);
    let x3080: BytePoly_32 = bigint_nondet_inv!(ctx, x3079, x6, 32);
    let x3081: BytePoly_64 = bigint_mul!(x3079, x3080, 64);
    let x3082: BytePoly_66 = bigint_nondet_quot!(ctx, x3081, x6, 66);
    let x3083: BytePoly_32 = bigint_nondet_rem!(ctx, x3081, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3082, x6, 98), x3083, 98),
            x3081,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3083, x1, 32), 34, 1)?;
    let x3084: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3075, x3041, 32), x6, 32),
        x3080,
        64
    );
    let x3085: BytePoly_66 = bigint_nondet_quot!(ctx, x3084, x6, 66);
    let x3086: BytePoly_32 = bigint_nondet_rem!(ctx, x3084, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3085, x6, 98), x3086, 98),
            x3084,
            98
        ),
        536459,
        4,
    )?;
    let x3087: BytePoly_64 = bigint_mul!(x3086, x3039, 64);
    let x3088: BytePoly_66 = bigint_nondet_quot!(ctx, x3087, x6, 66);
    let x3089: BytePoly_32 = bigint_nondet_rem!(ctx, x3087, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3088, x6, 98), x3089, 98),
            x3087,
            98
        ),
        536459,
        4,
    )?;
    let x3090: BytePoly_32 = bigint_add!(bigint_sub!(x3041, x3089, 32), x6, 32);
    let x3091: BytePoly_32 = bigint_nondet_quot!(ctx, x3090, x6, 32);
    let x3092: BytePoly_32 = bigint_nondet_rem!(ctx, x3090, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3091, x6, 64), x3092, 64),
            x3090,
            64
        ),
        260103,
        4,
    )?;
    let x3093: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3086, x3086, 64), x3039, 64),
                x6,
                64
            ),
            x3069,
            64
        ),
        x6,
        64
    );
    let x3094: BytePoly_66 = bigint_nondet_quot!(ctx, x3093, x6, 66);
    let x3095: BytePoly_32 = bigint_nondet_rem!(ctx, x3093, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3094, x6, 98), x3095, 98),
            x3093,
            98
        ),
        536459,
        4,
    )?;
    let x3096: BytePoly_64 = bigint_mul!(x3086, x3095, 64);
    let x3097: BytePoly_66 = bigint_nondet_quot!(ctx, x3096, x6, 66);
    let x3098: BytePoly_32 = bigint_nondet_rem!(ctx, x3096, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3097, x6, 98), x3098, 98),
            x3096,
            98
        ),
        536459,
        4,
    )?;
    let x3099: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3098, x3092, 32), 32), x6, 32);
    let x3100: BytePoly_32 = bigint_nondet_quot!(ctx, x3099, x6, 32);
    let x3101: BytePoly_32 = bigint_nondet_rem!(ctx, x3099, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3100, x6, 64), x3101, 64),
            x3099,
            64
        ),
        260103,
        4,
    )?;
    let x3102: BytePoly_33 = bigint_add!(
        bigint_mul!(x3095, x3076, 33),
        bigint_mul!(x3039, x3078, 33),
        33
    );
    let x3103: BytePoly_33 = bigint_add!(
        bigint_mul!(x3101, x3076, 33),
        bigint_mul!(x3041, x3078, 33),
        33
    );
    let x3104: BytePoly_35 = bigint_nondet_quot!(ctx, x3102, x6, 35);
    let x3105: BytePoly_32 = bigint_nondet_rem!(ctx, x3102, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3104, x6, 67), x3105, 67),
            x3102,
            67
        ),
        284487,
        4,
    )?;
    let x3106: BytePoly_35 = bigint_nondet_quot!(ctx, x3103, x6, 35);
    let x3107: BytePoly_32 = bigint_nondet_rem!(ctx, x3103, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3106, x6, 67), x3107, 67),
            x3103,
            67
        ),
        284487,
        4,
    )?;
    let x3108: BytePoly_64 = bigint_mul!(x3069, x3069, 64);
    let x3109: BytePoly_66 = bigint_nondet_quot!(ctx, x3108, x6, 66);
    let x3110: BytePoly_32 = bigint_nondet_rem!(ctx, x3108, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3109, x6, 98), x3110, 98),
            x3108,
            98
        ),
        536459,
        4,
    )?;
    let x3111: BytePoly_33 = bigint_add!(bigint_mul!(x3110, x0, 33), x5, 33);
    let x3112: BytePoly_35 = bigint_nondet_quot!(ctx, x3111, x6, 35);
    let x3113: BytePoly_32 = bigint_nondet_rem!(ctx, x3111, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3112, x6, 67), x3113, 67),
            x3111,
            67
        ),
        284487,
        4,
    )?;
    let x3114: BytePoly_32 = bigint_add!(x3075, x3075, 32);
    let x3115: BytePoly_32 = bigint_nondet_quot!(ctx, x3114, x6, 32);
    let x3116: BytePoly_32 = bigint_nondet_rem!(ctx, x3114, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3115, x6, 64), x3116, 64),
            x3114,
            64
        ),
        260103,
        4,
    )?;
    let x3117: BytePoly_32 = bigint_nondet_inv!(ctx, x3116, x6, 32);
    let x3118: BytePoly_64 = bigint_mul!(x3116, x3117, 64);
    let x3119: BytePoly_66 = bigint_nondet_quot!(ctx, x3118, x6, 66);
    let x3120: BytePoly_32 = bigint_nondet_rem!(ctx, x3118, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3119, x6, 98), x3120, 98),
            x3118,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3120, x3, 32), 34, 1)?;
    let x3121: BytePoly_64 = bigint_mul!(x3113, x3117, 64);
    let x3122: BytePoly_66 = bigint_nondet_quot!(ctx, x3121, x6, 66);
    let x3123: BytePoly_32 = bigint_nondet_rem!(ctx, x3121, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3122, x6, 98), x3123, 98),
            x3121,
            98
        ),
        536459,
        4,
    )?;
    let x3124: BytePoly_64 = bigint_mul!(x3123, x3069, 64);
    let x3125: BytePoly_66 = bigint_nondet_quot!(ctx, x3124, x6, 66);
    let x3126: BytePoly_32 = bigint_nondet_rem!(ctx, x3124, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3125, x6, 98), x3126, 98),
            x3124,
            98
        ),
        536459,
        4,
    )?;
    let x3127: BytePoly_32 = bigint_add!(bigint_sub!(x3075, x3126, 32), x6, 32);
    let x3128: BytePoly_32 = bigint_nondet_quot!(ctx, x3127, x6, 32);
    let x3129: BytePoly_32 = bigint_nondet_rem!(ctx, x3127, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3128, x6, 64), x3129, 64),
            x3127,
            64
        ),
        260103,
        4,
    )?;
    let x3130: BytePoly_64 = bigint_mul!(x3123, x3123, 64);
    let x3131: BytePoly_66 = bigint_nondet_quot!(ctx, x3130, x6, 66);
    let x3132: BytePoly_32 = bigint_nondet_rem!(ctx, x3130, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3131, x6, 98), x3132, 98),
            x3130,
            98
        ),
        536459,
        4,
    )?;
    let x3133: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3132, x3069, 32), x6, 32),
            x3069,
            32
        ),
        x6,
        32
    );
    let x3134: BytePoly_32 = bigint_nondet_quot!(ctx, x3133, x6, 32);
    let x3135: BytePoly_32 = bigint_nondet_rem!(ctx, x3133, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3134, x6, 64), x3135, 64),
            x3133,
            64
        ),
        260103,
        4,
    )?;
    let x3136: BytePoly_64 = bigint_mul!(x3123, x3135, 64);
    let x3137: BytePoly_66 = bigint_nondet_quot!(ctx, x3136, x6, 66);
    let x3138: BytePoly_32 = bigint_nondet_rem!(ctx, x3136, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3137, x6, 98), x3138, 98),
            x3136,
            98
        ),
        536459,
        4,
    )?;
    let x3139: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3138, x3129, 32), 32), x6, 32);
    let x3140: BytePoly_32 = bigint_nondet_quot!(ctx, x3139, x6, 32);
    let x3141: BytePoly_32 = bigint_nondet_rem!(ctx, x3139, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3140, x6, 64), x3141, 64),
            x3139,
            64
        ),
        260103,
        4,
    )?;
    let x3142: BytePoly_1 = bigint_nondet_rem!(ctx, x3077, x2, 1);
    let x3143: BytePoly_33 = bigint_nondet_quot!(ctx, x3077, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3143, x2, 34), x3142, 34),
            x3077,
            34
        ),
        268231,
        4,
    )?;
    let x3144: BytePoly_1 = bigint_sub!(x3, x3142, 1);
    eqz(ctx, &bigint_mul!(x3142, x3144, 2), 8131, 2)?;
    let x3145: BytePoly_32 = bigint_add!(bigint_sub!(x3135, x3105, 32), x6, 32);
    let x3146: BytePoly_32 = bigint_nondet_inv!(ctx, x3145, x6, 32);
    let x3147: BytePoly_64 = bigint_mul!(x3145, x3146, 64);
    let x3148: BytePoly_66 = bigint_nondet_quot!(ctx, x3147, x6, 66);
    let x3149: BytePoly_32 = bigint_nondet_rem!(ctx, x3147, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3148, x6, 98), x3149, 98),
            x3147,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3149, x1, 32), 34, 1)?;
    let x3150: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3141, x3107, 32), x6, 32),
        x3146,
        64
    );
    let x3151: BytePoly_66 = bigint_nondet_quot!(ctx, x3150, x6, 66);
    let x3152: BytePoly_32 = bigint_nondet_rem!(ctx, x3150, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3151, x6, 98), x3152, 98),
            x3150,
            98
        ),
        536459,
        4,
    )?;
    let x3153: BytePoly_64 = bigint_mul!(x3152, x3105, 64);
    let x3154: BytePoly_66 = bigint_nondet_quot!(ctx, x3153, x6, 66);
    let x3155: BytePoly_32 = bigint_nondet_rem!(ctx, x3153, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3154, x6, 98), x3155, 98),
            x3153,
            98
        ),
        536459,
        4,
    )?;
    let x3156: BytePoly_32 = bigint_add!(bigint_sub!(x3107, x3155, 32), x6, 32);
    let x3157: BytePoly_32 = bigint_nondet_quot!(ctx, x3156, x6, 32);
    let x3158: BytePoly_32 = bigint_nondet_rem!(ctx, x3156, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3157, x6, 64), x3158, 64),
            x3156,
            64
        ),
        260103,
        4,
    )?;
    let x3159: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3152, x3152, 64), x3105, 64),
                x6,
                64
            ),
            x3135,
            64
        ),
        x6,
        64
    );
    let x3160: BytePoly_66 = bigint_nondet_quot!(ctx, x3159, x6, 66);
    let x3161: BytePoly_32 = bigint_nondet_rem!(ctx, x3159, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3160, x6, 98), x3161, 98),
            x3159,
            98
        ),
        536459,
        4,
    )?;
    let x3162: BytePoly_64 = bigint_mul!(x3152, x3161, 64);
    let x3163: BytePoly_66 = bigint_nondet_quot!(ctx, x3162, x6, 66);
    let x3164: BytePoly_32 = bigint_nondet_rem!(ctx, x3162, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3163, x6, 98), x3164, 98),
            x3162,
            98
        ),
        536459,
        4,
    )?;
    let x3165: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3164, x3158, 32), 32), x6, 32);
    let x3166: BytePoly_32 = bigint_nondet_quot!(ctx, x3165, x6, 32);
    let x3167: BytePoly_32 = bigint_nondet_rem!(ctx, x3165, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3166, x6, 64), x3167, 64),
            x3165,
            64
        ),
        260103,
        4,
    )?;
    let x3168: BytePoly_33 = bigint_add!(
        bigint_mul!(x3161, x3142, 33),
        bigint_mul!(x3105, x3144, 33),
        33
    );
    let x3169: BytePoly_33 = bigint_add!(
        bigint_mul!(x3167, x3142, 33),
        bigint_mul!(x3107, x3144, 33),
        33
    );
    let x3170: BytePoly_35 = bigint_nondet_quot!(ctx, x3168, x6, 35);
    let x3171: BytePoly_32 = bigint_nondet_rem!(ctx, x3168, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3170, x6, 67), x3171, 67),
            x3168,
            67
        ),
        284487,
        4,
    )?;
    let x3172: BytePoly_35 = bigint_nondet_quot!(ctx, x3169, x6, 35);
    let x3173: BytePoly_32 = bigint_nondet_rem!(ctx, x3169, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3172, x6, 67), x3173, 67),
            x3169,
            67
        ),
        284487,
        4,
    )?;
    let x3174: BytePoly_64 = bigint_mul!(x3135, x3135, 64);
    let x3175: BytePoly_66 = bigint_nondet_quot!(ctx, x3174, x6, 66);
    let x3176: BytePoly_32 = bigint_nondet_rem!(ctx, x3174, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3175, x6, 98), x3176, 98),
            x3174,
            98
        ),
        536459,
        4,
    )?;
    let x3177: BytePoly_33 = bigint_add!(bigint_mul!(x3176, x0, 33), x5, 33);
    let x3178: BytePoly_35 = bigint_nondet_quot!(ctx, x3177, x6, 35);
    let x3179: BytePoly_32 = bigint_nondet_rem!(ctx, x3177, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3178, x6, 67), x3179, 67),
            x3177,
            67
        ),
        284487,
        4,
    )?;
    let x3180: BytePoly_32 = bigint_add!(x3141, x3141, 32);
    let x3181: BytePoly_32 = bigint_nondet_quot!(ctx, x3180, x6, 32);
    let x3182: BytePoly_32 = bigint_nondet_rem!(ctx, x3180, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3181, x6, 64), x3182, 64),
            x3180,
            64
        ),
        260103,
        4,
    )?;
    let x3183: BytePoly_32 = bigint_nondet_inv!(ctx, x3182, x6, 32);
    let x3184: BytePoly_64 = bigint_mul!(x3182, x3183, 64);
    let x3185: BytePoly_66 = bigint_nondet_quot!(ctx, x3184, x6, 66);
    let x3186: BytePoly_32 = bigint_nondet_rem!(ctx, x3184, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3185, x6, 98), x3186, 98),
            x3184,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3186, x3, 32), 34, 1)?;
    let x3187: BytePoly_64 = bigint_mul!(x3179, x3183, 64);
    let x3188: BytePoly_66 = bigint_nondet_quot!(ctx, x3187, x6, 66);
    let x3189: BytePoly_32 = bigint_nondet_rem!(ctx, x3187, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3188, x6, 98), x3189, 98),
            x3187,
            98
        ),
        536459,
        4,
    )?;
    let x3190: BytePoly_64 = bigint_mul!(x3189, x3135, 64);
    let x3191: BytePoly_66 = bigint_nondet_quot!(ctx, x3190, x6, 66);
    let x3192: BytePoly_32 = bigint_nondet_rem!(ctx, x3190, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3191, x6, 98), x3192, 98),
            x3190,
            98
        ),
        536459,
        4,
    )?;
    let x3193: BytePoly_32 = bigint_add!(bigint_sub!(x3141, x3192, 32), x6, 32);
    let x3194: BytePoly_32 = bigint_nondet_quot!(ctx, x3193, x6, 32);
    let x3195: BytePoly_32 = bigint_nondet_rem!(ctx, x3193, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3194, x6, 64), x3195, 64),
            x3193,
            64
        ),
        260103,
        4,
    )?;
    let x3196: BytePoly_64 = bigint_mul!(x3189, x3189, 64);
    let x3197: BytePoly_66 = bigint_nondet_quot!(ctx, x3196, x6, 66);
    let x3198: BytePoly_32 = bigint_nondet_rem!(ctx, x3196, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3197, x6, 98), x3198, 98),
            x3196,
            98
        ),
        536459,
        4,
    )?;
    let x3199: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3198, x3135, 32), x6, 32),
            x3135,
            32
        ),
        x6,
        32
    );
    let x3200: BytePoly_32 = bigint_nondet_quot!(ctx, x3199, x6, 32);
    let x3201: BytePoly_32 = bigint_nondet_rem!(ctx, x3199, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3200, x6, 64), x3201, 64),
            x3199,
            64
        ),
        260103,
        4,
    )?;
    let x3202: BytePoly_64 = bigint_mul!(x3189, x3201, 64);
    let x3203: BytePoly_66 = bigint_nondet_quot!(ctx, x3202, x6, 66);
    let x3204: BytePoly_32 = bigint_nondet_rem!(ctx, x3202, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3203, x6, 98), x3204, 98),
            x3202,
            98
        ),
        536459,
        4,
    )?;
    let x3205: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3204, x3195, 32), 32), x6, 32);
    let x3206: BytePoly_32 = bigint_nondet_quot!(ctx, x3205, x6, 32);
    let x3207: BytePoly_32 = bigint_nondet_rem!(ctx, x3205, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3206, x6, 64), x3207, 64),
            x3205,
            64
        ),
        260103,
        4,
    )?;
    let x3208: BytePoly_1 = bigint_nondet_rem!(ctx, x3143, x2, 1);
    let x3209: BytePoly_33 = bigint_nondet_quot!(ctx, x3143, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3209, x2, 34), x3208, 34),
            x3143,
            34
        ),
        268231,
        4,
    )?;
    let x3210: BytePoly_1 = bigint_sub!(x3, x3208, 1);
    eqz(ctx, &bigint_mul!(x3208, x3210, 2), 8131, 2)?;
    let x3211: BytePoly_32 = bigint_add!(bigint_sub!(x3201, x3171, 32), x6, 32);
    let x3212: BytePoly_32 = bigint_nondet_inv!(ctx, x3211, x6, 32);
    let x3213: BytePoly_64 = bigint_mul!(x3211, x3212, 64);
    let x3214: BytePoly_66 = bigint_nondet_quot!(ctx, x3213, x6, 66);
    let x3215: BytePoly_32 = bigint_nondet_rem!(ctx, x3213, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3214, x6, 98), x3215, 98),
            x3213,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3215, x1, 32), 34, 1)?;
    let x3216: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3207, x3173, 32), x6, 32),
        x3212,
        64
    );
    let x3217: BytePoly_66 = bigint_nondet_quot!(ctx, x3216, x6, 66);
    let x3218: BytePoly_32 = bigint_nondet_rem!(ctx, x3216, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3217, x6, 98), x3218, 98),
            x3216,
            98
        ),
        536459,
        4,
    )?;
    let x3219: BytePoly_64 = bigint_mul!(x3218, x3171, 64);
    let x3220: BytePoly_66 = bigint_nondet_quot!(ctx, x3219, x6, 66);
    let x3221: BytePoly_32 = bigint_nondet_rem!(ctx, x3219, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3220, x6, 98), x3221, 98),
            x3219,
            98
        ),
        536459,
        4,
    )?;
    let x3222: BytePoly_32 = bigint_add!(bigint_sub!(x3173, x3221, 32), x6, 32);
    let x3223: BytePoly_32 = bigint_nondet_quot!(ctx, x3222, x6, 32);
    let x3224: BytePoly_32 = bigint_nondet_rem!(ctx, x3222, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3223, x6, 64), x3224, 64),
            x3222,
            64
        ),
        260103,
        4,
    )?;
    let x3225: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3218, x3218, 64), x3171, 64),
                x6,
                64
            ),
            x3201,
            64
        ),
        x6,
        64
    );
    let x3226: BytePoly_66 = bigint_nondet_quot!(ctx, x3225, x6, 66);
    let x3227: BytePoly_32 = bigint_nondet_rem!(ctx, x3225, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3226, x6, 98), x3227, 98),
            x3225,
            98
        ),
        536459,
        4,
    )?;
    let x3228: BytePoly_64 = bigint_mul!(x3218, x3227, 64);
    let x3229: BytePoly_66 = bigint_nondet_quot!(ctx, x3228, x6, 66);
    let x3230: BytePoly_32 = bigint_nondet_rem!(ctx, x3228, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3229, x6, 98), x3230, 98),
            x3228,
            98
        ),
        536459,
        4,
    )?;
    let x3231: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3230, x3224, 32), 32), x6, 32);
    let x3232: BytePoly_32 = bigint_nondet_quot!(ctx, x3231, x6, 32);
    let x3233: BytePoly_32 = bigint_nondet_rem!(ctx, x3231, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3232, x6, 64), x3233, 64),
            x3231,
            64
        ),
        260103,
        4,
    )?;
    let x3234: BytePoly_33 = bigint_add!(
        bigint_mul!(x3227, x3208, 33),
        bigint_mul!(x3171, x3210, 33),
        33
    );
    let x3235: BytePoly_33 = bigint_add!(
        bigint_mul!(x3233, x3208, 33),
        bigint_mul!(x3173, x3210, 33),
        33
    );
    let x3236: BytePoly_35 = bigint_nondet_quot!(ctx, x3234, x6, 35);
    let x3237: BytePoly_32 = bigint_nondet_rem!(ctx, x3234, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3236, x6, 67), x3237, 67),
            x3234,
            67
        ),
        284487,
        4,
    )?;
    let x3238: BytePoly_35 = bigint_nondet_quot!(ctx, x3235, x6, 35);
    let x3239: BytePoly_32 = bigint_nondet_rem!(ctx, x3235, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3238, x6, 67), x3239, 67),
            x3235,
            67
        ),
        284487,
        4,
    )?;
    let x3240: BytePoly_64 = bigint_mul!(x3201, x3201, 64);
    let x3241: BytePoly_66 = bigint_nondet_quot!(ctx, x3240, x6, 66);
    let x3242: BytePoly_32 = bigint_nondet_rem!(ctx, x3240, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3241, x6, 98), x3242, 98),
            x3240,
            98
        ),
        536459,
        4,
    )?;
    let x3243: BytePoly_33 = bigint_add!(bigint_mul!(x3242, x0, 33), x5, 33);
    let x3244: BytePoly_35 = bigint_nondet_quot!(ctx, x3243, x6, 35);
    let x3245: BytePoly_32 = bigint_nondet_rem!(ctx, x3243, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3244, x6, 67), x3245, 67),
            x3243,
            67
        ),
        284487,
        4,
    )?;
    let x3246: BytePoly_32 = bigint_add!(x3207, x3207, 32);
    let x3247: BytePoly_32 = bigint_nondet_quot!(ctx, x3246, x6, 32);
    let x3248: BytePoly_32 = bigint_nondet_rem!(ctx, x3246, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3247, x6, 64), x3248, 64),
            x3246,
            64
        ),
        260103,
        4,
    )?;
    let x3249: BytePoly_32 = bigint_nondet_inv!(ctx, x3248, x6, 32);
    let x3250: BytePoly_64 = bigint_mul!(x3248, x3249, 64);
    let x3251: BytePoly_66 = bigint_nondet_quot!(ctx, x3250, x6, 66);
    let x3252: BytePoly_32 = bigint_nondet_rem!(ctx, x3250, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3251, x6, 98), x3252, 98),
            x3250,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3252, x3, 32), 34, 1)?;
    let x3253: BytePoly_64 = bigint_mul!(x3245, x3249, 64);
    let x3254: BytePoly_66 = bigint_nondet_quot!(ctx, x3253, x6, 66);
    let x3255: BytePoly_32 = bigint_nondet_rem!(ctx, x3253, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3254, x6, 98), x3255, 98),
            x3253,
            98
        ),
        536459,
        4,
    )?;
    let x3256: BytePoly_64 = bigint_mul!(x3255, x3201, 64);
    let x3257: BytePoly_66 = bigint_nondet_quot!(ctx, x3256, x6, 66);
    let x3258: BytePoly_32 = bigint_nondet_rem!(ctx, x3256, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3257, x6, 98), x3258, 98),
            x3256,
            98
        ),
        536459,
        4,
    )?;
    let x3259: BytePoly_32 = bigint_add!(bigint_sub!(x3207, x3258, 32), x6, 32);
    let x3260: BytePoly_32 = bigint_nondet_quot!(ctx, x3259, x6, 32);
    let x3261: BytePoly_32 = bigint_nondet_rem!(ctx, x3259, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3260, x6, 64), x3261, 64),
            x3259,
            64
        ),
        260103,
        4,
    )?;
    let x3262: BytePoly_64 = bigint_mul!(x3255, x3255, 64);
    let x3263: BytePoly_66 = bigint_nondet_quot!(ctx, x3262, x6, 66);
    let x3264: BytePoly_32 = bigint_nondet_rem!(ctx, x3262, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3263, x6, 98), x3264, 98),
            x3262,
            98
        ),
        536459,
        4,
    )?;
    let x3265: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3264, x3201, 32), x6, 32),
            x3201,
            32
        ),
        x6,
        32
    );
    let x3266: BytePoly_32 = bigint_nondet_quot!(ctx, x3265, x6, 32);
    let x3267: BytePoly_32 = bigint_nondet_rem!(ctx, x3265, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3266, x6, 64), x3267, 64),
            x3265,
            64
        ),
        260103,
        4,
    )?;
    let x3268: BytePoly_64 = bigint_mul!(x3255, x3267, 64);
    let x3269: BytePoly_66 = bigint_nondet_quot!(ctx, x3268, x6, 66);
    let x3270: BytePoly_32 = bigint_nondet_rem!(ctx, x3268, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3269, x6, 98), x3270, 98),
            x3268,
            98
        ),
        536459,
        4,
    )?;
    let x3271: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3270, x3261, 32), 32), x6, 32);
    let x3272: BytePoly_32 = bigint_nondet_quot!(ctx, x3271, x6, 32);
    let x3273: BytePoly_32 = bigint_nondet_rem!(ctx, x3271, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3272, x6, 64), x3273, 64),
            x3271,
            64
        ),
        260103,
        4,
    )?;
    let x3274: BytePoly_1 = bigint_nondet_rem!(ctx, x3209, x2, 1);
    let x3275: BytePoly_33 = bigint_nondet_quot!(ctx, x3209, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3275, x2, 34), x3274, 34),
            x3209,
            34
        ),
        268231,
        4,
    )?;
    let x3276: BytePoly_1 = bigint_sub!(x3, x3274, 1);
    eqz(ctx, &bigint_mul!(x3274, x3276, 2), 8131, 2)?;
    let x3277: BytePoly_32 = bigint_add!(bigint_sub!(x3267, x3237, 32), x6, 32);
    let x3278: BytePoly_32 = bigint_nondet_inv!(ctx, x3277, x6, 32);
    let x3279: BytePoly_64 = bigint_mul!(x3277, x3278, 64);
    let x3280: BytePoly_66 = bigint_nondet_quot!(ctx, x3279, x6, 66);
    let x3281: BytePoly_32 = bigint_nondet_rem!(ctx, x3279, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3280, x6, 98), x3281, 98),
            x3279,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3281, x1, 32), 34, 1)?;
    let x3282: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3273, x3239, 32), x6, 32),
        x3278,
        64
    );
    let x3283: BytePoly_66 = bigint_nondet_quot!(ctx, x3282, x6, 66);
    let x3284: BytePoly_32 = bigint_nondet_rem!(ctx, x3282, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3283, x6, 98), x3284, 98),
            x3282,
            98
        ),
        536459,
        4,
    )?;
    let x3285: BytePoly_64 = bigint_mul!(x3284, x3237, 64);
    let x3286: BytePoly_66 = bigint_nondet_quot!(ctx, x3285, x6, 66);
    let x3287: BytePoly_32 = bigint_nondet_rem!(ctx, x3285, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3286, x6, 98), x3287, 98),
            x3285,
            98
        ),
        536459,
        4,
    )?;
    let x3288: BytePoly_32 = bigint_add!(bigint_sub!(x3239, x3287, 32), x6, 32);
    let x3289: BytePoly_32 = bigint_nondet_quot!(ctx, x3288, x6, 32);
    let x3290: BytePoly_32 = bigint_nondet_rem!(ctx, x3288, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3289, x6, 64), x3290, 64),
            x3288,
            64
        ),
        260103,
        4,
    )?;
    let x3291: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3284, x3284, 64), x3237, 64),
                x6,
                64
            ),
            x3267,
            64
        ),
        x6,
        64
    );
    let x3292: BytePoly_66 = bigint_nondet_quot!(ctx, x3291, x6, 66);
    let x3293: BytePoly_32 = bigint_nondet_rem!(ctx, x3291, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3292, x6, 98), x3293, 98),
            x3291,
            98
        ),
        536459,
        4,
    )?;
    let x3294: BytePoly_64 = bigint_mul!(x3284, x3293, 64);
    let x3295: BytePoly_66 = bigint_nondet_quot!(ctx, x3294, x6, 66);
    let x3296: BytePoly_32 = bigint_nondet_rem!(ctx, x3294, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3295, x6, 98), x3296, 98),
            x3294,
            98
        ),
        536459,
        4,
    )?;
    let x3297: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3296, x3290, 32), 32), x6, 32);
    let x3298: BytePoly_32 = bigint_nondet_quot!(ctx, x3297, x6, 32);
    let x3299: BytePoly_32 = bigint_nondet_rem!(ctx, x3297, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3298, x6, 64), x3299, 64),
            x3297,
            64
        ),
        260103,
        4,
    )?;
    let x3300: BytePoly_33 = bigint_add!(
        bigint_mul!(x3293, x3274, 33),
        bigint_mul!(x3237, x3276, 33),
        33
    );
    let x3301: BytePoly_33 = bigint_add!(
        bigint_mul!(x3299, x3274, 33),
        bigint_mul!(x3239, x3276, 33),
        33
    );
    let x3302: BytePoly_35 = bigint_nondet_quot!(ctx, x3300, x6, 35);
    let x3303: BytePoly_32 = bigint_nondet_rem!(ctx, x3300, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3302, x6, 67), x3303, 67),
            x3300,
            67
        ),
        284487,
        4,
    )?;
    let x3304: BytePoly_35 = bigint_nondet_quot!(ctx, x3301, x6, 35);
    let x3305: BytePoly_32 = bigint_nondet_rem!(ctx, x3301, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3304, x6, 67), x3305, 67),
            x3301,
            67
        ),
        284487,
        4,
    )?;
    let x3306: BytePoly_64 = bigint_mul!(x3267, x3267, 64);
    let x3307: BytePoly_66 = bigint_nondet_quot!(ctx, x3306, x6, 66);
    let x3308: BytePoly_32 = bigint_nondet_rem!(ctx, x3306, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3307, x6, 98), x3308, 98),
            x3306,
            98
        ),
        536459,
        4,
    )?;
    let x3309: BytePoly_33 = bigint_add!(bigint_mul!(x3308, x0, 33), x5, 33);
    let x3310: BytePoly_35 = bigint_nondet_quot!(ctx, x3309, x6, 35);
    let x3311: BytePoly_32 = bigint_nondet_rem!(ctx, x3309, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3310, x6, 67), x3311, 67),
            x3309,
            67
        ),
        284487,
        4,
    )?;
    let x3312: BytePoly_32 = bigint_add!(x3273, x3273, 32);
    let x3313: BytePoly_32 = bigint_nondet_quot!(ctx, x3312, x6, 32);
    let x3314: BytePoly_32 = bigint_nondet_rem!(ctx, x3312, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3313, x6, 64), x3314, 64),
            x3312,
            64
        ),
        260103,
        4,
    )?;
    let x3315: BytePoly_32 = bigint_nondet_inv!(ctx, x3314, x6, 32);
    let x3316: BytePoly_64 = bigint_mul!(x3314, x3315, 64);
    let x3317: BytePoly_66 = bigint_nondet_quot!(ctx, x3316, x6, 66);
    let x3318: BytePoly_32 = bigint_nondet_rem!(ctx, x3316, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3317, x6, 98), x3318, 98),
            x3316,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3318, x3, 32), 34, 1)?;
    let x3319: BytePoly_64 = bigint_mul!(x3311, x3315, 64);
    let x3320: BytePoly_66 = bigint_nondet_quot!(ctx, x3319, x6, 66);
    let x3321: BytePoly_32 = bigint_nondet_rem!(ctx, x3319, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3320, x6, 98), x3321, 98),
            x3319,
            98
        ),
        536459,
        4,
    )?;
    let x3322: BytePoly_64 = bigint_mul!(x3321, x3267, 64);
    let x3323: BytePoly_66 = bigint_nondet_quot!(ctx, x3322, x6, 66);
    let x3324: BytePoly_32 = bigint_nondet_rem!(ctx, x3322, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3323, x6, 98), x3324, 98),
            x3322,
            98
        ),
        536459,
        4,
    )?;
    let x3325: BytePoly_32 = bigint_add!(bigint_sub!(x3273, x3324, 32), x6, 32);
    let x3326: BytePoly_32 = bigint_nondet_quot!(ctx, x3325, x6, 32);
    let x3327: BytePoly_32 = bigint_nondet_rem!(ctx, x3325, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3326, x6, 64), x3327, 64),
            x3325,
            64
        ),
        260103,
        4,
    )?;
    let x3328: BytePoly_64 = bigint_mul!(x3321, x3321, 64);
    let x3329: BytePoly_66 = bigint_nondet_quot!(ctx, x3328, x6, 66);
    let x3330: BytePoly_32 = bigint_nondet_rem!(ctx, x3328, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3329, x6, 98), x3330, 98),
            x3328,
            98
        ),
        536459,
        4,
    )?;
    let x3331: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3330, x3267, 32), x6, 32),
            x3267,
            32
        ),
        x6,
        32
    );
    let x3332: BytePoly_32 = bigint_nondet_quot!(ctx, x3331, x6, 32);
    let x3333: BytePoly_32 = bigint_nondet_rem!(ctx, x3331, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3332, x6, 64), x3333, 64),
            x3331,
            64
        ),
        260103,
        4,
    )?;
    let x3334: BytePoly_64 = bigint_mul!(x3321, x3333, 64);
    let x3335: BytePoly_66 = bigint_nondet_quot!(ctx, x3334, x6, 66);
    let x3336: BytePoly_32 = bigint_nondet_rem!(ctx, x3334, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3335, x6, 98), x3336, 98),
            x3334,
            98
        ),
        536459,
        4,
    )?;
    let x3337: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3336, x3327, 32), 32), x6, 32);
    let x3338: BytePoly_32 = bigint_nondet_quot!(ctx, x3337, x6, 32);
    let x3339: BytePoly_32 = bigint_nondet_rem!(ctx, x3337, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3338, x6, 64), x3339, 64),
            x3337,
            64
        ),
        260103,
        4,
    )?;
    let x3340: BytePoly_1 = bigint_nondet_rem!(ctx, x3275, x2, 1);
    let x3341: BytePoly_33 = bigint_nondet_quot!(ctx, x3275, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3341, x2, 34), x3340, 34),
            x3275,
            34
        ),
        268231,
        4,
    )?;
    let x3342: BytePoly_1 = bigint_sub!(x3, x3340, 1);
    eqz(ctx, &bigint_mul!(x3340, x3342, 2), 8131, 2)?;
    let x3343: BytePoly_32 = bigint_add!(bigint_sub!(x3333, x3303, 32), x6, 32);
    let x3344: BytePoly_32 = bigint_nondet_inv!(ctx, x3343, x6, 32);
    let x3345: BytePoly_64 = bigint_mul!(x3343, x3344, 64);
    let x3346: BytePoly_66 = bigint_nondet_quot!(ctx, x3345, x6, 66);
    let x3347: BytePoly_32 = bigint_nondet_rem!(ctx, x3345, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3346, x6, 98), x3347, 98),
            x3345,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3347, x1, 32), 34, 1)?;
    let x3348: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3339, x3305, 32), x6, 32),
        x3344,
        64
    );
    let x3349: BytePoly_66 = bigint_nondet_quot!(ctx, x3348, x6, 66);
    let x3350: BytePoly_32 = bigint_nondet_rem!(ctx, x3348, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3349, x6, 98), x3350, 98),
            x3348,
            98
        ),
        536459,
        4,
    )?;
    let x3351: BytePoly_64 = bigint_mul!(x3350, x3303, 64);
    let x3352: BytePoly_66 = bigint_nondet_quot!(ctx, x3351, x6, 66);
    let x3353: BytePoly_32 = bigint_nondet_rem!(ctx, x3351, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3352, x6, 98), x3353, 98),
            x3351,
            98
        ),
        536459,
        4,
    )?;
    let x3354: BytePoly_32 = bigint_add!(bigint_sub!(x3305, x3353, 32), x6, 32);
    let x3355: BytePoly_32 = bigint_nondet_quot!(ctx, x3354, x6, 32);
    let x3356: BytePoly_32 = bigint_nondet_rem!(ctx, x3354, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3355, x6, 64), x3356, 64),
            x3354,
            64
        ),
        260103,
        4,
    )?;
    let x3357: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3350, x3350, 64), x3303, 64),
                x6,
                64
            ),
            x3333,
            64
        ),
        x6,
        64
    );
    let x3358: BytePoly_66 = bigint_nondet_quot!(ctx, x3357, x6, 66);
    let x3359: BytePoly_32 = bigint_nondet_rem!(ctx, x3357, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3358, x6, 98), x3359, 98),
            x3357,
            98
        ),
        536459,
        4,
    )?;
    let x3360: BytePoly_64 = bigint_mul!(x3350, x3359, 64);
    let x3361: BytePoly_66 = bigint_nondet_quot!(ctx, x3360, x6, 66);
    let x3362: BytePoly_32 = bigint_nondet_rem!(ctx, x3360, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3361, x6, 98), x3362, 98),
            x3360,
            98
        ),
        536459,
        4,
    )?;
    let x3363: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3362, x3356, 32), 32), x6, 32);
    let x3364: BytePoly_32 = bigint_nondet_quot!(ctx, x3363, x6, 32);
    let x3365: BytePoly_32 = bigint_nondet_rem!(ctx, x3363, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3364, x6, 64), x3365, 64),
            x3363,
            64
        ),
        260103,
        4,
    )?;
    let x3366: BytePoly_33 = bigint_add!(
        bigint_mul!(x3359, x3340, 33),
        bigint_mul!(x3303, x3342, 33),
        33
    );
    let x3367: BytePoly_33 = bigint_add!(
        bigint_mul!(x3365, x3340, 33),
        bigint_mul!(x3305, x3342, 33),
        33
    );
    let x3368: BytePoly_35 = bigint_nondet_quot!(ctx, x3366, x6, 35);
    let x3369: BytePoly_32 = bigint_nondet_rem!(ctx, x3366, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3368, x6, 67), x3369, 67),
            x3366,
            67
        ),
        284487,
        4,
    )?;
    let x3370: BytePoly_35 = bigint_nondet_quot!(ctx, x3367, x6, 35);
    let x3371: BytePoly_32 = bigint_nondet_rem!(ctx, x3367, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3370, x6, 67), x3371, 67),
            x3367,
            67
        ),
        284487,
        4,
    )?;
    let x3372: BytePoly_64 = bigint_mul!(x3333, x3333, 64);
    let x3373: BytePoly_66 = bigint_nondet_quot!(ctx, x3372, x6, 66);
    let x3374: BytePoly_32 = bigint_nondet_rem!(ctx, x3372, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3373, x6, 98), x3374, 98),
            x3372,
            98
        ),
        536459,
        4,
    )?;
    let x3375: BytePoly_33 = bigint_add!(bigint_mul!(x3374, x0, 33), x5, 33);
    let x3376: BytePoly_35 = bigint_nondet_quot!(ctx, x3375, x6, 35);
    let x3377: BytePoly_32 = bigint_nondet_rem!(ctx, x3375, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3376, x6, 67), x3377, 67),
            x3375,
            67
        ),
        284487,
        4,
    )?;
    let x3378: BytePoly_32 = bigint_add!(x3339, x3339, 32);
    let x3379: BytePoly_32 = bigint_nondet_quot!(ctx, x3378, x6, 32);
    let x3380: BytePoly_32 = bigint_nondet_rem!(ctx, x3378, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3379, x6, 64), x3380, 64),
            x3378,
            64
        ),
        260103,
        4,
    )?;
    let x3381: BytePoly_32 = bigint_nondet_inv!(ctx, x3380, x6, 32);
    let x3382: BytePoly_64 = bigint_mul!(x3380, x3381, 64);
    let x3383: BytePoly_66 = bigint_nondet_quot!(ctx, x3382, x6, 66);
    let x3384: BytePoly_32 = bigint_nondet_rem!(ctx, x3382, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3383, x6, 98), x3384, 98),
            x3382,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3384, x3, 32), 34, 1)?;
    let x3385: BytePoly_64 = bigint_mul!(x3377, x3381, 64);
    let x3386: BytePoly_66 = bigint_nondet_quot!(ctx, x3385, x6, 66);
    let x3387: BytePoly_32 = bigint_nondet_rem!(ctx, x3385, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3386, x6, 98), x3387, 98),
            x3385,
            98
        ),
        536459,
        4,
    )?;
    let x3388: BytePoly_64 = bigint_mul!(x3387, x3333, 64);
    let x3389: BytePoly_66 = bigint_nondet_quot!(ctx, x3388, x6, 66);
    let x3390: BytePoly_32 = bigint_nondet_rem!(ctx, x3388, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3389, x6, 98), x3390, 98),
            x3388,
            98
        ),
        536459,
        4,
    )?;
    let x3391: BytePoly_32 = bigint_add!(bigint_sub!(x3339, x3390, 32), x6, 32);
    let x3392: BytePoly_32 = bigint_nondet_quot!(ctx, x3391, x6, 32);
    let x3393: BytePoly_32 = bigint_nondet_rem!(ctx, x3391, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3392, x6, 64), x3393, 64),
            x3391,
            64
        ),
        260103,
        4,
    )?;
    let x3394: BytePoly_64 = bigint_mul!(x3387, x3387, 64);
    let x3395: BytePoly_66 = bigint_nondet_quot!(ctx, x3394, x6, 66);
    let x3396: BytePoly_32 = bigint_nondet_rem!(ctx, x3394, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3395, x6, 98), x3396, 98),
            x3394,
            98
        ),
        536459,
        4,
    )?;
    let x3397: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3396, x3333, 32), x6, 32),
            x3333,
            32
        ),
        x6,
        32
    );
    let x3398: BytePoly_32 = bigint_nondet_quot!(ctx, x3397, x6, 32);
    let x3399: BytePoly_32 = bigint_nondet_rem!(ctx, x3397, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3398, x6, 64), x3399, 64),
            x3397,
            64
        ),
        260103,
        4,
    )?;
    let x3400: BytePoly_64 = bigint_mul!(x3387, x3399, 64);
    let x3401: BytePoly_66 = bigint_nondet_quot!(ctx, x3400, x6, 66);
    let x3402: BytePoly_32 = bigint_nondet_rem!(ctx, x3400, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3401, x6, 98), x3402, 98),
            x3400,
            98
        ),
        536459,
        4,
    )?;
    let x3403: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3402, x3393, 32), 32), x6, 32);
    let x3404: BytePoly_32 = bigint_nondet_quot!(ctx, x3403, x6, 32);
    let x3405: BytePoly_32 = bigint_nondet_rem!(ctx, x3403, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3404, x6, 64), x3405, 64),
            x3403,
            64
        ),
        260103,
        4,
    )?;
    let x3406: BytePoly_1 = bigint_nondet_rem!(ctx, x3341, x2, 1);
    let x3407: BytePoly_33 = bigint_nondet_quot!(ctx, x3341, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3407, x2, 34), x3406, 34),
            x3341,
            34
        ),
        268231,
        4,
    )?;
    let x3408: BytePoly_1 = bigint_sub!(x3, x3406, 1);
    eqz(ctx, &bigint_mul!(x3406, x3408, 2), 8131, 2)?;
    let x3409: BytePoly_32 = bigint_add!(bigint_sub!(x3399, x3369, 32), x6, 32);
    let x3410: BytePoly_32 = bigint_nondet_inv!(ctx, x3409, x6, 32);
    let x3411: BytePoly_64 = bigint_mul!(x3409, x3410, 64);
    let x3412: BytePoly_66 = bigint_nondet_quot!(ctx, x3411, x6, 66);
    let x3413: BytePoly_32 = bigint_nondet_rem!(ctx, x3411, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3412, x6, 98), x3413, 98),
            x3411,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3413, x1, 32), 34, 1)?;
    let x3414: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3405, x3371, 32), x6, 32),
        x3410,
        64
    );
    let x3415: BytePoly_66 = bigint_nondet_quot!(ctx, x3414, x6, 66);
    let x3416: BytePoly_32 = bigint_nondet_rem!(ctx, x3414, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3415, x6, 98), x3416, 98),
            x3414,
            98
        ),
        536459,
        4,
    )?;
    let x3417: BytePoly_64 = bigint_mul!(x3416, x3369, 64);
    let x3418: BytePoly_66 = bigint_nondet_quot!(ctx, x3417, x6, 66);
    let x3419: BytePoly_32 = bigint_nondet_rem!(ctx, x3417, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3418, x6, 98), x3419, 98),
            x3417,
            98
        ),
        536459,
        4,
    )?;
    let x3420: BytePoly_32 = bigint_add!(bigint_sub!(x3371, x3419, 32), x6, 32);
    let x3421: BytePoly_32 = bigint_nondet_quot!(ctx, x3420, x6, 32);
    let x3422: BytePoly_32 = bigint_nondet_rem!(ctx, x3420, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3421, x6, 64), x3422, 64),
            x3420,
            64
        ),
        260103,
        4,
    )?;
    let x3423: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3416, x3416, 64), x3369, 64),
                x6,
                64
            ),
            x3399,
            64
        ),
        x6,
        64
    );
    let x3424: BytePoly_66 = bigint_nondet_quot!(ctx, x3423, x6, 66);
    let x3425: BytePoly_32 = bigint_nondet_rem!(ctx, x3423, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3424, x6, 98), x3425, 98),
            x3423,
            98
        ),
        536459,
        4,
    )?;
    let x3426: BytePoly_64 = bigint_mul!(x3416, x3425, 64);
    let x3427: BytePoly_66 = bigint_nondet_quot!(ctx, x3426, x6, 66);
    let x3428: BytePoly_32 = bigint_nondet_rem!(ctx, x3426, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3427, x6, 98), x3428, 98),
            x3426,
            98
        ),
        536459,
        4,
    )?;
    let x3429: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3428, x3422, 32), 32), x6, 32);
    let x3430: BytePoly_32 = bigint_nondet_quot!(ctx, x3429, x6, 32);
    let x3431: BytePoly_32 = bigint_nondet_rem!(ctx, x3429, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3430, x6, 64), x3431, 64),
            x3429,
            64
        ),
        260103,
        4,
    )?;
    let x3432: BytePoly_33 = bigint_add!(
        bigint_mul!(x3425, x3406, 33),
        bigint_mul!(x3369, x3408, 33),
        33
    );
    let x3433: BytePoly_33 = bigint_add!(
        bigint_mul!(x3431, x3406, 33),
        bigint_mul!(x3371, x3408, 33),
        33
    );
    let x3434: BytePoly_35 = bigint_nondet_quot!(ctx, x3432, x6, 35);
    let x3435: BytePoly_32 = bigint_nondet_rem!(ctx, x3432, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3434, x6, 67), x3435, 67),
            x3432,
            67
        ),
        284487,
        4,
    )?;
    let x3436: BytePoly_35 = bigint_nondet_quot!(ctx, x3433, x6, 35);
    let x3437: BytePoly_32 = bigint_nondet_rem!(ctx, x3433, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3436, x6, 67), x3437, 67),
            x3433,
            67
        ),
        284487,
        4,
    )?;
    let x3438: BytePoly_64 = bigint_mul!(x3399, x3399, 64);
    let x3439: BytePoly_66 = bigint_nondet_quot!(ctx, x3438, x6, 66);
    let x3440: BytePoly_32 = bigint_nondet_rem!(ctx, x3438, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3439, x6, 98), x3440, 98),
            x3438,
            98
        ),
        536459,
        4,
    )?;
    let x3441: BytePoly_33 = bigint_add!(bigint_mul!(x3440, x0, 33), x5, 33);
    let x3442: BytePoly_35 = bigint_nondet_quot!(ctx, x3441, x6, 35);
    let x3443: BytePoly_32 = bigint_nondet_rem!(ctx, x3441, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3442, x6, 67), x3443, 67),
            x3441,
            67
        ),
        284487,
        4,
    )?;
    let x3444: BytePoly_32 = bigint_add!(x3405, x3405, 32);
    let x3445: BytePoly_32 = bigint_nondet_quot!(ctx, x3444, x6, 32);
    let x3446: BytePoly_32 = bigint_nondet_rem!(ctx, x3444, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3445, x6, 64), x3446, 64),
            x3444,
            64
        ),
        260103,
        4,
    )?;
    let x3447: BytePoly_32 = bigint_nondet_inv!(ctx, x3446, x6, 32);
    let x3448: BytePoly_64 = bigint_mul!(x3446, x3447, 64);
    let x3449: BytePoly_66 = bigint_nondet_quot!(ctx, x3448, x6, 66);
    let x3450: BytePoly_32 = bigint_nondet_rem!(ctx, x3448, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3449, x6, 98), x3450, 98),
            x3448,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3450, x3, 32), 34, 1)?;
    let x3451: BytePoly_64 = bigint_mul!(x3443, x3447, 64);
    let x3452: BytePoly_66 = bigint_nondet_quot!(ctx, x3451, x6, 66);
    let x3453: BytePoly_32 = bigint_nondet_rem!(ctx, x3451, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3452, x6, 98), x3453, 98),
            x3451,
            98
        ),
        536459,
        4,
    )?;
    let x3454: BytePoly_64 = bigint_mul!(x3453, x3399, 64);
    let x3455: BytePoly_66 = bigint_nondet_quot!(ctx, x3454, x6, 66);
    let x3456: BytePoly_32 = bigint_nondet_rem!(ctx, x3454, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3455, x6, 98), x3456, 98),
            x3454,
            98
        ),
        536459,
        4,
    )?;
    let x3457: BytePoly_32 = bigint_add!(bigint_sub!(x3405, x3456, 32), x6, 32);
    let x3458: BytePoly_32 = bigint_nondet_quot!(ctx, x3457, x6, 32);
    let x3459: BytePoly_32 = bigint_nondet_rem!(ctx, x3457, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3458, x6, 64), x3459, 64),
            x3457,
            64
        ),
        260103,
        4,
    )?;
    let x3460: BytePoly_64 = bigint_mul!(x3453, x3453, 64);
    let x3461: BytePoly_66 = bigint_nondet_quot!(ctx, x3460, x6, 66);
    let x3462: BytePoly_32 = bigint_nondet_rem!(ctx, x3460, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3461, x6, 98), x3462, 98),
            x3460,
            98
        ),
        536459,
        4,
    )?;
    let x3463: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3462, x3399, 32), x6, 32),
            x3399,
            32
        ),
        x6,
        32
    );
    let x3464: BytePoly_32 = bigint_nondet_quot!(ctx, x3463, x6, 32);
    let x3465: BytePoly_32 = bigint_nondet_rem!(ctx, x3463, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3464, x6, 64), x3465, 64),
            x3463,
            64
        ),
        260103,
        4,
    )?;
    let x3466: BytePoly_64 = bigint_mul!(x3453, x3465, 64);
    let x3467: BytePoly_66 = bigint_nondet_quot!(ctx, x3466, x6, 66);
    let x3468: BytePoly_32 = bigint_nondet_rem!(ctx, x3466, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3467, x6, 98), x3468, 98),
            x3466,
            98
        ),
        536459,
        4,
    )?;
    let x3469: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3468, x3459, 32), 32), x6, 32);
    let x3470: BytePoly_32 = bigint_nondet_quot!(ctx, x3469, x6, 32);
    let x3471: BytePoly_32 = bigint_nondet_rem!(ctx, x3469, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3470, x6, 64), x3471, 64),
            x3469,
            64
        ),
        260103,
        4,
    )?;
    let x3472: BytePoly_1 = bigint_nondet_rem!(ctx, x3407, x2, 1);
    let x3473: BytePoly_33 = bigint_nondet_quot!(ctx, x3407, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3473, x2, 34), x3472, 34),
            x3407,
            34
        ),
        268231,
        4,
    )?;
    let x3474: BytePoly_1 = bigint_sub!(x3, x3472, 1);
    eqz(ctx, &bigint_mul!(x3472, x3474, 2), 8131, 2)?;
    let x3475: BytePoly_32 = bigint_add!(bigint_sub!(x3465, x3435, 32), x6, 32);
    let x3476: BytePoly_32 = bigint_nondet_inv!(ctx, x3475, x6, 32);
    let x3477: BytePoly_64 = bigint_mul!(x3475, x3476, 64);
    let x3478: BytePoly_66 = bigint_nondet_quot!(ctx, x3477, x6, 66);
    let x3479: BytePoly_32 = bigint_nondet_rem!(ctx, x3477, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3478, x6, 98), x3479, 98),
            x3477,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3479, x1, 32), 34, 1)?;
    let x3480: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3471, x3437, 32), x6, 32),
        x3476,
        64
    );
    let x3481: BytePoly_66 = bigint_nondet_quot!(ctx, x3480, x6, 66);
    let x3482: BytePoly_32 = bigint_nondet_rem!(ctx, x3480, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3481, x6, 98), x3482, 98),
            x3480,
            98
        ),
        536459,
        4,
    )?;
    let x3483: BytePoly_64 = bigint_mul!(x3482, x3435, 64);
    let x3484: BytePoly_66 = bigint_nondet_quot!(ctx, x3483, x6, 66);
    let x3485: BytePoly_32 = bigint_nondet_rem!(ctx, x3483, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3484, x6, 98), x3485, 98),
            x3483,
            98
        ),
        536459,
        4,
    )?;
    let x3486: BytePoly_32 = bigint_add!(bigint_sub!(x3437, x3485, 32), x6, 32);
    let x3487: BytePoly_32 = bigint_nondet_quot!(ctx, x3486, x6, 32);
    let x3488: BytePoly_32 = bigint_nondet_rem!(ctx, x3486, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3487, x6, 64), x3488, 64),
            x3486,
            64
        ),
        260103,
        4,
    )?;
    let x3489: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3482, x3482, 64), x3435, 64),
                x6,
                64
            ),
            x3465,
            64
        ),
        x6,
        64
    );
    let x3490: BytePoly_66 = bigint_nondet_quot!(ctx, x3489, x6, 66);
    let x3491: BytePoly_32 = bigint_nondet_rem!(ctx, x3489, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3490, x6, 98), x3491, 98),
            x3489,
            98
        ),
        536459,
        4,
    )?;
    let x3492: BytePoly_64 = bigint_mul!(x3482, x3491, 64);
    let x3493: BytePoly_66 = bigint_nondet_quot!(ctx, x3492, x6, 66);
    let x3494: BytePoly_32 = bigint_nondet_rem!(ctx, x3492, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3493, x6, 98), x3494, 98),
            x3492,
            98
        ),
        536459,
        4,
    )?;
    let x3495: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3494, x3488, 32), 32), x6, 32);
    let x3496: BytePoly_32 = bigint_nondet_quot!(ctx, x3495, x6, 32);
    let x3497: BytePoly_32 = bigint_nondet_rem!(ctx, x3495, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3496, x6, 64), x3497, 64),
            x3495,
            64
        ),
        260103,
        4,
    )?;
    let x3498: BytePoly_33 = bigint_add!(
        bigint_mul!(x3491, x3472, 33),
        bigint_mul!(x3435, x3474, 33),
        33
    );
    let x3499: BytePoly_33 = bigint_add!(
        bigint_mul!(x3497, x3472, 33),
        bigint_mul!(x3437, x3474, 33),
        33
    );
    let x3500: BytePoly_35 = bigint_nondet_quot!(ctx, x3498, x6, 35);
    let x3501: BytePoly_32 = bigint_nondet_rem!(ctx, x3498, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3500, x6, 67), x3501, 67),
            x3498,
            67
        ),
        284487,
        4,
    )?;
    let x3502: BytePoly_35 = bigint_nondet_quot!(ctx, x3499, x6, 35);
    let x3503: BytePoly_32 = bigint_nondet_rem!(ctx, x3499, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3502, x6, 67), x3503, 67),
            x3499,
            67
        ),
        284487,
        4,
    )?;
    let x3504: BytePoly_64 = bigint_mul!(x3465, x3465, 64);
    let x3505: BytePoly_66 = bigint_nondet_quot!(ctx, x3504, x6, 66);
    let x3506: BytePoly_32 = bigint_nondet_rem!(ctx, x3504, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3505, x6, 98), x3506, 98),
            x3504,
            98
        ),
        536459,
        4,
    )?;
    let x3507: BytePoly_33 = bigint_add!(bigint_mul!(x3506, x0, 33), x5, 33);
    let x3508: BytePoly_35 = bigint_nondet_quot!(ctx, x3507, x6, 35);
    let x3509: BytePoly_32 = bigint_nondet_rem!(ctx, x3507, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3508, x6, 67), x3509, 67),
            x3507,
            67
        ),
        284487,
        4,
    )?;
    let x3510: BytePoly_32 = bigint_add!(x3471, x3471, 32);
    let x3511: BytePoly_32 = bigint_nondet_quot!(ctx, x3510, x6, 32);
    let x3512: BytePoly_32 = bigint_nondet_rem!(ctx, x3510, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3511, x6, 64), x3512, 64),
            x3510,
            64
        ),
        260103,
        4,
    )?;
    let x3513: BytePoly_32 = bigint_nondet_inv!(ctx, x3512, x6, 32);
    let x3514: BytePoly_64 = bigint_mul!(x3512, x3513, 64);
    let x3515: BytePoly_66 = bigint_nondet_quot!(ctx, x3514, x6, 66);
    let x3516: BytePoly_32 = bigint_nondet_rem!(ctx, x3514, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3515, x6, 98), x3516, 98),
            x3514,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3516, x3, 32), 34, 1)?;
    let x3517: BytePoly_64 = bigint_mul!(x3509, x3513, 64);
    let x3518: BytePoly_66 = bigint_nondet_quot!(ctx, x3517, x6, 66);
    let x3519: BytePoly_32 = bigint_nondet_rem!(ctx, x3517, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3518, x6, 98), x3519, 98),
            x3517,
            98
        ),
        536459,
        4,
    )?;
    let x3520: BytePoly_64 = bigint_mul!(x3519, x3465, 64);
    let x3521: BytePoly_66 = bigint_nondet_quot!(ctx, x3520, x6, 66);
    let x3522: BytePoly_32 = bigint_nondet_rem!(ctx, x3520, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3521, x6, 98), x3522, 98),
            x3520,
            98
        ),
        536459,
        4,
    )?;
    let x3523: BytePoly_32 = bigint_add!(bigint_sub!(x3471, x3522, 32), x6, 32);
    let x3524: BytePoly_32 = bigint_nondet_quot!(ctx, x3523, x6, 32);
    let x3525: BytePoly_32 = bigint_nondet_rem!(ctx, x3523, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3524, x6, 64), x3525, 64),
            x3523,
            64
        ),
        260103,
        4,
    )?;
    let x3526: BytePoly_64 = bigint_mul!(x3519, x3519, 64);
    let x3527: BytePoly_66 = bigint_nondet_quot!(ctx, x3526, x6, 66);
    let x3528: BytePoly_32 = bigint_nondet_rem!(ctx, x3526, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3527, x6, 98), x3528, 98),
            x3526,
            98
        ),
        536459,
        4,
    )?;
    let x3529: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3528, x3465, 32), x6, 32),
            x3465,
            32
        ),
        x6,
        32
    );
    let x3530: BytePoly_32 = bigint_nondet_quot!(ctx, x3529, x6, 32);
    let x3531: BytePoly_32 = bigint_nondet_rem!(ctx, x3529, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3530, x6, 64), x3531, 64),
            x3529,
            64
        ),
        260103,
        4,
    )?;
    let x3532: BytePoly_64 = bigint_mul!(x3519, x3531, 64);
    let x3533: BytePoly_66 = bigint_nondet_quot!(ctx, x3532, x6, 66);
    let x3534: BytePoly_32 = bigint_nondet_rem!(ctx, x3532, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3533, x6, 98), x3534, 98),
            x3532,
            98
        ),
        536459,
        4,
    )?;
    let x3535: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3534, x3525, 32), 32), x6, 32);
    let x3536: BytePoly_32 = bigint_nondet_quot!(ctx, x3535, x6, 32);
    let x3537: BytePoly_32 = bigint_nondet_rem!(ctx, x3535, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3536, x6, 64), x3537, 64),
            x3535,
            64
        ),
        260103,
        4,
    )?;
    let x3538: BytePoly_1 = bigint_nondet_rem!(ctx, x3473, x2, 1);
    let x3539: BytePoly_33 = bigint_nondet_quot!(ctx, x3473, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3539, x2, 34), x3538, 34),
            x3473,
            34
        ),
        268231,
        4,
    )?;
    let x3540: BytePoly_1 = bigint_sub!(x3, x3538, 1);
    eqz(ctx, &bigint_mul!(x3538, x3540, 2), 8131, 2)?;
    let x3541: BytePoly_32 = bigint_add!(bigint_sub!(x3531, x3501, 32), x6, 32);
    let x3542: BytePoly_32 = bigint_nondet_inv!(ctx, x3541, x6, 32);
    let x3543: BytePoly_64 = bigint_mul!(x3541, x3542, 64);
    let x3544: BytePoly_66 = bigint_nondet_quot!(ctx, x3543, x6, 66);
    let x3545: BytePoly_32 = bigint_nondet_rem!(ctx, x3543, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3544, x6, 98), x3545, 98),
            x3543,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3545, x1, 32), 34, 1)?;
    let x3546: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3537, x3503, 32), x6, 32),
        x3542,
        64
    );
    let x3547: BytePoly_66 = bigint_nondet_quot!(ctx, x3546, x6, 66);
    let x3548: BytePoly_32 = bigint_nondet_rem!(ctx, x3546, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3547, x6, 98), x3548, 98),
            x3546,
            98
        ),
        536459,
        4,
    )?;
    let x3549: BytePoly_64 = bigint_mul!(x3548, x3501, 64);
    let x3550: BytePoly_66 = bigint_nondet_quot!(ctx, x3549, x6, 66);
    let x3551: BytePoly_32 = bigint_nondet_rem!(ctx, x3549, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3550, x6, 98), x3551, 98),
            x3549,
            98
        ),
        536459,
        4,
    )?;
    let x3552: BytePoly_32 = bigint_add!(bigint_sub!(x3503, x3551, 32), x6, 32);
    let x3553: BytePoly_32 = bigint_nondet_quot!(ctx, x3552, x6, 32);
    let x3554: BytePoly_32 = bigint_nondet_rem!(ctx, x3552, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3553, x6, 64), x3554, 64),
            x3552,
            64
        ),
        260103,
        4,
    )?;
    let x3555: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3548, x3548, 64), x3501, 64),
                x6,
                64
            ),
            x3531,
            64
        ),
        x6,
        64
    );
    let x3556: BytePoly_66 = bigint_nondet_quot!(ctx, x3555, x6, 66);
    let x3557: BytePoly_32 = bigint_nondet_rem!(ctx, x3555, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3556, x6, 98), x3557, 98),
            x3555,
            98
        ),
        536459,
        4,
    )?;
    let x3558: BytePoly_64 = bigint_mul!(x3548, x3557, 64);
    let x3559: BytePoly_66 = bigint_nondet_quot!(ctx, x3558, x6, 66);
    let x3560: BytePoly_32 = bigint_nondet_rem!(ctx, x3558, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3559, x6, 98), x3560, 98),
            x3558,
            98
        ),
        536459,
        4,
    )?;
    let x3561: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3560, x3554, 32), 32), x6, 32);
    let x3562: BytePoly_32 = bigint_nondet_quot!(ctx, x3561, x6, 32);
    let x3563: BytePoly_32 = bigint_nondet_rem!(ctx, x3561, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3562, x6, 64), x3563, 64),
            x3561,
            64
        ),
        260103,
        4,
    )?;
    let x3564: BytePoly_33 = bigint_add!(
        bigint_mul!(x3557, x3538, 33),
        bigint_mul!(x3501, x3540, 33),
        33
    );
    let x3565: BytePoly_33 = bigint_add!(
        bigint_mul!(x3563, x3538, 33),
        bigint_mul!(x3503, x3540, 33),
        33
    );
    let x3566: BytePoly_35 = bigint_nondet_quot!(ctx, x3564, x6, 35);
    let x3567: BytePoly_32 = bigint_nondet_rem!(ctx, x3564, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3566, x6, 67), x3567, 67),
            x3564,
            67
        ),
        284487,
        4,
    )?;
    let x3568: BytePoly_35 = bigint_nondet_quot!(ctx, x3565, x6, 35);
    let x3569: BytePoly_32 = bigint_nondet_rem!(ctx, x3565, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3568, x6, 67), x3569, 67),
            x3565,
            67
        ),
        284487,
        4,
    )?;
    let x3570: BytePoly_64 = bigint_mul!(x3531, x3531, 64);
    let x3571: BytePoly_66 = bigint_nondet_quot!(ctx, x3570, x6, 66);
    let x3572: BytePoly_32 = bigint_nondet_rem!(ctx, x3570, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3571, x6, 98), x3572, 98),
            x3570,
            98
        ),
        536459,
        4,
    )?;
    let x3573: BytePoly_33 = bigint_add!(bigint_mul!(x3572, x0, 33), x5, 33);
    let x3574: BytePoly_35 = bigint_nondet_quot!(ctx, x3573, x6, 35);
    let x3575: BytePoly_32 = bigint_nondet_rem!(ctx, x3573, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3574, x6, 67), x3575, 67),
            x3573,
            67
        ),
        284487,
        4,
    )?;
    let x3576: BytePoly_32 = bigint_add!(x3537, x3537, 32);
    let x3577: BytePoly_32 = bigint_nondet_quot!(ctx, x3576, x6, 32);
    let x3578: BytePoly_32 = bigint_nondet_rem!(ctx, x3576, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3577, x6, 64), x3578, 64),
            x3576,
            64
        ),
        260103,
        4,
    )?;
    let x3579: BytePoly_32 = bigint_nondet_inv!(ctx, x3578, x6, 32);
    let x3580: BytePoly_64 = bigint_mul!(x3578, x3579, 64);
    let x3581: BytePoly_66 = bigint_nondet_quot!(ctx, x3580, x6, 66);
    let x3582: BytePoly_32 = bigint_nondet_rem!(ctx, x3580, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3581, x6, 98), x3582, 98),
            x3580,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3582, x3, 32), 34, 1)?;
    let x3583: BytePoly_64 = bigint_mul!(x3575, x3579, 64);
    let x3584: BytePoly_66 = bigint_nondet_quot!(ctx, x3583, x6, 66);
    let x3585: BytePoly_32 = bigint_nondet_rem!(ctx, x3583, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3584, x6, 98), x3585, 98),
            x3583,
            98
        ),
        536459,
        4,
    )?;
    let x3586: BytePoly_64 = bigint_mul!(x3585, x3531, 64);
    let x3587: BytePoly_66 = bigint_nondet_quot!(ctx, x3586, x6, 66);
    let x3588: BytePoly_32 = bigint_nondet_rem!(ctx, x3586, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3587, x6, 98), x3588, 98),
            x3586,
            98
        ),
        536459,
        4,
    )?;
    let x3589: BytePoly_32 = bigint_add!(bigint_sub!(x3537, x3588, 32), x6, 32);
    let x3590: BytePoly_32 = bigint_nondet_quot!(ctx, x3589, x6, 32);
    let x3591: BytePoly_32 = bigint_nondet_rem!(ctx, x3589, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3590, x6, 64), x3591, 64),
            x3589,
            64
        ),
        260103,
        4,
    )?;
    let x3592: BytePoly_64 = bigint_mul!(x3585, x3585, 64);
    let x3593: BytePoly_66 = bigint_nondet_quot!(ctx, x3592, x6, 66);
    let x3594: BytePoly_32 = bigint_nondet_rem!(ctx, x3592, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3593, x6, 98), x3594, 98),
            x3592,
            98
        ),
        536459,
        4,
    )?;
    let x3595: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3594, x3531, 32), x6, 32),
            x3531,
            32
        ),
        x6,
        32
    );
    let x3596: BytePoly_32 = bigint_nondet_quot!(ctx, x3595, x6, 32);
    let x3597: BytePoly_32 = bigint_nondet_rem!(ctx, x3595, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3596, x6, 64), x3597, 64),
            x3595,
            64
        ),
        260103,
        4,
    )?;
    let x3598: BytePoly_64 = bigint_mul!(x3585, x3597, 64);
    let x3599: BytePoly_66 = bigint_nondet_quot!(ctx, x3598, x6, 66);
    let x3600: BytePoly_32 = bigint_nondet_rem!(ctx, x3598, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3599, x6, 98), x3600, 98),
            x3598,
            98
        ),
        536459,
        4,
    )?;
    let x3601: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3600, x3591, 32), 32), x6, 32);
    let x3602: BytePoly_32 = bigint_nondet_quot!(ctx, x3601, x6, 32);
    let x3603: BytePoly_32 = bigint_nondet_rem!(ctx, x3601, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3602, x6, 64), x3603, 64),
            x3601,
            64
        ),
        260103,
        4,
    )?;
    let x3604: BytePoly_1 = bigint_nondet_rem!(ctx, x3539, x2, 1);
    let x3605: BytePoly_33 = bigint_nondet_quot!(ctx, x3539, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3605, x2, 34), x3604, 34),
            x3539,
            34
        ),
        268231,
        4,
    )?;
    let x3606: BytePoly_1 = bigint_sub!(x3, x3604, 1);
    eqz(ctx, &bigint_mul!(x3604, x3606, 2), 8131, 2)?;
    let x3607: BytePoly_32 = bigint_add!(bigint_sub!(x3597, x3567, 32), x6, 32);
    let x3608: BytePoly_32 = bigint_nondet_inv!(ctx, x3607, x6, 32);
    let x3609: BytePoly_64 = bigint_mul!(x3607, x3608, 64);
    let x3610: BytePoly_66 = bigint_nondet_quot!(ctx, x3609, x6, 66);
    let x3611: BytePoly_32 = bigint_nondet_rem!(ctx, x3609, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3610, x6, 98), x3611, 98),
            x3609,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3611, x1, 32), 34, 1)?;
    let x3612: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3603, x3569, 32), x6, 32),
        x3608,
        64
    );
    let x3613: BytePoly_66 = bigint_nondet_quot!(ctx, x3612, x6, 66);
    let x3614: BytePoly_32 = bigint_nondet_rem!(ctx, x3612, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3613, x6, 98), x3614, 98),
            x3612,
            98
        ),
        536459,
        4,
    )?;
    let x3615: BytePoly_64 = bigint_mul!(x3614, x3567, 64);
    let x3616: BytePoly_66 = bigint_nondet_quot!(ctx, x3615, x6, 66);
    let x3617: BytePoly_32 = bigint_nondet_rem!(ctx, x3615, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3616, x6, 98), x3617, 98),
            x3615,
            98
        ),
        536459,
        4,
    )?;
    let x3618: BytePoly_32 = bigint_add!(bigint_sub!(x3569, x3617, 32), x6, 32);
    let x3619: BytePoly_32 = bigint_nondet_quot!(ctx, x3618, x6, 32);
    let x3620: BytePoly_32 = bigint_nondet_rem!(ctx, x3618, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3619, x6, 64), x3620, 64),
            x3618,
            64
        ),
        260103,
        4,
    )?;
    let x3621: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3614, x3614, 64), x3567, 64),
                x6,
                64
            ),
            x3597,
            64
        ),
        x6,
        64
    );
    let x3622: BytePoly_66 = bigint_nondet_quot!(ctx, x3621, x6, 66);
    let x3623: BytePoly_32 = bigint_nondet_rem!(ctx, x3621, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3622, x6, 98), x3623, 98),
            x3621,
            98
        ),
        536459,
        4,
    )?;
    let x3624: BytePoly_64 = bigint_mul!(x3614, x3623, 64);
    let x3625: BytePoly_66 = bigint_nondet_quot!(ctx, x3624, x6, 66);
    let x3626: BytePoly_32 = bigint_nondet_rem!(ctx, x3624, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3625, x6, 98), x3626, 98),
            x3624,
            98
        ),
        536459,
        4,
    )?;
    let x3627: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3626, x3620, 32), 32), x6, 32);
    let x3628: BytePoly_32 = bigint_nondet_quot!(ctx, x3627, x6, 32);
    let x3629: BytePoly_32 = bigint_nondet_rem!(ctx, x3627, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3628, x6, 64), x3629, 64),
            x3627,
            64
        ),
        260103,
        4,
    )?;
    let x3630: BytePoly_33 = bigint_add!(
        bigint_mul!(x3623, x3604, 33),
        bigint_mul!(x3567, x3606, 33),
        33
    );
    let x3631: BytePoly_33 = bigint_add!(
        bigint_mul!(x3629, x3604, 33),
        bigint_mul!(x3569, x3606, 33),
        33
    );
    let x3632: BytePoly_35 = bigint_nondet_quot!(ctx, x3630, x6, 35);
    let x3633: BytePoly_32 = bigint_nondet_rem!(ctx, x3630, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3632, x6, 67), x3633, 67),
            x3630,
            67
        ),
        284487,
        4,
    )?;
    let x3634: BytePoly_35 = bigint_nondet_quot!(ctx, x3631, x6, 35);
    let x3635: BytePoly_32 = bigint_nondet_rem!(ctx, x3631, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3634, x6, 67), x3635, 67),
            x3631,
            67
        ),
        284487,
        4,
    )?;
    let x3636: BytePoly_64 = bigint_mul!(x3597, x3597, 64);
    let x3637: BytePoly_66 = bigint_nondet_quot!(ctx, x3636, x6, 66);
    let x3638: BytePoly_32 = bigint_nondet_rem!(ctx, x3636, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3637, x6, 98), x3638, 98),
            x3636,
            98
        ),
        536459,
        4,
    )?;
    let x3639: BytePoly_33 = bigint_add!(bigint_mul!(x3638, x0, 33), x5, 33);
    let x3640: BytePoly_35 = bigint_nondet_quot!(ctx, x3639, x6, 35);
    let x3641: BytePoly_32 = bigint_nondet_rem!(ctx, x3639, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3640, x6, 67), x3641, 67),
            x3639,
            67
        ),
        284487,
        4,
    )?;
    let x3642: BytePoly_32 = bigint_add!(x3603, x3603, 32);
    let x3643: BytePoly_32 = bigint_nondet_quot!(ctx, x3642, x6, 32);
    let x3644: BytePoly_32 = bigint_nondet_rem!(ctx, x3642, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3643, x6, 64), x3644, 64),
            x3642,
            64
        ),
        260103,
        4,
    )?;
    let x3645: BytePoly_32 = bigint_nondet_inv!(ctx, x3644, x6, 32);
    let x3646: BytePoly_64 = bigint_mul!(x3644, x3645, 64);
    let x3647: BytePoly_66 = bigint_nondet_quot!(ctx, x3646, x6, 66);
    let x3648: BytePoly_32 = bigint_nondet_rem!(ctx, x3646, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3647, x6, 98), x3648, 98),
            x3646,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3648, x3, 32), 34, 1)?;
    let x3649: BytePoly_64 = bigint_mul!(x3641, x3645, 64);
    let x3650: BytePoly_66 = bigint_nondet_quot!(ctx, x3649, x6, 66);
    let x3651: BytePoly_32 = bigint_nondet_rem!(ctx, x3649, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3650, x6, 98), x3651, 98),
            x3649,
            98
        ),
        536459,
        4,
    )?;
    let x3652: BytePoly_64 = bigint_mul!(x3651, x3597, 64);
    let x3653: BytePoly_66 = bigint_nondet_quot!(ctx, x3652, x6, 66);
    let x3654: BytePoly_32 = bigint_nondet_rem!(ctx, x3652, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3653, x6, 98), x3654, 98),
            x3652,
            98
        ),
        536459,
        4,
    )?;
    let x3655: BytePoly_32 = bigint_add!(bigint_sub!(x3603, x3654, 32), x6, 32);
    let x3656: BytePoly_32 = bigint_nondet_quot!(ctx, x3655, x6, 32);
    let x3657: BytePoly_32 = bigint_nondet_rem!(ctx, x3655, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3656, x6, 64), x3657, 64),
            x3655,
            64
        ),
        260103,
        4,
    )?;
    let x3658: BytePoly_64 = bigint_mul!(x3651, x3651, 64);
    let x3659: BytePoly_66 = bigint_nondet_quot!(ctx, x3658, x6, 66);
    let x3660: BytePoly_32 = bigint_nondet_rem!(ctx, x3658, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3659, x6, 98), x3660, 98),
            x3658,
            98
        ),
        536459,
        4,
    )?;
    let x3661: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3660, x3597, 32), x6, 32),
            x3597,
            32
        ),
        x6,
        32
    );
    let x3662: BytePoly_32 = bigint_nondet_quot!(ctx, x3661, x6, 32);
    let x3663: BytePoly_32 = bigint_nondet_rem!(ctx, x3661, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3662, x6, 64), x3663, 64),
            x3661,
            64
        ),
        260103,
        4,
    )?;
    let x3664: BytePoly_64 = bigint_mul!(x3651, x3663, 64);
    let x3665: BytePoly_66 = bigint_nondet_quot!(ctx, x3664, x6, 66);
    let x3666: BytePoly_32 = bigint_nondet_rem!(ctx, x3664, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3665, x6, 98), x3666, 98),
            x3664,
            98
        ),
        536459,
        4,
    )?;
    let x3667: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3666, x3657, 32), 32), x6, 32);
    let x3668: BytePoly_32 = bigint_nondet_quot!(ctx, x3667, x6, 32);
    let x3669: BytePoly_32 = bigint_nondet_rem!(ctx, x3667, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3668, x6, 64), x3669, 64),
            x3667,
            64
        ),
        260103,
        4,
    )?;
    let x3670: BytePoly_1 = bigint_nondet_rem!(ctx, x3605, x2, 1);
    let x3671: BytePoly_33 = bigint_nondet_quot!(ctx, x3605, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3671, x2, 34), x3670, 34),
            x3605,
            34
        ),
        268231,
        4,
    )?;
    let x3672: BytePoly_1 = bigint_sub!(x3, x3670, 1);
    eqz(ctx, &bigint_mul!(x3670, x3672, 2), 8131, 2)?;
    let x3673: BytePoly_32 = bigint_add!(bigint_sub!(x3663, x3633, 32), x6, 32);
    let x3674: BytePoly_32 = bigint_nondet_inv!(ctx, x3673, x6, 32);
    let x3675: BytePoly_64 = bigint_mul!(x3673, x3674, 64);
    let x3676: BytePoly_66 = bigint_nondet_quot!(ctx, x3675, x6, 66);
    let x3677: BytePoly_32 = bigint_nondet_rem!(ctx, x3675, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3676, x6, 98), x3677, 98),
            x3675,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3677, x1, 32), 34, 1)?;
    let x3678: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3669, x3635, 32), x6, 32),
        x3674,
        64
    );
    let x3679: BytePoly_66 = bigint_nondet_quot!(ctx, x3678, x6, 66);
    let x3680: BytePoly_32 = bigint_nondet_rem!(ctx, x3678, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3679, x6, 98), x3680, 98),
            x3678,
            98
        ),
        536459,
        4,
    )?;
    let x3681: BytePoly_64 = bigint_mul!(x3680, x3633, 64);
    let x3682: BytePoly_66 = bigint_nondet_quot!(ctx, x3681, x6, 66);
    let x3683: BytePoly_32 = bigint_nondet_rem!(ctx, x3681, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3682, x6, 98), x3683, 98),
            x3681,
            98
        ),
        536459,
        4,
    )?;
    let x3684: BytePoly_32 = bigint_add!(bigint_sub!(x3635, x3683, 32), x6, 32);
    let x3685: BytePoly_32 = bigint_nondet_quot!(ctx, x3684, x6, 32);
    let x3686: BytePoly_32 = bigint_nondet_rem!(ctx, x3684, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3685, x6, 64), x3686, 64),
            x3684,
            64
        ),
        260103,
        4,
    )?;
    let x3687: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3680, x3680, 64), x3633, 64),
                x6,
                64
            ),
            x3663,
            64
        ),
        x6,
        64
    );
    let x3688: BytePoly_66 = bigint_nondet_quot!(ctx, x3687, x6, 66);
    let x3689: BytePoly_32 = bigint_nondet_rem!(ctx, x3687, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3688, x6, 98), x3689, 98),
            x3687,
            98
        ),
        536459,
        4,
    )?;
    let x3690: BytePoly_64 = bigint_mul!(x3680, x3689, 64);
    let x3691: BytePoly_66 = bigint_nondet_quot!(ctx, x3690, x6, 66);
    let x3692: BytePoly_32 = bigint_nondet_rem!(ctx, x3690, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3691, x6, 98), x3692, 98),
            x3690,
            98
        ),
        536459,
        4,
    )?;
    let x3693: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3692, x3686, 32), 32), x6, 32);
    let x3694: BytePoly_32 = bigint_nondet_quot!(ctx, x3693, x6, 32);
    let x3695: BytePoly_32 = bigint_nondet_rem!(ctx, x3693, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3694, x6, 64), x3695, 64),
            x3693,
            64
        ),
        260103,
        4,
    )?;
    let x3696: BytePoly_33 = bigint_add!(
        bigint_mul!(x3689, x3670, 33),
        bigint_mul!(x3633, x3672, 33),
        33
    );
    let x3697: BytePoly_33 = bigint_add!(
        bigint_mul!(x3695, x3670, 33),
        bigint_mul!(x3635, x3672, 33),
        33
    );
    let x3698: BytePoly_35 = bigint_nondet_quot!(ctx, x3696, x6, 35);
    let x3699: BytePoly_32 = bigint_nondet_rem!(ctx, x3696, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3698, x6, 67), x3699, 67),
            x3696,
            67
        ),
        284487,
        4,
    )?;
    let x3700: BytePoly_35 = bigint_nondet_quot!(ctx, x3697, x6, 35);
    let x3701: BytePoly_32 = bigint_nondet_rem!(ctx, x3697, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3700, x6, 67), x3701, 67),
            x3697,
            67
        ),
        284487,
        4,
    )?;
    let x3702: BytePoly_64 = bigint_mul!(x3663, x3663, 64);
    let x3703: BytePoly_66 = bigint_nondet_quot!(ctx, x3702, x6, 66);
    let x3704: BytePoly_32 = bigint_nondet_rem!(ctx, x3702, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3703, x6, 98), x3704, 98),
            x3702,
            98
        ),
        536459,
        4,
    )?;
    let x3705: BytePoly_33 = bigint_add!(bigint_mul!(x3704, x0, 33), x5, 33);
    let x3706: BytePoly_35 = bigint_nondet_quot!(ctx, x3705, x6, 35);
    let x3707: BytePoly_32 = bigint_nondet_rem!(ctx, x3705, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3706, x6, 67), x3707, 67),
            x3705,
            67
        ),
        284487,
        4,
    )?;
    let x3708: BytePoly_32 = bigint_add!(x3669, x3669, 32);
    let x3709: BytePoly_32 = bigint_nondet_quot!(ctx, x3708, x6, 32);
    let x3710: BytePoly_32 = bigint_nondet_rem!(ctx, x3708, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3709, x6, 64), x3710, 64),
            x3708,
            64
        ),
        260103,
        4,
    )?;
    let x3711: BytePoly_32 = bigint_nondet_inv!(ctx, x3710, x6, 32);
    let x3712: BytePoly_64 = bigint_mul!(x3710, x3711, 64);
    let x3713: BytePoly_66 = bigint_nondet_quot!(ctx, x3712, x6, 66);
    let x3714: BytePoly_32 = bigint_nondet_rem!(ctx, x3712, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3713, x6, 98), x3714, 98),
            x3712,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3714, x3, 32), 34, 1)?;
    let x3715: BytePoly_64 = bigint_mul!(x3707, x3711, 64);
    let x3716: BytePoly_66 = bigint_nondet_quot!(ctx, x3715, x6, 66);
    let x3717: BytePoly_32 = bigint_nondet_rem!(ctx, x3715, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3716, x6, 98), x3717, 98),
            x3715,
            98
        ),
        536459,
        4,
    )?;
    let x3718: BytePoly_64 = bigint_mul!(x3717, x3663, 64);
    let x3719: BytePoly_66 = bigint_nondet_quot!(ctx, x3718, x6, 66);
    let x3720: BytePoly_32 = bigint_nondet_rem!(ctx, x3718, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3719, x6, 98), x3720, 98),
            x3718,
            98
        ),
        536459,
        4,
    )?;
    let x3721: BytePoly_32 = bigint_add!(bigint_sub!(x3669, x3720, 32), x6, 32);
    let x3722: BytePoly_32 = bigint_nondet_quot!(ctx, x3721, x6, 32);
    let x3723: BytePoly_32 = bigint_nondet_rem!(ctx, x3721, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3722, x6, 64), x3723, 64),
            x3721,
            64
        ),
        260103,
        4,
    )?;
    let x3724: BytePoly_64 = bigint_mul!(x3717, x3717, 64);
    let x3725: BytePoly_66 = bigint_nondet_quot!(ctx, x3724, x6, 66);
    let x3726: BytePoly_32 = bigint_nondet_rem!(ctx, x3724, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3725, x6, 98), x3726, 98),
            x3724,
            98
        ),
        536459,
        4,
    )?;
    let x3727: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3726, x3663, 32), x6, 32),
            x3663,
            32
        ),
        x6,
        32
    );
    let x3728: BytePoly_32 = bigint_nondet_quot!(ctx, x3727, x6, 32);
    let x3729: BytePoly_32 = bigint_nondet_rem!(ctx, x3727, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3728, x6, 64), x3729, 64),
            x3727,
            64
        ),
        260103,
        4,
    )?;
    let x3730: BytePoly_64 = bigint_mul!(x3717, x3729, 64);
    let x3731: BytePoly_66 = bigint_nondet_quot!(ctx, x3730, x6, 66);
    let x3732: BytePoly_32 = bigint_nondet_rem!(ctx, x3730, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3731, x6, 98), x3732, 98),
            x3730,
            98
        ),
        536459,
        4,
    )?;
    let x3733: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3732, x3723, 32), 32), x6, 32);
    let x3734: BytePoly_32 = bigint_nondet_quot!(ctx, x3733, x6, 32);
    let x3735: BytePoly_32 = bigint_nondet_rem!(ctx, x3733, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3734, x6, 64), x3735, 64),
            x3733,
            64
        ),
        260103,
        4,
    )?;
    let x3736: BytePoly_1 = bigint_nondet_rem!(ctx, x3671, x2, 1);
    let x3737: BytePoly_33 = bigint_nondet_quot!(ctx, x3671, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3737, x2, 34), x3736, 34),
            x3671,
            34
        ),
        268231,
        4,
    )?;
    let x3738: BytePoly_1 = bigint_sub!(x3, x3736, 1);
    eqz(ctx, &bigint_mul!(x3736, x3738, 2), 8131, 2)?;
    let x3739: BytePoly_32 = bigint_add!(bigint_sub!(x3729, x3699, 32), x6, 32);
    let x3740: BytePoly_32 = bigint_nondet_inv!(ctx, x3739, x6, 32);
    let x3741: BytePoly_64 = bigint_mul!(x3739, x3740, 64);
    let x3742: BytePoly_66 = bigint_nondet_quot!(ctx, x3741, x6, 66);
    let x3743: BytePoly_32 = bigint_nondet_rem!(ctx, x3741, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3742, x6, 98), x3743, 98),
            x3741,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3743, x1, 32), 34, 1)?;
    let x3744: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3735, x3701, 32), x6, 32),
        x3740,
        64
    );
    let x3745: BytePoly_66 = bigint_nondet_quot!(ctx, x3744, x6, 66);
    let x3746: BytePoly_32 = bigint_nondet_rem!(ctx, x3744, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3745, x6, 98), x3746, 98),
            x3744,
            98
        ),
        536459,
        4,
    )?;
    let x3747: BytePoly_64 = bigint_mul!(x3746, x3699, 64);
    let x3748: BytePoly_66 = bigint_nondet_quot!(ctx, x3747, x6, 66);
    let x3749: BytePoly_32 = bigint_nondet_rem!(ctx, x3747, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3748, x6, 98), x3749, 98),
            x3747,
            98
        ),
        536459,
        4,
    )?;
    let x3750: BytePoly_32 = bigint_add!(bigint_sub!(x3701, x3749, 32), x6, 32);
    let x3751: BytePoly_32 = bigint_nondet_quot!(ctx, x3750, x6, 32);
    let x3752: BytePoly_32 = bigint_nondet_rem!(ctx, x3750, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3751, x6, 64), x3752, 64),
            x3750,
            64
        ),
        260103,
        4,
    )?;
    let x3753: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3746, x3746, 64), x3699, 64),
                x6,
                64
            ),
            x3729,
            64
        ),
        x6,
        64
    );
    let x3754: BytePoly_66 = bigint_nondet_quot!(ctx, x3753, x6, 66);
    let x3755: BytePoly_32 = bigint_nondet_rem!(ctx, x3753, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3754, x6, 98), x3755, 98),
            x3753,
            98
        ),
        536459,
        4,
    )?;
    let x3756: BytePoly_64 = bigint_mul!(x3746, x3755, 64);
    let x3757: BytePoly_66 = bigint_nondet_quot!(ctx, x3756, x6, 66);
    let x3758: BytePoly_32 = bigint_nondet_rem!(ctx, x3756, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3757, x6, 98), x3758, 98),
            x3756,
            98
        ),
        536459,
        4,
    )?;
    let x3759: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3758, x3752, 32), 32), x6, 32);
    let x3760: BytePoly_32 = bigint_nondet_quot!(ctx, x3759, x6, 32);
    let x3761: BytePoly_32 = bigint_nondet_rem!(ctx, x3759, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3760, x6, 64), x3761, 64),
            x3759,
            64
        ),
        260103,
        4,
    )?;
    let x3762: BytePoly_33 = bigint_add!(
        bigint_mul!(x3755, x3736, 33),
        bigint_mul!(x3699, x3738, 33),
        33
    );
    let x3763: BytePoly_33 = bigint_add!(
        bigint_mul!(x3761, x3736, 33),
        bigint_mul!(x3701, x3738, 33),
        33
    );
    let x3764: BytePoly_35 = bigint_nondet_quot!(ctx, x3762, x6, 35);
    let x3765: BytePoly_32 = bigint_nondet_rem!(ctx, x3762, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3764, x6, 67), x3765, 67),
            x3762,
            67
        ),
        284487,
        4,
    )?;
    let x3766: BytePoly_35 = bigint_nondet_quot!(ctx, x3763, x6, 35);
    let x3767: BytePoly_32 = bigint_nondet_rem!(ctx, x3763, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3766, x6, 67), x3767, 67),
            x3763,
            67
        ),
        284487,
        4,
    )?;
    let x3768: BytePoly_64 = bigint_mul!(x3729, x3729, 64);
    let x3769: BytePoly_66 = bigint_nondet_quot!(ctx, x3768, x6, 66);
    let x3770: BytePoly_32 = bigint_nondet_rem!(ctx, x3768, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3769, x6, 98), x3770, 98),
            x3768,
            98
        ),
        536459,
        4,
    )?;
    let x3771: BytePoly_33 = bigint_add!(bigint_mul!(x3770, x0, 33), x5, 33);
    let x3772: BytePoly_35 = bigint_nondet_quot!(ctx, x3771, x6, 35);
    let x3773: BytePoly_32 = bigint_nondet_rem!(ctx, x3771, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3772, x6, 67), x3773, 67),
            x3771,
            67
        ),
        284487,
        4,
    )?;
    let x3774: BytePoly_32 = bigint_add!(x3735, x3735, 32);
    let x3775: BytePoly_32 = bigint_nondet_quot!(ctx, x3774, x6, 32);
    let x3776: BytePoly_32 = bigint_nondet_rem!(ctx, x3774, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3775, x6, 64), x3776, 64),
            x3774,
            64
        ),
        260103,
        4,
    )?;
    let x3777: BytePoly_32 = bigint_nondet_inv!(ctx, x3776, x6, 32);
    let x3778: BytePoly_64 = bigint_mul!(x3776, x3777, 64);
    let x3779: BytePoly_66 = bigint_nondet_quot!(ctx, x3778, x6, 66);
    let x3780: BytePoly_32 = bigint_nondet_rem!(ctx, x3778, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3779, x6, 98), x3780, 98),
            x3778,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3780, x3, 32), 34, 1)?;
    let x3781: BytePoly_64 = bigint_mul!(x3773, x3777, 64);
    let x3782: BytePoly_66 = bigint_nondet_quot!(ctx, x3781, x6, 66);
    let x3783: BytePoly_32 = bigint_nondet_rem!(ctx, x3781, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3782, x6, 98), x3783, 98),
            x3781,
            98
        ),
        536459,
        4,
    )?;
    let x3784: BytePoly_64 = bigint_mul!(x3783, x3729, 64);
    let x3785: BytePoly_66 = bigint_nondet_quot!(ctx, x3784, x6, 66);
    let x3786: BytePoly_32 = bigint_nondet_rem!(ctx, x3784, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3785, x6, 98), x3786, 98),
            x3784,
            98
        ),
        536459,
        4,
    )?;
    let x3787: BytePoly_32 = bigint_add!(bigint_sub!(x3735, x3786, 32), x6, 32);
    let x3788: BytePoly_32 = bigint_nondet_quot!(ctx, x3787, x6, 32);
    let x3789: BytePoly_32 = bigint_nondet_rem!(ctx, x3787, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3788, x6, 64), x3789, 64),
            x3787,
            64
        ),
        260103,
        4,
    )?;
    let x3790: BytePoly_64 = bigint_mul!(x3783, x3783, 64);
    let x3791: BytePoly_66 = bigint_nondet_quot!(ctx, x3790, x6, 66);
    let x3792: BytePoly_32 = bigint_nondet_rem!(ctx, x3790, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3791, x6, 98), x3792, 98),
            x3790,
            98
        ),
        536459,
        4,
    )?;
    let x3793: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3792, x3729, 32), x6, 32),
            x3729,
            32
        ),
        x6,
        32
    );
    let x3794: BytePoly_32 = bigint_nondet_quot!(ctx, x3793, x6, 32);
    let x3795: BytePoly_32 = bigint_nondet_rem!(ctx, x3793, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3794, x6, 64), x3795, 64),
            x3793,
            64
        ),
        260103,
        4,
    )?;
    let x3796: BytePoly_64 = bigint_mul!(x3783, x3795, 64);
    let x3797: BytePoly_66 = bigint_nondet_quot!(ctx, x3796, x6, 66);
    let x3798: BytePoly_32 = bigint_nondet_rem!(ctx, x3796, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3797, x6, 98), x3798, 98),
            x3796,
            98
        ),
        536459,
        4,
    )?;
    let x3799: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3798, x3789, 32), 32), x6, 32);
    let x3800: BytePoly_32 = bigint_nondet_quot!(ctx, x3799, x6, 32);
    let x3801: BytePoly_32 = bigint_nondet_rem!(ctx, x3799, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3800, x6, 64), x3801, 64),
            x3799,
            64
        ),
        260103,
        4,
    )?;
    let x3802: BytePoly_1 = bigint_nondet_rem!(ctx, x3737, x2, 1);
    let x3803: BytePoly_33 = bigint_nondet_quot!(ctx, x3737, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3803, x2, 34), x3802, 34),
            x3737,
            34
        ),
        268231,
        4,
    )?;
    let x3804: BytePoly_1 = bigint_sub!(x3, x3802, 1);
    eqz(ctx, &bigint_mul!(x3802, x3804, 2), 8131, 2)?;
    let x3805: BytePoly_32 = bigint_add!(bigint_sub!(x3795, x3765, 32), x6, 32);
    let x3806: BytePoly_32 = bigint_nondet_inv!(ctx, x3805, x6, 32);
    let x3807: BytePoly_64 = bigint_mul!(x3805, x3806, 64);
    let x3808: BytePoly_66 = bigint_nondet_quot!(ctx, x3807, x6, 66);
    let x3809: BytePoly_32 = bigint_nondet_rem!(ctx, x3807, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3808, x6, 98), x3809, 98),
            x3807,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3809, x1, 32), 34, 1)?;
    let x3810: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3801, x3767, 32), x6, 32),
        x3806,
        64
    );
    let x3811: BytePoly_66 = bigint_nondet_quot!(ctx, x3810, x6, 66);
    let x3812: BytePoly_32 = bigint_nondet_rem!(ctx, x3810, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3811, x6, 98), x3812, 98),
            x3810,
            98
        ),
        536459,
        4,
    )?;
    let x3813: BytePoly_64 = bigint_mul!(x3812, x3765, 64);
    let x3814: BytePoly_66 = bigint_nondet_quot!(ctx, x3813, x6, 66);
    let x3815: BytePoly_32 = bigint_nondet_rem!(ctx, x3813, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3814, x6, 98), x3815, 98),
            x3813,
            98
        ),
        536459,
        4,
    )?;
    let x3816: BytePoly_32 = bigint_add!(bigint_sub!(x3767, x3815, 32), x6, 32);
    let x3817: BytePoly_32 = bigint_nondet_quot!(ctx, x3816, x6, 32);
    let x3818: BytePoly_32 = bigint_nondet_rem!(ctx, x3816, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3817, x6, 64), x3818, 64),
            x3816,
            64
        ),
        260103,
        4,
    )?;
    let x3819: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3812, x3812, 64), x3765, 64),
                x6,
                64
            ),
            x3795,
            64
        ),
        x6,
        64
    );
    let x3820: BytePoly_66 = bigint_nondet_quot!(ctx, x3819, x6, 66);
    let x3821: BytePoly_32 = bigint_nondet_rem!(ctx, x3819, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3820, x6, 98), x3821, 98),
            x3819,
            98
        ),
        536459,
        4,
    )?;
    let x3822: BytePoly_64 = bigint_mul!(x3812, x3821, 64);
    let x3823: BytePoly_66 = bigint_nondet_quot!(ctx, x3822, x6, 66);
    let x3824: BytePoly_32 = bigint_nondet_rem!(ctx, x3822, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3823, x6, 98), x3824, 98),
            x3822,
            98
        ),
        536459,
        4,
    )?;
    let x3825: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3824, x3818, 32), 32), x6, 32);
    let x3826: BytePoly_32 = bigint_nondet_quot!(ctx, x3825, x6, 32);
    let x3827: BytePoly_32 = bigint_nondet_rem!(ctx, x3825, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3826, x6, 64), x3827, 64),
            x3825,
            64
        ),
        260103,
        4,
    )?;
    let x3828: BytePoly_33 = bigint_add!(
        bigint_mul!(x3821, x3802, 33),
        bigint_mul!(x3765, x3804, 33),
        33
    );
    let x3829: BytePoly_33 = bigint_add!(
        bigint_mul!(x3827, x3802, 33),
        bigint_mul!(x3767, x3804, 33),
        33
    );
    let x3830: BytePoly_35 = bigint_nondet_quot!(ctx, x3828, x6, 35);
    let x3831: BytePoly_32 = bigint_nondet_rem!(ctx, x3828, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3830, x6, 67), x3831, 67),
            x3828,
            67
        ),
        284487,
        4,
    )?;
    let x3832: BytePoly_35 = bigint_nondet_quot!(ctx, x3829, x6, 35);
    let x3833: BytePoly_32 = bigint_nondet_rem!(ctx, x3829, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3832, x6, 67), x3833, 67),
            x3829,
            67
        ),
        284487,
        4,
    )?;
    let x3834: BytePoly_64 = bigint_mul!(x3795, x3795, 64);
    let x3835: BytePoly_66 = bigint_nondet_quot!(ctx, x3834, x6, 66);
    let x3836: BytePoly_32 = bigint_nondet_rem!(ctx, x3834, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3835, x6, 98), x3836, 98),
            x3834,
            98
        ),
        536459,
        4,
    )?;
    let x3837: BytePoly_33 = bigint_add!(bigint_mul!(x3836, x0, 33), x5, 33);
    let x3838: BytePoly_35 = bigint_nondet_quot!(ctx, x3837, x6, 35);
    let x3839: BytePoly_32 = bigint_nondet_rem!(ctx, x3837, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3838, x6, 67), x3839, 67),
            x3837,
            67
        ),
        284487,
        4,
    )?;
    let x3840: BytePoly_32 = bigint_add!(x3801, x3801, 32);
    let x3841: BytePoly_32 = bigint_nondet_quot!(ctx, x3840, x6, 32);
    let x3842: BytePoly_32 = bigint_nondet_rem!(ctx, x3840, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3841, x6, 64), x3842, 64),
            x3840,
            64
        ),
        260103,
        4,
    )?;
    let x3843: BytePoly_32 = bigint_nondet_inv!(ctx, x3842, x6, 32);
    let x3844: BytePoly_64 = bigint_mul!(x3842, x3843, 64);
    let x3845: BytePoly_66 = bigint_nondet_quot!(ctx, x3844, x6, 66);
    let x3846: BytePoly_32 = bigint_nondet_rem!(ctx, x3844, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3845, x6, 98), x3846, 98),
            x3844,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3846, x3, 32), 34, 1)?;
    let x3847: BytePoly_64 = bigint_mul!(x3839, x3843, 64);
    let x3848: BytePoly_66 = bigint_nondet_quot!(ctx, x3847, x6, 66);
    let x3849: BytePoly_32 = bigint_nondet_rem!(ctx, x3847, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3848, x6, 98), x3849, 98),
            x3847,
            98
        ),
        536459,
        4,
    )?;
    let x3850: BytePoly_64 = bigint_mul!(x3849, x3795, 64);
    let x3851: BytePoly_66 = bigint_nondet_quot!(ctx, x3850, x6, 66);
    let x3852: BytePoly_32 = bigint_nondet_rem!(ctx, x3850, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3851, x6, 98), x3852, 98),
            x3850,
            98
        ),
        536459,
        4,
    )?;
    let x3853: BytePoly_32 = bigint_add!(bigint_sub!(x3801, x3852, 32), x6, 32);
    let x3854: BytePoly_32 = bigint_nondet_quot!(ctx, x3853, x6, 32);
    let x3855: BytePoly_32 = bigint_nondet_rem!(ctx, x3853, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3854, x6, 64), x3855, 64),
            x3853,
            64
        ),
        260103,
        4,
    )?;
    let x3856: BytePoly_64 = bigint_mul!(x3849, x3849, 64);
    let x3857: BytePoly_66 = bigint_nondet_quot!(ctx, x3856, x6, 66);
    let x3858: BytePoly_32 = bigint_nondet_rem!(ctx, x3856, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3857, x6, 98), x3858, 98),
            x3856,
            98
        ),
        536459,
        4,
    )?;
    let x3859: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3858, x3795, 32), x6, 32),
            x3795,
            32
        ),
        x6,
        32
    );
    let x3860: BytePoly_32 = bigint_nondet_quot!(ctx, x3859, x6, 32);
    let x3861: BytePoly_32 = bigint_nondet_rem!(ctx, x3859, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3860, x6, 64), x3861, 64),
            x3859,
            64
        ),
        260103,
        4,
    )?;
    let x3862: BytePoly_64 = bigint_mul!(x3849, x3861, 64);
    let x3863: BytePoly_66 = bigint_nondet_quot!(ctx, x3862, x6, 66);
    let x3864: BytePoly_32 = bigint_nondet_rem!(ctx, x3862, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3863, x6, 98), x3864, 98),
            x3862,
            98
        ),
        536459,
        4,
    )?;
    let x3865: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3864, x3855, 32), 32), x6, 32);
    let x3866: BytePoly_32 = bigint_nondet_quot!(ctx, x3865, x6, 32);
    let x3867: BytePoly_32 = bigint_nondet_rem!(ctx, x3865, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3866, x6, 64), x3867, 64),
            x3865,
            64
        ),
        260103,
        4,
    )?;
    let x3868: BytePoly_1 = bigint_nondet_rem!(ctx, x3803, x2, 1);
    let x3869: BytePoly_33 = bigint_nondet_quot!(ctx, x3803, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3869, x2, 34), x3868, 34),
            x3803,
            34
        ),
        268231,
        4,
    )?;
    let x3870: BytePoly_1 = bigint_sub!(x3, x3868, 1);
    eqz(ctx, &bigint_mul!(x3868, x3870, 2), 8131, 2)?;
    let x3871: BytePoly_32 = bigint_add!(bigint_sub!(x3861, x3831, 32), x6, 32);
    let x3872: BytePoly_32 = bigint_nondet_inv!(ctx, x3871, x6, 32);
    let x3873: BytePoly_64 = bigint_mul!(x3871, x3872, 64);
    let x3874: BytePoly_66 = bigint_nondet_quot!(ctx, x3873, x6, 66);
    let x3875: BytePoly_32 = bigint_nondet_rem!(ctx, x3873, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3874, x6, 98), x3875, 98),
            x3873,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3875, x1, 32), 34, 1)?;
    let x3876: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3867, x3833, 32), x6, 32),
        x3872,
        64
    );
    let x3877: BytePoly_66 = bigint_nondet_quot!(ctx, x3876, x6, 66);
    let x3878: BytePoly_32 = bigint_nondet_rem!(ctx, x3876, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3877, x6, 98), x3878, 98),
            x3876,
            98
        ),
        536459,
        4,
    )?;
    let x3879: BytePoly_64 = bigint_mul!(x3878, x3831, 64);
    let x3880: BytePoly_66 = bigint_nondet_quot!(ctx, x3879, x6, 66);
    let x3881: BytePoly_32 = bigint_nondet_rem!(ctx, x3879, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3880, x6, 98), x3881, 98),
            x3879,
            98
        ),
        536459,
        4,
    )?;
    let x3882: BytePoly_32 = bigint_add!(bigint_sub!(x3833, x3881, 32), x6, 32);
    let x3883: BytePoly_32 = bigint_nondet_quot!(ctx, x3882, x6, 32);
    let x3884: BytePoly_32 = bigint_nondet_rem!(ctx, x3882, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3883, x6, 64), x3884, 64),
            x3882,
            64
        ),
        260103,
        4,
    )?;
    let x3885: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3878, x3878, 64), x3831, 64),
                x6,
                64
            ),
            x3861,
            64
        ),
        x6,
        64
    );
    let x3886: BytePoly_66 = bigint_nondet_quot!(ctx, x3885, x6, 66);
    let x3887: BytePoly_32 = bigint_nondet_rem!(ctx, x3885, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3886, x6, 98), x3887, 98),
            x3885,
            98
        ),
        536459,
        4,
    )?;
    let x3888: BytePoly_64 = bigint_mul!(x3878, x3887, 64);
    let x3889: BytePoly_66 = bigint_nondet_quot!(ctx, x3888, x6, 66);
    let x3890: BytePoly_32 = bigint_nondet_rem!(ctx, x3888, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3889, x6, 98), x3890, 98),
            x3888,
            98
        ),
        536459,
        4,
    )?;
    let x3891: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3890, x3884, 32), 32), x6, 32);
    let x3892: BytePoly_32 = bigint_nondet_quot!(ctx, x3891, x6, 32);
    let x3893: BytePoly_32 = bigint_nondet_rem!(ctx, x3891, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3892, x6, 64), x3893, 64),
            x3891,
            64
        ),
        260103,
        4,
    )?;
    let x3894: BytePoly_33 = bigint_add!(
        bigint_mul!(x3887, x3868, 33),
        bigint_mul!(x3831, x3870, 33),
        33
    );
    let x3895: BytePoly_33 = bigint_add!(
        bigint_mul!(x3893, x3868, 33),
        bigint_mul!(x3833, x3870, 33),
        33
    );
    let x3896: BytePoly_35 = bigint_nondet_quot!(ctx, x3894, x6, 35);
    let x3897: BytePoly_32 = bigint_nondet_rem!(ctx, x3894, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3896, x6, 67), x3897, 67),
            x3894,
            67
        ),
        284487,
        4,
    )?;
    let x3898: BytePoly_35 = bigint_nondet_quot!(ctx, x3895, x6, 35);
    let x3899: BytePoly_32 = bigint_nondet_rem!(ctx, x3895, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3898, x6, 67), x3899, 67),
            x3895,
            67
        ),
        284487,
        4,
    )?;
    let x3900: BytePoly_64 = bigint_mul!(x3861, x3861, 64);
    let x3901: BytePoly_66 = bigint_nondet_quot!(ctx, x3900, x6, 66);
    let x3902: BytePoly_32 = bigint_nondet_rem!(ctx, x3900, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3901, x6, 98), x3902, 98),
            x3900,
            98
        ),
        536459,
        4,
    )?;
    let x3903: BytePoly_33 = bigint_add!(bigint_mul!(x3902, x0, 33), x5, 33);
    let x3904: BytePoly_35 = bigint_nondet_quot!(ctx, x3903, x6, 35);
    let x3905: BytePoly_32 = bigint_nondet_rem!(ctx, x3903, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3904, x6, 67), x3905, 67),
            x3903,
            67
        ),
        284487,
        4,
    )?;
    let x3906: BytePoly_32 = bigint_add!(x3867, x3867, 32);
    let x3907: BytePoly_32 = bigint_nondet_quot!(ctx, x3906, x6, 32);
    let x3908: BytePoly_32 = bigint_nondet_rem!(ctx, x3906, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3907, x6, 64), x3908, 64),
            x3906,
            64
        ),
        260103,
        4,
    )?;
    let x3909: BytePoly_32 = bigint_nondet_inv!(ctx, x3908, x6, 32);
    let x3910: BytePoly_64 = bigint_mul!(x3908, x3909, 64);
    let x3911: BytePoly_66 = bigint_nondet_quot!(ctx, x3910, x6, 66);
    let x3912: BytePoly_32 = bigint_nondet_rem!(ctx, x3910, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3911, x6, 98), x3912, 98),
            x3910,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3912, x3, 32), 34, 1)?;
    let x3913: BytePoly_64 = bigint_mul!(x3905, x3909, 64);
    let x3914: BytePoly_66 = bigint_nondet_quot!(ctx, x3913, x6, 66);
    let x3915: BytePoly_32 = bigint_nondet_rem!(ctx, x3913, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3914, x6, 98), x3915, 98),
            x3913,
            98
        ),
        536459,
        4,
    )?;
    let x3916: BytePoly_64 = bigint_mul!(x3915, x3861, 64);
    let x3917: BytePoly_66 = bigint_nondet_quot!(ctx, x3916, x6, 66);
    let x3918: BytePoly_32 = bigint_nondet_rem!(ctx, x3916, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3917, x6, 98), x3918, 98),
            x3916,
            98
        ),
        536459,
        4,
    )?;
    let x3919: BytePoly_32 = bigint_add!(bigint_sub!(x3867, x3918, 32), x6, 32);
    let x3920: BytePoly_32 = bigint_nondet_quot!(ctx, x3919, x6, 32);
    let x3921: BytePoly_32 = bigint_nondet_rem!(ctx, x3919, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3920, x6, 64), x3921, 64),
            x3919,
            64
        ),
        260103,
        4,
    )?;
    let x3922: BytePoly_64 = bigint_mul!(x3915, x3915, 64);
    let x3923: BytePoly_66 = bigint_nondet_quot!(ctx, x3922, x6, 66);
    let x3924: BytePoly_32 = bigint_nondet_rem!(ctx, x3922, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3923, x6, 98), x3924, 98),
            x3922,
            98
        ),
        536459,
        4,
    )?;
    let x3925: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3924, x3861, 32), x6, 32),
            x3861,
            32
        ),
        x6,
        32
    );
    let x3926: BytePoly_32 = bigint_nondet_quot!(ctx, x3925, x6, 32);
    let x3927: BytePoly_32 = bigint_nondet_rem!(ctx, x3925, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3926, x6, 64), x3927, 64),
            x3925,
            64
        ),
        260103,
        4,
    )?;
    let x3928: BytePoly_64 = bigint_mul!(x3915, x3927, 64);
    let x3929: BytePoly_66 = bigint_nondet_quot!(ctx, x3928, x6, 66);
    let x3930: BytePoly_32 = bigint_nondet_rem!(ctx, x3928, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3929, x6, 98), x3930, 98),
            x3928,
            98
        ),
        536459,
        4,
    )?;
    let x3931: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3930, x3921, 32), 32), x6, 32);
    let x3932: BytePoly_32 = bigint_nondet_quot!(ctx, x3931, x6, 32);
    let x3933: BytePoly_32 = bigint_nondet_rem!(ctx, x3931, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3932, x6, 64), x3933, 64),
            x3931,
            64
        ),
        260103,
        4,
    )?;
    let x3934: BytePoly_1 = bigint_nondet_rem!(ctx, x3869, x2, 1);
    let x3935: BytePoly_33 = bigint_nondet_quot!(ctx, x3869, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3935, x2, 34), x3934, 34),
            x3869,
            34
        ),
        268231,
        4,
    )?;
    let x3936: BytePoly_1 = bigint_sub!(x3, x3934, 1);
    eqz(ctx, &bigint_mul!(x3934, x3936, 2), 8131, 2)?;
    let x3937: BytePoly_32 = bigint_add!(bigint_sub!(x3927, x3897, 32), x6, 32);
    let x3938: BytePoly_32 = bigint_nondet_inv!(ctx, x3937, x6, 32);
    let x3939: BytePoly_64 = bigint_mul!(x3937, x3938, 64);
    let x3940: BytePoly_66 = bigint_nondet_quot!(ctx, x3939, x6, 66);
    let x3941: BytePoly_32 = bigint_nondet_rem!(ctx, x3939, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3940, x6, 98), x3941, 98),
            x3939,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3941, x1, 32), 34, 1)?;
    let x3942: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3933, x3899, 32), x6, 32),
        x3938,
        64
    );
    let x3943: BytePoly_66 = bigint_nondet_quot!(ctx, x3942, x6, 66);
    let x3944: BytePoly_32 = bigint_nondet_rem!(ctx, x3942, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3943, x6, 98), x3944, 98),
            x3942,
            98
        ),
        536459,
        4,
    )?;
    let x3945: BytePoly_64 = bigint_mul!(x3944, x3897, 64);
    let x3946: BytePoly_66 = bigint_nondet_quot!(ctx, x3945, x6, 66);
    let x3947: BytePoly_32 = bigint_nondet_rem!(ctx, x3945, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3946, x6, 98), x3947, 98),
            x3945,
            98
        ),
        536459,
        4,
    )?;
    let x3948: BytePoly_32 = bigint_add!(bigint_sub!(x3899, x3947, 32), x6, 32);
    let x3949: BytePoly_32 = bigint_nondet_quot!(ctx, x3948, x6, 32);
    let x3950: BytePoly_32 = bigint_nondet_rem!(ctx, x3948, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3949, x6, 64), x3950, 64),
            x3948,
            64
        ),
        260103,
        4,
    )?;
    let x3951: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x3944, x3944, 64), x3897, 64),
                x6,
                64
            ),
            x3927,
            64
        ),
        x6,
        64
    );
    let x3952: BytePoly_66 = bigint_nondet_quot!(ctx, x3951, x6, 66);
    let x3953: BytePoly_32 = bigint_nondet_rem!(ctx, x3951, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3952, x6, 98), x3953, 98),
            x3951,
            98
        ),
        536459,
        4,
    )?;
    let x3954: BytePoly_64 = bigint_mul!(x3944, x3953, 64);
    let x3955: BytePoly_66 = bigint_nondet_quot!(ctx, x3954, x6, 66);
    let x3956: BytePoly_32 = bigint_nondet_rem!(ctx, x3954, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3955, x6, 98), x3956, 98),
            x3954,
            98
        ),
        536459,
        4,
    )?;
    let x3957: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3956, x3950, 32), 32), x6, 32);
    let x3958: BytePoly_32 = bigint_nondet_quot!(ctx, x3957, x6, 32);
    let x3959: BytePoly_32 = bigint_nondet_rem!(ctx, x3957, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3958, x6, 64), x3959, 64),
            x3957,
            64
        ),
        260103,
        4,
    )?;
    let x3960: BytePoly_33 = bigint_add!(
        bigint_mul!(x3953, x3934, 33),
        bigint_mul!(x3897, x3936, 33),
        33
    );
    let x3961: BytePoly_33 = bigint_add!(
        bigint_mul!(x3959, x3934, 33),
        bigint_mul!(x3899, x3936, 33),
        33
    );
    let x3962: BytePoly_35 = bigint_nondet_quot!(ctx, x3960, x6, 35);
    let x3963: BytePoly_32 = bigint_nondet_rem!(ctx, x3960, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3962, x6, 67), x3963, 67),
            x3960,
            67
        ),
        284487,
        4,
    )?;
    let x3964: BytePoly_35 = bigint_nondet_quot!(ctx, x3961, x6, 35);
    let x3965: BytePoly_32 = bigint_nondet_rem!(ctx, x3961, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3964, x6, 67), x3965, 67),
            x3961,
            67
        ),
        284487,
        4,
    )?;
    let x3966: BytePoly_64 = bigint_mul!(x3927, x3927, 64);
    let x3967: BytePoly_66 = bigint_nondet_quot!(ctx, x3966, x6, 66);
    let x3968: BytePoly_32 = bigint_nondet_rem!(ctx, x3966, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3967, x6, 98), x3968, 98),
            x3966,
            98
        ),
        536459,
        4,
    )?;
    let x3969: BytePoly_33 = bigint_add!(bigint_mul!(x3968, x0, 33), x5, 33);
    let x3970: BytePoly_35 = bigint_nondet_quot!(ctx, x3969, x6, 35);
    let x3971: BytePoly_32 = bigint_nondet_rem!(ctx, x3969, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3970, x6, 67), x3971, 67),
            x3969,
            67
        ),
        284487,
        4,
    )?;
    let x3972: BytePoly_32 = bigint_add!(x3933, x3933, 32);
    let x3973: BytePoly_32 = bigint_nondet_quot!(ctx, x3972, x6, 32);
    let x3974: BytePoly_32 = bigint_nondet_rem!(ctx, x3972, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3973, x6, 64), x3974, 64),
            x3972,
            64
        ),
        260103,
        4,
    )?;
    let x3975: BytePoly_32 = bigint_nondet_inv!(ctx, x3974, x6, 32);
    let x3976: BytePoly_64 = bigint_mul!(x3974, x3975, 64);
    let x3977: BytePoly_66 = bigint_nondet_quot!(ctx, x3976, x6, 66);
    let x3978: BytePoly_32 = bigint_nondet_rem!(ctx, x3976, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3977, x6, 98), x3978, 98),
            x3976,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x3978, x3, 32), 34, 1)?;
    let x3979: BytePoly_64 = bigint_mul!(x3971, x3975, 64);
    let x3980: BytePoly_66 = bigint_nondet_quot!(ctx, x3979, x6, 66);
    let x3981: BytePoly_32 = bigint_nondet_rem!(ctx, x3979, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3980, x6, 98), x3981, 98),
            x3979,
            98
        ),
        536459,
        4,
    )?;
    let x3982: BytePoly_64 = bigint_mul!(x3981, x3927, 64);
    let x3983: BytePoly_66 = bigint_nondet_quot!(ctx, x3982, x6, 66);
    let x3984: BytePoly_32 = bigint_nondet_rem!(ctx, x3982, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3983, x6, 98), x3984, 98),
            x3982,
            98
        ),
        536459,
        4,
    )?;
    let x3985: BytePoly_32 = bigint_add!(bigint_sub!(x3933, x3984, 32), x6, 32);
    let x3986: BytePoly_32 = bigint_nondet_quot!(ctx, x3985, x6, 32);
    let x3987: BytePoly_32 = bigint_nondet_rem!(ctx, x3985, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3986, x6, 64), x3987, 64),
            x3985,
            64
        ),
        260103,
        4,
    )?;
    let x3988: BytePoly_64 = bigint_mul!(x3981, x3981, 64);
    let x3989: BytePoly_66 = bigint_nondet_quot!(ctx, x3988, x6, 66);
    let x3990: BytePoly_32 = bigint_nondet_rem!(ctx, x3988, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3989, x6, 98), x3990, 98),
            x3988,
            98
        ),
        536459,
        4,
    )?;
    let x3991: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x3990, x3927, 32), x6, 32),
            x3927,
            32
        ),
        x6,
        32
    );
    let x3992: BytePoly_32 = bigint_nondet_quot!(ctx, x3991, x6, 32);
    let x3993: BytePoly_32 = bigint_nondet_rem!(ctx, x3991, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3992, x6, 64), x3993, 64),
            x3991,
            64
        ),
        260103,
        4,
    )?;
    let x3994: BytePoly_64 = bigint_mul!(x3981, x3993, 64);
    let x3995: BytePoly_66 = bigint_nondet_quot!(ctx, x3994, x6, 66);
    let x3996: BytePoly_32 = bigint_nondet_rem!(ctx, x3994, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3995, x6, 98), x3996, 98),
            x3994,
            98
        ),
        536459,
        4,
    )?;
    let x3997: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x3996, x3987, 32), 32), x6, 32);
    let x3998: BytePoly_32 = bigint_nondet_quot!(ctx, x3997, x6, 32);
    let x3999: BytePoly_32 = bigint_nondet_rem!(ctx, x3997, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x3998, x6, 64), x3999, 64),
            x3997,
            64
        ),
        260103,
        4,
    )?;
    let x4000: BytePoly_1 = bigint_nondet_rem!(ctx, x3935, x2, 1);
    let x4001: BytePoly_33 = bigint_nondet_quot!(ctx, x3935, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4001, x2, 34), x4000, 34),
            x3935,
            34
        ),
        268231,
        4,
    )?;
    let x4002: BytePoly_1 = bigint_sub!(x3, x4000, 1);
    eqz(ctx, &bigint_mul!(x4000, x4002, 2), 8131, 2)?;
    let x4003: BytePoly_32 = bigint_add!(bigint_sub!(x3993, x3963, 32), x6, 32);
    let x4004: BytePoly_32 = bigint_nondet_inv!(ctx, x4003, x6, 32);
    let x4005: BytePoly_64 = bigint_mul!(x4003, x4004, 64);
    let x4006: BytePoly_66 = bigint_nondet_quot!(ctx, x4005, x6, 66);
    let x4007: BytePoly_32 = bigint_nondet_rem!(ctx, x4005, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4006, x6, 98), x4007, 98),
            x4005,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4007, x1, 32), 34, 1)?;
    let x4008: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x3999, x3965, 32), x6, 32),
        x4004,
        64
    );
    let x4009: BytePoly_66 = bigint_nondet_quot!(ctx, x4008, x6, 66);
    let x4010: BytePoly_32 = bigint_nondet_rem!(ctx, x4008, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4009, x6, 98), x4010, 98),
            x4008,
            98
        ),
        536459,
        4,
    )?;
    let x4011: BytePoly_64 = bigint_mul!(x4010, x3963, 64);
    let x4012: BytePoly_66 = bigint_nondet_quot!(ctx, x4011, x6, 66);
    let x4013: BytePoly_32 = bigint_nondet_rem!(ctx, x4011, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4012, x6, 98), x4013, 98),
            x4011,
            98
        ),
        536459,
        4,
    )?;
    let x4014: BytePoly_32 = bigint_add!(bigint_sub!(x3965, x4013, 32), x6, 32);
    let x4015: BytePoly_32 = bigint_nondet_quot!(ctx, x4014, x6, 32);
    let x4016: BytePoly_32 = bigint_nondet_rem!(ctx, x4014, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4015, x6, 64), x4016, 64),
            x4014,
            64
        ),
        260103,
        4,
    )?;
    let x4017: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4010, x4010, 64), x3963, 64),
                x6,
                64
            ),
            x3993,
            64
        ),
        x6,
        64
    );
    let x4018: BytePoly_66 = bigint_nondet_quot!(ctx, x4017, x6, 66);
    let x4019: BytePoly_32 = bigint_nondet_rem!(ctx, x4017, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4018, x6, 98), x4019, 98),
            x4017,
            98
        ),
        536459,
        4,
    )?;
    let x4020: BytePoly_64 = bigint_mul!(x4010, x4019, 64);
    let x4021: BytePoly_66 = bigint_nondet_quot!(ctx, x4020, x6, 66);
    let x4022: BytePoly_32 = bigint_nondet_rem!(ctx, x4020, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4021, x6, 98), x4022, 98),
            x4020,
            98
        ),
        536459,
        4,
    )?;
    let x4023: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4022, x4016, 32), 32), x6, 32);
    let x4024: BytePoly_32 = bigint_nondet_quot!(ctx, x4023, x6, 32);
    let x4025: BytePoly_32 = bigint_nondet_rem!(ctx, x4023, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4024, x6, 64), x4025, 64),
            x4023,
            64
        ),
        260103,
        4,
    )?;
    let x4026: BytePoly_33 = bigint_add!(
        bigint_mul!(x4019, x4000, 33),
        bigint_mul!(x3963, x4002, 33),
        33
    );
    let x4027: BytePoly_33 = bigint_add!(
        bigint_mul!(x4025, x4000, 33),
        bigint_mul!(x3965, x4002, 33),
        33
    );
    let x4028: BytePoly_35 = bigint_nondet_quot!(ctx, x4026, x6, 35);
    let x4029: BytePoly_32 = bigint_nondet_rem!(ctx, x4026, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4028, x6, 67), x4029, 67),
            x4026,
            67
        ),
        284487,
        4,
    )?;
    let x4030: BytePoly_35 = bigint_nondet_quot!(ctx, x4027, x6, 35);
    let x4031: BytePoly_32 = bigint_nondet_rem!(ctx, x4027, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4030, x6, 67), x4031, 67),
            x4027,
            67
        ),
        284487,
        4,
    )?;
    let x4032: BytePoly_64 = bigint_mul!(x3993, x3993, 64);
    let x4033: BytePoly_66 = bigint_nondet_quot!(ctx, x4032, x6, 66);
    let x4034: BytePoly_32 = bigint_nondet_rem!(ctx, x4032, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4033, x6, 98), x4034, 98),
            x4032,
            98
        ),
        536459,
        4,
    )?;
    let x4035: BytePoly_33 = bigint_add!(bigint_mul!(x4034, x0, 33), x5, 33);
    let x4036: BytePoly_35 = bigint_nondet_quot!(ctx, x4035, x6, 35);
    let x4037: BytePoly_32 = bigint_nondet_rem!(ctx, x4035, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4036, x6, 67), x4037, 67),
            x4035,
            67
        ),
        284487,
        4,
    )?;
    let x4038: BytePoly_32 = bigint_add!(x3999, x3999, 32);
    let x4039: BytePoly_32 = bigint_nondet_quot!(ctx, x4038, x6, 32);
    let x4040: BytePoly_32 = bigint_nondet_rem!(ctx, x4038, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4039, x6, 64), x4040, 64),
            x4038,
            64
        ),
        260103,
        4,
    )?;
    let x4041: BytePoly_32 = bigint_nondet_inv!(ctx, x4040, x6, 32);
    let x4042: BytePoly_64 = bigint_mul!(x4040, x4041, 64);
    let x4043: BytePoly_66 = bigint_nondet_quot!(ctx, x4042, x6, 66);
    let x4044: BytePoly_32 = bigint_nondet_rem!(ctx, x4042, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4043, x6, 98), x4044, 98),
            x4042,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4044, x3, 32), 34, 1)?;
    let x4045: BytePoly_64 = bigint_mul!(x4037, x4041, 64);
    let x4046: BytePoly_66 = bigint_nondet_quot!(ctx, x4045, x6, 66);
    let x4047: BytePoly_32 = bigint_nondet_rem!(ctx, x4045, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4046, x6, 98), x4047, 98),
            x4045,
            98
        ),
        536459,
        4,
    )?;
    let x4048: BytePoly_64 = bigint_mul!(x4047, x3993, 64);
    let x4049: BytePoly_66 = bigint_nondet_quot!(ctx, x4048, x6, 66);
    let x4050: BytePoly_32 = bigint_nondet_rem!(ctx, x4048, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4049, x6, 98), x4050, 98),
            x4048,
            98
        ),
        536459,
        4,
    )?;
    let x4051: BytePoly_32 = bigint_add!(bigint_sub!(x3999, x4050, 32), x6, 32);
    let x4052: BytePoly_32 = bigint_nondet_quot!(ctx, x4051, x6, 32);
    let x4053: BytePoly_32 = bigint_nondet_rem!(ctx, x4051, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4052, x6, 64), x4053, 64),
            x4051,
            64
        ),
        260103,
        4,
    )?;
    let x4054: BytePoly_64 = bigint_mul!(x4047, x4047, 64);
    let x4055: BytePoly_66 = bigint_nondet_quot!(ctx, x4054, x6, 66);
    let x4056: BytePoly_32 = bigint_nondet_rem!(ctx, x4054, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4055, x6, 98), x4056, 98),
            x4054,
            98
        ),
        536459,
        4,
    )?;
    let x4057: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4056, x3993, 32), x6, 32),
            x3993,
            32
        ),
        x6,
        32
    );
    let x4058: BytePoly_32 = bigint_nondet_quot!(ctx, x4057, x6, 32);
    let x4059: BytePoly_32 = bigint_nondet_rem!(ctx, x4057, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4058, x6, 64), x4059, 64),
            x4057,
            64
        ),
        260103,
        4,
    )?;
    let x4060: BytePoly_64 = bigint_mul!(x4047, x4059, 64);
    let x4061: BytePoly_66 = bigint_nondet_quot!(ctx, x4060, x6, 66);
    let x4062: BytePoly_32 = bigint_nondet_rem!(ctx, x4060, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4061, x6, 98), x4062, 98),
            x4060,
            98
        ),
        536459,
        4,
    )?;
    let x4063: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4062, x4053, 32), 32), x6, 32);
    let x4064: BytePoly_32 = bigint_nondet_quot!(ctx, x4063, x6, 32);
    let x4065: BytePoly_32 = bigint_nondet_rem!(ctx, x4063, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4064, x6, 64), x4065, 64),
            x4063,
            64
        ),
        260103,
        4,
    )?;
    let x4066: BytePoly_1 = bigint_nondet_rem!(ctx, x4001, x2, 1);
    let x4067: BytePoly_33 = bigint_nondet_quot!(ctx, x4001, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4067, x2, 34), x4066, 34),
            x4001,
            34
        ),
        268231,
        4,
    )?;
    let x4068: BytePoly_1 = bigint_sub!(x3, x4066, 1);
    eqz(ctx, &bigint_mul!(x4066, x4068, 2), 8131, 2)?;
    let x4069: BytePoly_32 = bigint_add!(bigint_sub!(x4059, x4029, 32), x6, 32);
    let x4070: BytePoly_32 = bigint_nondet_inv!(ctx, x4069, x6, 32);
    let x4071: BytePoly_64 = bigint_mul!(x4069, x4070, 64);
    let x4072: BytePoly_66 = bigint_nondet_quot!(ctx, x4071, x6, 66);
    let x4073: BytePoly_32 = bigint_nondet_rem!(ctx, x4071, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4072, x6, 98), x4073, 98),
            x4071,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4073, x1, 32), 34, 1)?;
    let x4074: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4065, x4031, 32), x6, 32),
        x4070,
        64
    );
    let x4075: BytePoly_66 = bigint_nondet_quot!(ctx, x4074, x6, 66);
    let x4076: BytePoly_32 = bigint_nondet_rem!(ctx, x4074, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4075, x6, 98), x4076, 98),
            x4074,
            98
        ),
        536459,
        4,
    )?;
    let x4077: BytePoly_64 = bigint_mul!(x4076, x4029, 64);
    let x4078: BytePoly_66 = bigint_nondet_quot!(ctx, x4077, x6, 66);
    let x4079: BytePoly_32 = bigint_nondet_rem!(ctx, x4077, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4078, x6, 98), x4079, 98),
            x4077,
            98
        ),
        536459,
        4,
    )?;
    let x4080: BytePoly_32 = bigint_add!(bigint_sub!(x4031, x4079, 32), x6, 32);
    let x4081: BytePoly_32 = bigint_nondet_quot!(ctx, x4080, x6, 32);
    let x4082: BytePoly_32 = bigint_nondet_rem!(ctx, x4080, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4081, x6, 64), x4082, 64),
            x4080,
            64
        ),
        260103,
        4,
    )?;
    let x4083: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4076, x4076, 64), x4029, 64),
                x6,
                64
            ),
            x4059,
            64
        ),
        x6,
        64
    );
    let x4084: BytePoly_66 = bigint_nondet_quot!(ctx, x4083, x6, 66);
    let x4085: BytePoly_32 = bigint_nondet_rem!(ctx, x4083, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4084, x6, 98), x4085, 98),
            x4083,
            98
        ),
        536459,
        4,
    )?;
    let x4086: BytePoly_64 = bigint_mul!(x4076, x4085, 64);
    let x4087: BytePoly_66 = bigint_nondet_quot!(ctx, x4086, x6, 66);
    let x4088: BytePoly_32 = bigint_nondet_rem!(ctx, x4086, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4087, x6, 98), x4088, 98),
            x4086,
            98
        ),
        536459,
        4,
    )?;
    let x4089: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4088, x4082, 32), 32), x6, 32);
    let x4090: BytePoly_32 = bigint_nondet_quot!(ctx, x4089, x6, 32);
    let x4091: BytePoly_32 = bigint_nondet_rem!(ctx, x4089, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4090, x6, 64), x4091, 64),
            x4089,
            64
        ),
        260103,
        4,
    )?;
    let x4092: BytePoly_33 = bigint_add!(
        bigint_mul!(x4085, x4066, 33),
        bigint_mul!(x4029, x4068, 33),
        33
    );
    let x4093: BytePoly_33 = bigint_add!(
        bigint_mul!(x4091, x4066, 33),
        bigint_mul!(x4031, x4068, 33),
        33
    );
    let x4094: BytePoly_35 = bigint_nondet_quot!(ctx, x4092, x6, 35);
    let x4095: BytePoly_32 = bigint_nondet_rem!(ctx, x4092, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4094, x6, 67), x4095, 67),
            x4092,
            67
        ),
        284487,
        4,
    )?;
    let x4096: BytePoly_35 = bigint_nondet_quot!(ctx, x4093, x6, 35);
    let x4097: BytePoly_32 = bigint_nondet_rem!(ctx, x4093, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4096, x6, 67), x4097, 67),
            x4093,
            67
        ),
        284487,
        4,
    )?;
    let x4098: BytePoly_64 = bigint_mul!(x4059, x4059, 64);
    let x4099: BytePoly_66 = bigint_nondet_quot!(ctx, x4098, x6, 66);
    let x4100: BytePoly_32 = bigint_nondet_rem!(ctx, x4098, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4099, x6, 98), x4100, 98),
            x4098,
            98
        ),
        536459,
        4,
    )?;
    let x4101: BytePoly_33 = bigint_add!(bigint_mul!(x4100, x0, 33), x5, 33);
    let x4102: BytePoly_35 = bigint_nondet_quot!(ctx, x4101, x6, 35);
    let x4103: BytePoly_32 = bigint_nondet_rem!(ctx, x4101, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4102, x6, 67), x4103, 67),
            x4101,
            67
        ),
        284487,
        4,
    )?;
    let x4104: BytePoly_32 = bigint_add!(x4065, x4065, 32);
    let x4105: BytePoly_32 = bigint_nondet_quot!(ctx, x4104, x6, 32);
    let x4106: BytePoly_32 = bigint_nondet_rem!(ctx, x4104, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4105, x6, 64), x4106, 64),
            x4104,
            64
        ),
        260103,
        4,
    )?;
    let x4107: BytePoly_32 = bigint_nondet_inv!(ctx, x4106, x6, 32);
    let x4108: BytePoly_64 = bigint_mul!(x4106, x4107, 64);
    let x4109: BytePoly_66 = bigint_nondet_quot!(ctx, x4108, x6, 66);
    let x4110: BytePoly_32 = bigint_nondet_rem!(ctx, x4108, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4109, x6, 98), x4110, 98),
            x4108,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4110, x3, 32), 34, 1)?;
    let x4111: BytePoly_64 = bigint_mul!(x4103, x4107, 64);
    let x4112: BytePoly_66 = bigint_nondet_quot!(ctx, x4111, x6, 66);
    let x4113: BytePoly_32 = bigint_nondet_rem!(ctx, x4111, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4112, x6, 98), x4113, 98),
            x4111,
            98
        ),
        536459,
        4,
    )?;
    let x4114: BytePoly_64 = bigint_mul!(x4113, x4059, 64);
    let x4115: BytePoly_66 = bigint_nondet_quot!(ctx, x4114, x6, 66);
    let x4116: BytePoly_32 = bigint_nondet_rem!(ctx, x4114, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4115, x6, 98), x4116, 98),
            x4114,
            98
        ),
        536459,
        4,
    )?;
    let x4117: BytePoly_32 = bigint_add!(bigint_sub!(x4065, x4116, 32), x6, 32);
    let x4118: BytePoly_32 = bigint_nondet_quot!(ctx, x4117, x6, 32);
    let x4119: BytePoly_32 = bigint_nondet_rem!(ctx, x4117, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4118, x6, 64), x4119, 64),
            x4117,
            64
        ),
        260103,
        4,
    )?;
    let x4120: BytePoly_64 = bigint_mul!(x4113, x4113, 64);
    let x4121: BytePoly_66 = bigint_nondet_quot!(ctx, x4120, x6, 66);
    let x4122: BytePoly_32 = bigint_nondet_rem!(ctx, x4120, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4121, x6, 98), x4122, 98),
            x4120,
            98
        ),
        536459,
        4,
    )?;
    let x4123: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4122, x4059, 32), x6, 32),
            x4059,
            32
        ),
        x6,
        32
    );
    let x4124: BytePoly_32 = bigint_nondet_quot!(ctx, x4123, x6, 32);
    let x4125: BytePoly_32 = bigint_nondet_rem!(ctx, x4123, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4124, x6, 64), x4125, 64),
            x4123,
            64
        ),
        260103,
        4,
    )?;
    let x4126: BytePoly_64 = bigint_mul!(x4113, x4125, 64);
    let x4127: BytePoly_66 = bigint_nondet_quot!(ctx, x4126, x6, 66);
    let x4128: BytePoly_32 = bigint_nondet_rem!(ctx, x4126, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4127, x6, 98), x4128, 98),
            x4126,
            98
        ),
        536459,
        4,
    )?;
    let x4129: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4128, x4119, 32), 32), x6, 32);
    let x4130: BytePoly_32 = bigint_nondet_quot!(ctx, x4129, x6, 32);
    let x4131: BytePoly_32 = bigint_nondet_rem!(ctx, x4129, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4130, x6, 64), x4131, 64),
            x4129,
            64
        ),
        260103,
        4,
    )?;
    let x4132: BytePoly_1 = bigint_nondet_rem!(ctx, x4067, x2, 1);
    let x4133: BytePoly_33 = bigint_nondet_quot!(ctx, x4067, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4133, x2, 34), x4132, 34),
            x4067,
            34
        ),
        268231,
        4,
    )?;
    let x4134: BytePoly_1 = bigint_sub!(x3, x4132, 1);
    eqz(ctx, &bigint_mul!(x4132, x4134, 2), 8131, 2)?;
    let x4135: BytePoly_32 = bigint_add!(bigint_sub!(x4125, x4095, 32), x6, 32);
    let x4136: BytePoly_32 = bigint_nondet_inv!(ctx, x4135, x6, 32);
    let x4137: BytePoly_64 = bigint_mul!(x4135, x4136, 64);
    let x4138: BytePoly_66 = bigint_nondet_quot!(ctx, x4137, x6, 66);
    let x4139: BytePoly_32 = bigint_nondet_rem!(ctx, x4137, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4138, x6, 98), x4139, 98),
            x4137,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4139, x1, 32), 34, 1)?;
    let x4140: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4131, x4097, 32), x6, 32),
        x4136,
        64
    );
    let x4141: BytePoly_66 = bigint_nondet_quot!(ctx, x4140, x6, 66);
    let x4142: BytePoly_32 = bigint_nondet_rem!(ctx, x4140, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4141, x6, 98), x4142, 98),
            x4140,
            98
        ),
        536459,
        4,
    )?;
    let x4143: BytePoly_64 = bigint_mul!(x4142, x4095, 64);
    let x4144: BytePoly_66 = bigint_nondet_quot!(ctx, x4143, x6, 66);
    let x4145: BytePoly_32 = bigint_nondet_rem!(ctx, x4143, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4144, x6, 98), x4145, 98),
            x4143,
            98
        ),
        536459,
        4,
    )?;
    let x4146: BytePoly_32 = bigint_add!(bigint_sub!(x4097, x4145, 32), x6, 32);
    let x4147: BytePoly_32 = bigint_nondet_quot!(ctx, x4146, x6, 32);
    let x4148: BytePoly_32 = bigint_nondet_rem!(ctx, x4146, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4147, x6, 64), x4148, 64),
            x4146,
            64
        ),
        260103,
        4,
    )?;
    let x4149: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4142, x4142, 64), x4095, 64),
                x6,
                64
            ),
            x4125,
            64
        ),
        x6,
        64
    );
    let x4150: BytePoly_66 = bigint_nondet_quot!(ctx, x4149, x6, 66);
    let x4151: BytePoly_32 = bigint_nondet_rem!(ctx, x4149, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4150, x6, 98), x4151, 98),
            x4149,
            98
        ),
        536459,
        4,
    )?;
    let x4152: BytePoly_64 = bigint_mul!(x4142, x4151, 64);
    let x4153: BytePoly_66 = bigint_nondet_quot!(ctx, x4152, x6, 66);
    let x4154: BytePoly_32 = bigint_nondet_rem!(ctx, x4152, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4153, x6, 98), x4154, 98),
            x4152,
            98
        ),
        536459,
        4,
    )?;
    let x4155: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4154, x4148, 32), 32), x6, 32);
    let x4156: BytePoly_32 = bigint_nondet_quot!(ctx, x4155, x6, 32);
    let x4157: BytePoly_32 = bigint_nondet_rem!(ctx, x4155, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4156, x6, 64), x4157, 64),
            x4155,
            64
        ),
        260103,
        4,
    )?;
    let x4158: BytePoly_33 = bigint_add!(
        bigint_mul!(x4151, x4132, 33),
        bigint_mul!(x4095, x4134, 33),
        33
    );
    let x4159: BytePoly_33 = bigint_add!(
        bigint_mul!(x4157, x4132, 33),
        bigint_mul!(x4097, x4134, 33),
        33
    );
    let x4160: BytePoly_35 = bigint_nondet_quot!(ctx, x4158, x6, 35);
    let x4161: BytePoly_32 = bigint_nondet_rem!(ctx, x4158, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4160, x6, 67), x4161, 67),
            x4158,
            67
        ),
        284487,
        4,
    )?;
    let x4162: BytePoly_35 = bigint_nondet_quot!(ctx, x4159, x6, 35);
    let x4163: BytePoly_32 = bigint_nondet_rem!(ctx, x4159, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4162, x6, 67), x4163, 67),
            x4159,
            67
        ),
        284487,
        4,
    )?;
    let x4164: BytePoly_64 = bigint_mul!(x4125, x4125, 64);
    let x4165: BytePoly_66 = bigint_nondet_quot!(ctx, x4164, x6, 66);
    let x4166: BytePoly_32 = bigint_nondet_rem!(ctx, x4164, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4165, x6, 98), x4166, 98),
            x4164,
            98
        ),
        536459,
        4,
    )?;
    let x4167: BytePoly_33 = bigint_add!(bigint_mul!(x4166, x0, 33), x5, 33);
    let x4168: BytePoly_35 = bigint_nondet_quot!(ctx, x4167, x6, 35);
    let x4169: BytePoly_32 = bigint_nondet_rem!(ctx, x4167, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4168, x6, 67), x4169, 67),
            x4167,
            67
        ),
        284487,
        4,
    )?;
    let x4170: BytePoly_32 = bigint_add!(x4131, x4131, 32);
    let x4171: BytePoly_32 = bigint_nondet_quot!(ctx, x4170, x6, 32);
    let x4172: BytePoly_32 = bigint_nondet_rem!(ctx, x4170, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4171, x6, 64), x4172, 64),
            x4170,
            64
        ),
        260103,
        4,
    )?;
    let x4173: BytePoly_32 = bigint_nondet_inv!(ctx, x4172, x6, 32);
    let x4174: BytePoly_64 = bigint_mul!(x4172, x4173, 64);
    let x4175: BytePoly_66 = bigint_nondet_quot!(ctx, x4174, x6, 66);
    let x4176: BytePoly_32 = bigint_nondet_rem!(ctx, x4174, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4175, x6, 98), x4176, 98),
            x4174,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4176, x3, 32), 34, 1)?;
    let x4177: BytePoly_64 = bigint_mul!(x4169, x4173, 64);
    let x4178: BytePoly_66 = bigint_nondet_quot!(ctx, x4177, x6, 66);
    let x4179: BytePoly_32 = bigint_nondet_rem!(ctx, x4177, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4178, x6, 98), x4179, 98),
            x4177,
            98
        ),
        536459,
        4,
    )?;
    let x4180: BytePoly_64 = bigint_mul!(x4179, x4125, 64);
    let x4181: BytePoly_66 = bigint_nondet_quot!(ctx, x4180, x6, 66);
    let x4182: BytePoly_32 = bigint_nondet_rem!(ctx, x4180, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4181, x6, 98), x4182, 98),
            x4180,
            98
        ),
        536459,
        4,
    )?;
    let x4183: BytePoly_32 = bigint_add!(bigint_sub!(x4131, x4182, 32), x6, 32);
    let x4184: BytePoly_32 = bigint_nondet_quot!(ctx, x4183, x6, 32);
    let x4185: BytePoly_32 = bigint_nondet_rem!(ctx, x4183, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4184, x6, 64), x4185, 64),
            x4183,
            64
        ),
        260103,
        4,
    )?;
    let x4186: BytePoly_64 = bigint_mul!(x4179, x4179, 64);
    let x4187: BytePoly_66 = bigint_nondet_quot!(ctx, x4186, x6, 66);
    let x4188: BytePoly_32 = bigint_nondet_rem!(ctx, x4186, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4187, x6, 98), x4188, 98),
            x4186,
            98
        ),
        536459,
        4,
    )?;
    let x4189: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4188, x4125, 32), x6, 32),
            x4125,
            32
        ),
        x6,
        32
    );
    let x4190: BytePoly_32 = bigint_nondet_quot!(ctx, x4189, x6, 32);
    let x4191: BytePoly_32 = bigint_nondet_rem!(ctx, x4189, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4190, x6, 64), x4191, 64),
            x4189,
            64
        ),
        260103,
        4,
    )?;
    let x4192: BytePoly_64 = bigint_mul!(x4179, x4191, 64);
    let x4193: BytePoly_66 = bigint_nondet_quot!(ctx, x4192, x6, 66);
    let x4194: BytePoly_32 = bigint_nondet_rem!(ctx, x4192, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4193, x6, 98), x4194, 98),
            x4192,
            98
        ),
        536459,
        4,
    )?;
    let x4195: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4194, x4185, 32), 32), x6, 32);
    let x4196: BytePoly_32 = bigint_nondet_quot!(ctx, x4195, x6, 32);
    let x4197: BytePoly_32 = bigint_nondet_rem!(ctx, x4195, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4196, x6, 64), x4197, 64),
            x4195,
            64
        ),
        260103,
        4,
    )?;
    let x4198: BytePoly_1 = bigint_nondet_rem!(ctx, x4133, x2, 1);
    let x4199: BytePoly_33 = bigint_nondet_quot!(ctx, x4133, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4199, x2, 34), x4198, 34),
            x4133,
            34
        ),
        268231,
        4,
    )?;
    let x4200: BytePoly_1 = bigint_sub!(x3, x4198, 1);
    eqz(ctx, &bigint_mul!(x4198, x4200, 2), 8131, 2)?;
    let x4201: BytePoly_32 = bigint_add!(bigint_sub!(x4191, x4161, 32), x6, 32);
    let x4202: BytePoly_32 = bigint_nondet_inv!(ctx, x4201, x6, 32);
    let x4203: BytePoly_64 = bigint_mul!(x4201, x4202, 64);
    let x4204: BytePoly_66 = bigint_nondet_quot!(ctx, x4203, x6, 66);
    let x4205: BytePoly_32 = bigint_nondet_rem!(ctx, x4203, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4204, x6, 98), x4205, 98),
            x4203,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4205, x1, 32), 34, 1)?;
    let x4206: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4197, x4163, 32), x6, 32),
        x4202,
        64
    );
    let x4207: BytePoly_66 = bigint_nondet_quot!(ctx, x4206, x6, 66);
    let x4208: BytePoly_32 = bigint_nondet_rem!(ctx, x4206, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4207, x6, 98), x4208, 98),
            x4206,
            98
        ),
        536459,
        4,
    )?;
    let x4209: BytePoly_64 = bigint_mul!(x4208, x4161, 64);
    let x4210: BytePoly_66 = bigint_nondet_quot!(ctx, x4209, x6, 66);
    let x4211: BytePoly_32 = bigint_nondet_rem!(ctx, x4209, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4210, x6, 98), x4211, 98),
            x4209,
            98
        ),
        536459,
        4,
    )?;
    let x4212: BytePoly_32 = bigint_add!(bigint_sub!(x4163, x4211, 32), x6, 32);
    let x4213: BytePoly_32 = bigint_nondet_quot!(ctx, x4212, x6, 32);
    let x4214: BytePoly_32 = bigint_nondet_rem!(ctx, x4212, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4213, x6, 64), x4214, 64),
            x4212,
            64
        ),
        260103,
        4,
    )?;
    let x4215: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4208, x4208, 64), x4161, 64),
                x6,
                64
            ),
            x4191,
            64
        ),
        x6,
        64
    );
    let x4216: BytePoly_66 = bigint_nondet_quot!(ctx, x4215, x6, 66);
    let x4217: BytePoly_32 = bigint_nondet_rem!(ctx, x4215, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4216, x6, 98), x4217, 98),
            x4215,
            98
        ),
        536459,
        4,
    )?;
    let x4218: BytePoly_64 = bigint_mul!(x4208, x4217, 64);
    let x4219: BytePoly_66 = bigint_nondet_quot!(ctx, x4218, x6, 66);
    let x4220: BytePoly_32 = bigint_nondet_rem!(ctx, x4218, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4219, x6, 98), x4220, 98),
            x4218,
            98
        ),
        536459,
        4,
    )?;
    let x4221: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4220, x4214, 32), 32), x6, 32);
    let x4222: BytePoly_32 = bigint_nondet_quot!(ctx, x4221, x6, 32);
    let x4223: BytePoly_32 = bigint_nondet_rem!(ctx, x4221, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4222, x6, 64), x4223, 64),
            x4221,
            64
        ),
        260103,
        4,
    )?;
    let x4224: BytePoly_33 = bigint_add!(
        bigint_mul!(x4217, x4198, 33),
        bigint_mul!(x4161, x4200, 33),
        33
    );
    let x4225: BytePoly_33 = bigint_add!(
        bigint_mul!(x4223, x4198, 33),
        bigint_mul!(x4163, x4200, 33),
        33
    );
    let x4226: BytePoly_35 = bigint_nondet_quot!(ctx, x4224, x6, 35);
    let x4227: BytePoly_32 = bigint_nondet_rem!(ctx, x4224, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4226, x6, 67), x4227, 67),
            x4224,
            67
        ),
        284487,
        4,
    )?;
    let x4228: BytePoly_35 = bigint_nondet_quot!(ctx, x4225, x6, 35);
    let x4229: BytePoly_32 = bigint_nondet_rem!(ctx, x4225, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4228, x6, 67), x4229, 67),
            x4225,
            67
        ),
        284487,
        4,
    )?;
    let x4230: BytePoly_64 = bigint_mul!(x4191, x4191, 64);
    let x4231: BytePoly_66 = bigint_nondet_quot!(ctx, x4230, x6, 66);
    let x4232: BytePoly_32 = bigint_nondet_rem!(ctx, x4230, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4231, x6, 98), x4232, 98),
            x4230,
            98
        ),
        536459,
        4,
    )?;
    let x4233: BytePoly_33 = bigint_add!(bigint_mul!(x4232, x0, 33), x5, 33);
    let x4234: BytePoly_35 = bigint_nondet_quot!(ctx, x4233, x6, 35);
    let x4235: BytePoly_32 = bigint_nondet_rem!(ctx, x4233, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4234, x6, 67), x4235, 67),
            x4233,
            67
        ),
        284487,
        4,
    )?;
    let x4236: BytePoly_32 = bigint_add!(x4197, x4197, 32);
    let x4237: BytePoly_32 = bigint_nondet_quot!(ctx, x4236, x6, 32);
    let x4238: BytePoly_32 = bigint_nondet_rem!(ctx, x4236, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4237, x6, 64), x4238, 64),
            x4236,
            64
        ),
        260103,
        4,
    )?;
    let x4239: BytePoly_32 = bigint_nondet_inv!(ctx, x4238, x6, 32);
    let x4240: BytePoly_64 = bigint_mul!(x4238, x4239, 64);
    let x4241: BytePoly_66 = bigint_nondet_quot!(ctx, x4240, x6, 66);
    let x4242: BytePoly_32 = bigint_nondet_rem!(ctx, x4240, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4241, x6, 98), x4242, 98),
            x4240,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4242, x3, 32), 34, 1)?;
    let x4243: BytePoly_64 = bigint_mul!(x4235, x4239, 64);
    let x4244: BytePoly_66 = bigint_nondet_quot!(ctx, x4243, x6, 66);
    let x4245: BytePoly_32 = bigint_nondet_rem!(ctx, x4243, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4244, x6, 98), x4245, 98),
            x4243,
            98
        ),
        536459,
        4,
    )?;
    let x4246: BytePoly_64 = bigint_mul!(x4245, x4191, 64);
    let x4247: BytePoly_66 = bigint_nondet_quot!(ctx, x4246, x6, 66);
    let x4248: BytePoly_32 = bigint_nondet_rem!(ctx, x4246, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4247, x6, 98), x4248, 98),
            x4246,
            98
        ),
        536459,
        4,
    )?;
    let x4249: BytePoly_32 = bigint_add!(bigint_sub!(x4197, x4248, 32), x6, 32);
    let x4250: BytePoly_32 = bigint_nondet_quot!(ctx, x4249, x6, 32);
    let x4251: BytePoly_32 = bigint_nondet_rem!(ctx, x4249, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4250, x6, 64), x4251, 64),
            x4249,
            64
        ),
        260103,
        4,
    )?;
    let x4252: BytePoly_64 = bigint_mul!(x4245, x4245, 64);
    let x4253: BytePoly_66 = bigint_nondet_quot!(ctx, x4252, x6, 66);
    let x4254: BytePoly_32 = bigint_nondet_rem!(ctx, x4252, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4253, x6, 98), x4254, 98),
            x4252,
            98
        ),
        536459,
        4,
    )?;
    let x4255: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4254, x4191, 32), x6, 32),
            x4191,
            32
        ),
        x6,
        32
    );
    let x4256: BytePoly_32 = bigint_nondet_quot!(ctx, x4255, x6, 32);
    let x4257: BytePoly_32 = bigint_nondet_rem!(ctx, x4255, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4256, x6, 64), x4257, 64),
            x4255,
            64
        ),
        260103,
        4,
    )?;
    let x4258: BytePoly_64 = bigint_mul!(x4245, x4257, 64);
    let x4259: BytePoly_66 = bigint_nondet_quot!(ctx, x4258, x6, 66);
    let x4260: BytePoly_32 = bigint_nondet_rem!(ctx, x4258, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4259, x6, 98), x4260, 98),
            x4258,
            98
        ),
        536459,
        4,
    )?;
    let x4261: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4260, x4251, 32), 32), x6, 32);
    let x4262: BytePoly_32 = bigint_nondet_quot!(ctx, x4261, x6, 32);
    let x4263: BytePoly_32 = bigint_nondet_rem!(ctx, x4261, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4262, x6, 64), x4263, 64),
            x4261,
            64
        ),
        260103,
        4,
    )?;
    let x4264: BytePoly_1 = bigint_nondet_rem!(ctx, x4199, x2, 1);
    let x4265: BytePoly_33 = bigint_nondet_quot!(ctx, x4199, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4265, x2, 34), x4264, 34),
            x4199,
            34
        ),
        268231,
        4,
    )?;
    let x4266: BytePoly_1 = bigint_sub!(x3, x4264, 1);
    eqz(ctx, &bigint_mul!(x4264, x4266, 2), 8131, 2)?;
    let x4267: BytePoly_32 = bigint_add!(bigint_sub!(x4257, x4227, 32), x6, 32);
    let x4268: BytePoly_32 = bigint_nondet_inv!(ctx, x4267, x6, 32);
    let x4269: BytePoly_64 = bigint_mul!(x4267, x4268, 64);
    let x4270: BytePoly_66 = bigint_nondet_quot!(ctx, x4269, x6, 66);
    let x4271: BytePoly_32 = bigint_nondet_rem!(ctx, x4269, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4270, x6, 98), x4271, 98),
            x4269,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4271, x1, 32), 34, 1)?;
    let x4272: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4263, x4229, 32), x6, 32),
        x4268,
        64
    );
    let x4273: BytePoly_66 = bigint_nondet_quot!(ctx, x4272, x6, 66);
    let x4274: BytePoly_32 = bigint_nondet_rem!(ctx, x4272, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4273, x6, 98), x4274, 98),
            x4272,
            98
        ),
        536459,
        4,
    )?;
    let x4275: BytePoly_64 = bigint_mul!(x4274, x4227, 64);
    let x4276: BytePoly_66 = bigint_nondet_quot!(ctx, x4275, x6, 66);
    let x4277: BytePoly_32 = bigint_nondet_rem!(ctx, x4275, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4276, x6, 98), x4277, 98),
            x4275,
            98
        ),
        536459,
        4,
    )?;
    let x4278: BytePoly_32 = bigint_add!(bigint_sub!(x4229, x4277, 32), x6, 32);
    let x4279: BytePoly_32 = bigint_nondet_quot!(ctx, x4278, x6, 32);
    let x4280: BytePoly_32 = bigint_nondet_rem!(ctx, x4278, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4279, x6, 64), x4280, 64),
            x4278,
            64
        ),
        260103,
        4,
    )?;
    let x4281: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4274, x4274, 64), x4227, 64),
                x6,
                64
            ),
            x4257,
            64
        ),
        x6,
        64
    );
    let x4282: BytePoly_66 = bigint_nondet_quot!(ctx, x4281, x6, 66);
    let x4283: BytePoly_32 = bigint_nondet_rem!(ctx, x4281, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4282, x6, 98), x4283, 98),
            x4281,
            98
        ),
        536459,
        4,
    )?;
    let x4284: BytePoly_64 = bigint_mul!(x4274, x4283, 64);
    let x4285: BytePoly_66 = bigint_nondet_quot!(ctx, x4284, x6, 66);
    let x4286: BytePoly_32 = bigint_nondet_rem!(ctx, x4284, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4285, x6, 98), x4286, 98),
            x4284,
            98
        ),
        536459,
        4,
    )?;
    let x4287: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4286, x4280, 32), 32), x6, 32);
    let x4288: BytePoly_32 = bigint_nondet_quot!(ctx, x4287, x6, 32);
    let x4289: BytePoly_32 = bigint_nondet_rem!(ctx, x4287, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4288, x6, 64), x4289, 64),
            x4287,
            64
        ),
        260103,
        4,
    )?;
    let x4290: BytePoly_33 = bigint_add!(
        bigint_mul!(x4283, x4264, 33),
        bigint_mul!(x4227, x4266, 33),
        33
    );
    let x4291: BytePoly_33 = bigint_add!(
        bigint_mul!(x4289, x4264, 33),
        bigint_mul!(x4229, x4266, 33),
        33
    );
    let x4292: BytePoly_35 = bigint_nondet_quot!(ctx, x4290, x6, 35);
    let x4293: BytePoly_32 = bigint_nondet_rem!(ctx, x4290, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4292, x6, 67), x4293, 67),
            x4290,
            67
        ),
        284487,
        4,
    )?;
    let x4294: BytePoly_35 = bigint_nondet_quot!(ctx, x4291, x6, 35);
    let x4295: BytePoly_32 = bigint_nondet_rem!(ctx, x4291, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4294, x6, 67), x4295, 67),
            x4291,
            67
        ),
        284487,
        4,
    )?;
    let x4296: BytePoly_64 = bigint_mul!(x4257, x4257, 64);
    let x4297: BytePoly_66 = bigint_nondet_quot!(ctx, x4296, x6, 66);
    let x4298: BytePoly_32 = bigint_nondet_rem!(ctx, x4296, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4297, x6, 98), x4298, 98),
            x4296,
            98
        ),
        536459,
        4,
    )?;
    let x4299: BytePoly_33 = bigint_add!(bigint_mul!(x4298, x0, 33), x5, 33);
    let x4300: BytePoly_35 = bigint_nondet_quot!(ctx, x4299, x6, 35);
    let x4301: BytePoly_32 = bigint_nondet_rem!(ctx, x4299, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4300, x6, 67), x4301, 67),
            x4299,
            67
        ),
        284487,
        4,
    )?;
    let x4302: BytePoly_32 = bigint_add!(x4263, x4263, 32);
    let x4303: BytePoly_32 = bigint_nondet_quot!(ctx, x4302, x6, 32);
    let x4304: BytePoly_32 = bigint_nondet_rem!(ctx, x4302, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4303, x6, 64), x4304, 64),
            x4302,
            64
        ),
        260103,
        4,
    )?;
    let x4305: BytePoly_32 = bigint_nondet_inv!(ctx, x4304, x6, 32);
    let x4306: BytePoly_64 = bigint_mul!(x4304, x4305, 64);
    let x4307: BytePoly_66 = bigint_nondet_quot!(ctx, x4306, x6, 66);
    let x4308: BytePoly_32 = bigint_nondet_rem!(ctx, x4306, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4307, x6, 98), x4308, 98),
            x4306,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4308, x3, 32), 34, 1)?;
    let x4309: BytePoly_64 = bigint_mul!(x4301, x4305, 64);
    let x4310: BytePoly_66 = bigint_nondet_quot!(ctx, x4309, x6, 66);
    let x4311: BytePoly_32 = bigint_nondet_rem!(ctx, x4309, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4310, x6, 98), x4311, 98),
            x4309,
            98
        ),
        536459,
        4,
    )?;
    let x4312: BytePoly_64 = bigint_mul!(x4311, x4257, 64);
    let x4313: BytePoly_66 = bigint_nondet_quot!(ctx, x4312, x6, 66);
    let x4314: BytePoly_32 = bigint_nondet_rem!(ctx, x4312, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4313, x6, 98), x4314, 98),
            x4312,
            98
        ),
        536459,
        4,
    )?;
    let x4315: BytePoly_32 = bigint_add!(bigint_sub!(x4263, x4314, 32), x6, 32);
    let x4316: BytePoly_32 = bigint_nondet_quot!(ctx, x4315, x6, 32);
    let x4317: BytePoly_32 = bigint_nondet_rem!(ctx, x4315, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4316, x6, 64), x4317, 64),
            x4315,
            64
        ),
        260103,
        4,
    )?;
    let x4318: BytePoly_64 = bigint_mul!(x4311, x4311, 64);
    let x4319: BytePoly_66 = bigint_nondet_quot!(ctx, x4318, x6, 66);
    let x4320: BytePoly_32 = bigint_nondet_rem!(ctx, x4318, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4319, x6, 98), x4320, 98),
            x4318,
            98
        ),
        536459,
        4,
    )?;
    let x4321: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4320, x4257, 32), x6, 32),
            x4257,
            32
        ),
        x6,
        32
    );
    let x4322: BytePoly_32 = bigint_nondet_quot!(ctx, x4321, x6, 32);
    let x4323: BytePoly_32 = bigint_nondet_rem!(ctx, x4321, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4322, x6, 64), x4323, 64),
            x4321,
            64
        ),
        260103,
        4,
    )?;
    let x4324: BytePoly_64 = bigint_mul!(x4311, x4323, 64);
    let x4325: BytePoly_66 = bigint_nondet_quot!(ctx, x4324, x6, 66);
    let x4326: BytePoly_32 = bigint_nondet_rem!(ctx, x4324, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4325, x6, 98), x4326, 98),
            x4324,
            98
        ),
        536459,
        4,
    )?;
    let x4327: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4326, x4317, 32), 32), x6, 32);
    let x4328: BytePoly_32 = bigint_nondet_quot!(ctx, x4327, x6, 32);
    let x4329: BytePoly_32 = bigint_nondet_rem!(ctx, x4327, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4328, x6, 64), x4329, 64),
            x4327,
            64
        ),
        260103,
        4,
    )?;
    let x4330: BytePoly_32 = bigint_add!(bigint_sub!(x15, x4293, 32), x6, 32);
    let x4331: BytePoly_32 = bigint_nondet_inv!(ctx, x4330, x6, 32);
    let x4332: BytePoly_64 = bigint_mul!(x4330, x4331, 64);
    let x4333: BytePoly_66 = bigint_nondet_quot!(ctx, x4332, x6, 66);
    let x4334: BytePoly_32 = bigint_nondet_rem!(ctx, x4332, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4333, x6, 98), x4334, 98),
            x4332,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4334, x1, 32), 34, 1)?;
    let x4335: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2172, x4295, 32), x6, 32),
        x4331,
        64
    );
    let x4336: BytePoly_66 = bigint_nondet_quot!(ctx, x4335, x6, 66);
    let x4337: BytePoly_32 = bigint_nondet_rem!(ctx, x4335, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4336, x6, 98), x4337, 98),
            x4335,
            98
        ),
        536459,
        4,
    )?;
    let x4338: BytePoly_64 = bigint_mul!(x4337, x4293, 64);
    let x4339: BytePoly_66 = bigint_nondet_quot!(ctx, x4338, x6, 66);
    let x4340: BytePoly_32 = bigint_nondet_rem!(ctx, x4338, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4339, x6, 98), x4340, 98),
            x4338,
            98
        ),
        536459,
        4,
    )?;
    let x4341: BytePoly_32 = bigint_add!(bigint_sub!(x4295, x4340, 32), x6, 32);
    let x4342: BytePoly_32 = bigint_nondet_quot!(ctx, x4341, x6, 32);
    let x4343: BytePoly_32 = bigint_nondet_rem!(ctx, x4341, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4342, x6, 64), x4343, 64),
            x4341,
            64
        ),
        260103,
        4,
    )?;
    let x4344: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4337, x4337, 64), x4293, 64),
                x6,
                64
            ),
            x15,
            64
        ),
        x6,
        64
    );
    let x4345: BytePoly_66 = bigint_nondet_quot!(ctx, x4344, x6, 66);
    let x4346: BytePoly_32 = bigint_nondet_rem!(ctx, x4344, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4345, x6, 98), x4346, 98),
            x4344,
            98
        ),
        536459,
        4,
    )?;
    let x4347: BytePoly_64 = bigint_mul!(x4337, x4346, 64);
    let x4348: BytePoly_66 = bigint_nondet_quot!(ctx, x4347, x6, 66);
    let x4349: BytePoly_32 = bigint_nondet_rem!(ctx, x4347, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4348, x6, 98), x4349, 98),
            x4347,
            98
        ),
        536459,
        4,
    )?;
    let x4350: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4349, x4343, 32), 32), x6, 32);
    let x4351: BytePoly_32 = bigint_nondet_quot!(ctx, x4350, x6, 32);
    let x4352: BytePoly_32 = bigint_nondet_rem!(ctx, x4350, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4351, x6, 64), x4352, 64),
            x4350,
            64
        ),
        260103,
        4,
    )?;
    let x4353: BytePoly_66 = bigint_nondet_quot!(ctx, x32, x6, 66);
    let x4354: BytePoly_32 = bigint_nondet_rem!(ctx, x32, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4353, x6, 98), x4354, 98), x32, 98),
        536459,
        4,
    )?;
    let x4355: BytePoly_66 = bigint_nondet_quot!(ctx, x35, x6, 66);
    let x4356: BytePoly_32 = bigint_nondet_rem!(ctx, x35, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4355, x6, 98), x4356, 98), x35, 98),
        536459,
        4,
    )?;
    let x4357: BytePoly_64 = bigint_mul!(x15, x4356, 64);
    let x4358: BytePoly_66 = bigint_nondet_quot!(ctx, x4357, x6, 66);
    let x4359: BytePoly_32 = bigint_nondet_rem!(ctx, x4357, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4358, x6, 98), x4359, 98),
            x4357,
            98
        ),
        536459,
        4,
    )?;
    let x4360: BytePoly_66 = bigint_nondet_quot!(ctx, x41, x6, 66);
    let x4361: BytePoly_32 = bigint_nondet_rem!(ctx, x41, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4360, x6, 98), x4361, 98), x41, 98),
        536459,
        4,
    )?;
    let x4362: BytePoly_32 = bigint_add!(bigint_add!(x4359, x4361, 32), x4, 32);
    let x4363: BytePoly_32 = bigint_nondet_quot!(ctx, x4362, x6, 32);
    let x4364: BytePoly_32 = bigint_nondet_rem!(ctx, x4362, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4363, x6, 64), x4364, 64),
            x4362,
            64
        ),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4354, x4364, 32), 34, 1)?;
    let x4365: BytePoly_1 = bigint_nondet_rem!(ctx, x2205, x2, 1);
    let x4366: BytePoly_33 = bigint_nondet_quot!(ctx, x2205, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4366, x2, 34), x4365, 34),
            x2205,
            34
        ),
        268231,
        4,
    )?;
    let x4367: BytePoly_1 = bigint_sub!(x3, x4365, 1);
    eqz(ctx, &bigint_mul!(x4365, x4367, 2), 8131, 2)?;
    let x4368: BytePoly_32 = bigint_nondet_inv!(ctx, x64, x6, 32);
    let x4369: BytePoly_64 = bigint_mul!(x64, x4368, 64);
    let x4370: BytePoly_66 = bigint_nondet_quot!(ctx, x4369, x6, 66);
    let x4371: BytePoly_32 = bigint_nondet_rem!(ctx, x4369, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4370, x6, 98), x4371, 98),
            x4369,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4371, x1, 32), 34, 1)?;
    let x4372: BytePoly_64 = bigint_mul!(x63, x4368, 64);
    let x4373: BytePoly_66 = bigint_nondet_quot!(ctx, x4372, x6, 66);
    let x4374: BytePoly_32 = bigint_nondet_rem!(ctx, x4372, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4373, x6, 98), x4374, 98),
            x4372,
            98
        ),
        536459,
        4,
    )?;
    let x4375: BytePoly_64 = bigint_mul!(x4374, x15, 64);
    let x4376: BytePoly_66 = bigint_nondet_quot!(ctx, x4375, x6, 66);
    let x4377: BytePoly_32 = bigint_nondet_rem!(ctx, x4375, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4376, x6, 98), x4377, 98),
            x4375,
            98
        ),
        536459,
        4,
    )?;
    let x4378: BytePoly_32 = bigint_add!(bigint_sub!(x16, x4377, 32), x6, 32);
    let x4379: BytePoly_32 = bigint_nondet_quot!(ctx, x4378, x6, 32);
    let x4380: BytePoly_32 = bigint_nondet_rem!(ctx, x4378, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4379, x6, 64), x4380, 64),
            x4378,
            64
        ),
        260103,
        4,
    )?;
    let x4381: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x4374, x4374, 64), x15, 64), x6, 64),
            x10,
            64
        ),
        x6,
        64
    );
    let x4382: BytePoly_66 = bigint_nondet_quot!(ctx, x4381, x6, 66);
    let x4383: BytePoly_32 = bigint_nondet_rem!(ctx, x4381, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4382, x6, 98), x4383, 98),
            x4381,
            98
        ),
        536459,
        4,
    )?;
    let x4384: BytePoly_64 = bigint_mul!(x4374, x4383, 64);
    let x4385: BytePoly_66 = bigint_nondet_quot!(ctx, x4384, x6, 66);
    let x4386: BytePoly_32 = bigint_nondet_rem!(ctx, x4384, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4385, x6, 98), x4386, 98),
            x4384,
            98
        ),
        536459,
        4,
    )?;
    let x4387: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4386, x4380, 32), 32), x6, 32);
    let x4388: BytePoly_32 = bigint_nondet_quot!(ctx, x4387, x6, 32);
    let x4389: BytePoly_32 = bigint_nondet_rem!(ctx, x4387, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4388, x6, 64), x4389, 64),
            x4387,
            64
        ),
        260103,
        4,
    )?;
    let x4390: BytePoly_33 = bigint_add!(
        bigint_mul!(x4383, x4365, 33),
        bigint_mul!(x15, x4367, 33),
        33
    );
    let x4391: BytePoly_33 = bigint_add!(
        bigint_mul!(x4389, x4365, 33),
        bigint_mul!(x16, x4367, 33),
        33
    );
    let x4392: BytePoly_35 = bigint_nondet_quot!(ctx, x4390, x6, 35);
    let x4393: BytePoly_32 = bigint_nondet_rem!(ctx, x4390, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4392, x6, 67), x4393, 67),
            x4390,
            67
        ),
        284487,
        4,
    )?;
    let x4394: BytePoly_35 = bigint_nondet_quot!(ctx, x4391, x6, 35);
    let x4395: BytePoly_32 = bigint_nondet_rem!(ctx, x4391, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4394, x6, 67), x4395, 67),
            x4391,
            67
        ),
        284487,
        4,
    )?;
    let x4396: BytePoly_66 = bigint_nondet_quot!(ctx, x20, x6, 66);
    let x4397: BytePoly_32 = bigint_nondet_rem!(ctx, x20, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4396, x6, 98), x4397, 98), x20, 98),
        536459,
        4,
    )?;
    let x4398: BytePoly_33 = bigint_add!(bigint_mul!(x4397, x0, 33), x5, 33);
    let x4399: BytePoly_35 = bigint_nondet_quot!(ctx, x4398, x6, 35);
    let x4400: BytePoly_32 = bigint_nondet_rem!(ctx, x4398, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4399, x6, 67), x4400, 67),
            x4398,
            67
        ),
        284487,
        4,
    )?;
    let x4401: BytePoly_32 = bigint_nondet_quot!(ctx, x98, x6, 32);
    let x4402: BytePoly_32 = bigint_nondet_rem!(ctx, x98, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x4401, x6, 64), x4402, 64), x98, 64),
        260103,
        4,
    )?;
    let x4403: BytePoly_32 = bigint_nondet_inv!(ctx, x4402, x6, 32);
    let x4404: BytePoly_64 = bigint_mul!(x4402, x4403, 64);
    let x4405: BytePoly_66 = bigint_nondet_quot!(ctx, x4404, x6, 66);
    let x4406: BytePoly_32 = bigint_nondet_rem!(ctx, x4404, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4405, x6, 98), x4406, 98),
            x4404,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4406, x3, 32), 34, 1)?;
    let x4407: BytePoly_64 = bigint_mul!(x4400, x4403, 64);
    let x4408: BytePoly_66 = bigint_nondet_quot!(ctx, x4407, x6, 66);
    let x4409: BytePoly_32 = bigint_nondet_rem!(ctx, x4407, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4408, x6, 98), x4409, 98),
            x4407,
            98
        ),
        536459,
        4,
    )?;
    let x4410: BytePoly_64 = bigint_mul!(x4409, x10, 64);
    let x4411: BytePoly_66 = bigint_nondet_quot!(ctx, x4410, x6, 66);
    let x4412: BytePoly_32 = bigint_nondet_rem!(ctx, x4410, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4411, x6, 98), x4412, 98),
            x4410,
            98
        ),
        536459,
        4,
    )?;
    let x4413: BytePoly_32 = bigint_add!(bigint_sub!(x11, x4412, 32), x6, 32);
    let x4414: BytePoly_32 = bigint_nondet_quot!(ctx, x4413, x6, 32);
    let x4415: BytePoly_32 = bigint_nondet_rem!(ctx, x4413, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4414, x6, 64), x4415, 64),
            x4413,
            64
        ),
        260103,
        4,
    )?;
    let x4416: BytePoly_64 = bigint_mul!(x4409, x4409, 64);
    let x4417: BytePoly_66 = bigint_nondet_quot!(ctx, x4416, x6, 66);
    let x4418: BytePoly_32 = bigint_nondet_rem!(ctx, x4416, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4417, x6, 98), x4418, 98),
            x4416,
            98
        ),
        536459,
        4,
    )?;
    let x4419: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x4418, x10, 32), x6, 32), x10, 32),
        x6,
        32
    );
    let x4420: BytePoly_32 = bigint_nondet_quot!(ctx, x4419, x6, 32);
    let x4421: BytePoly_32 = bigint_nondet_rem!(ctx, x4419, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4420, x6, 64), x4421, 64),
            x4419,
            64
        ),
        260103,
        4,
    )?;
    let x4422: BytePoly_64 = bigint_mul!(x4409, x4421, 64);
    let x4423: BytePoly_66 = bigint_nondet_quot!(ctx, x4422, x6, 66);
    let x4424: BytePoly_32 = bigint_nondet_rem!(ctx, x4422, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4423, x6, 98), x4424, 98),
            x4422,
            98
        ),
        536459,
        4,
    )?;
    let x4425: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4424, x4415, 32), 32), x6, 32);
    let x4426: BytePoly_32 = bigint_nondet_quot!(ctx, x4425, x6, 32);
    let x4427: BytePoly_32 = bigint_nondet_rem!(ctx, x4425, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4426, x6, 64), x4427, 64),
            x4425,
            64
        ),
        260103,
        4,
    )?;
    let x4428: BytePoly_1 = bigint_nondet_rem!(ctx, x4366, x2, 1);
    let x4429: BytePoly_33 = bigint_nondet_quot!(ctx, x4366, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4429, x2, 34), x4428, 34),
            x4366,
            34
        ),
        268231,
        4,
    )?;
    let x4430: BytePoly_1 = bigint_sub!(x3, x4428, 1);
    eqz(ctx, &bigint_mul!(x4428, x4430, 2), 8131, 2)?;
    let x4431: BytePoly_32 = bigint_add!(bigint_sub!(x4421, x4393, 32), x6, 32);
    let x4432: BytePoly_32 = bigint_nondet_inv!(ctx, x4431, x6, 32);
    let x4433: BytePoly_64 = bigint_mul!(x4431, x4432, 64);
    let x4434: BytePoly_66 = bigint_nondet_quot!(ctx, x4433, x6, 66);
    let x4435: BytePoly_32 = bigint_nondet_rem!(ctx, x4433, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4434, x6, 98), x4435, 98),
            x4433,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4435, x1, 32), 34, 1)?;
    let x4436: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4427, x4395, 32), x6, 32),
        x4432,
        64
    );
    let x4437: BytePoly_66 = bigint_nondet_quot!(ctx, x4436, x6, 66);
    let x4438: BytePoly_32 = bigint_nondet_rem!(ctx, x4436, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4437, x6, 98), x4438, 98),
            x4436,
            98
        ),
        536459,
        4,
    )?;
    let x4439: BytePoly_64 = bigint_mul!(x4438, x4393, 64);
    let x4440: BytePoly_66 = bigint_nondet_quot!(ctx, x4439, x6, 66);
    let x4441: BytePoly_32 = bigint_nondet_rem!(ctx, x4439, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4440, x6, 98), x4441, 98),
            x4439,
            98
        ),
        536459,
        4,
    )?;
    let x4442: BytePoly_32 = bigint_add!(bigint_sub!(x4395, x4441, 32), x6, 32);
    let x4443: BytePoly_32 = bigint_nondet_quot!(ctx, x4442, x6, 32);
    let x4444: BytePoly_32 = bigint_nondet_rem!(ctx, x4442, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4443, x6, 64), x4444, 64),
            x4442,
            64
        ),
        260103,
        4,
    )?;
    let x4445: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4438, x4438, 64), x4393, 64),
                x6,
                64
            ),
            x4421,
            64
        ),
        x6,
        64
    );
    let x4446: BytePoly_66 = bigint_nondet_quot!(ctx, x4445, x6, 66);
    let x4447: BytePoly_32 = bigint_nondet_rem!(ctx, x4445, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4446, x6, 98), x4447, 98),
            x4445,
            98
        ),
        536459,
        4,
    )?;
    let x4448: BytePoly_64 = bigint_mul!(x4438, x4447, 64);
    let x4449: BytePoly_66 = bigint_nondet_quot!(ctx, x4448, x6, 66);
    let x4450: BytePoly_32 = bigint_nondet_rem!(ctx, x4448, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4449, x6, 98), x4450, 98),
            x4448,
            98
        ),
        536459,
        4,
    )?;
    let x4451: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4450, x4444, 32), 32), x6, 32);
    let x4452: BytePoly_32 = bigint_nondet_quot!(ctx, x4451, x6, 32);
    let x4453: BytePoly_32 = bigint_nondet_rem!(ctx, x4451, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4452, x6, 64), x4453, 64),
            x4451,
            64
        ),
        260103,
        4,
    )?;
    let x4454: BytePoly_33 = bigint_add!(
        bigint_mul!(x4447, x4428, 33),
        bigint_mul!(x4393, x4430, 33),
        33
    );
    let x4455: BytePoly_33 = bigint_add!(
        bigint_mul!(x4453, x4428, 33),
        bigint_mul!(x4395, x4430, 33),
        33
    );
    let x4456: BytePoly_35 = bigint_nondet_quot!(ctx, x4454, x6, 35);
    let x4457: BytePoly_32 = bigint_nondet_rem!(ctx, x4454, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4456, x6, 67), x4457, 67),
            x4454,
            67
        ),
        284487,
        4,
    )?;
    let x4458: BytePoly_35 = bigint_nondet_quot!(ctx, x4455, x6, 35);
    let x4459: BytePoly_32 = bigint_nondet_rem!(ctx, x4455, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4458, x6, 67), x4459, 67),
            x4455,
            67
        ),
        284487,
        4,
    )?;
    let x4460: BytePoly_64 = bigint_mul!(x4421, x4421, 64);
    let x4461: BytePoly_66 = bigint_nondet_quot!(ctx, x4460, x6, 66);
    let x4462: BytePoly_32 = bigint_nondet_rem!(ctx, x4460, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4461, x6, 98), x4462, 98),
            x4460,
            98
        ),
        536459,
        4,
    )?;
    let x4463: BytePoly_33 = bigint_add!(bigint_mul!(x4462, x0, 33), x5, 33);
    let x4464: BytePoly_35 = bigint_nondet_quot!(ctx, x4463, x6, 35);
    let x4465: BytePoly_32 = bigint_nondet_rem!(ctx, x4463, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4464, x6, 67), x4465, 67),
            x4463,
            67
        ),
        284487,
        4,
    )?;
    let x4466: BytePoly_32 = bigint_add!(x4427, x4427, 32);
    let x4467: BytePoly_32 = bigint_nondet_quot!(ctx, x4466, x6, 32);
    let x4468: BytePoly_32 = bigint_nondet_rem!(ctx, x4466, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4467, x6, 64), x4468, 64),
            x4466,
            64
        ),
        260103,
        4,
    )?;
    let x4469: BytePoly_32 = bigint_nondet_inv!(ctx, x4468, x6, 32);
    let x4470: BytePoly_64 = bigint_mul!(x4468, x4469, 64);
    let x4471: BytePoly_66 = bigint_nondet_quot!(ctx, x4470, x6, 66);
    let x4472: BytePoly_32 = bigint_nondet_rem!(ctx, x4470, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4471, x6, 98), x4472, 98),
            x4470,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4472, x3, 32), 34, 1)?;
    let x4473: BytePoly_64 = bigint_mul!(x4465, x4469, 64);
    let x4474: BytePoly_66 = bigint_nondet_quot!(ctx, x4473, x6, 66);
    let x4475: BytePoly_32 = bigint_nondet_rem!(ctx, x4473, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4474, x6, 98), x4475, 98),
            x4473,
            98
        ),
        536459,
        4,
    )?;
    let x4476: BytePoly_64 = bigint_mul!(x4475, x4421, 64);
    let x4477: BytePoly_66 = bigint_nondet_quot!(ctx, x4476, x6, 66);
    let x4478: BytePoly_32 = bigint_nondet_rem!(ctx, x4476, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4477, x6, 98), x4478, 98),
            x4476,
            98
        ),
        536459,
        4,
    )?;
    let x4479: BytePoly_32 = bigint_add!(bigint_sub!(x4427, x4478, 32), x6, 32);
    let x4480: BytePoly_32 = bigint_nondet_quot!(ctx, x4479, x6, 32);
    let x4481: BytePoly_32 = bigint_nondet_rem!(ctx, x4479, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4480, x6, 64), x4481, 64),
            x4479,
            64
        ),
        260103,
        4,
    )?;
    let x4482: BytePoly_64 = bigint_mul!(x4475, x4475, 64);
    let x4483: BytePoly_66 = bigint_nondet_quot!(ctx, x4482, x6, 66);
    let x4484: BytePoly_32 = bigint_nondet_rem!(ctx, x4482, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4483, x6, 98), x4484, 98),
            x4482,
            98
        ),
        536459,
        4,
    )?;
    let x4485: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4484, x4421, 32), x6, 32),
            x4421,
            32
        ),
        x6,
        32
    );
    let x4486: BytePoly_32 = bigint_nondet_quot!(ctx, x4485, x6, 32);
    let x4487: BytePoly_32 = bigint_nondet_rem!(ctx, x4485, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4486, x6, 64), x4487, 64),
            x4485,
            64
        ),
        260103,
        4,
    )?;
    let x4488: BytePoly_64 = bigint_mul!(x4475, x4487, 64);
    let x4489: BytePoly_66 = bigint_nondet_quot!(ctx, x4488, x6, 66);
    let x4490: BytePoly_32 = bigint_nondet_rem!(ctx, x4488, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4489, x6, 98), x4490, 98),
            x4488,
            98
        ),
        536459,
        4,
    )?;
    let x4491: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4490, x4481, 32), 32), x6, 32);
    let x4492: BytePoly_32 = bigint_nondet_quot!(ctx, x4491, x6, 32);
    let x4493: BytePoly_32 = bigint_nondet_rem!(ctx, x4491, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4492, x6, 64), x4493, 64),
            x4491,
            64
        ),
        260103,
        4,
    )?;
    let x4494: BytePoly_1 = bigint_nondet_rem!(ctx, x4429, x2, 1);
    let x4495: BytePoly_33 = bigint_nondet_quot!(ctx, x4429, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4495, x2, 34), x4494, 34),
            x4429,
            34
        ),
        268231,
        4,
    )?;
    let x4496: BytePoly_1 = bigint_sub!(x3, x4494, 1);
    eqz(ctx, &bigint_mul!(x4494, x4496, 2), 8131, 2)?;
    let x4497: BytePoly_32 = bigint_add!(bigint_sub!(x4487, x4457, 32), x6, 32);
    let x4498: BytePoly_32 = bigint_nondet_inv!(ctx, x4497, x6, 32);
    let x4499: BytePoly_64 = bigint_mul!(x4497, x4498, 64);
    let x4500: BytePoly_66 = bigint_nondet_quot!(ctx, x4499, x6, 66);
    let x4501: BytePoly_32 = bigint_nondet_rem!(ctx, x4499, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4500, x6, 98), x4501, 98),
            x4499,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4501, x1, 32), 34, 1)?;
    let x4502: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4493, x4459, 32), x6, 32),
        x4498,
        64
    );
    let x4503: BytePoly_66 = bigint_nondet_quot!(ctx, x4502, x6, 66);
    let x4504: BytePoly_32 = bigint_nondet_rem!(ctx, x4502, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4503, x6, 98), x4504, 98),
            x4502,
            98
        ),
        536459,
        4,
    )?;
    let x4505: BytePoly_64 = bigint_mul!(x4504, x4457, 64);
    let x4506: BytePoly_66 = bigint_nondet_quot!(ctx, x4505, x6, 66);
    let x4507: BytePoly_32 = bigint_nondet_rem!(ctx, x4505, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4506, x6, 98), x4507, 98),
            x4505,
            98
        ),
        536459,
        4,
    )?;
    let x4508: BytePoly_32 = bigint_add!(bigint_sub!(x4459, x4507, 32), x6, 32);
    let x4509: BytePoly_32 = bigint_nondet_quot!(ctx, x4508, x6, 32);
    let x4510: BytePoly_32 = bigint_nondet_rem!(ctx, x4508, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4509, x6, 64), x4510, 64),
            x4508,
            64
        ),
        260103,
        4,
    )?;
    let x4511: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4504, x4504, 64), x4457, 64),
                x6,
                64
            ),
            x4487,
            64
        ),
        x6,
        64
    );
    let x4512: BytePoly_66 = bigint_nondet_quot!(ctx, x4511, x6, 66);
    let x4513: BytePoly_32 = bigint_nondet_rem!(ctx, x4511, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4512, x6, 98), x4513, 98),
            x4511,
            98
        ),
        536459,
        4,
    )?;
    let x4514: BytePoly_64 = bigint_mul!(x4504, x4513, 64);
    let x4515: BytePoly_66 = bigint_nondet_quot!(ctx, x4514, x6, 66);
    let x4516: BytePoly_32 = bigint_nondet_rem!(ctx, x4514, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4515, x6, 98), x4516, 98),
            x4514,
            98
        ),
        536459,
        4,
    )?;
    let x4517: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4516, x4510, 32), 32), x6, 32);
    let x4518: BytePoly_32 = bigint_nondet_quot!(ctx, x4517, x6, 32);
    let x4519: BytePoly_32 = bigint_nondet_rem!(ctx, x4517, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4518, x6, 64), x4519, 64),
            x4517,
            64
        ),
        260103,
        4,
    )?;
    let x4520: BytePoly_33 = bigint_add!(
        bigint_mul!(x4513, x4494, 33),
        bigint_mul!(x4457, x4496, 33),
        33
    );
    let x4521: BytePoly_33 = bigint_add!(
        bigint_mul!(x4519, x4494, 33),
        bigint_mul!(x4459, x4496, 33),
        33
    );
    let x4522: BytePoly_35 = bigint_nondet_quot!(ctx, x4520, x6, 35);
    let x4523: BytePoly_32 = bigint_nondet_rem!(ctx, x4520, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4522, x6, 67), x4523, 67),
            x4520,
            67
        ),
        284487,
        4,
    )?;
    let x4524: BytePoly_35 = bigint_nondet_quot!(ctx, x4521, x6, 35);
    let x4525: BytePoly_32 = bigint_nondet_rem!(ctx, x4521, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4524, x6, 67), x4525, 67),
            x4521,
            67
        ),
        284487,
        4,
    )?;
    let x4526: BytePoly_64 = bigint_mul!(x4487, x4487, 64);
    let x4527: BytePoly_66 = bigint_nondet_quot!(ctx, x4526, x6, 66);
    let x4528: BytePoly_32 = bigint_nondet_rem!(ctx, x4526, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4527, x6, 98), x4528, 98),
            x4526,
            98
        ),
        536459,
        4,
    )?;
    let x4529: BytePoly_33 = bigint_add!(bigint_mul!(x4528, x0, 33), x5, 33);
    let x4530: BytePoly_35 = bigint_nondet_quot!(ctx, x4529, x6, 35);
    let x4531: BytePoly_32 = bigint_nondet_rem!(ctx, x4529, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4530, x6, 67), x4531, 67),
            x4529,
            67
        ),
        284487,
        4,
    )?;
    let x4532: BytePoly_32 = bigint_add!(x4493, x4493, 32);
    let x4533: BytePoly_32 = bigint_nondet_quot!(ctx, x4532, x6, 32);
    let x4534: BytePoly_32 = bigint_nondet_rem!(ctx, x4532, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4533, x6, 64), x4534, 64),
            x4532,
            64
        ),
        260103,
        4,
    )?;
    let x4535: BytePoly_32 = bigint_nondet_inv!(ctx, x4534, x6, 32);
    let x4536: BytePoly_64 = bigint_mul!(x4534, x4535, 64);
    let x4537: BytePoly_66 = bigint_nondet_quot!(ctx, x4536, x6, 66);
    let x4538: BytePoly_32 = bigint_nondet_rem!(ctx, x4536, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4537, x6, 98), x4538, 98),
            x4536,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4538, x3, 32), 34, 1)?;
    let x4539: BytePoly_64 = bigint_mul!(x4531, x4535, 64);
    let x4540: BytePoly_66 = bigint_nondet_quot!(ctx, x4539, x6, 66);
    let x4541: BytePoly_32 = bigint_nondet_rem!(ctx, x4539, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4540, x6, 98), x4541, 98),
            x4539,
            98
        ),
        536459,
        4,
    )?;
    let x4542: BytePoly_64 = bigint_mul!(x4541, x4487, 64);
    let x4543: BytePoly_66 = bigint_nondet_quot!(ctx, x4542, x6, 66);
    let x4544: BytePoly_32 = bigint_nondet_rem!(ctx, x4542, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4543, x6, 98), x4544, 98),
            x4542,
            98
        ),
        536459,
        4,
    )?;
    let x4545: BytePoly_32 = bigint_add!(bigint_sub!(x4493, x4544, 32), x6, 32);
    let x4546: BytePoly_32 = bigint_nondet_quot!(ctx, x4545, x6, 32);
    let x4547: BytePoly_32 = bigint_nondet_rem!(ctx, x4545, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4546, x6, 64), x4547, 64),
            x4545,
            64
        ),
        260103,
        4,
    )?;
    let x4548: BytePoly_64 = bigint_mul!(x4541, x4541, 64);
    let x4549: BytePoly_66 = bigint_nondet_quot!(ctx, x4548, x6, 66);
    let x4550: BytePoly_32 = bigint_nondet_rem!(ctx, x4548, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4549, x6, 98), x4550, 98),
            x4548,
            98
        ),
        536459,
        4,
    )?;
    let x4551: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4550, x4487, 32), x6, 32),
            x4487,
            32
        ),
        x6,
        32
    );
    let x4552: BytePoly_32 = bigint_nondet_quot!(ctx, x4551, x6, 32);
    let x4553: BytePoly_32 = bigint_nondet_rem!(ctx, x4551, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4552, x6, 64), x4553, 64),
            x4551,
            64
        ),
        260103,
        4,
    )?;
    let x4554: BytePoly_64 = bigint_mul!(x4541, x4553, 64);
    let x4555: BytePoly_66 = bigint_nondet_quot!(ctx, x4554, x6, 66);
    let x4556: BytePoly_32 = bigint_nondet_rem!(ctx, x4554, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4555, x6, 98), x4556, 98),
            x4554,
            98
        ),
        536459,
        4,
    )?;
    let x4557: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4556, x4547, 32), 32), x6, 32);
    let x4558: BytePoly_32 = bigint_nondet_quot!(ctx, x4557, x6, 32);
    let x4559: BytePoly_32 = bigint_nondet_rem!(ctx, x4557, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4558, x6, 64), x4559, 64),
            x4557,
            64
        ),
        260103,
        4,
    )?;
    let x4560: BytePoly_1 = bigint_nondet_rem!(ctx, x4495, x2, 1);
    let x4561: BytePoly_33 = bigint_nondet_quot!(ctx, x4495, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4561, x2, 34), x4560, 34),
            x4495,
            34
        ),
        268231,
        4,
    )?;
    let x4562: BytePoly_1 = bigint_sub!(x3, x4560, 1);
    eqz(ctx, &bigint_mul!(x4560, x4562, 2), 8131, 2)?;
    let x4563: BytePoly_32 = bigint_add!(bigint_sub!(x4553, x4523, 32), x6, 32);
    let x4564: BytePoly_32 = bigint_nondet_inv!(ctx, x4563, x6, 32);
    let x4565: BytePoly_64 = bigint_mul!(x4563, x4564, 64);
    let x4566: BytePoly_66 = bigint_nondet_quot!(ctx, x4565, x6, 66);
    let x4567: BytePoly_32 = bigint_nondet_rem!(ctx, x4565, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4566, x6, 98), x4567, 98),
            x4565,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4567, x1, 32), 34, 1)?;
    let x4568: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4559, x4525, 32), x6, 32),
        x4564,
        64
    );
    let x4569: BytePoly_66 = bigint_nondet_quot!(ctx, x4568, x6, 66);
    let x4570: BytePoly_32 = bigint_nondet_rem!(ctx, x4568, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4569, x6, 98), x4570, 98),
            x4568,
            98
        ),
        536459,
        4,
    )?;
    let x4571: BytePoly_64 = bigint_mul!(x4570, x4523, 64);
    let x4572: BytePoly_66 = bigint_nondet_quot!(ctx, x4571, x6, 66);
    let x4573: BytePoly_32 = bigint_nondet_rem!(ctx, x4571, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4572, x6, 98), x4573, 98),
            x4571,
            98
        ),
        536459,
        4,
    )?;
    let x4574: BytePoly_32 = bigint_add!(bigint_sub!(x4525, x4573, 32), x6, 32);
    let x4575: BytePoly_32 = bigint_nondet_quot!(ctx, x4574, x6, 32);
    let x4576: BytePoly_32 = bigint_nondet_rem!(ctx, x4574, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4575, x6, 64), x4576, 64),
            x4574,
            64
        ),
        260103,
        4,
    )?;
    let x4577: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4570, x4570, 64), x4523, 64),
                x6,
                64
            ),
            x4553,
            64
        ),
        x6,
        64
    );
    let x4578: BytePoly_66 = bigint_nondet_quot!(ctx, x4577, x6, 66);
    let x4579: BytePoly_32 = bigint_nondet_rem!(ctx, x4577, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4578, x6, 98), x4579, 98),
            x4577,
            98
        ),
        536459,
        4,
    )?;
    let x4580: BytePoly_64 = bigint_mul!(x4570, x4579, 64);
    let x4581: BytePoly_66 = bigint_nondet_quot!(ctx, x4580, x6, 66);
    let x4582: BytePoly_32 = bigint_nondet_rem!(ctx, x4580, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4581, x6, 98), x4582, 98),
            x4580,
            98
        ),
        536459,
        4,
    )?;
    let x4583: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4582, x4576, 32), 32), x6, 32);
    let x4584: BytePoly_32 = bigint_nondet_quot!(ctx, x4583, x6, 32);
    let x4585: BytePoly_32 = bigint_nondet_rem!(ctx, x4583, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4584, x6, 64), x4585, 64),
            x4583,
            64
        ),
        260103,
        4,
    )?;
    let x4586: BytePoly_33 = bigint_add!(
        bigint_mul!(x4579, x4560, 33),
        bigint_mul!(x4523, x4562, 33),
        33
    );
    let x4587: BytePoly_33 = bigint_add!(
        bigint_mul!(x4585, x4560, 33),
        bigint_mul!(x4525, x4562, 33),
        33
    );
    let x4588: BytePoly_35 = bigint_nondet_quot!(ctx, x4586, x6, 35);
    let x4589: BytePoly_32 = bigint_nondet_rem!(ctx, x4586, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4588, x6, 67), x4589, 67),
            x4586,
            67
        ),
        284487,
        4,
    )?;
    let x4590: BytePoly_35 = bigint_nondet_quot!(ctx, x4587, x6, 35);
    let x4591: BytePoly_32 = bigint_nondet_rem!(ctx, x4587, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4590, x6, 67), x4591, 67),
            x4587,
            67
        ),
        284487,
        4,
    )?;
    let x4592: BytePoly_64 = bigint_mul!(x4553, x4553, 64);
    let x4593: BytePoly_66 = bigint_nondet_quot!(ctx, x4592, x6, 66);
    let x4594: BytePoly_32 = bigint_nondet_rem!(ctx, x4592, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4593, x6, 98), x4594, 98),
            x4592,
            98
        ),
        536459,
        4,
    )?;
    let x4595: BytePoly_33 = bigint_add!(bigint_mul!(x4594, x0, 33), x5, 33);
    let x4596: BytePoly_35 = bigint_nondet_quot!(ctx, x4595, x6, 35);
    let x4597: BytePoly_32 = bigint_nondet_rem!(ctx, x4595, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4596, x6, 67), x4597, 67),
            x4595,
            67
        ),
        284487,
        4,
    )?;
    let x4598: BytePoly_32 = bigint_add!(x4559, x4559, 32);
    let x4599: BytePoly_32 = bigint_nondet_quot!(ctx, x4598, x6, 32);
    let x4600: BytePoly_32 = bigint_nondet_rem!(ctx, x4598, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4599, x6, 64), x4600, 64),
            x4598,
            64
        ),
        260103,
        4,
    )?;
    let x4601: BytePoly_32 = bigint_nondet_inv!(ctx, x4600, x6, 32);
    let x4602: BytePoly_64 = bigint_mul!(x4600, x4601, 64);
    let x4603: BytePoly_66 = bigint_nondet_quot!(ctx, x4602, x6, 66);
    let x4604: BytePoly_32 = bigint_nondet_rem!(ctx, x4602, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4603, x6, 98), x4604, 98),
            x4602,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4604, x3, 32), 34, 1)?;
    let x4605: BytePoly_64 = bigint_mul!(x4597, x4601, 64);
    let x4606: BytePoly_66 = bigint_nondet_quot!(ctx, x4605, x6, 66);
    let x4607: BytePoly_32 = bigint_nondet_rem!(ctx, x4605, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4606, x6, 98), x4607, 98),
            x4605,
            98
        ),
        536459,
        4,
    )?;
    let x4608: BytePoly_64 = bigint_mul!(x4607, x4553, 64);
    let x4609: BytePoly_66 = bigint_nondet_quot!(ctx, x4608, x6, 66);
    let x4610: BytePoly_32 = bigint_nondet_rem!(ctx, x4608, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4609, x6, 98), x4610, 98),
            x4608,
            98
        ),
        536459,
        4,
    )?;
    let x4611: BytePoly_32 = bigint_add!(bigint_sub!(x4559, x4610, 32), x6, 32);
    let x4612: BytePoly_32 = bigint_nondet_quot!(ctx, x4611, x6, 32);
    let x4613: BytePoly_32 = bigint_nondet_rem!(ctx, x4611, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4612, x6, 64), x4613, 64),
            x4611,
            64
        ),
        260103,
        4,
    )?;
    let x4614: BytePoly_64 = bigint_mul!(x4607, x4607, 64);
    let x4615: BytePoly_66 = bigint_nondet_quot!(ctx, x4614, x6, 66);
    let x4616: BytePoly_32 = bigint_nondet_rem!(ctx, x4614, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4615, x6, 98), x4616, 98),
            x4614,
            98
        ),
        536459,
        4,
    )?;
    let x4617: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4616, x4553, 32), x6, 32),
            x4553,
            32
        ),
        x6,
        32
    );
    let x4618: BytePoly_32 = bigint_nondet_quot!(ctx, x4617, x6, 32);
    let x4619: BytePoly_32 = bigint_nondet_rem!(ctx, x4617, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4618, x6, 64), x4619, 64),
            x4617,
            64
        ),
        260103,
        4,
    )?;
    let x4620: BytePoly_64 = bigint_mul!(x4607, x4619, 64);
    let x4621: BytePoly_66 = bigint_nondet_quot!(ctx, x4620, x6, 66);
    let x4622: BytePoly_32 = bigint_nondet_rem!(ctx, x4620, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4621, x6, 98), x4622, 98),
            x4620,
            98
        ),
        536459,
        4,
    )?;
    let x4623: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4622, x4613, 32), 32), x6, 32);
    let x4624: BytePoly_32 = bigint_nondet_quot!(ctx, x4623, x6, 32);
    let x4625: BytePoly_32 = bigint_nondet_rem!(ctx, x4623, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4624, x6, 64), x4625, 64),
            x4623,
            64
        ),
        260103,
        4,
    )?;
    let x4626: BytePoly_1 = bigint_nondet_rem!(ctx, x4561, x2, 1);
    let x4627: BytePoly_33 = bigint_nondet_quot!(ctx, x4561, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4627, x2, 34), x4626, 34),
            x4561,
            34
        ),
        268231,
        4,
    )?;
    let x4628: BytePoly_1 = bigint_sub!(x3, x4626, 1);
    eqz(ctx, &bigint_mul!(x4626, x4628, 2), 8131, 2)?;
    let x4629: BytePoly_32 = bigint_add!(bigint_sub!(x4619, x4589, 32), x6, 32);
    let x4630: BytePoly_32 = bigint_nondet_inv!(ctx, x4629, x6, 32);
    let x4631: BytePoly_64 = bigint_mul!(x4629, x4630, 64);
    let x4632: BytePoly_66 = bigint_nondet_quot!(ctx, x4631, x6, 66);
    let x4633: BytePoly_32 = bigint_nondet_rem!(ctx, x4631, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4632, x6, 98), x4633, 98),
            x4631,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4633, x1, 32), 34, 1)?;
    let x4634: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4625, x4591, 32), x6, 32),
        x4630,
        64
    );
    let x4635: BytePoly_66 = bigint_nondet_quot!(ctx, x4634, x6, 66);
    let x4636: BytePoly_32 = bigint_nondet_rem!(ctx, x4634, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4635, x6, 98), x4636, 98),
            x4634,
            98
        ),
        536459,
        4,
    )?;
    let x4637: BytePoly_64 = bigint_mul!(x4636, x4589, 64);
    let x4638: BytePoly_66 = bigint_nondet_quot!(ctx, x4637, x6, 66);
    let x4639: BytePoly_32 = bigint_nondet_rem!(ctx, x4637, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4638, x6, 98), x4639, 98),
            x4637,
            98
        ),
        536459,
        4,
    )?;
    let x4640: BytePoly_32 = bigint_add!(bigint_sub!(x4591, x4639, 32), x6, 32);
    let x4641: BytePoly_32 = bigint_nondet_quot!(ctx, x4640, x6, 32);
    let x4642: BytePoly_32 = bigint_nondet_rem!(ctx, x4640, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4641, x6, 64), x4642, 64),
            x4640,
            64
        ),
        260103,
        4,
    )?;
    let x4643: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4636, x4636, 64), x4589, 64),
                x6,
                64
            ),
            x4619,
            64
        ),
        x6,
        64
    );
    let x4644: BytePoly_66 = bigint_nondet_quot!(ctx, x4643, x6, 66);
    let x4645: BytePoly_32 = bigint_nondet_rem!(ctx, x4643, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4644, x6, 98), x4645, 98),
            x4643,
            98
        ),
        536459,
        4,
    )?;
    let x4646: BytePoly_64 = bigint_mul!(x4636, x4645, 64);
    let x4647: BytePoly_66 = bigint_nondet_quot!(ctx, x4646, x6, 66);
    let x4648: BytePoly_32 = bigint_nondet_rem!(ctx, x4646, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4647, x6, 98), x4648, 98),
            x4646,
            98
        ),
        536459,
        4,
    )?;
    let x4649: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4648, x4642, 32), 32), x6, 32);
    let x4650: BytePoly_32 = bigint_nondet_quot!(ctx, x4649, x6, 32);
    let x4651: BytePoly_32 = bigint_nondet_rem!(ctx, x4649, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4650, x6, 64), x4651, 64),
            x4649,
            64
        ),
        260103,
        4,
    )?;
    let x4652: BytePoly_33 = bigint_add!(
        bigint_mul!(x4645, x4626, 33),
        bigint_mul!(x4589, x4628, 33),
        33
    );
    let x4653: BytePoly_33 = bigint_add!(
        bigint_mul!(x4651, x4626, 33),
        bigint_mul!(x4591, x4628, 33),
        33
    );
    let x4654: BytePoly_35 = bigint_nondet_quot!(ctx, x4652, x6, 35);
    let x4655: BytePoly_32 = bigint_nondet_rem!(ctx, x4652, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4654, x6, 67), x4655, 67),
            x4652,
            67
        ),
        284487,
        4,
    )?;
    let x4656: BytePoly_35 = bigint_nondet_quot!(ctx, x4653, x6, 35);
    let x4657: BytePoly_32 = bigint_nondet_rem!(ctx, x4653, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4656, x6, 67), x4657, 67),
            x4653,
            67
        ),
        284487,
        4,
    )?;
    let x4658: BytePoly_64 = bigint_mul!(x4619, x4619, 64);
    let x4659: BytePoly_66 = bigint_nondet_quot!(ctx, x4658, x6, 66);
    let x4660: BytePoly_32 = bigint_nondet_rem!(ctx, x4658, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4659, x6, 98), x4660, 98),
            x4658,
            98
        ),
        536459,
        4,
    )?;
    let x4661: BytePoly_33 = bigint_add!(bigint_mul!(x4660, x0, 33), x5, 33);
    let x4662: BytePoly_35 = bigint_nondet_quot!(ctx, x4661, x6, 35);
    let x4663: BytePoly_32 = bigint_nondet_rem!(ctx, x4661, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4662, x6, 67), x4663, 67),
            x4661,
            67
        ),
        284487,
        4,
    )?;
    let x4664: BytePoly_32 = bigint_add!(x4625, x4625, 32);
    let x4665: BytePoly_32 = bigint_nondet_quot!(ctx, x4664, x6, 32);
    let x4666: BytePoly_32 = bigint_nondet_rem!(ctx, x4664, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4665, x6, 64), x4666, 64),
            x4664,
            64
        ),
        260103,
        4,
    )?;
    let x4667: BytePoly_32 = bigint_nondet_inv!(ctx, x4666, x6, 32);
    let x4668: BytePoly_64 = bigint_mul!(x4666, x4667, 64);
    let x4669: BytePoly_66 = bigint_nondet_quot!(ctx, x4668, x6, 66);
    let x4670: BytePoly_32 = bigint_nondet_rem!(ctx, x4668, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4669, x6, 98), x4670, 98),
            x4668,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4670, x3, 32), 34, 1)?;
    let x4671: BytePoly_64 = bigint_mul!(x4663, x4667, 64);
    let x4672: BytePoly_66 = bigint_nondet_quot!(ctx, x4671, x6, 66);
    let x4673: BytePoly_32 = bigint_nondet_rem!(ctx, x4671, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4672, x6, 98), x4673, 98),
            x4671,
            98
        ),
        536459,
        4,
    )?;
    let x4674: BytePoly_64 = bigint_mul!(x4673, x4619, 64);
    let x4675: BytePoly_66 = bigint_nondet_quot!(ctx, x4674, x6, 66);
    let x4676: BytePoly_32 = bigint_nondet_rem!(ctx, x4674, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4675, x6, 98), x4676, 98),
            x4674,
            98
        ),
        536459,
        4,
    )?;
    let x4677: BytePoly_32 = bigint_add!(bigint_sub!(x4625, x4676, 32), x6, 32);
    let x4678: BytePoly_32 = bigint_nondet_quot!(ctx, x4677, x6, 32);
    let x4679: BytePoly_32 = bigint_nondet_rem!(ctx, x4677, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4678, x6, 64), x4679, 64),
            x4677,
            64
        ),
        260103,
        4,
    )?;
    let x4680: BytePoly_64 = bigint_mul!(x4673, x4673, 64);
    let x4681: BytePoly_66 = bigint_nondet_quot!(ctx, x4680, x6, 66);
    let x4682: BytePoly_32 = bigint_nondet_rem!(ctx, x4680, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4681, x6, 98), x4682, 98),
            x4680,
            98
        ),
        536459,
        4,
    )?;
    let x4683: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4682, x4619, 32), x6, 32),
            x4619,
            32
        ),
        x6,
        32
    );
    let x4684: BytePoly_32 = bigint_nondet_quot!(ctx, x4683, x6, 32);
    let x4685: BytePoly_32 = bigint_nondet_rem!(ctx, x4683, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4684, x6, 64), x4685, 64),
            x4683,
            64
        ),
        260103,
        4,
    )?;
    let x4686: BytePoly_64 = bigint_mul!(x4673, x4685, 64);
    let x4687: BytePoly_66 = bigint_nondet_quot!(ctx, x4686, x6, 66);
    let x4688: BytePoly_32 = bigint_nondet_rem!(ctx, x4686, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4687, x6, 98), x4688, 98),
            x4686,
            98
        ),
        536459,
        4,
    )?;
    let x4689: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4688, x4679, 32), 32), x6, 32);
    let x4690: BytePoly_32 = bigint_nondet_quot!(ctx, x4689, x6, 32);
    let x4691: BytePoly_32 = bigint_nondet_rem!(ctx, x4689, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4690, x6, 64), x4691, 64),
            x4689,
            64
        ),
        260103,
        4,
    )?;
    let x4692: BytePoly_1 = bigint_nondet_rem!(ctx, x4627, x2, 1);
    let x4693: BytePoly_33 = bigint_nondet_quot!(ctx, x4627, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4693, x2, 34), x4692, 34),
            x4627,
            34
        ),
        268231,
        4,
    )?;
    let x4694: BytePoly_1 = bigint_sub!(x3, x4692, 1);
    eqz(ctx, &bigint_mul!(x4692, x4694, 2), 8131, 2)?;
    let x4695: BytePoly_32 = bigint_add!(bigint_sub!(x4685, x4655, 32), x6, 32);
    let x4696: BytePoly_32 = bigint_nondet_inv!(ctx, x4695, x6, 32);
    let x4697: BytePoly_64 = bigint_mul!(x4695, x4696, 64);
    let x4698: BytePoly_66 = bigint_nondet_quot!(ctx, x4697, x6, 66);
    let x4699: BytePoly_32 = bigint_nondet_rem!(ctx, x4697, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4698, x6, 98), x4699, 98),
            x4697,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4699, x1, 32), 34, 1)?;
    let x4700: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4691, x4657, 32), x6, 32),
        x4696,
        64
    );
    let x4701: BytePoly_66 = bigint_nondet_quot!(ctx, x4700, x6, 66);
    let x4702: BytePoly_32 = bigint_nondet_rem!(ctx, x4700, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4701, x6, 98), x4702, 98),
            x4700,
            98
        ),
        536459,
        4,
    )?;
    let x4703: BytePoly_64 = bigint_mul!(x4702, x4655, 64);
    let x4704: BytePoly_66 = bigint_nondet_quot!(ctx, x4703, x6, 66);
    let x4705: BytePoly_32 = bigint_nondet_rem!(ctx, x4703, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4704, x6, 98), x4705, 98),
            x4703,
            98
        ),
        536459,
        4,
    )?;
    let x4706: BytePoly_32 = bigint_add!(bigint_sub!(x4657, x4705, 32), x6, 32);
    let x4707: BytePoly_32 = bigint_nondet_quot!(ctx, x4706, x6, 32);
    let x4708: BytePoly_32 = bigint_nondet_rem!(ctx, x4706, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4707, x6, 64), x4708, 64),
            x4706,
            64
        ),
        260103,
        4,
    )?;
    let x4709: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4702, x4702, 64), x4655, 64),
                x6,
                64
            ),
            x4685,
            64
        ),
        x6,
        64
    );
    let x4710: BytePoly_66 = bigint_nondet_quot!(ctx, x4709, x6, 66);
    let x4711: BytePoly_32 = bigint_nondet_rem!(ctx, x4709, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4710, x6, 98), x4711, 98),
            x4709,
            98
        ),
        536459,
        4,
    )?;
    let x4712: BytePoly_64 = bigint_mul!(x4702, x4711, 64);
    let x4713: BytePoly_66 = bigint_nondet_quot!(ctx, x4712, x6, 66);
    let x4714: BytePoly_32 = bigint_nondet_rem!(ctx, x4712, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4713, x6, 98), x4714, 98),
            x4712,
            98
        ),
        536459,
        4,
    )?;
    let x4715: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4714, x4708, 32), 32), x6, 32);
    let x4716: BytePoly_32 = bigint_nondet_quot!(ctx, x4715, x6, 32);
    let x4717: BytePoly_32 = bigint_nondet_rem!(ctx, x4715, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4716, x6, 64), x4717, 64),
            x4715,
            64
        ),
        260103,
        4,
    )?;
    let x4718: BytePoly_33 = bigint_add!(
        bigint_mul!(x4711, x4692, 33),
        bigint_mul!(x4655, x4694, 33),
        33
    );
    let x4719: BytePoly_33 = bigint_add!(
        bigint_mul!(x4717, x4692, 33),
        bigint_mul!(x4657, x4694, 33),
        33
    );
    let x4720: BytePoly_35 = bigint_nondet_quot!(ctx, x4718, x6, 35);
    let x4721: BytePoly_32 = bigint_nondet_rem!(ctx, x4718, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4720, x6, 67), x4721, 67),
            x4718,
            67
        ),
        284487,
        4,
    )?;
    let x4722: BytePoly_35 = bigint_nondet_quot!(ctx, x4719, x6, 35);
    let x4723: BytePoly_32 = bigint_nondet_rem!(ctx, x4719, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4722, x6, 67), x4723, 67),
            x4719,
            67
        ),
        284487,
        4,
    )?;
    let x4724: BytePoly_64 = bigint_mul!(x4685, x4685, 64);
    let x4725: BytePoly_66 = bigint_nondet_quot!(ctx, x4724, x6, 66);
    let x4726: BytePoly_32 = bigint_nondet_rem!(ctx, x4724, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4725, x6, 98), x4726, 98),
            x4724,
            98
        ),
        536459,
        4,
    )?;
    let x4727: BytePoly_33 = bigint_add!(bigint_mul!(x4726, x0, 33), x5, 33);
    let x4728: BytePoly_35 = bigint_nondet_quot!(ctx, x4727, x6, 35);
    let x4729: BytePoly_32 = bigint_nondet_rem!(ctx, x4727, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4728, x6, 67), x4729, 67),
            x4727,
            67
        ),
        284487,
        4,
    )?;
    let x4730: BytePoly_32 = bigint_add!(x4691, x4691, 32);
    let x4731: BytePoly_32 = bigint_nondet_quot!(ctx, x4730, x6, 32);
    let x4732: BytePoly_32 = bigint_nondet_rem!(ctx, x4730, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4731, x6, 64), x4732, 64),
            x4730,
            64
        ),
        260103,
        4,
    )?;
    let x4733: BytePoly_32 = bigint_nondet_inv!(ctx, x4732, x6, 32);
    let x4734: BytePoly_64 = bigint_mul!(x4732, x4733, 64);
    let x4735: BytePoly_66 = bigint_nondet_quot!(ctx, x4734, x6, 66);
    let x4736: BytePoly_32 = bigint_nondet_rem!(ctx, x4734, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4735, x6, 98), x4736, 98),
            x4734,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4736, x3, 32), 34, 1)?;
    let x4737: BytePoly_64 = bigint_mul!(x4729, x4733, 64);
    let x4738: BytePoly_66 = bigint_nondet_quot!(ctx, x4737, x6, 66);
    let x4739: BytePoly_32 = bigint_nondet_rem!(ctx, x4737, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4738, x6, 98), x4739, 98),
            x4737,
            98
        ),
        536459,
        4,
    )?;
    let x4740: BytePoly_64 = bigint_mul!(x4739, x4685, 64);
    let x4741: BytePoly_66 = bigint_nondet_quot!(ctx, x4740, x6, 66);
    let x4742: BytePoly_32 = bigint_nondet_rem!(ctx, x4740, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4741, x6, 98), x4742, 98),
            x4740,
            98
        ),
        536459,
        4,
    )?;
    let x4743: BytePoly_32 = bigint_add!(bigint_sub!(x4691, x4742, 32), x6, 32);
    let x4744: BytePoly_32 = bigint_nondet_quot!(ctx, x4743, x6, 32);
    let x4745: BytePoly_32 = bigint_nondet_rem!(ctx, x4743, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4744, x6, 64), x4745, 64),
            x4743,
            64
        ),
        260103,
        4,
    )?;
    let x4746: BytePoly_64 = bigint_mul!(x4739, x4739, 64);
    let x4747: BytePoly_66 = bigint_nondet_quot!(ctx, x4746, x6, 66);
    let x4748: BytePoly_32 = bigint_nondet_rem!(ctx, x4746, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4747, x6, 98), x4748, 98),
            x4746,
            98
        ),
        536459,
        4,
    )?;
    let x4749: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4748, x4685, 32), x6, 32),
            x4685,
            32
        ),
        x6,
        32
    );
    let x4750: BytePoly_32 = bigint_nondet_quot!(ctx, x4749, x6, 32);
    let x4751: BytePoly_32 = bigint_nondet_rem!(ctx, x4749, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4750, x6, 64), x4751, 64),
            x4749,
            64
        ),
        260103,
        4,
    )?;
    let x4752: BytePoly_64 = bigint_mul!(x4739, x4751, 64);
    let x4753: BytePoly_66 = bigint_nondet_quot!(ctx, x4752, x6, 66);
    let x4754: BytePoly_32 = bigint_nondet_rem!(ctx, x4752, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4753, x6, 98), x4754, 98),
            x4752,
            98
        ),
        536459,
        4,
    )?;
    let x4755: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4754, x4745, 32), 32), x6, 32);
    let x4756: BytePoly_32 = bigint_nondet_quot!(ctx, x4755, x6, 32);
    let x4757: BytePoly_32 = bigint_nondet_rem!(ctx, x4755, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4756, x6, 64), x4757, 64),
            x4755,
            64
        ),
        260103,
        4,
    )?;
    let x4758: BytePoly_1 = bigint_nondet_rem!(ctx, x4693, x2, 1);
    let x4759: BytePoly_33 = bigint_nondet_quot!(ctx, x4693, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4759, x2, 34), x4758, 34),
            x4693,
            34
        ),
        268231,
        4,
    )?;
    let x4760: BytePoly_1 = bigint_sub!(x3, x4758, 1);
    eqz(ctx, &bigint_mul!(x4758, x4760, 2), 8131, 2)?;
    let x4761: BytePoly_32 = bigint_add!(bigint_sub!(x4751, x4721, 32), x6, 32);
    let x4762: BytePoly_32 = bigint_nondet_inv!(ctx, x4761, x6, 32);
    let x4763: BytePoly_64 = bigint_mul!(x4761, x4762, 64);
    let x4764: BytePoly_66 = bigint_nondet_quot!(ctx, x4763, x6, 66);
    let x4765: BytePoly_32 = bigint_nondet_rem!(ctx, x4763, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4764, x6, 98), x4765, 98),
            x4763,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4765, x1, 32), 34, 1)?;
    let x4766: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4757, x4723, 32), x6, 32),
        x4762,
        64
    );
    let x4767: BytePoly_66 = bigint_nondet_quot!(ctx, x4766, x6, 66);
    let x4768: BytePoly_32 = bigint_nondet_rem!(ctx, x4766, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4767, x6, 98), x4768, 98),
            x4766,
            98
        ),
        536459,
        4,
    )?;
    let x4769: BytePoly_64 = bigint_mul!(x4768, x4721, 64);
    let x4770: BytePoly_66 = bigint_nondet_quot!(ctx, x4769, x6, 66);
    let x4771: BytePoly_32 = bigint_nondet_rem!(ctx, x4769, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4770, x6, 98), x4771, 98),
            x4769,
            98
        ),
        536459,
        4,
    )?;
    let x4772: BytePoly_32 = bigint_add!(bigint_sub!(x4723, x4771, 32), x6, 32);
    let x4773: BytePoly_32 = bigint_nondet_quot!(ctx, x4772, x6, 32);
    let x4774: BytePoly_32 = bigint_nondet_rem!(ctx, x4772, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4773, x6, 64), x4774, 64),
            x4772,
            64
        ),
        260103,
        4,
    )?;
    let x4775: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4768, x4768, 64), x4721, 64),
                x6,
                64
            ),
            x4751,
            64
        ),
        x6,
        64
    );
    let x4776: BytePoly_66 = bigint_nondet_quot!(ctx, x4775, x6, 66);
    let x4777: BytePoly_32 = bigint_nondet_rem!(ctx, x4775, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4776, x6, 98), x4777, 98),
            x4775,
            98
        ),
        536459,
        4,
    )?;
    let x4778: BytePoly_64 = bigint_mul!(x4768, x4777, 64);
    let x4779: BytePoly_66 = bigint_nondet_quot!(ctx, x4778, x6, 66);
    let x4780: BytePoly_32 = bigint_nondet_rem!(ctx, x4778, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4779, x6, 98), x4780, 98),
            x4778,
            98
        ),
        536459,
        4,
    )?;
    let x4781: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4780, x4774, 32), 32), x6, 32);
    let x4782: BytePoly_32 = bigint_nondet_quot!(ctx, x4781, x6, 32);
    let x4783: BytePoly_32 = bigint_nondet_rem!(ctx, x4781, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4782, x6, 64), x4783, 64),
            x4781,
            64
        ),
        260103,
        4,
    )?;
    let x4784: BytePoly_33 = bigint_add!(
        bigint_mul!(x4777, x4758, 33),
        bigint_mul!(x4721, x4760, 33),
        33
    );
    let x4785: BytePoly_33 = bigint_add!(
        bigint_mul!(x4783, x4758, 33),
        bigint_mul!(x4723, x4760, 33),
        33
    );
    let x4786: BytePoly_35 = bigint_nondet_quot!(ctx, x4784, x6, 35);
    let x4787: BytePoly_32 = bigint_nondet_rem!(ctx, x4784, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4786, x6, 67), x4787, 67),
            x4784,
            67
        ),
        284487,
        4,
    )?;
    let x4788: BytePoly_35 = bigint_nondet_quot!(ctx, x4785, x6, 35);
    let x4789: BytePoly_32 = bigint_nondet_rem!(ctx, x4785, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4788, x6, 67), x4789, 67),
            x4785,
            67
        ),
        284487,
        4,
    )?;
    let x4790: BytePoly_64 = bigint_mul!(x4751, x4751, 64);
    let x4791: BytePoly_66 = bigint_nondet_quot!(ctx, x4790, x6, 66);
    let x4792: BytePoly_32 = bigint_nondet_rem!(ctx, x4790, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4791, x6, 98), x4792, 98),
            x4790,
            98
        ),
        536459,
        4,
    )?;
    let x4793: BytePoly_33 = bigint_add!(bigint_mul!(x4792, x0, 33), x5, 33);
    let x4794: BytePoly_35 = bigint_nondet_quot!(ctx, x4793, x6, 35);
    let x4795: BytePoly_32 = bigint_nondet_rem!(ctx, x4793, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4794, x6, 67), x4795, 67),
            x4793,
            67
        ),
        284487,
        4,
    )?;
    let x4796: BytePoly_32 = bigint_add!(x4757, x4757, 32);
    let x4797: BytePoly_32 = bigint_nondet_quot!(ctx, x4796, x6, 32);
    let x4798: BytePoly_32 = bigint_nondet_rem!(ctx, x4796, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4797, x6, 64), x4798, 64),
            x4796,
            64
        ),
        260103,
        4,
    )?;
    let x4799: BytePoly_32 = bigint_nondet_inv!(ctx, x4798, x6, 32);
    let x4800: BytePoly_64 = bigint_mul!(x4798, x4799, 64);
    let x4801: BytePoly_66 = bigint_nondet_quot!(ctx, x4800, x6, 66);
    let x4802: BytePoly_32 = bigint_nondet_rem!(ctx, x4800, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4801, x6, 98), x4802, 98),
            x4800,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4802, x3, 32), 34, 1)?;
    let x4803: BytePoly_64 = bigint_mul!(x4795, x4799, 64);
    let x4804: BytePoly_66 = bigint_nondet_quot!(ctx, x4803, x6, 66);
    let x4805: BytePoly_32 = bigint_nondet_rem!(ctx, x4803, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4804, x6, 98), x4805, 98),
            x4803,
            98
        ),
        536459,
        4,
    )?;
    let x4806: BytePoly_64 = bigint_mul!(x4805, x4751, 64);
    let x4807: BytePoly_66 = bigint_nondet_quot!(ctx, x4806, x6, 66);
    let x4808: BytePoly_32 = bigint_nondet_rem!(ctx, x4806, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4807, x6, 98), x4808, 98),
            x4806,
            98
        ),
        536459,
        4,
    )?;
    let x4809: BytePoly_32 = bigint_add!(bigint_sub!(x4757, x4808, 32), x6, 32);
    let x4810: BytePoly_32 = bigint_nondet_quot!(ctx, x4809, x6, 32);
    let x4811: BytePoly_32 = bigint_nondet_rem!(ctx, x4809, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4810, x6, 64), x4811, 64),
            x4809,
            64
        ),
        260103,
        4,
    )?;
    let x4812: BytePoly_64 = bigint_mul!(x4805, x4805, 64);
    let x4813: BytePoly_66 = bigint_nondet_quot!(ctx, x4812, x6, 66);
    let x4814: BytePoly_32 = bigint_nondet_rem!(ctx, x4812, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4813, x6, 98), x4814, 98),
            x4812,
            98
        ),
        536459,
        4,
    )?;
    let x4815: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4814, x4751, 32), x6, 32),
            x4751,
            32
        ),
        x6,
        32
    );
    let x4816: BytePoly_32 = bigint_nondet_quot!(ctx, x4815, x6, 32);
    let x4817: BytePoly_32 = bigint_nondet_rem!(ctx, x4815, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4816, x6, 64), x4817, 64),
            x4815,
            64
        ),
        260103,
        4,
    )?;
    let x4818: BytePoly_64 = bigint_mul!(x4805, x4817, 64);
    let x4819: BytePoly_66 = bigint_nondet_quot!(ctx, x4818, x6, 66);
    let x4820: BytePoly_32 = bigint_nondet_rem!(ctx, x4818, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4819, x6, 98), x4820, 98),
            x4818,
            98
        ),
        536459,
        4,
    )?;
    let x4821: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4820, x4811, 32), 32), x6, 32);
    let x4822: BytePoly_32 = bigint_nondet_quot!(ctx, x4821, x6, 32);
    let x4823: BytePoly_32 = bigint_nondet_rem!(ctx, x4821, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4822, x6, 64), x4823, 64),
            x4821,
            64
        ),
        260103,
        4,
    )?;
    let x4824: BytePoly_1 = bigint_nondet_rem!(ctx, x4759, x2, 1);
    let x4825: BytePoly_33 = bigint_nondet_quot!(ctx, x4759, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4825, x2, 34), x4824, 34),
            x4759,
            34
        ),
        268231,
        4,
    )?;
    let x4826: BytePoly_1 = bigint_sub!(x3, x4824, 1);
    eqz(ctx, &bigint_mul!(x4824, x4826, 2), 8131, 2)?;
    let x4827: BytePoly_32 = bigint_add!(bigint_sub!(x4817, x4787, 32), x6, 32);
    let x4828: BytePoly_32 = bigint_nondet_inv!(ctx, x4827, x6, 32);
    let x4829: BytePoly_64 = bigint_mul!(x4827, x4828, 64);
    let x4830: BytePoly_66 = bigint_nondet_quot!(ctx, x4829, x6, 66);
    let x4831: BytePoly_32 = bigint_nondet_rem!(ctx, x4829, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4830, x6, 98), x4831, 98),
            x4829,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4831, x1, 32), 34, 1)?;
    let x4832: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4823, x4789, 32), x6, 32),
        x4828,
        64
    );
    let x4833: BytePoly_66 = bigint_nondet_quot!(ctx, x4832, x6, 66);
    let x4834: BytePoly_32 = bigint_nondet_rem!(ctx, x4832, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4833, x6, 98), x4834, 98),
            x4832,
            98
        ),
        536459,
        4,
    )?;
    let x4835: BytePoly_64 = bigint_mul!(x4834, x4787, 64);
    let x4836: BytePoly_66 = bigint_nondet_quot!(ctx, x4835, x6, 66);
    let x4837: BytePoly_32 = bigint_nondet_rem!(ctx, x4835, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4836, x6, 98), x4837, 98),
            x4835,
            98
        ),
        536459,
        4,
    )?;
    let x4838: BytePoly_32 = bigint_add!(bigint_sub!(x4789, x4837, 32), x6, 32);
    let x4839: BytePoly_32 = bigint_nondet_quot!(ctx, x4838, x6, 32);
    let x4840: BytePoly_32 = bigint_nondet_rem!(ctx, x4838, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4839, x6, 64), x4840, 64),
            x4838,
            64
        ),
        260103,
        4,
    )?;
    let x4841: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4834, x4834, 64), x4787, 64),
                x6,
                64
            ),
            x4817,
            64
        ),
        x6,
        64
    );
    let x4842: BytePoly_66 = bigint_nondet_quot!(ctx, x4841, x6, 66);
    let x4843: BytePoly_32 = bigint_nondet_rem!(ctx, x4841, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4842, x6, 98), x4843, 98),
            x4841,
            98
        ),
        536459,
        4,
    )?;
    let x4844: BytePoly_64 = bigint_mul!(x4834, x4843, 64);
    let x4845: BytePoly_66 = bigint_nondet_quot!(ctx, x4844, x6, 66);
    let x4846: BytePoly_32 = bigint_nondet_rem!(ctx, x4844, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4845, x6, 98), x4846, 98),
            x4844,
            98
        ),
        536459,
        4,
    )?;
    let x4847: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4846, x4840, 32), 32), x6, 32);
    let x4848: BytePoly_32 = bigint_nondet_quot!(ctx, x4847, x6, 32);
    let x4849: BytePoly_32 = bigint_nondet_rem!(ctx, x4847, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4848, x6, 64), x4849, 64),
            x4847,
            64
        ),
        260103,
        4,
    )?;
    let x4850: BytePoly_33 = bigint_add!(
        bigint_mul!(x4843, x4824, 33),
        bigint_mul!(x4787, x4826, 33),
        33
    );
    let x4851: BytePoly_33 = bigint_add!(
        bigint_mul!(x4849, x4824, 33),
        bigint_mul!(x4789, x4826, 33),
        33
    );
    let x4852: BytePoly_35 = bigint_nondet_quot!(ctx, x4850, x6, 35);
    let x4853: BytePoly_32 = bigint_nondet_rem!(ctx, x4850, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4852, x6, 67), x4853, 67),
            x4850,
            67
        ),
        284487,
        4,
    )?;
    let x4854: BytePoly_35 = bigint_nondet_quot!(ctx, x4851, x6, 35);
    let x4855: BytePoly_32 = bigint_nondet_rem!(ctx, x4851, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4854, x6, 67), x4855, 67),
            x4851,
            67
        ),
        284487,
        4,
    )?;
    let x4856: BytePoly_64 = bigint_mul!(x4817, x4817, 64);
    let x4857: BytePoly_66 = bigint_nondet_quot!(ctx, x4856, x6, 66);
    let x4858: BytePoly_32 = bigint_nondet_rem!(ctx, x4856, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4857, x6, 98), x4858, 98),
            x4856,
            98
        ),
        536459,
        4,
    )?;
    let x4859: BytePoly_33 = bigint_add!(bigint_mul!(x4858, x0, 33), x5, 33);
    let x4860: BytePoly_35 = bigint_nondet_quot!(ctx, x4859, x6, 35);
    let x4861: BytePoly_32 = bigint_nondet_rem!(ctx, x4859, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4860, x6, 67), x4861, 67),
            x4859,
            67
        ),
        284487,
        4,
    )?;
    let x4862: BytePoly_32 = bigint_add!(x4823, x4823, 32);
    let x4863: BytePoly_32 = bigint_nondet_quot!(ctx, x4862, x6, 32);
    let x4864: BytePoly_32 = bigint_nondet_rem!(ctx, x4862, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4863, x6, 64), x4864, 64),
            x4862,
            64
        ),
        260103,
        4,
    )?;
    let x4865: BytePoly_32 = bigint_nondet_inv!(ctx, x4864, x6, 32);
    let x4866: BytePoly_64 = bigint_mul!(x4864, x4865, 64);
    let x4867: BytePoly_66 = bigint_nondet_quot!(ctx, x4866, x6, 66);
    let x4868: BytePoly_32 = bigint_nondet_rem!(ctx, x4866, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4867, x6, 98), x4868, 98),
            x4866,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4868, x3, 32), 34, 1)?;
    let x4869: BytePoly_64 = bigint_mul!(x4861, x4865, 64);
    let x4870: BytePoly_66 = bigint_nondet_quot!(ctx, x4869, x6, 66);
    let x4871: BytePoly_32 = bigint_nondet_rem!(ctx, x4869, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4870, x6, 98), x4871, 98),
            x4869,
            98
        ),
        536459,
        4,
    )?;
    let x4872: BytePoly_64 = bigint_mul!(x4871, x4817, 64);
    let x4873: BytePoly_66 = bigint_nondet_quot!(ctx, x4872, x6, 66);
    let x4874: BytePoly_32 = bigint_nondet_rem!(ctx, x4872, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4873, x6, 98), x4874, 98),
            x4872,
            98
        ),
        536459,
        4,
    )?;
    let x4875: BytePoly_32 = bigint_add!(bigint_sub!(x4823, x4874, 32), x6, 32);
    let x4876: BytePoly_32 = bigint_nondet_quot!(ctx, x4875, x6, 32);
    let x4877: BytePoly_32 = bigint_nondet_rem!(ctx, x4875, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4876, x6, 64), x4877, 64),
            x4875,
            64
        ),
        260103,
        4,
    )?;
    let x4878: BytePoly_64 = bigint_mul!(x4871, x4871, 64);
    let x4879: BytePoly_66 = bigint_nondet_quot!(ctx, x4878, x6, 66);
    let x4880: BytePoly_32 = bigint_nondet_rem!(ctx, x4878, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4879, x6, 98), x4880, 98),
            x4878,
            98
        ),
        536459,
        4,
    )?;
    let x4881: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4880, x4817, 32), x6, 32),
            x4817,
            32
        ),
        x6,
        32
    );
    let x4882: BytePoly_32 = bigint_nondet_quot!(ctx, x4881, x6, 32);
    let x4883: BytePoly_32 = bigint_nondet_rem!(ctx, x4881, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4882, x6, 64), x4883, 64),
            x4881,
            64
        ),
        260103,
        4,
    )?;
    let x4884: BytePoly_64 = bigint_mul!(x4871, x4883, 64);
    let x4885: BytePoly_66 = bigint_nondet_quot!(ctx, x4884, x6, 66);
    let x4886: BytePoly_32 = bigint_nondet_rem!(ctx, x4884, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4885, x6, 98), x4886, 98),
            x4884,
            98
        ),
        536459,
        4,
    )?;
    let x4887: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4886, x4877, 32), 32), x6, 32);
    let x4888: BytePoly_32 = bigint_nondet_quot!(ctx, x4887, x6, 32);
    let x4889: BytePoly_32 = bigint_nondet_rem!(ctx, x4887, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4888, x6, 64), x4889, 64),
            x4887,
            64
        ),
        260103,
        4,
    )?;
    let x4890: BytePoly_1 = bigint_nondet_rem!(ctx, x4825, x2, 1);
    let x4891: BytePoly_33 = bigint_nondet_quot!(ctx, x4825, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4891, x2, 34), x4890, 34),
            x4825,
            34
        ),
        268231,
        4,
    )?;
    let x4892: BytePoly_1 = bigint_sub!(x3, x4890, 1);
    eqz(ctx, &bigint_mul!(x4890, x4892, 2), 8131, 2)?;
    let x4893: BytePoly_32 = bigint_add!(bigint_sub!(x4883, x4853, 32), x6, 32);
    let x4894: BytePoly_32 = bigint_nondet_inv!(ctx, x4893, x6, 32);
    let x4895: BytePoly_64 = bigint_mul!(x4893, x4894, 64);
    let x4896: BytePoly_66 = bigint_nondet_quot!(ctx, x4895, x6, 66);
    let x4897: BytePoly_32 = bigint_nondet_rem!(ctx, x4895, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4896, x6, 98), x4897, 98),
            x4895,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4897, x1, 32), 34, 1)?;
    let x4898: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4889, x4855, 32), x6, 32),
        x4894,
        64
    );
    let x4899: BytePoly_66 = bigint_nondet_quot!(ctx, x4898, x6, 66);
    let x4900: BytePoly_32 = bigint_nondet_rem!(ctx, x4898, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4899, x6, 98), x4900, 98),
            x4898,
            98
        ),
        536459,
        4,
    )?;
    let x4901: BytePoly_64 = bigint_mul!(x4900, x4853, 64);
    let x4902: BytePoly_66 = bigint_nondet_quot!(ctx, x4901, x6, 66);
    let x4903: BytePoly_32 = bigint_nondet_rem!(ctx, x4901, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4902, x6, 98), x4903, 98),
            x4901,
            98
        ),
        536459,
        4,
    )?;
    let x4904: BytePoly_32 = bigint_add!(bigint_sub!(x4855, x4903, 32), x6, 32);
    let x4905: BytePoly_32 = bigint_nondet_quot!(ctx, x4904, x6, 32);
    let x4906: BytePoly_32 = bigint_nondet_rem!(ctx, x4904, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4905, x6, 64), x4906, 64),
            x4904,
            64
        ),
        260103,
        4,
    )?;
    let x4907: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4900, x4900, 64), x4853, 64),
                x6,
                64
            ),
            x4883,
            64
        ),
        x6,
        64
    );
    let x4908: BytePoly_66 = bigint_nondet_quot!(ctx, x4907, x6, 66);
    let x4909: BytePoly_32 = bigint_nondet_rem!(ctx, x4907, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4908, x6, 98), x4909, 98),
            x4907,
            98
        ),
        536459,
        4,
    )?;
    let x4910: BytePoly_64 = bigint_mul!(x4900, x4909, 64);
    let x4911: BytePoly_66 = bigint_nondet_quot!(ctx, x4910, x6, 66);
    let x4912: BytePoly_32 = bigint_nondet_rem!(ctx, x4910, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4911, x6, 98), x4912, 98),
            x4910,
            98
        ),
        536459,
        4,
    )?;
    let x4913: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4912, x4906, 32), 32), x6, 32);
    let x4914: BytePoly_32 = bigint_nondet_quot!(ctx, x4913, x6, 32);
    let x4915: BytePoly_32 = bigint_nondet_rem!(ctx, x4913, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4914, x6, 64), x4915, 64),
            x4913,
            64
        ),
        260103,
        4,
    )?;
    let x4916: BytePoly_33 = bigint_add!(
        bigint_mul!(x4909, x4890, 33),
        bigint_mul!(x4853, x4892, 33),
        33
    );
    let x4917: BytePoly_33 = bigint_add!(
        bigint_mul!(x4915, x4890, 33),
        bigint_mul!(x4855, x4892, 33),
        33
    );
    let x4918: BytePoly_35 = bigint_nondet_quot!(ctx, x4916, x6, 35);
    let x4919: BytePoly_32 = bigint_nondet_rem!(ctx, x4916, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4918, x6, 67), x4919, 67),
            x4916,
            67
        ),
        284487,
        4,
    )?;
    let x4920: BytePoly_35 = bigint_nondet_quot!(ctx, x4917, x6, 35);
    let x4921: BytePoly_32 = bigint_nondet_rem!(ctx, x4917, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4920, x6, 67), x4921, 67),
            x4917,
            67
        ),
        284487,
        4,
    )?;
    let x4922: BytePoly_64 = bigint_mul!(x4883, x4883, 64);
    let x4923: BytePoly_66 = bigint_nondet_quot!(ctx, x4922, x6, 66);
    let x4924: BytePoly_32 = bigint_nondet_rem!(ctx, x4922, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4923, x6, 98), x4924, 98),
            x4922,
            98
        ),
        536459,
        4,
    )?;
    let x4925: BytePoly_33 = bigint_add!(bigint_mul!(x4924, x0, 33), x5, 33);
    let x4926: BytePoly_35 = bigint_nondet_quot!(ctx, x4925, x6, 35);
    let x4927: BytePoly_32 = bigint_nondet_rem!(ctx, x4925, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4926, x6, 67), x4927, 67),
            x4925,
            67
        ),
        284487,
        4,
    )?;
    let x4928: BytePoly_32 = bigint_add!(x4889, x4889, 32);
    let x4929: BytePoly_32 = bigint_nondet_quot!(ctx, x4928, x6, 32);
    let x4930: BytePoly_32 = bigint_nondet_rem!(ctx, x4928, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4929, x6, 64), x4930, 64),
            x4928,
            64
        ),
        260103,
        4,
    )?;
    let x4931: BytePoly_32 = bigint_nondet_inv!(ctx, x4930, x6, 32);
    let x4932: BytePoly_64 = bigint_mul!(x4930, x4931, 64);
    let x4933: BytePoly_66 = bigint_nondet_quot!(ctx, x4932, x6, 66);
    let x4934: BytePoly_32 = bigint_nondet_rem!(ctx, x4932, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4933, x6, 98), x4934, 98),
            x4932,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4934, x3, 32), 34, 1)?;
    let x4935: BytePoly_64 = bigint_mul!(x4927, x4931, 64);
    let x4936: BytePoly_66 = bigint_nondet_quot!(ctx, x4935, x6, 66);
    let x4937: BytePoly_32 = bigint_nondet_rem!(ctx, x4935, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4936, x6, 98), x4937, 98),
            x4935,
            98
        ),
        536459,
        4,
    )?;
    let x4938: BytePoly_64 = bigint_mul!(x4937, x4883, 64);
    let x4939: BytePoly_66 = bigint_nondet_quot!(ctx, x4938, x6, 66);
    let x4940: BytePoly_32 = bigint_nondet_rem!(ctx, x4938, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4939, x6, 98), x4940, 98),
            x4938,
            98
        ),
        536459,
        4,
    )?;
    let x4941: BytePoly_32 = bigint_add!(bigint_sub!(x4889, x4940, 32), x6, 32);
    let x4942: BytePoly_32 = bigint_nondet_quot!(ctx, x4941, x6, 32);
    let x4943: BytePoly_32 = bigint_nondet_rem!(ctx, x4941, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4942, x6, 64), x4943, 64),
            x4941,
            64
        ),
        260103,
        4,
    )?;
    let x4944: BytePoly_64 = bigint_mul!(x4937, x4937, 64);
    let x4945: BytePoly_66 = bigint_nondet_quot!(ctx, x4944, x6, 66);
    let x4946: BytePoly_32 = bigint_nondet_rem!(ctx, x4944, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4945, x6, 98), x4946, 98),
            x4944,
            98
        ),
        536459,
        4,
    )?;
    let x4947: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x4946, x4883, 32), x6, 32),
            x4883,
            32
        ),
        x6,
        32
    );
    let x4948: BytePoly_32 = bigint_nondet_quot!(ctx, x4947, x6, 32);
    let x4949: BytePoly_32 = bigint_nondet_rem!(ctx, x4947, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4948, x6, 64), x4949, 64),
            x4947,
            64
        ),
        260103,
        4,
    )?;
    let x4950: BytePoly_64 = bigint_mul!(x4937, x4949, 64);
    let x4951: BytePoly_66 = bigint_nondet_quot!(ctx, x4950, x6, 66);
    let x4952: BytePoly_32 = bigint_nondet_rem!(ctx, x4950, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4951, x6, 98), x4952, 98),
            x4950,
            98
        ),
        536459,
        4,
    )?;
    let x4953: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4952, x4943, 32), 32), x6, 32);
    let x4954: BytePoly_32 = bigint_nondet_quot!(ctx, x4953, x6, 32);
    let x4955: BytePoly_32 = bigint_nondet_rem!(ctx, x4953, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4954, x6, 64), x4955, 64),
            x4953,
            64
        ),
        260103,
        4,
    )?;
    let x4956: BytePoly_1 = bigint_nondet_rem!(ctx, x4891, x2, 1);
    let x4957: BytePoly_33 = bigint_nondet_quot!(ctx, x4891, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4957, x2, 34), x4956, 34),
            x4891,
            34
        ),
        268231,
        4,
    )?;
    let x4958: BytePoly_1 = bigint_sub!(x3, x4956, 1);
    eqz(ctx, &bigint_mul!(x4956, x4958, 2), 8131, 2)?;
    let x4959: BytePoly_32 = bigint_add!(bigint_sub!(x4949, x4919, 32), x6, 32);
    let x4960: BytePoly_32 = bigint_nondet_inv!(ctx, x4959, x6, 32);
    let x4961: BytePoly_64 = bigint_mul!(x4959, x4960, 64);
    let x4962: BytePoly_66 = bigint_nondet_quot!(ctx, x4961, x6, 66);
    let x4963: BytePoly_32 = bigint_nondet_rem!(ctx, x4961, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4962, x6, 98), x4963, 98),
            x4961,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x4963, x1, 32), 34, 1)?;
    let x4964: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x4955, x4921, 32), x6, 32),
        x4960,
        64
    );
    let x4965: BytePoly_66 = bigint_nondet_quot!(ctx, x4964, x6, 66);
    let x4966: BytePoly_32 = bigint_nondet_rem!(ctx, x4964, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4965, x6, 98), x4966, 98),
            x4964,
            98
        ),
        536459,
        4,
    )?;
    let x4967: BytePoly_64 = bigint_mul!(x4966, x4919, 64);
    let x4968: BytePoly_66 = bigint_nondet_quot!(ctx, x4967, x6, 66);
    let x4969: BytePoly_32 = bigint_nondet_rem!(ctx, x4967, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4968, x6, 98), x4969, 98),
            x4967,
            98
        ),
        536459,
        4,
    )?;
    let x4970: BytePoly_32 = bigint_add!(bigint_sub!(x4921, x4969, 32), x6, 32);
    let x4971: BytePoly_32 = bigint_nondet_quot!(ctx, x4970, x6, 32);
    let x4972: BytePoly_32 = bigint_nondet_rem!(ctx, x4970, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4971, x6, 64), x4972, 64),
            x4970,
            64
        ),
        260103,
        4,
    )?;
    let x4973: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x4966, x4966, 64), x4919, 64),
                x6,
                64
            ),
            x4949,
            64
        ),
        x6,
        64
    );
    let x4974: BytePoly_66 = bigint_nondet_quot!(ctx, x4973, x6, 66);
    let x4975: BytePoly_32 = bigint_nondet_rem!(ctx, x4973, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4974, x6, 98), x4975, 98),
            x4973,
            98
        ),
        536459,
        4,
    )?;
    let x4976: BytePoly_64 = bigint_mul!(x4966, x4975, 64);
    let x4977: BytePoly_66 = bigint_nondet_quot!(ctx, x4976, x6, 66);
    let x4978: BytePoly_32 = bigint_nondet_rem!(ctx, x4976, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4977, x6, 98), x4978, 98),
            x4976,
            98
        ),
        536459,
        4,
    )?;
    let x4979: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x4978, x4972, 32), 32), x6, 32);
    let x4980: BytePoly_32 = bigint_nondet_quot!(ctx, x4979, x6, 32);
    let x4981: BytePoly_32 = bigint_nondet_rem!(ctx, x4979, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4980, x6, 64), x4981, 64),
            x4979,
            64
        ),
        260103,
        4,
    )?;
    let x4982: BytePoly_33 = bigint_add!(
        bigint_mul!(x4975, x4956, 33),
        bigint_mul!(x4919, x4958, 33),
        33
    );
    let x4983: BytePoly_33 = bigint_add!(
        bigint_mul!(x4981, x4956, 33),
        bigint_mul!(x4921, x4958, 33),
        33
    );
    let x4984: BytePoly_35 = bigint_nondet_quot!(ctx, x4982, x6, 35);
    let x4985: BytePoly_32 = bigint_nondet_rem!(ctx, x4982, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4984, x6, 67), x4985, 67),
            x4982,
            67
        ),
        284487,
        4,
    )?;
    let x4986: BytePoly_35 = bigint_nondet_quot!(ctx, x4983, x6, 35);
    let x4987: BytePoly_32 = bigint_nondet_rem!(ctx, x4983, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4986, x6, 67), x4987, 67),
            x4983,
            67
        ),
        284487,
        4,
    )?;
    let x4988: BytePoly_64 = bigint_mul!(x4949, x4949, 64);
    let x4989: BytePoly_66 = bigint_nondet_quot!(ctx, x4988, x6, 66);
    let x4990: BytePoly_32 = bigint_nondet_rem!(ctx, x4988, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4989, x6, 98), x4990, 98),
            x4988,
            98
        ),
        536459,
        4,
    )?;
    let x4991: BytePoly_33 = bigint_add!(bigint_mul!(x4990, x0, 33), x5, 33);
    let x4992: BytePoly_35 = bigint_nondet_quot!(ctx, x4991, x6, 35);
    let x4993: BytePoly_32 = bigint_nondet_rem!(ctx, x4991, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4992, x6, 67), x4993, 67),
            x4991,
            67
        ),
        284487,
        4,
    )?;
    let x4994: BytePoly_32 = bigint_add!(x4955, x4955, 32);
    let x4995: BytePoly_32 = bigint_nondet_quot!(ctx, x4994, x6, 32);
    let x4996: BytePoly_32 = bigint_nondet_rem!(ctx, x4994, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4995, x6, 64), x4996, 64),
            x4994,
            64
        ),
        260103,
        4,
    )?;
    let x4997: BytePoly_32 = bigint_nondet_inv!(ctx, x4996, x6, 32);
    let x4998: BytePoly_64 = bigint_mul!(x4996, x4997, 64);
    let x4999: BytePoly_66 = bigint_nondet_quot!(ctx, x4998, x6, 66);
    let x5000: BytePoly_32 = bigint_nondet_rem!(ctx, x4998, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x4999, x6, 98), x5000, 98),
            x4998,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5000, x3, 32), 34, 1)?;
    let x5001: BytePoly_64 = bigint_mul!(x4993, x4997, 64);
    let x5002: BytePoly_66 = bigint_nondet_quot!(ctx, x5001, x6, 66);
    let x5003: BytePoly_32 = bigint_nondet_rem!(ctx, x5001, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5002, x6, 98), x5003, 98),
            x5001,
            98
        ),
        536459,
        4,
    )?;
    let x5004: BytePoly_64 = bigint_mul!(x5003, x4949, 64);
    let x5005: BytePoly_66 = bigint_nondet_quot!(ctx, x5004, x6, 66);
    let x5006: BytePoly_32 = bigint_nondet_rem!(ctx, x5004, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5005, x6, 98), x5006, 98),
            x5004,
            98
        ),
        536459,
        4,
    )?;
    let x5007: BytePoly_32 = bigint_add!(bigint_sub!(x4955, x5006, 32), x6, 32);
    let x5008: BytePoly_32 = bigint_nondet_quot!(ctx, x5007, x6, 32);
    let x5009: BytePoly_32 = bigint_nondet_rem!(ctx, x5007, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5008, x6, 64), x5009, 64),
            x5007,
            64
        ),
        260103,
        4,
    )?;
    let x5010: BytePoly_64 = bigint_mul!(x5003, x5003, 64);
    let x5011: BytePoly_66 = bigint_nondet_quot!(ctx, x5010, x6, 66);
    let x5012: BytePoly_32 = bigint_nondet_rem!(ctx, x5010, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5011, x6, 98), x5012, 98),
            x5010,
            98
        ),
        536459,
        4,
    )?;
    let x5013: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5012, x4949, 32), x6, 32),
            x4949,
            32
        ),
        x6,
        32
    );
    let x5014: BytePoly_32 = bigint_nondet_quot!(ctx, x5013, x6, 32);
    let x5015: BytePoly_32 = bigint_nondet_rem!(ctx, x5013, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5014, x6, 64), x5015, 64),
            x5013,
            64
        ),
        260103,
        4,
    )?;
    let x5016: BytePoly_64 = bigint_mul!(x5003, x5015, 64);
    let x5017: BytePoly_66 = bigint_nondet_quot!(ctx, x5016, x6, 66);
    let x5018: BytePoly_32 = bigint_nondet_rem!(ctx, x5016, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5017, x6, 98), x5018, 98),
            x5016,
            98
        ),
        536459,
        4,
    )?;
    let x5019: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5018, x5009, 32), 32), x6, 32);
    let x5020: BytePoly_32 = bigint_nondet_quot!(ctx, x5019, x6, 32);
    let x5021: BytePoly_32 = bigint_nondet_rem!(ctx, x5019, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5020, x6, 64), x5021, 64),
            x5019,
            64
        ),
        260103,
        4,
    )?;
    let x5022: BytePoly_1 = bigint_nondet_rem!(ctx, x4957, x2, 1);
    let x5023: BytePoly_33 = bigint_nondet_quot!(ctx, x4957, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5023, x2, 34), x5022, 34),
            x4957,
            34
        ),
        268231,
        4,
    )?;
    let x5024: BytePoly_1 = bigint_sub!(x3, x5022, 1);
    eqz(ctx, &bigint_mul!(x5022, x5024, 2), 8131, 2)?;
    let x5025: BytePoly_32 = bigint_add!(bigint_sub!(x5015, x4985, 32), x6, 32);
    let x5026: BytePoly_32 = bigint_nondet_inv!(ctx, x5025, x6, 32);
    let x5027: BytePoly_64 = bigint_mul!(x5025, x5026, 64);
    let x5028: BytePoly_66 = bigint_nondet_quot!(ctx, x5027, x6, 66);
    let x5029: BytePoly_32 = bigint_nondet_rem!(ctx, x5027, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5028, x6, 98), x5029, 98),
            x5027,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5029, x1, 32), 34, 1)?;
    let x5030: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5021, x4987, 32), x6, 32),
        x5026,
        64
    );
    let x5031: BytePoly_66 = bigint_nondet_quot!(ctx, x5030, x6, 66);
    let x5032: BytePoly_32 = bigint_nondet_rem!(ctx, x5030, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5031, x6, 98), x5032, 98),
            x5030,
            98
        ),
        536459,
        4,
    )?;
    let x5033: BytePoly_64 = bigint_mul!(x5032, x4985, 64);
    let x5034: BytePoly_66 = bigint_nondet_quot!(ctx, x5033, x6, 66);
    let x5035: BytePoly_32 = bigint_nondet_rem!(ctx, x5033, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5034, x6, 98), x5035, 98),
            x5033,
            98
        ),
        536459,
        4,
    )?;
    let x5036: BytePoly_32 = bigint_add!(bigint_sub!(x4987, x5035, 32), x6, 32);
    let x5037: BytePoly_32 = bigint_nondet_quot!(ctx, x5036, x6, 32);
    let x5038: BytePoly_32 = bigint_nondet_rem!(ctx, x5036, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5037, x6, 64), x5038, 64),
            x5036,
            64
        ),
        260103,
        4,
    )?;
    let x5039: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5032, x5032, 64), x4985, 64),
                x6,
                64
            ),
            x5015,
            64
        ),
        x6,
        64
    );
    let x5040: BytePoly_66 = bigint_nondet_quot!(ctx, x5039, x6, 66);
    let x5041: BytePoly_32 = bigint_nondet_rem!(ctx, x5039, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5040, x6, 98), x5041, 98),
            x5039,
            98
        ),
        536459,
        4,
    )?;
    let x5042: BytePoly_64 = bigint_mul!(x5032, x5041, 64);
    let x5043: BytePoly_66 = bigint_nondet_quot!(ctx, x5042, x6, 66);
    let x5044: BytePoly_32 = bigint_nondet_rem!(ctx, x5042, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5043, x6, 98), x5044, 98),
            x5042,
            98
        ),
        536459,
        4,
    )?;
    let x5045: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5044, x5038, 32), 32), x6, 32);
    let x5046: BytePoly_32 = bigint_nondet_quot!(ctx, x5045, x6, 32);
    let x5047: BytePoly_32 = bigint_nondet_rem!(ctx, x5045, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5046, x6, 64), x5047, 64),
            x5045,
            64
        ),
        260103,
        4,
    )?;
    let x5048: BytePoly_33 = bigint_add!(
        bigint_mul!(x5041, x5022, 33),
        bigint_mul!(x4985, x5024, 33),
        33
    );
    let x5049: BytePoly_33 = bigint_add!(
        bigint_mul!(x5047, x5022, 33),
        bigint_mul!(x4987, x5024, 33),
        33
    );
    let x5050: BytePoly_35 = bigint_nondet_quot!(ctx, x5048, x6, 35);
    let x5051: BytePoly_32 = bigint_nondet_rem!(ctx, x5048, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5050, x6, 67), x5051, 67),
            x5048,
            67
        ),
        284487,
        4,
    )?;
    let x5052: BytePoly_35 = bigint_nondet_quot!(ctx, x5049, x6, 35);
    let x5053: BytePoly_32 = bigint_nondet_rem!(ctx, x5049, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5052, x6, 67), x5053, 67),
            x5049,
            67
        ),
        284487,
        4,
    )?;
    let x5054: BytePoly_64 = bigint_mul!(x5015, x5015, 64);
    let x5055: BytePoly_66 = bigint_nondet_quot!(ctx, x5054, x6, 66);
    let x5056: BytePoly_32 = bigint_nondet_rem!(ctx, x5054, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5055, x6, 98), x5056, 98),
            x5054,
            98
        ),
        536459,
        4,
    )?;
    let x5057: BytePoly_33 = bigint_add!(bigint_mul!(x5056, x0, 33), x5, 33);
    let x5058: BytePoly_35 = bigint_nondet_quot!(ctx, x5057, x6, 35);
    let x5059: BytePoly_32 = bigint_nondet_rem!(ctx, x5057, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5058, x6, 67), x5059, 67),
            x5057,
            67
        ),
        284487,
        4,
    )?;
    let x5060: BytePoly_32 = bigint_add!(x5021, x5021, 32);
    let x5061: BytePoly_32 = bigint_nondet_quot!(ctx, x5060, x6, 32);
    let x5062: BytePoly_32 = bigint_nondet_rem!(ctx, x5060, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5061, x6, 64), x5062, 64),
            x5060,
            64
        ),
        260103,
        4,
    )?;
    let x5063: BytePoly_32 = bigint_nondet_inv!(ctx, x5062, x6, 32);
    let x5064: BytePoly_64 = bigint_mul!(x5062, x5063, 64);
    let x5065: BytePoly_66 = bigint_nondet_quot!(ctx, x5064, x6, 66);
    let x5066: BytePoly_32 = bigint_nondet_rem!(ctx, x5064, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5065, x6, 98), x5066, 98),
            x5064,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5066, x3, 32), 34, 1)?;
    let x5067: BytePoly_64 = bigint_mul!(x5059, x5063, 64);
    let x5068: BytePoly_66 = bigint_nondet_quot!(ctx, x5067, x6, 66);
    let x5069: BytePoly_32 = bigint_nondet_rem!(ctx, x5067, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5068, x6, 98), x5069, 98),
            x5067,
            98
        ),
        536459,
        4,
    )?;
    let x5070: BytePoly_64 = bigint_mul!(x5069, x5015, 64);
    let x5071: BytePoly_66 = bigint_nondet_quot!(ctx, x5070, x6, 66);
    let x5072: BytePoly_32 = bigint_nondet_rem!(ctx, x5070, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5071, x6, 98), x5072, 98),
            x5070,
            98
        ),
        536459,
        4,
    )?;
    let x5073: BytePoly_32 = bigint_add!(bigint_sub!(x5021, x5072, 32), x6, 32);
    let x5074: BytePoly_32 = bigint_nondet_quot!(ctx, x5073, x6, 32);
    let x5075: BytePoly_32 = bigint_nondet_rem!(ctx, x5073, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5074, x6, 64), x5075, 64),
            x5073,
            64
        ),
        260103,
        4,
    )?;
    let x5076: BytePoly_64 = bigint_mul!(x5069, x5069, 64);
    let x5077: BytePoly_66 = bigint_nondet_quot!(ctx, x5076, x6, 66);
    let x5078: BytePoly_32 = bigint_nondet_rem!(ctx, x5076, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5077, x6, 98), x5078, 98),
            x5076,
            98
        ),
        536459,
        4,
    )?;
    let x5079: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5078, x5015, 32), x6, 32),
            x5015,
            32
        ),
        x6,
        32
    );
    let x5080: BytePoly_32 = bigint_nondet_quot!(ctx, x5079, x6, 32);
    let x5081: BytePoly_32 = bigint_nondet_rem!(ctx, x5079, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5080, x6, 64), x5081, 64),
            x5079,
            64
        ),
        260103,
        4,
    )?;
    let x5082: BytePoly_64 = bigint_mul!(x5069, x5081, 64);
    let x5083: BytePoly_66 = bigint_nondet_quot!(ctx, x5082, x6, 66);
    let x5084: BytePoly_32 = bigint_nondet_rem!(ctx, x5082, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5083, x6, 98), x5084, 98),
            x5082,
            98
        ),
        536459,
        4,
    )?;
    let x5085: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5084, x5075, 32), 32), x6, 32);
    let x5086: BytePoly_32 = bigint_nondet_quot!(ctx, x5085, x6, 32);
    let x5087: BytePoly_32 = bigint_nondet_rem!(ctx, x5085, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5086, x6, 64), x5087, 64),
            x5085,
            64
        ),
        260103,
        4,
    )?;
    let x5088: BytePoly_1 = bigint_nondet_rem!(ctx, x5023, x2, 1);
    let x5089: BytePoly_33 = bigint_nondet_quot!(ctx, x5023, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5089, x2, 34), x5088, 34),
            x5023,
            34
        ),
        268231,
        4,
    )?;
    let x5090: BytePoly_1 = bigint_sub!(x3, x5088, 1);
    eqz(ctx, &bigint_mul!(x5088, x5090, 2), 8131, 2)?;
    let x5091: BytePoly_32 = bigint_add!(bigint_sub!(x5081, x5051, 32), x6, 32);
    let x5092: BytePoly_32 = bigint_nondet_inv!(ctx, x5091, x6, 32);
    let x5093: BytePoly_64 = bigint_mul!(x5091, x5092, 64);
    let x5094: BytePoly_66 = bigint_nondet_quot!(ctx, x5093, x6, 66);
    let x5095: BytePoly_32 = bigint_nondet_rem!(ctx, x5093, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5094, x6, 98), x5095, 98),
            x5093,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5095, x1, 32), 34, 1)?;
    let x5096: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5087, x5053, 32), x6, 32),
        x5092,
        64
    );
    let x5097: BytePoly_66 = bigint_nondet_quot!(ctx, x5096, x6, 66);
    let x5098: BytePoly_32 = bigint_nondet_rem!(ctx, x5096, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5097, x6, 98), x5098, 98),
            x5096,
            98
        ),
        536459,
        4,
    )?;
    let x5099: BytePoly_64 = bigint_mul!(x5098, x5051, 64);
    let x5100: BytePoly_66 = bigint_nondet_quot!(ctx, x5099, x6, 66);
    let x5101: BytePoly_32 = bigint_nondet_rem!(ctx, x5099, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5100, x6, 98), x5101, 98),
            x5099,
            98
        ),
        536459,
        4,
    )?;
    let x5102: BytePoly_32 = bigint_add!(bigint_sub!(x5053, x5101, 32), x6, 32);
    let x5103: BytePoly_32 = bigint_nondet_quot!(ctx, x5102, x6, 32);
    let x5104: BytePoly_32 = bigint_nondet_rem!(ctx, x5102, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5103, x6, 64), x5104, 64),
            x5102,
            64
        ),
        260103,
        4,
    )?;
    let x5105: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5098, x5098, 64), x5051, 64),
                x6,
                64
            ),
            x5081,
            64
        ),
        x6,
        64
    );
    let x5106: BytePoly_66 = bigint_nondet_quot!(ctx, x5105, x6, 66);
    let x5107: BytePoly_32 = bigint_nondet_rem!(ctx, x5105, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5106, x6, 98), x5107, 98),
            x5105,
            98
        ),
        536459,
        4,
    )?;
    let x5108: BytePoly_64 = bigint_mul!(x5098, x5107, 64);
    let x5109: BytePoly_66 = bigint_nondet_quot!(ctx, x5108, x6, 66);
    let x5110: BytePoly_32 = bigint_nondet_rem!(ctx, x5108, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5109, x6, 98), x5110, 98),
            x5108,
            98
        ),
        536459,
        4,
    )?;
    let x5111: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5110, x5104, 32), 32), x6, 32);
    let x5112: BytePoly_32 = bigint_nondet_quot!(ctx, x5111, x6, 32);
    let x5113: BytePoly_32 = bigint_nondet_rem!(ctx, x5111, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5112, x6, 64), x5113, 64),
            x5111,
            64
        ),
        260103,
        4,
    )?;
    let x5114: BytePoly_33 = bigint_add!(
        bigint_mul!(x5107, x5088, 33),
        bigint_mul!(x5051, x5090, 33),
        33
    );
    let x5115: BytePoly_33 = bigint_add!(
        bigint_mul!(x5113, x5088, 33),
        bigint_mul!(x5053, x5090, 33),
        33
    );
    let x5116: BytePoly_35 = bigint_nondet_quot!(ctx, x5114, x6, 35);
    let x5117: BytePoly_32 = bigint_nondet_rem!(ctx, x5114, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5116, x6, 67), x5117, 67),
            x5114,
            67
        ),
        284487,
        4,
    )?;
    let x5118: BytePoly_35 = bigint_nondet_quot!(ctx, x5115, x6, 35);
    let x5119: BytePoly_32 = bigint_nondet_rem!(ctx, x5115, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5118, x6, 67), x5119, 67),
            x5115,
            67
        ),
        284487,
        4,
    )?;
    let x5120: BytePoly_64 = bigint_mul!(x5081, x5081, 64);
    let x5121: BytePoly_66 = bigint_nondet_quot!(ctx, x5120, x6, 66);
    let x5122: BytePoly_32 = bigint_nondet_rem!(ctx, x5120, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5121, x6, 98), x5122, 98),
            x5120,
            98
        ),
        536459,
        4,
    )?;
    let x5123: BytePoly_33 = bigint_add!(bigint_mul!(x5122, x0, 33), x5, 33);
    let x5124: BytePoly_35 = bigint_nondet_quot!(ctx, x5123, x6, 35);
    let x5125: BytePoly_32 = bigint_nondet_rem!(ctx, x5123, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5124, x6, 67), x5125, 67),
            x5123,
            67
        ),
        284487,
        4,
    )?;
    let x5126: BytePoly_32 = bigint_add!(x5087, x5087, 32);
    let x5127: BytePoly_32 = bigint_nondet_quot!(ctx, x5126, x6, 32);
    let x5128: BytePoly_32 = bigint_nondet_rem!(ctx, x5126, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5127, x6, 64), x5128, 64),
            x5126,
            64
        ),
        260103,
        4,
    )?;
    let x5129: BytePoly_32 = bigint_nondet_inv!(ctx, x5128, x6, 32);
    let x5130: BytePoly_64 = bigint_mul!(x5128, x5129, 64);
    let x5131: BytePoly_66 = bigint_nondet_quot!(ctx, x5130, x6, 66);
    let x5132: BytePoly_32 = bigint_nondet_rem!(ctx, x5130, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5131, x6, 98), x5132, 98),
            x5130,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5132, x3, 32), 34, 1)?;
    let x5133: BytePoly_64 = bigint_mul!(x5125, x5129, 64);
    let x5134: BytePoly_66 = bigint_nondet_quot!(ctx, x5133, x6, 66);
    let x5135: BytePoly_32 = bigint_nondet_rem!(ctx, x5133, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5134, x6, 98), x5135, 98),
            x5133,
            98
        ),
        536459,
        4,
    )?;
    let x5136: BytePoly_64 = bigint_mul!(x5135, x5081, 64);
    let x5137: BytePoly_66 = bigint_nondet_quot!(ctx, x5136, x6, 66);
    let x5138: BytePoly_32 = bigint_nondet_rem!(ctx, x5136, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5137, x6, 98), x5138, 98),
            x5136,
            98
        ),
        536459,
        4,
    )?;
    let x5139: BytePoly_32 = bigint_add!(bigint_sub!(x5087, x5138, 32), x6, 32);
    let x5140: BytePoly_32 = bigint_nondet_quot!(ctx, x5139, x6, 32);
    let x5141: BytePoly_32 = bigint_nondet_rem!(ctx, x5139, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5140, x6, 64), x5141, 64),
            x5139,
            64
        ),
        260103,
        4,
    )?;
    let x5142: BytePoly_64 = bigint_mul!(x5135, x5135, 64);
    let x5143: BytePoly_66 = bigint_nondet_quot!(ctx, x5142, x6, 66);
    let x5144: BytePoly_32 = bigint_nondet_rem!(ctx, x5142, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5143, x6, 98), x5144, 98),
            x5142,
            98
        ),
        536459,
        4,
    )?;
    let x5145: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5144, x5081, 32), x6, 32),
            x5081,
            32
        ),
        x6,
        32
    );
    let x5146: BytePoly_32 = bigint_nondet_quot!(ctx, x5145, x6, 32);
    let x5147: BytePoly_32 = bigint_nondet_rem!(ctx, x5145, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5146, x6, 64), x5147, 64),
            x5145,
            64
        ),
        260103,
        4,
    )?;
    let x5148: BytePoly_64 = bigint_mul!(x5135, x5147, 64);
    let x5149: BytePoly_66 = bigint_nondet_quot!(ctx, x5148, x6, 66);
    let x5150: BytePoly_32 = bigint_nondet_rem!(ctx, x5148, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5149, x6, 98), x5150, 98),
            x5148,
            98
        ),
        536459,
        4,
    )?;
    let x5151: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5150, x5141, 32), 32), x6, 32);
    let x5152: BytePoly_32 = bigint_nondet_quot!(ctx, x5151, x6, 32);
    let x5153: BytePoly_32 = bigint_nondet_rem!(ctx, x5151, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5152, x6, 64), x5153, 64),
            x5151,
            64
        ),
        260103,
        4,
    )?;
    let x5154: BytePoly_1 = bigint_nondet_rem!(ctx, x5089, x2, 1);
    let x5155: BytePoly_33 = bigint_nondet_quot!(ctx, x5089, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5155, x2, 34), x5154, 34),
            x5089,
            34
        ),
        268231,
        4,
    )?;
    let x5156: BytePoly_1 = bigint_sub!(x3, x5154, 1);
    eqz(ctx, &bigint_mul!(x5154, x5156, 2), 8131, 2)?;
    let x5157: BytePoly_32 = bigint_add!(bigint_sub!(x5147, x5117, 32), x6, 32);
    let x5158: BytePoly_32 = bigint_nondet_inv!(ctx, x5157, x6, 32);
    let x5159: BytePoly_64 = bigint_mul!(x5157, x5158, 64);
    let x5160: BytePoly_66 = bigint_nondet_quot!(ctx, x5159, x6, 66);
    let x5161: BytePoly_32 = bigint_nondet_rem!(ctx, x5159, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5160, x6, 98), x5161, 98),
            x5159,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5161, x1, 32), 34, 1)?;
    let x5162: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5153, x5119, 32), x6, 32),
        x5158,
        64
    );
    let x5163: BytePoly_66 = bigint_nondet_quot!(ctx, x5162, x6, 66);
    let x5164: BytePoly_32 = bigint_nondet_rem!(ctx, x5162, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5163, x6, 98), x5164, 98),
            x5162,
            98
        ),
        536459,
        4,
    )?;
    let x5165: BytePoly_64 = bigint_mul!(x5164, x5117, 64);
    let x5166: BytePoly_66 = bigint_nondet_quot!(ctx, x5165, x6, 66);
    let x5167: BytePoly_32 = bigint_nondet_rem!(ctx, x5165, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5166, x6, 98), x5167, 98),
            x5165,
            98
        ),
        536459,
        4,
    )?;
    let x5168: BytePoly_32 = bigint_add!(bigint_sub!(x5119, x5167, 32), x6, 32);
    let x5169: BytePoly_32 = bigint_nondet_quot!(ctx, x5168, x6, 32);
    let x5170: BytePoly_32 = bigint_nondet_rem!(ctx, x5168, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5169, x6, 64), x5170, 64),
            x5168,
            64
        ),
        260103,
        4,
    )?;
    let x5171: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5164, x5164, 64), x5117, 64),
                x6,
                64
            ),
            x5147,
            64
        ),
        x6,
        64
    );
    let x5172: BytePoly_66 = bigint_nondet_quot!(ctx, x5171, x6, 66);
    let x5173: BytePoly_32 = bigint_nondet_rem!(ctx, x5171, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5172, x6, 98), x5173, 98),
            x5171,
            98
        ),
        536459,
        4,
    )?;
    let x5174: BytePoly_64 = bigint_mul!(x5164, x5173, 64);
    let x5175: BytePoly_66 = bigint_nondet_quot!(ctx, x5174, x6, 66);
    let x5176: BytePoly_32 = bigint_nondet_rem!(ctx, x5174, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5175, x6, 98), x5176, 98),
            x5174,
            98
        ),
        536459,
        4,
    )?;
    let x5177: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5176, x5170, 32), 32), x6, 32);
    let x5178: BytePoly_32 = bigint_nondet_quot!(ctx, x5177, x6, 32);
    let x5179: BytePoly_32 = bigint_nondet_rem!(ctx, x5177, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5178, x6, 64), x5179, 64),
            x5177,
            64
        ),
        260103,
        4,
    )?;
    let x5180: BytePoly_33 = bigint_add!(
        bigint_mul!(x5173, x5154, 33),
        bigint_mul!(x5117, x5156, 33),
        33
    );
    let x5181: BytePoly_33 = bigint_add!(
        bigint_mul!(x5179, x5154, 33),
        bigint_mul!(x5119, x5156, 33),
        33
    );
    let x5182: BytePoly_35 = bigint_nondet_quot!(ctx, x5180, x6, 35);
    let x5183: BytePoly_32 = bigint_nondet_rem!(ctx, x5180, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5182, x6, 67), x5183, 67),
            x5180,
            67
        ),
        284487,
        4,
    )?;
    let x5184: BytePoly_35 = bigint_nondet_quot!(ctx, x5181, x6, 35);
    let x5185: BytePoly_32 = bigint_nondet_rem!(ctx, x5181, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5184, x6, 67), x5185, 67),
            x5181,
            67
        ),
        284487,
        4,
    )?;
    let x5186: BytePoly_64 = bigint_mul!(x5147, x5147, 64);
    let x5187: BytePoly_66 = bigint_nondet_quot!(ctx, x5186, x6, 66);
    let x5188: BytePoly_32 = bigint_nondet_rem!(ctx, x5186, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5187, x6, 98), x5188, 98),
            x5186,
            98
        ),
        536459,
        4,
    )?;
    let x5189: BytePoly_33 = bigint_add!(bigint_mul!(x5188, x0, 33), x5, 33);
    let x5190: BytePoly_35 = bigint_nondet_quot!(ctx, x5189, x6, 35);
    let x5191: BytePoly_32 = bigint_nondet_rem!(ctx, x5189, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5190, x6, 67), x5191, 67),
            x5189,
            67
        ),
        284487,
        4,
    )?;
    let x5192: BytePoly_32 = bigint_add!(x5153, x5153, 32);
    let x5193: BytePoly_32 = bigint_nondet_quot!(ctx, x5192, x6, 32);
    let x5194: BytePoly_32 = bigint_nondet_rem!(ctx, x5192, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5193, x6, 64), x5194, 64),
            x5192,
            64
        ),
        260103,
        4,
    )?;
    let x5195: BytePoly_32 = bigint_nondet_inv!(ctx, x5194, x6, 32);
    let x5196: BytePoly_64 = bigint_mul!(x5194, x5195, 64);
    let x5197: BytePoly_66 = bigint_nondet_quot!(ctx, x5196, x6, 66);
    let x5198: BytePoly_32 = bigint_nondet_rem!(ctx, x5196, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5197, x6, 98), x5198, 98),
            x5196,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5198, x3, 32), 34, 1)?;
    let x5199: BytePoly_64 = bigint_mul!(x5191, x5195, 64);
    let x5200: BytePoly_66 = bigint_nondet_quot!(ctx, x5199, x6, 66);
    let x5201: BytePoly_32 = bigint_nondet_rem!(ctx, x5199, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5200, x6, 98), x5201, 98),
            x5199,
            98
        ),
        536459,
        4,
    )?;
    let x5202: BytePoly_64 = bigint_mul!(x5201, x5147, 64);
    let x5203: BytePoly_66 = bigint_nondet_quot!(ctx, x5202, x6, 66);
    let x5204: BytePoly_32 = bigint_nondet_rem!(ctx, x5202, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5203, x6, 98), x5204, 98),
            x5202,
            98
        ),
        536459,
        4,
    )?;
    let x5205: BytePoly_32 = bigint_add!(bigint_sub!(x5153, x5204, 32), x6, 32);
    let x5206: BytePoly_32 = bigint_nondet_quot!(ctx, x5205, x6, 32);
    let x5207: BytePoly_32 = bigint_nondet_rem!(ctx, x5205, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5206, x6, 64), x5207, 64),
            x5205,
            64
        ),
        260103,
        4,
    )?;
    let x5208: BytePoly_64 = bigint_mul!(x5201, x5201, 64);
    let x5209: BytePoly_66 = bigint_nondet_quot!(ctx, x5208, x6, 66);
    let x5210: BytePoly_32 = bigint_nondet_rem!(ctx, x5208, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5209, x6, 98), x5210, 98),
            x5208,
            98
        ),
        536459,
        4,
    )?;
    let x5211: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5210, x5147, 32), x6, 32),
            x5147,
            32
        ),
        x6,
        32
    );
    let x5212: BytePoly_32 = bigint_nondet_quot!(ctx, x5211, x6, 32);
    let x5213: BytePoly_32 = bigint_nondet_rem!(ctx, x5211, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5212, x6, 64), x5213, 64),
            x5211,
            64
        ),
        260103,
        4,
    )?;
    let x5214: BytePoly_64 = bigint_mul!(x5201, x5213, 64);
    let x5215: BytePoly_66 = bigint_nondet_quot!(ctx, x5214, x6, 66);
    let x5216: BytePoly_32 = bigint_nondet_rem!(ctx, x5214, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5215, x6, 98), x5216, 98),
            x5214,
            98
        ),
        536459,
        4,
    )?;
    let x5217: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5216, x5207, 32), 32), x6, 32);
    let x5218: BytePoly_32 = bigint_nondet_quot!(ctx, x5217, x6, 32);
    let x5219: BytePoly_32 = bigint_nondet_rem!(ctx, x5217, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5218, x6, 64), x5219, 64),
            x5217,
            64
        ),
        260103,
        4,
    )?;
    let x5220: BytePoly_1 = bigint_nondet_rem!(ctx, x5155, x2, 1);
    let x5221: BytePoly_33 = bigint_nondet_quot!(ctx, x5155, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5221, x2, 34), x5220, 34),
            x5155,
            34
        ),
        268231,
        4,
    )?;
    let x5222: BytePoly_1 = bigint_sub!(x3, x5220, 1);
    eqz(ctx, &bigint_mul!(x5220, x5222, 2), 8131, 2)?;
    let x5223: BytePoly_32 = bigint_add!(bigint_sub!(x5213, x5183, 32), x6, 32);
    let x5224: BytePoly_32 = bigint_nondet_inv!(ctx, x5223, x6, 32);
    let x5225: BytePoly_64 = bigint_mul!(x5223, x5224, 64);
    let x5226: BytePoly_66 = bigint_nondet_quot!(ctx, x5225, x6, 66);
    let x5227: BytePoly_32 = bigint_nondet_rem!(ctx, x5225, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5226, x6, 98), x5227, 98),
            x5225,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5227, x1, 32), 34, 1)?;
    let x5228: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5219, x5185, 32), x6, 32),
        x5224,
        64
    );
    let x5229: BytePoly_66 = bigint_nondet_quot!(ctx, x5228, x6, 66);
    let x5230: BytePoly_32 = bigint_nondet_rem!(ctx, x5228, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5229, x6, 98), x5230, 98),
            x5228,
            98
        ),
        536459,
        4,
    )?;
    let x5231: BytePoly_64 = bigint_mul!(x5230, x5183, 64);
    let x5232: BytePoly_66 = bigint_nondet_quot!(ctx, x5231, x6, 66);
    let x5233: BytePoly_32 = bigint_nondet_rem!(ctx, x5231, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5232, x6, 98), x5233, 98),
            x5231,
            98
        ),
        536459,
        4,
    )?;
    let x5234: BytePoly_32 = bigint_add!(bigint_sub!(x5185, x5233, 32), x6, 32);
    let x5235: BytePoly_32 = bigint_nondet_quot!(ctx, x5234, x6, 32);
    let x5236: BytePoly_32 = bigint_nondet_rem!(ctx, x5234, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5235, x6, 64), x5236, 64),
            x5234,
            64
        ),
        260103,
        4,
    )?;
    let x5237: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5230, x5230, 64), x5183, 64),
                x6,
                64
            ),
            x5213,
            64
        ),
        x6,
        64
    );
    let x5238: BytePoly_66 = bigint_nondet_quot!(ctx, x5237, x6, 66);
    let x5239: BytePoly_32 = bigint_nondet_rem!(ctx, x5237, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5238, x6, 98), x5239, 98),
            x5237,
            98
        ),
        536459,
        4,
    )?;
    let x5240: BytePoly_64 = bigint_mul!(x5230, x5239, 64);
    let x5241: BytePoly_66 = bigint_nondet_quot!(ctx, x5240, x6, 66);
    let x5242: BytePoly_32 = bigint_nondet_rem!(ctx, x5240, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5241, x6, 98), x5242, 98),
            x5240,
            98
        ),
        536459,
        4,
    )?;
    let x5243: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5242, x5236, 32), 32), x6, 32);
    let x5244: BytePoly_32 = bigint_nondet_quot!(ctx, x5243, x6, 32);
    let x5245: BytePoly_32 = bigint_nondet_rem!(ctx, x5243, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5244, x6, 64), x5245, 64),
            x5243,
            64
        ),
        260103,
        4,
    )?;
    let x5246: BytePoly_33 = bigint_add!(
        bigint_mul!(x5239, x5220, 33),
        bigint_mul!(x5183, x5222, 33),
        33
    );
    let x5247: BytePoly_33 = bigint_add!(
        bigint_mul!(x5245, x5220, 33),
        bigint_mul!(x5185, x5222, 33),
        33
    );
    let x5248: BytePoly_35 = bigint_nondet_quot!(ctx, x5246, x6, 35);
    let x5249: BytePoly_32 = bigint_nondet_rem!(ctx, x5246, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5248, x6, 67), x5249, 67),
            x5246,
            67
        ),
        284487,
        4,
    )?;
    let x5250: BytePoly_35 = bigint_nondet_quot!(ctx, x5247, x6, 35);
    let x5251: BytePoly_32 = bigint_nondet_rem!(ctx, x5247, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5250, x6, 67), x5251, 67),
            x5247,
            67
        ),
        284487,
        4,
    )?;
    let x5252: BytePoly_64 = bigint_mul!(x5213, x5213, 64);
    let x5253: BytePoly_66 = bigint_nondet_quot!(ctx, x5252, x6, 66);
    let x5254: BytePoly_32 = bigint_nondet_rem!(ctx, x5252, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5253, x6, 98), x5254, 98),
            x5252,
            98
        ),
        536459,
        4,
    )?;
    let x5255: BytePoly_33 = bigint_add!(bigint_mul!(x5254, x0, 33), x5, 33);
    let x5256: BytePoly_35 = bigint_nondet_quot!(ctx, x5255, x6, 35);
    let x5257: BytePoly_32 = bigint_nondet_rem!(ctx, x5255, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5256, x6, 67), x5257, 67),
            x5255,
            67
        ),
        284487,
        4,
    )?;
    let x5258: BytePoly_32 = bigint_add!(x5219, x5219, 32);
    let x5259: BytePoly_32 = bigint_nondet_quot!(ctx, x5258, x6, 32);
    let x5260: BytePoly_32 = bigint_nondet_rem!(ctx, x5258, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5259, x6, 64), x5260, 64),
            x5258,
            64
        ),
        260103,
        4,
    )?;
    let x5261: BytePoly_32 = bigint_nondet_inv!(ctx, x5260, x6, 32);
    let x5262: BytePoly_64 = bigint_mul!(x5260, x5261, 64);
    let x5263: BytePoly_66 = bigint_nondet_quot!(ctx, x5262, x6, 66);
    let x5264: BytePoly_32 = bigint_nondet_rem!(ctx, x5262, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5263, x6, 98), x5264, 98),
            x5262,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5264, x3, 32), 34, 1)?;
    let x5265: BytePoly_64 = bigint_mul!(x5257, x5261, 64);
    let x5266: BytePoly_66 = bigint_nondet_quot!(ctx, x5265, x6, 66);
    let x5267: BytePoly_32 = bigint_nondet_rem!(ctx, x5265, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5266, x6, 98), x5267, 98),
            x5265,
            98
        ),
        536459,
        4,
    )?;
    let x5268: BytePoly_64 = bigint_mul!(x5267, x5213, 64);
    let x5269: BytePoly_66 = bigint_nondet_quot!(ctx, x5268, x6, 66);
    let x5270: BytePoly_32 = bigint_nondet_rem!(ctx, x5268, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5269, x6, 98), x5270, 98),
            x5268,
            98
        ),
        536459,
        4,
    )?;
    let x5271: BytePoly_32 = bigint_add!(bigint_sub!(x5219, x5270, 32), x6, 32);
    let x5272: BytePoly_32 = bigint_nondet_quot!(ctx, x5271, x6, 32);
    let x5273: BytePoly_32 = bigint_nondet_rem!(ctx, x5271, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5272, x6, 64), x5273, 64),
            x5271,
            64
        ),
        260103,
        4,
    )?;
    let x5274: BytePoly_64 = bigint_mul!(x5267, x5267, 64);
    let x5275: BytePoly_66 = bigint_nondet_quot!(ctx, x5274, x6, 66);
    let x5276: BytePoly_32 = bigint_nondet_rem!(ctx, x5274, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5275, x6, 98), x5276, 98),
            x5274,
            98
        ),
        536459,
        4,
    )?;
    let x5277: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5276, x5213, 32), x6, 32),
            x5213,
            32
        ),
        x6,
        32
    );
    let x5278: BytePoly_32 = bigint_nondet_quot!(ctx, x5277, x6, 32);
    let x5279: BytePoly_32 = bigint_nondet_rem!(ctx, x5277, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5278, x6, 64), x5279, 64),
            x5277,
            64
        ),
        260103,
        4,
    )?;
    let x5280: BytePoly_64 = bigint_mul!(x5267, x5279, 64);
    let x5281: BytePoly_66 = bigint_nondet_quot!(ctx, x5280, x6, 66);
    let x5282: BytePoly_32 = bigint_nondet_rem!(ctx, x5280, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5281, x6, 98), x5282, 98),
            x5280,
            98
        ),
        536459,
        4,
    )?;
    let x5283: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5282, x5273, 32), 32), x6, 32);
    let x5284: BytePoly_32 = bigint_nondet_quot!(ctx, x5283, x6, 32);
    let x5285: BytePoly_32 = bigint_nondet_rem!(ctx, x5283, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5284, x6, 64), x5285, 64),
            x5283,
            64
        ),
        260103,
        4,
    )?;
    let x5286: BytePoly_1 = bigint_nondet_rem!(ctx, x5221, x2, 1);
    let x5287: BytePoly_33 = bigint_nondet_quot!(ctx, x5221, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5287, x2, 34), x5286, 34),
            x5221,
            34
        ),
        268231,
        4,
    )?;
    let x5288: BytePoly_1 = bigint_sub!(x3, x5286, 1);
    eqz(ctx, &bigint_mul!(x5286, x5288, 2), 8131, 2)?;
    let x5289: BytePoly_32 = bigint_add!(bigint_sub!(x5279, x5249, 32), x6, 32);
    let x5290: BytePoly_32 = bigint_nondet_inv!(ctx, x5289, x6, 32);
    let x5291: BytePoly_64 = bigint_mul!(x5289, x5290, 64);
    let x5292: BytePoly_66 = bigint_nondet_quot!(ctx, x5291, x6, 66);
    let x5293: BytePoly_32 = bigint_nondet_rem!(ctx, x5291, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5292, x6, 98), x5293, 98),
            x5291,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5293, x1, 32), 34, 1)?;
    let x5294: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5285, x5251, 32), x6, 32),
        x5290,
        64
    );
    let x5295: BytePoly_66 = bigint_nondet_quot!(ctx, x5294, x6, 66);
    let x5296: BytePoly_32 = bigint_nondet_rem!(ctx, x5294, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5295, x6, 98), x5296, 98),
            x5294,
            98
        ),
        536459,
        4,
    )?;
    let x5297: BytePoly_64 = bigint_mul!(x5296, x5249, 64);
    let x5298: BytePoly_66 = bigint_nondet_quot!(ctx, x5297, x6, 66);
    let x5299: BytePoly_32 = bigint_nondet_rem!(ctx, x5297, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5298, x6, 98), x5299, 98),
            x5297,
            98
        ),
        536459,
        4,
    )?;
    let x5300: BytePoly_32 = bigint_add!(bigint_sub!(x5251, x5299, 32), x6, 32);
    let x5301: BytePoly_32 = bigint_nondet_quot!(ctx, x5300, x6, 32);
    let x5302: BytePoly_32 = bigint_nondet_rem!(ctx, x5300, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5301, x6, 64), x5302, 64),
            x5300,
            64
        ),
        260103,
        4,
    )?;
    let x5303: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5296, x5296, 64), x5249, 64),
                x6,
                64
            ),
            x5279,
            64
        ),
        x6,
        64
    );
    let x5304: BytePoly_66 = bigint_nondet_quot!(ctx, x5303, x6, 66);
    let x5305: BytePoly_32 = bigint_nondet_rem!(ctx, x5303, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5304, x6, 98), x5305, 98),
            x5303,
            98
        ),
        536459,
        4,
    )?;
    let x5306: BytePoly_64 = bigint_mul!(x5296, x5305, 64);
    let x5307: BytePoly_66 = bigint_nondet_quot!(ctx, x5306, x6, 66);
    let x5308: BytePoly_32 = bigint_nondet_rem!(ctx, x5306, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5307, x6, 98), x5308, 98),
            x5306,
            98
        ),
        536459,
        4,
    )?;
    let x5309: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5308, x5302, 32), 32), x6, 32);
    let x5310: BytePoly_32 = bigint_nondet_quot!(ctx, x5309, x6, 32);
    let x5311: BytePoly_32 = bigint_nondet_rem!(ctx, x5309, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5310, x6, 64), x5311, 64),
            x5309,
            64
        ),
        260103,
        4,
    )?;
    let x5312: BytePoly_33 = bigint_add!(
        bigint_mul!(x5305, x5286, 33),
        bigint_mul!(x5249, x5288, 33),
        33
    );
    let x5313: BytePoly_33 = bigint_add!(
        bigint_mul!(x5311, x5286, 33),
        bigint_mul!(x5251, x5288, 33),
        33
    );
    let x5314: BytePoly_35 = bigint_nondet_quot!(ctx, x5312, x6, 35);
    let x5315: BytePoly_32 = bigint_nondet_rem!(ctx, x5312, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5314, x6, 67), x5315, 67),
            x5312,
            67
        ),
        284487,
        4,
    )?;
    let x5316: BytePoly_35 = bigint_nondet_quot!(ctx, x5313, x6, 35);
    let x5317: BytePoly_32 = bigint_nondet_rem!(ctx, x5313, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5316, x6, 67), x5317, 67),
            x5313,
            67
        ),
        284487,
        4,
    )?;
    let x5318: BytePoly_64 = bigint_mul!(x5279, x5279, 64);
    let x5319: BytePoly_66 = bigint_nondet_quot!(ctx, x5318, x6, 66);
    let x5320: BytePoly_32 = bigint_nondet_rem!(ctx, x5318, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5319, x6, 98), x5320, 98),
            x5318,
            98
        ),
        536459,
        4,
    )?;
    let x5321: BytePoly_33 = bigint_add!(bigint_mul!(x5320, x0, 33), x5, 33);
    let x5322: BytePoly_35 = bigint_nondet_quot!(ctx, x5321, x6, 35);
    let x5323: BytePoly_32 = bigint_nondet_rem!(ctx, x5321, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5322, x6, 67), x5323, 67),
            x5321,
            67
        ),
        284487,
        4,
    )?;
    let x5324: BytePoly_32 = bigint_add!(x5285, x5285, 32);
    let x5325: BytePoly_32 = bigint_nondet_quot!(ctx, x5324, x6, 32);
    let x5326: BytePoly_32 = bigint_nondet_rem!(ctx, x5324, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5325, x6, 64), x5326, 64),
            x5324,
            64
        ),
        260103,
        4,
    )?;
    let x5327: BytePoly_32 = bigint_nondet_inv!(ctx, x5326, x6, 32);
    let x5328: BytePoly_64 = bigint_mul!(x5326, x5327, 64);
    let x5329: BytePoly_66 = bigint_nondet_quot!(ctx, x5328, x6, 66);
    let x5330: BytePoly_32 = bigint_nondet_rem!(ctx, x5328, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5329, x6, 98), x5330, 98),
            x5328,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5330, x3, 32), 34, 1)?;
    let x5331: BytePoly_64 = bigint_mul!(x5323, x5327, 64);
    let x5332: BytePoly_66 = bigint_nondet_quot!(ctx, x5331, x6, 66);
    let x5333: BytePoly_32 = bigint_nondet_rem!(ctx, x5331, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5332, x6, 98), x5333, 98),
            x5331,
            98
        ),
        536459,
        4,
    )?;
    let x5334: BytePoly_64 = bigint_mul!(x5333, x5279, 64);
    let x5335: BytePoly_66 = bigint_nondet_quot!(ctx, x5334, x6, 66);
    let x5336: BytePoly_32 = bigint_nondet_rem!(ctx, x5334, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5335, x6, 98), x5336, 98),
            x5334,
            98
        ),
        536459,
        4,
    )?;
    let x5337: BytePoly_32 = bigint_add!(bigint_sub!(x5285, x5336, 32), x6, 32);
    let x5338: BytePoly_32 = bigint_nondet_quot!(ctx, x5337, x6, 32);
    let x5339: BytePoly_32 = bigint_nondet_rem!(ctx, x5337, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5338, x6, 64), x5339, 64),
            x5337,
            64
        ),
        260103,
        4,
    )?;
    let x5340: BytePoly_64 = bigint_mul!(x5333, x5333, 64);
    let x5341: BytePoly_66 = bigint_nondet_quot!(ctx, x5340, x6, 66);
    let x5342: BytePoly_32 = bigint_nondet_rem!(ctx, x5340, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5341, x6, 98), x5342, 98),
            x5340,
            98
        ),
        536459,
        4,
    )?;
    let x5343: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5342, x5279, 32), x6, 32),
            x5279,
            32
        ),
        x6,
        32
    );
    let x5344: BytePoly_32 = bigint_nondet_quot!(ctx, x5343, x6, 32);
    let x5345: BytePoly_32 = bigint_nondet_rem!(ctx, x5343, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5344, x6, 64), x5345, 64),
            x5343,
            64
        ),
        260103,
        4,
    )?;
    let x5346: BytePoly_64 = bigint_mul!(x5333, x5345, 64);
    let x5347: BytePoly_66 = bigint_nondet_quot!(ctx, x5346, x6, 66);
    let x5348: BytePoly_32 = bigint_nondet_rem!(ctx, x5346, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5347, x6, 98), x5348, 98),
            x5346,
            98
        ),
        536459,
        4,
    )?;
    let x5349: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5348, x5339, 32), 32), x6, 32);
    let x5350: BytePoly_32 = bigint_nondet_quot!(ctx, x5349, x6, 32);
    let x5351: BytePoly_32 = bigint_nondet_rem!(ctx, x5349, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5350, x6, 64), x5351, 64),
            x5349,
            64
        ),
        260103,
        4,
    )?;
    let x5352: BytePoly_1 = bigint_nondet_rem!(ctx, x5287, x2, 1);
    let x5353: BytePoly_33 = bigint_nondet_quot!(ctx, x5287, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5353, x2, 34), x5352, 34),
            x5287,
            34
        ),
        268231,
        4,
    )?;
    let x5354: BytePoly_1 = bigint_sub!(x3, x5352, 1);
    eqz(ctx, &bigint_mul!(x5352, x5354, 2), 8131, 2)?;
    let x5355: BytePoly_32 = bigint_add!(bigint_sub!(x5345, x5315, 32), x6, 32);
    let x5356: BytePoly_32 = bigint_nondet_inv!(ctx, x5355, x6, 32);
    let x5357: BytePoly_64 = bigint_mul!(x5355, x5356, 64);
    let x5358: BytePoly_66 = bigint_nondet_quot!(ctx, x5357, x6, 66);
    let x5359: BytePoly_32 = bigint_nondet_rem!(ctx, x5357, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5358, x6, 98), x5359, 98),
            x5357,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5359, x1, 32), 34, 1)?;
    let x5360: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5351, x5317, 32), x6, 32),
        x5356,
        64
    );
    let x5361: BytePoly_66 = bigint_nondet_quot!(ctx, x5360, x6, 66);
    let x5362: BytePoly_32 = bigint_nondet_rem!(ctx, x5360, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5361, x6, 98), x5362, 98),
            x5360,
            98
        ),
        536459,
        4,
    )?;
    let x5363: BytePoly_64 = bigint_mul!(x5362, x5315, 64);
    let x5364: BytePoly_66 = bigint_nondet_quot!(ctx, x5363, x6, 66);
    let x5365: BytePoly_32 = bigint_nondet_rem!(ctx, x5363, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5364, x6, 98), x5365, 98),
            x5363,
            98
        ),
        536459,
        4,
    )?;
    let x5366: BytePoly_32 = bigint_add!(bigint_sub!(x5317, x5365, 32), x6, 32);
    let x5367: BytePoly_32 = bigint_nondet_quot!(ctx, x5366, x6, 32);
    let x5368: BytePoly_32 = bigint_nondet_rem!(ctx, x5366, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5367, x6, 64), x5368, 64),
            x5366,
            64
        ),
        260103,
        4,
    )?;
    let x5369: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5362, x5362, 64), x5315, 64),
                x6,
                64
            ),
            x5345,
            64
        ),
        x6,
        64
    );
    let x5370: BytePoly_66 = bigint_nondet_quot!(ctx, x5369, x6, 66);
    let x5371: BytePoly_32 = bigint_nondet_rem!(ctx, x5369, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5370, x6, 98), x5371, 98),
            x5369,
            98
        ),
        536459,
        4,
    )?;
    let x5372: BytePoly_64 = bigint_mul!(x5362, x5371, 64);
    let x5373: BytePoly_66 = bigint_nondet_quot!(ctx, x5372, x6, 66);
    let x5374: BytePoly_32 = bigint_nondet_rem!(ctx, x5372, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5373, x6, 98), x5374, 98),
            x5372,
            98
        ),
        536459,
        4,
    )?;
    let x5375: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5374, x5368, 32), 32), x6, 32);
    let x5376: BytePoly_32 = bigint_nondet_quot!(ctx, x5375, x6, 32);
    let x5377: BytePoly_32 = bigint_nondet_rem!(ctx, x5375, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5376, x6, 64), x5377, 64),
            x5375,
            64
        ),
        260103,
        4,
    )?;
    let x5378: BytePoly_33 = bigint_add!(
        bigint_mul!(x5371, x5352, 33),
        bigint_mul!(x5315, x5354, 33),
        33
    );
    let x5379: BytePoly_33 = bigint_add!(
        bigint_mul!(x5377, x5352, 33),
        bigint_mul!(x5317, x5354, 33),
        33
    );
    let x5380: BytePoly_35 = bigint_nondet_quot!(ctx, x5378, x6, 35);
    let x5381: BytePoly_32 = bigint_nondet_rem!(ctx, x5378, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5380, x6, 67), x5381, 67),
            x5378,
            67
        ),
        284487,
        4,
    )?;
    let x5382: BytePoly_35 = bigint_nondet_quot!(ctx, x5379, x6, 35);
    let x5383: BytePoly_32 = bigint_nondet_rem!(ctx, x5379, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5382, x6, 67), x5383, 67),
            x5379,
            67
        ),
        284487,
        4,
    )?;
    let x5384: BytePoly_64 = bigint_mul!(x5345, x5345, 64);
    let x5385: BytePoly_66 = bigint_nondet_quot!(ctx, x5384, x6, 66);
    let x5386: BytePoly_32 = bigint_nondet_rem!(ctx, x5384, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5385, x6, 98), x5386, 98),
            x5384,
            98
        ),
        536459,
        4,
    )?;
    let x5387: BytePoly_33 = bigint_add!(bigint_mul!(x5386, x0, 33), x5, 33);
    let x5388: BytePoly_35 = bigint_nondet_quot!(ctx, x5387, x6, 35);
    let x5389: BytePoly_32 = bigint_nondet_rem!(ctx, x5387, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5388, x6, 67), x5389, 67),
            x5387,
            67
        ),
        284487,
        4,
    )?;
    let x5390: BytePoly_32 = bigint_add!(x5351, x5351, 32);
    let x5391: BytePoly_32 = bigint_nondet_quot!(ctx, x5390, x6, 32);
    let x5392: BytePoly_32 = bigint_nondet_rem!(ctx, x5390, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5391, x6, 64), x5392, 64),
            x5390,
            64
        ),
        260103,
        4,
    )?;
    let x5393: BytePoly_32 = bigint_nondet_inv!(ctx, x5392, x6, 32);
    let x5394: BytePoly_64 = bigint_mul!(x5392, x5393, 64);
    let x5395: BytePoly_66 = bigint_nondet_quot!(ctx, x5394, x6, 66);
    let x5396: BytePoly_32 = bigint_nondet_rem!(ctx, x5394, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5395, x6, 98), x5396, 98),
            x5394,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5396, x3, 32), 34, 1)?;
    let x5397: BytePoly_64 = bigint_mul!(x5389, x5393, 64);
    let x5398: BytePoly_66 = bigint_nondet_quot!(ctx, x5397, x6, 66);
    let x5399: BytePoly_32 = bigint_nondet_rem!(ctx, x5397, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5398, x6, 98), x5399, 98),
            x5397,
            98
        ),
        536459,
        4,
    )?;
    let x5400: BytePoly_64 = bigint_mul!(x5399, x5345, 64);
    let x5401: BytePoly_66 = bigint_nondet_quot!(ctx, x5400, x6, 66);
    let x5402: BytePoly_32 = bigint_nondet_rem!(ctx, x5400, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5401, x6, 98), x5402, 98),
            x5400,
            98
        ),
        536459,
        4,
    )?;
    let x5403: BytePoly_32 = bigint_add!(bigint_sub!(x5351, x5402, 32), x6, 32);
    let x5404: BytePoly_32 = bigint_nondet_quot!(ctx, x5403, x6, 32);
    let x5405: BytePoly_32 = bigint_nondet_rem!(ctx, x5403, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5404, x6, 64), x5405, 64),
            x5403,
            64
        ),
        260103,
        4,
    )?;
    let x5406: BytePoly_64 = bigint_mul!(x5399, x5399, 64);
    let x5407: BytePoly_66 = bigint_nondet_quot!(ctx, x5406, x6, 66);
    let x5408: BytePoly_32 = bigint_nondet_rem!(ctx, x5406, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5407, x6, 98), x5408, 98),
            x5406,
            98
        ),
        536459,
        4,
    )?;
    let x5409: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5408, x5345, 32), x6, 32),
            x5345,
            32
        ),
        x6,
        32
    );
    let x5410: BytePoly_32 = bigint_nondet_quot!(ctx, x5409, x6, 32);
    let x5411: BytePoly_32 = bigint_nondet_rem!(ctx, x5409, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5410, x6, 64), x5411, 64),
            x5409,
            64
        ),
        260103,
        4,
    )?;
    let x5412: BytePoly_64 = bigint_mul!(x5399, x5411, 64);
    let x5413: BytePoly_66 = bigint_nondet_quot!(ctx, x5412, x6, 66);
    let x5414: BytePoly_32 = bigint_nondet_rem!(ctx, x5412, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5413, x6, 98), x5414, 98),
            x5412,
            98
        ),
        536459,
        4,
    )?;
    let x5415: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5414, x5405, 32), 32), x6, 32);
    let x5416: BytePoly_32 = bigint_nondet_quot!(ctx, x5415, x6, 32);
    let x5417: BytePoly_32 = bigint_nondet_rem!(ctx, x5415, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5416, x6, 64), x5417, 64),
            x5415,
            64
        ),
        260103,
        4,
    )?;
    let x5418: BytePoly_1 = bigint_nondet_rem!(ctx, x5353, x2, 1);
    let x5419: BytePoly_33 = bigint_nondet_quot!(ctx, x5353, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5419, x2, 34), x5418, 34),
            x5353,
            34
        ),
        268231,
        4,
    )?;
    let x5420: BytePoly_1 = bigint_sub!(x3, x5418, 1);
    eqz(ctx, &bigint_mul!(x5418, x5420, 2), 8131, 2)?;
    let x5421: BytePoly_32 = bigint_add!(bigint_sub!(x5411, x5381, 32), x6, 32);
    let x5422: BytePoly_32 = bigint_nondet_inv!(ctx, x5421, x6, 32);
    let x5423: BytePoly_64 = bigint_mul!(x5421, x5422, 64);
    let x5424: BytePoly_66 = bigint_nondet_quot!(ctx, x5423, x6, 66);
    let x5425: BytePoly_32 = bigint_nondet_rem!(ctx, x5423, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5424, x6, 98), x5425, 98),
            x5423,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5425, x1, 32), 34, 1)?;
    let x5426: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5417, x5383, 32), x6, 32),
        x5422,
        64
    );
    let x5427: BytePoly_66 = bigint_nondet_quot!(ctx, x5426, x6, 66);
    let x5428: BytePoly_32 = bigint_nondet_rem!(ctx, x5426, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5427, x6, 98), x5428, 98),
            x5426,
            98
        ),
        536459,
        4,
    )?;
    let x5429: BytePoly_64 = bigint_mul!(x5428, x5381, 64);
    let x5430: BytePoly_66 = bigint_nondet_quot!(ctx, x5429, x6, 66);
    let x5431: BytePoly_32 = bigint_nondet_rem!(ctx, x5429, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5430, x6, 98), x5431, 98),
            x5429,
            98
        ),
        536459,
        4,
    )?;
    let x5432: BytePoly_32 = bigint_add!(bigint_sub!(x5383, x5431, 32), x6, 32);
    let x5433: BytePoly_32 = bigint_nondet_quot!(ctx, x5432, x6, 32);
    let x5434: BytePoly_32 = bigint_nondet_rem!(ctx, x5432, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5433, x6, 64), x5434, 64),
            x5432,
            64
        ),
        260103,
        4,
    )?;
    let x5435: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5428, x5428, 64), x5381, 64),
                x6,
                64
            ),
            x5411,
            64
        ),
        x6,
        64
    );
    let x5436: BytePoly_66 = bigint_nondet_quot!(ctx, x5435, x6, 66);
    let x5437: BytePoly_32 = bigint_nondet_rem!(ctx, x5435, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5436, x6, 98), x5437, 98),
            x5435,
            98
        ),
        536459,
        4,
    )?;
    let x5438: BytePoly_64 = bigint_mul!(x5428, x5437, 64);
    let x5439: BytePoly_66 = bigint_nondet_quot!(ctx, x5438, x6, 66);
    let x5440: BytePoly_32 = bigint_nondet_rem!(ctx, x5438, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5439, x6, 98), x5440, 98),
            x5438,
            98
        ),
        536459,
        4,
    )?;
    let x5441: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5440, x5434, 32), 32), x6, 32);
    let x5442: BytePoly_32 = bigint_nondet_quot!(ctx, x5441, x6, 32);
    let x5443: BytePoly_32 = bigint_nondet_rem!(ctx, x5441, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5442, x6, 64), x5443, 64),
            x5441,
            64
        ),
        260103,
        4,
    )?;
    let x5444: BytePoly_33 = bigint_add!(
        bigint_mul!(x5437, x5418, 33),
        bigint_mul!(x5381, x5420, 33),
        33
    );
    let x5445: BytePoly_33 = bigint_add!(
        bigint_mul!(x5443, x5418, 33),
        bigint_mul!(x5383, x5420, 33),
        33
    );
    let x5446: BytePoly_35 = bigint_nondet_quot!(ctx, x5444, x6, 35);
    let x5447: BytePoly_32 = bigint_nondet_rem!(ctx, x5444, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5446, x6, 67), x5447, 67),
            x5444,
            67
        ),
        284487,
        4,
    )?;
    let x5448: BytePoly_35 = bigint_nondet_quot!(ctx, x5445, x6, 35);
    let x5449: BytePoly_32 = bigint_nondet_rem!(ctx, x5445, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5448, x6, 67), x5449, 67),
            x5445,
            67
        ),
        284487,
        4,
    )?;
    let x5450: BytePoly_64 = bigint_mul!(x5411, x5411, 64);
    let x5451: BytePoly_66 = bigint_nondet_quot!(ctx, x5450, x6, 66);
    let x5452: BytePoly_32 = bigint_nondet_rem!(ctx, x5450, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5451, x6, 98), x5452, 98),
            x5450,
            98
        ),
        536459,
        4,
    )?;
    let x5453: BytePoly_33 = bigint_add!(bigint_mul!(x5452, x0, 33), x5, 33);
    let x5454: BytePoly_35 = bigint_nondet_quot!(ctx, x5453, x6, 35);
    let x5455: BytePoly_32 = bigint_nondet_rem!(ctx, x5453, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5454, x6, 67), x5455, 67),
            x5453,
            67
        ),
        284487,
        4,
    )?;
    let x5456: BytePoly_32 = bigint_add!(x5417, x5417, 32);
    let x5457: BytePoly_32 = bigint_nondet_quot!(ctx, x5456, x6, 32);
    let x5458: BytePoly_32 = bigint_nondet_rem!(ctx, x5456, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5457, x6, 64), x5458, 64),
            x5456,
            64
        ),
        260103,
        4,
    )?;
    let x5459: BytePoly_32 = bigint_nondet_inv!(ctx, x5458, x6, 32);
    let x5460: BytePoly_64 = bigint_mul!(x5458, x5459, 64);
    let x5461: BytePoly_66 = bigint_nondet_quot!(ctx, x5460, x6, 66);
    let x5462: BytePoly_32 = bigint_nondet_rem!(ctx, x5460, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5461, x6, 98), x5462, 98),
            x5460,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5462, x3, 32), 34, 1)?;
    let x5463: BytePoly_64 = bigint_mul!(x5455, x5459, 64);
    let x5464: BytePoly_66 = bigint_nondet_quot!(ctx, x5463, x6, 66);
    let x5465: BytePoly_32 = bigint_nondet_rem!(ctx, x5463, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5464, x6, 98), x5465, 98),
            x5463,
            98
        ),
        536459,
        4,
    )?;
    let x5466: BytePoly_64 = bigint_mul!(x5465, x5411, 64);
    let x5467: BytePoly_66 = bigint_nondet_quot!(ctx, x5466, x6, 66);
    let x5468: BytePoly_32 = bigint_nondet_rem!(ctx, x5466, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5467, x6, 98), x5468, 98),
            x5466,
            98
        ),
        536459,
        4,
    )?;
    let x5469: BytePoly_32 = bigint_add!(bigint_sub!(x5417, x5468, 32), x6, 32);
    let x5470: BytePoly_32 = bigint_nondet_quot!(ctx, x5469, x6, 32);
    let x5471: BytePoly_32 = bigint_nondet_rem!(ctx, x5469, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5470, x6, 64), x5471, 64),
            x5469,
            64
        ),
        260103,
        4,
    )?;
    let x5472: BytePoly_64 = bigint_mul!(x5465, x5465, 64);
    let x5473: BytePoly_66 = bigint_nondet_quot!(ctx, x5472, x6, 66);
    let x5474: BytePoly_32 = bigint_nondet_rem!(ctx, x5472, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5473, x6, 98), x5474, 98),
            x5472,
            98
        ),
        536459,
        4,
    )?;
    let x5475: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5474, x5411, 32), x6, 32),
            x5411,
            32
        ),
        x6,
        32
    );
    let x5476: BytePoly_32 = bigint_nondet_quot!(ctx, x5475, x6, 32);
    let x5477: BytePoly_32 = bigint_nondet_rem!(ctx, x5475, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5476, x6, 64), x5477, 64),
            x5475,
            64
        ),
        260103,
        4,
    )?;
    let x5478: BytePoly_64 = bigint_mul!(x5465, x5477, 64);
    let x5479: BytePoly_66 = bigint_nondet_quot!(ctx, x5478, x6, 66);
    let x5480: BytePoly_32 = bigint_nondet_rem!(ctx, x5478, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5479, x6, 98), x5480, 98),
            x5478,
            98
        ),
        536459,
        4,
    )?;
    let x5481: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5480, x5471, 32), 32), x6, 32);
    let x5482: BytePoly_32 = bigint_nondet_quot!(ctx, x5481, x6, 32);
    let x5483: BytePoly_32 = bigint_nondet_rem!(ctx, x5481, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5482, x6, 64), x5483, 64),
            x5481,
            64
        ),
        260103,
        4,
    )?;
    let x5484: BytePoly_1 = bigint_nondet_rem!(ctx, x5419, x2, 1);
    let x5485: BytePoly_33 = bigint_nondet_quot!(ctx, x5419, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5485, x2, 34), x5484, 34),
            x5419,
            34
        ),
        268231,
        4,
    )?;
    let x5486: BytePoly_1 = bigint_sub!(x3, x5484, 1);
    eqz(ctx, &bigint_mul!(x5484, x5486, 2), 8131, 2)?;
    let x5487: BytePoly_32 = bigint_add!(bigint_sub!(x5477, x5447, 32), x6, 32);
    let x5488: BytePoly_32 = bigint_nondet_inv!(ctx, x5487, x6, 32);
    let x5489: BytePoly_64 = bigint_mul!(x5487, x5488, 64);
    let x5490: BytePoly_66 = bigint_nondet_quot!(ctx, x5489, x6, 66);
    let x5491: BytePoly_32 = bigint_nondet_rem!(ctx, x5489, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5490, x6, 98), x5491, 98),
            x5489,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5491, x1, 32), 34, 1)?;
    let x5492: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5483, x5449, 32), x6, 32),
        x5488,
        64
    );
    let x5493: BytePoly_66 = bigint_nondet_quot!(ctx, x5492, x6, 66);
    let x5494: BytePoly_32 = bigint_nondet_rem!(ctx, x5492, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5493, x6, 98), x5494, 98),
            x5492,
            98
        ),
        536459,
        4,
    )?;
    let x5495: BytePoly_64 = bigint_mul!(x5494, x5447, 64);
    let x5496: BytePoly_66 = bigint_nondet_quot!(ctx, x5495, x6, 66);
    let x5497: BytePoly_32 = bigint_nondet_rem!(ctx, x5495, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5496, x6, 98), x5497, 98),
            x5495,
            98
        ),
        536459,
        4,
    )?;
    let x5498: BytePoly_32 = bigint_add!(bigint_sub!(x5449, x5497, 32), x6, 32);
    let x5499: BytePoly_32 = bigint_nondet_quot!(ctx, x5498, x6, 32);
    let x5500: BytePoly_32 = bigint_nondet_rem!(ctx, x5498, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5499, x6, 64), x5500, 64),
            x5498,
            64
        ),
        260103,
        4,
    )?;
    let x5501: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5494, x5494, 64), x5447, 64),
                x6,
                64
            ),
            x5477,
            64
        ),
        x6,
        64
    );
    let x5502: BytePoly_66 = bigint_nondet_quot!(ctx, x5501, x6, 66);
    let x5503: BytePoly_32 = bigint_nondet_rem!(ctx, x5501, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5502, x6, 98), x5503, 98),
            x5501,
            98
        ),
        536459,
        4,
    )?;
    let x5504: BytePoly_64 = bigint_mul!(x5494, x5503, 64);
    let x5505: BytePoly_66 = bigint_nondet_quot!(ctx, x5504, x6, 66);
    let x5506: BytePoly_32 = bigint_nondet_rem!(ctx, x5504, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5505, x6, 98), x5506, 98),
            x5504,
            98
        ),
        536459,
        4,
    )?;
    let x5507: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5506, x5500, 32), 32), x6, 32);
    let x5508: BytePoly_32 = bigint_nondet_quot!(ctx, x5507, x6, 32);
    let x5509: BytePoly_32 = bigint_nondet_rem!(ctx, x5507, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5508, x6, 64), x5509, 64),
            x5507,
            64
        ),
        260103,
        4,
    )?;
    let x5510: BytePoly_33 = bigint_add!(
        bigint_mul!(x5503, x5484, 33),
        bigint_mul!(x5447, x5486, 33),
        33
    );
    let x5511: BytePoly_33 = bigint_add!(
        bigint_mul!(x5509, x5484, 33),
        bigint_mul!(x5449, x5486, 33),
        33
    );
    let x5512: BytePoly_35 = bigint_nondet_quot!(ctx, x5510, x6, 35);
    let x5513: BytePoly_32 = bigint_nondet_rem!(ctx, x5510, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5512, x6, 67), x5513, 67),
            x5510,
            67
        ),
        284487,
        4,
    )?;
    let x5514: BytePoly_35 = bigint_nondet_quot!(ctx, x5511, x6, 35);
    let x5515: BytePoly_32 = bigint_nondet_rem!(ctx, x5511, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5514, x6, 67), x5515, 67),
            x5511,
            67
        ),
        284487,
        4,
    )?;
    let x5516: BytePoly_64 = bigint_mul!(x5477, x5477, 64);
    let x5517: BytePoly_66 = bigint_nondet_quot!(ctx, x5516, x6, 66);
    let x5518: BytePoly_32 = bigint_nondet_rem!(ctx, x5516, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5517, x6, 98), x5518, 98),
            x5516,
            98
        ),
        536459,
        4,
    )?;
    let x5519: BytePoly_33 = bigint_add!(bigint_mul!(x5518, x0, 33), x5, 33);
    let x5520: BytePoly_35 = bigint_nondet_quot!(ctx, x5519, x6, 35);
    let x5521: BytePoly_32 = bigint_nondet_rem!(ctx, x5519, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5520, x6, 67), x5521, 67),
            x5519,
            67
        ),
        284487,
        4,
    )?;
    let x5522: BytePoly_32 = bigint_add!(x5483, x5483, 32);
    let x5523: BytePoly_32 = bigint_nondet_quot!(ctx, x5522, x6, 32);
    let x5524: BytePoly_32 = bigint_nondet_rem!(ctx, x5522, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5523, x6, 64), x5524, 64),
            x5522,
            64
        ),
        260103,
        4,
    )?;
    let x5525: BytePoly_32 = bigint_nondet_inv!(ctx, x5524, x6, 32);
    let x5526: BytePoly_64 = bigint_mul!(x5524, x5525, 64);
    let x5527: BytePoly_66 = bigint_nondet_quot!(ctx, x5526, x6, 66);
    let x5528: BytePoly_32 = bigint_nondet_rem!(ctx, x5526, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5527, x6, 98), x5528, 98),
            x5526,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5528, x3, 32), 34, 1)?;
    let x5529: BytePoly_64 = bigint_mul!(x5521, x5525, 64);
    let x5530: BytePoly_66 = bigint_nondet_quot!(ctx, x5529, x6, 66);
    let x5531: BytePoly_32 = bigint_nondet_rem!(ctx, x5529, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5530, x6, 98), x5531, 98),
            x5529,
            98
        ),
        536459,
        4,
    )?;
    let x5532: BytePoly_64 = bigint_mul!(x5531, x5477, 64);
    let x5533: BytePoly_66 = bigint_nondet_quot!(ctx, x5532, x6, 66);
    let x5534: BytePoly_32 = bigint_nondet_rem!(ctx, x5532, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5533, x6, 98), x5534, 98),
            x5532,
            98
        ),
        536459,
        4,
    )?;
    let x5535: BytePoly_32 = bigint_add!(bigint_sub!(x5483, x5534, 32), x6, 32);
    let x5536: BytePoly_32 = bigint_nondet_quot!(ctx, x5535, x6, 32);
    let x5537: BytePoly_32 = bigint_nondet_rem!(ctx, x5535, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5536, x6, 64), x5537, 64),
            x5535,
            64
        ),
        260103,
        4,
    )?;
    let x5538: BytePoly_64 = bigint_mul!(x5531, x5531, 64);
    let x5539: BytePoly_66 = bigint_nondet_quot!(ctx, x5538, x6, 66);
    let x5540: BytePoly_32 = bigint_nondet_rem!(ctx, x5538, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5539, x6, 98), x5540, 98),
            x5538,
            98
        ),
        536459,
        4,
    )?;
    let x5541: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5540, x5477, 32), x6, 32),
            x5477,
            32
        ),
        x6,
        32
    );
    let x5542: BytePoly_32 = bigint_nondet_quot!(ctx, x5541, x6, 32);
    let x5543: BytePoly_32 = bigint_nondet_rem!(ctx, x5541, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5542, x6, 64), x5543, 64),
            x5541,
            64
        ),
        260103,
        4,
    )?;
    let x5544: BytePoly_64 = bigint_mul!(x5531, x5543, 64);
    let x5545: BytePoly_66 = bigint_nondet_quot!(ctx, x5544, x6, 66);
    let x5546: BytePoly_32 = bigint_nondet_rem!(ctx, x5544, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5545, x6, 98), x5546, 98),
            x5544,
            98
        ),
        536459,
        4,
    )?;
    let x5547: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5546, x5537, 32), 32), x6, 32);
    let x5548: BytePoly_32 = bigint_nondet_quot!(ctx, x5547, x6, 32);
    let x5549: BytePoly_32 = bigint_nondet_rem!(ctx, x5547, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5548, x6, 64), x5549, 64),
            x5547,
            64
        ),
        260103,
        4,
    )?;
    let x5550: BytePoly_1 = bigint_nondet_rem!(ctx, x5485, x2, 1);
    let x5551: BytePoly_33 = bigint_nondet_quot!(ctx, x5485, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5551, x2, 34), x5550, 34),
            x5485,
            34
        ),
        268231,
        4,
    )?;
    let x5552: BytePoly_1 = bigint_sub!(x3, x5550, 1);
    eqz(ctx, &bigint_mul!(x5550, x5552, 2), 8131, 2)?;
    let x5553: BytePoly_32 = bigint_add!(bigint_sub!(x5543, x5513, 32), x6, 32);
    let x5554: BytePoly_32 = bigint_nondet_inv!(ctx, x5553, x6, 32);
    let x5555: BytePoly_64 = bigint_mul!(x5553, x5554, 64);
    let x5556: BytePoly_66 = bigint_nondet_quot!(ctx, x5555, x6, 66);
    let x5557: BytePoly_32 = bigint_nondet_rem!(ctx, x5555, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5556, x6, 98), x5557, 98),
            x5555,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5557, x1, 32), 34, 1)?;
    let x5558: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5549, x5515, 32), x6, 32),
        x5554,
        64
    );
    let x5559: BytePoly_66 = bigint_nondet_quot!(ctx, x5558, x6, 66);
    let x5560: BytePoly_32 = bigint_nondet_rem!(ctx, x5558, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5559, x6, 98), x5560, 98),
            x5558,
            98
        ),
        536459,
        4,
    )?;
    let x5561: BytePoly_64 = bigint_mul!(x5560, x5513, 64);
    let x5562: BytePoly_66 = bigint_nondet_quot!(ctx, x5561, x6, 66);
    let x5563: BytePoly_32 = bigint_nondet_rem!(ctx, x5561, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5562, x6, 98), x5563, 98),
            x5561,
            98
        ),
        536459,
        4,
    )?;
    let x5564: BytePoly_32 = bigint_add!(bigint_sub!(x5515, x5563, 32), x6, 32);
    let x5565: BytePoly_32 = bigint_nondet_quot!(ctx, x5564, x6, 32);
    let x5566: BytePoly_32 = bigint_nondet_rem!(ctx, x5564, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5565, x6, 64), x5566, 64),
            x5564,
            64
        ),
        260103,
        4,
    )?;
    let x5567: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5560, x5560, 64), x5513, 64),
                x6,
                64
            ),
            x5543,
            64
        ),
        x6,
        64
    );
    let x5568: BytePoly_66 = bigint_nondet_quot!(ctx, x5567, x6, 66);
    let x5569: BytePoly_32 = bigint_nondet_rem!(ctx, x5567, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5568, x6, 98), x5569, 98),
            x5567,
            98
        ),
        536459,
        4,
    )?;
    let x5570: BytePoly_64 = bigint_mul!(x5560, x5569, 64);
    let x5571: BytePoly_66 = bigint_nondet_quot!(ctx, x5570, x6, 66);
    let x5572: BytePoly_32 = bigint_nondet_rem!(ctx, x5570, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5571, x6, 98), x5572, 98),
            x5570,
            98
        ),
        536459,
        4,
    )?;
    let x5573: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5572, x5566, 32), 32), x6, 32);
    let x5574: BytePoly_32 = bigint_nondet_quot!(ctx, x5573, x6, 32);
    let x5575: BytePoly_32 = bigint_nondet_rem!(ctx, x5573, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5574, x6, 64), x5575, 64),
            x5573,
            64
        ),
        260103,
        4,
    )?;
    let x5576: BytePoly_33 = bigint_add!(
        bigint_mul!(x5569, x5550, 33),
        bigint_mul!(x5513, x5552, 33),
        33
    );
    let x5577: BytePoly_33 = bigint_add!(
        bigint_mul!(x5575, x5550, 33),
        bigint_mul!(x5515, x5552, 33),
        33
    );
    let x5578: BytePoly_35 = bigint_nondet_quot!(ctx, x5576, x6, 35);
    let x5579: BytePoly_32 = bigint_nondet_rem!(ctx, x5576, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5578, x6, 67), x5579, 67),
            x5576,
            67
        ),
        284487,
        4,
    )?;
    let x5580: BytePoly_35 = bigint_nondet_quot!(ctx, x5577, x6, 35);
    let x5581: BytePoly_32 = bigint_nondet_rem!(ctx, x5577, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5580, x6, 67), x5581, 67),
            x5577,
            67
        ),
        284487,
        4,
    )?;
    let x5582: BytePoly_64 = bigint_mul!(x5543, x5543, 64);
    let x5583: BytePoly_66 = bigint_nondet_quot!(ctx, x5582, x6, 66);
    let x5584: BytePoly_32 = bigint_nondet_rem!(ctx, x5582, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5583, x6, 98), x5584, 98),
            x5582,
            98
        ),
        536459,
        4,
    )?;
    let x5585: BytePoly_33 = bigint_add!(bigint_mul!(x5584, x0, 33), x5, 33);
    let x5586: BytePoly_35 = bigint_nondet_quot!(ctx, x5585, x6, 35);
    let x5587: BytePoly_32 = bigint_nondet_rem!(ctx, x5585, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5586, x6, 67), x5587, 67),
            x5585,
            67
        ),
        284487,
        4,
    )?;
    let x5588: BytePoly_32 = bigint_add!(x5549, x5549, 32);
    let x5589: BytePoly_32 = bigint_nondet_quot!(ctx, x5588, x6, 32);
    let x5590: BytePoly_32 = bigint_nondet_rem!(ctx, x5588, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5589, x6, 64), x5590, 64),
            x5588,
            64
        ),
        260103,
        4,
    )?;
    let x5591: BytePoly_32 = bigint_nondet_inv!(ctx, x5590, x6, 32);
    let x5592: BytePoly_64 = bigint_mul!(x5590, x5591, 64);
    let x5593: BytePoly_66 = bigint_nondet_quot!(ctx, x5592, x6, 66);
    let x5594: BytePoly_32 = bigint_nondet_rem!(ctx, x5592, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5593, x6, 98), x5594, 98),
            x5592,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5594, x3, 32), 34, 1)?;
    let x5595: BytePoly_64 = bigint_mul!(x5587, x5591, 64);
    let x5596: BytePoly_66 = bigint_nondet_quot!(ctx, x5595, x6, 66);
    let x5597: BytePoly_32 = bigint_nondet_rem!(ctx, x5595, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5596, x6, 98), x5597, 98),
            x5595,
            98
        ),
        536459,
        4,
    )?;
    let x5598: BytePoly_64 = bigint_mul!(x5597, x5543, 64);
    let x5599: BytePoly_66 = bigint_nondet_quot!(ctx, x5598, x6, 66);
    let x5600: BytePoly_32 = bigint_nondet_rem!(ctx, x5598, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5599, x6, 98), x5600, 98),
            x5598,
            98
        ),
        536459,
        4,
    )?;
    let x5601: BytePoly_32 = bigint_add!(bigint_sub!(x5549, x5600, 32), x6, 32);
    let x5602: BytePoly_32 = bigint_nondet_quot!(ctx, x5601, x6, 32);
    let x5603: BytePoly_32 = bigint_nondet_rem!(ctx, x5601, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5602, x6, 64), x5603, 64),
            x5601,
            64
        ),
        260103,
        4,
    )?;
    let x5604: BytePoly_64 = bigint_mul!(x5597, x5597, 64);
    let x5605: BytePoly_66 = bigint_nondet_quot!(ctx, x5604, x6, 66);
    let x5606: BytePoly_32 = bigint_nondet_rem!(ctx, x5604, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5605, x6, 98), x5606, 98),
            x5604,
            98
        ),
        536459,
        4,
    )?;
    let x5607: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5606, x5543, 32), x6, 32),
            x5543,
            32
        ),
        x6,
        32
    );
    let x5608: BytePoly_32 = bigint_nondet_quot!(ctx, x5607, x6, 32);
    let x5609: BytePoly_32 = bigint_nondet_rem!(ctx, x5607, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5608, x6, 64), x5609, 64),
            x5607,
            64
        ),
        260103,
        4,
    )?;
    let x5610: BytePoly_64 = bigint_mul!(x5597, x5609, 64);
    let x5611: BytePoly_66 = bigint_nondet_quot!(ctx, x5610, x6, 66);
    let x5612: BytePoly_32 = bigint_nondet_rem!(ctx, x5610, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5611, x6, 98), x5612, 98),
            x5610,
            98
        ),
        536459,
        4,
    )?;
    let x5613: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5612, x5603, 32), 32), x6, 32);
    let x5614: BytePoly_32 = bigint_nondet_quot!(ctx, x5613, x6, 32);
    let x5615: BytePoly_32 = bigint_nondet_rem!(ctx, x5613, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5614, x6, 64), x5615, 64),
            x5613,
            64
        ),
        260103,
        4,
    )?;
    let x5616: BytePoly_1 = bigint_nondet_rem!(ctx, x5551, x2, 1);
    let x5617: BytePoly_33 = bigint_nondet_quot!(ctx, x5551, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5617, x2, 34), x5616, 34),
            x5551,
            34
        ),
        268231,
        4,
    )?;
    let x5618: BytePoly_1 = bigint_sub!(x3, x5616, 1);
    eqz(ctx, &bigint_mul!(x5616, x5618, 2), 8131, 2)?;
    let x5619: BytePoly_32 = bigint_add!(bigint_sub!(x5609, x5579, 32), x6, 32);
    let x5620: BytePoly_32 = bigint_nondet_inv!(ctx, x5619, x6, 32);
    let x5621: BytePoly_64 = bigint_mul!(x5619, x5620, 64);
    let x5622: BytePoly_66 = bigint_nondet_quot!(ctx, x5621, x6, 66);
    let x5623: BytePoly_32 = bigint_nondet_rem!(ctx, x5621, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5622, x6, 98), x5623, 98),
            x5621,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5623, x1, 32), 34, 1)?;
    let x5624: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5615, x5581, 32), x6, 32),
        x5620,
        64
    );
    let x5625: BytePoly_66 = bigint_nondet_quot!(ctx, x5624, x6, 66);
    let x5626: BytePoly_32 = bigint_nondet_rem!(ctx, x5624, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5625, x6, 98), x5626, 98),
            x5624,
            98
        ),
        536459,
        4,
    )?;
    let x5627: BytePoly_64 = bigint_mul!(x5626, x5579, 64);
    let x5628: BytePoly_66 = bigint_nondet_quot!(ctx, x5627, x6, 66);
    let x5629: BytePoly_32 = bigint_nondet_rem!(ctx, x5627, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5628, x6, 98), x5629, 98),
            x5627,
            98
        ),
        536459,
        4,
    )?;
    let x5630: BytePoly_32 = bigint_add!(bigint_sub!(x5581, x5629, 32), x6, 32);
    let x5631: BytePoly_32 = bigint_nondet_quot!(ctx, x5630, x6, 32);
    let x5632: BytePoly_32 = bigint_nondet_rem!(ctx, x5630, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5631, x6, 64), x5632, 64),
            x5630,
            64
        ),
        260103,
        4,
    )?;
    let x5633: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5626, x5626, 64), x5579, 64),
                x6,
                64
            ),
            x5609,
            64
        ),
        x6,
        64
    );
    let x5634: BytePoly_66 = bigint_nondet_quot!(ctx, x5633, x6, 66);
    let x5635: BytePoly_32 = bigint_nondet_rem!(ctx, x5633, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5634, x6, 98), x5635, 98),
            x5633,
            98
        ),
        536459,
        4,
    )?;
    let x5636: BytePoly_64 = bigint_mul!(x5626, x5635, 64);
    let x5637: BytePoly_66 = bigint_nondet_quot!(ctx, x5636, x6, 66);
    let x5638: BytePoly_32 = bigint_nondet_rem!(ctx, x5636, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5637, x6, 98), x5638, 98),
            x5636,
            98
        ),
        536459,
        4,
    )?;
    let x5639: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5638, x5632, 32), 32), x6, 32);
    let x5640: BytePoly_32 = bigint_nondet_quot!(ctx, x5639, x6, 32);
    let x5641: BytePoly_32 = bigint_nondet_rem!(ctx, x5639, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5640, x6, 64), x5641, 64),
            x5639,
            64
        ),
        260103,
        4,
    )?;
    let x5642: BytePoly_33 = bigint_add!(
        bigint_mul!(x5635, x5616, 33),
        bigint_mul!(x5579, x5618, 33),
        33
    );
    let x5643: BytePoly_33 = bigint_add!(
        bigint_mul!(x5641, x5616, 33),
        bigint_mul!(x5581, x5618, 33),
        33
    );
    let x5644: BytePoly_35 = bigint_nondet_quot!(ctx, x5642, x6, 35);
    let x5645: BytePoly_32 = bigint_nondet_rem!(ctx, x5642, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5644, x6, 67), x5645, 67),
            x5642,
            67
        ),
        284487,
        4,
    )?;
    let x5646: BytePoly_35 = bigint_nondet_quot!(ctx, x5643, x6, 35);
    let x5647: BytePoly_32 = bigint_nondet_rem!(ctx, x5643, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5646, x6, 67), x5647, 67),
            x5643,
            67
        ),
        284487,
        4,
    )?;
    let x5648: BytePoly_64 = bigint_mul!(x5609, x5609, 64);
    let x5649: BytePoly_66 = bigint_nondet_quot!(ctx, x5648, x6, 66);
    let x5650: BytePoly_32 = bigint_nondet_rem!(ctx, x5648, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5649, x6, 98), x5650, 98),
            x5648,
            98
        ),
        536459,
        4,
    )?;
    let x5651: BytePoly_33 = bigint_add!(bigint_mul!(x5650, x0, 33), x5, 33);
    let x5652: BytePoly_35 = bigint_nondet_quot!(ctx, x5651, x6, 35);
    let x5653: BytePoly_32 = bigint_nondet_rem!(ctx, x5651, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5652, x6, 67), x5653, 67),
            x5651,
            67
        ),
        284487,
        4,
    )?;
    let x5654: BytePoly_32 = bigint_add!(x5615, x5615, 32);
    let x5655: BytePoly_32 = bigint_nondet_quot!(ctx, x5654, x6, 32);
    let x5656: BytePoly_32 = bigint_nondet_rem!(ctx, x5654, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5655, x6, 64), x5656, 64),
            x5654,
            64
        ),
        260103,
        4,
    )?;
    let x5657: BytePoly_32 = bigint_nondet_inv!(ctx, x5656, x6, 32);
    let x5658: BytePoly_64 = bigint_mul!(x5656, x5657, 64);
    let x5659: BytePoly_66 = bigint_nondet_quot!(ctx, x5658, x6, 66);
    let x5660: BytePoly_32 = bigint_nondet_rem!(ctx, x5658, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5659, x6, 98), x5660, 98),
            x5658,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5660, x3, 32), 34, 1)?;
    let x5661: BytePoly_64 = bigint_mul!(x5653, x5657, 64);
    let x5662: BytePoly_66 = bigint_nondet_quot!(ctx, x5661, x6, 66);
    let x5663: BytePoly_32 = bigint_nondet_rem!(ctx, x5661, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5662, x6, 98), x5663, 98),
            x5661,
            98
        ),
        536459,
        4,
    )?;
    let x5664: BytePoly_64 = bigint_mul!(x5663, x5609, 64);
    let x5665: BytePoly_66 = bigint_nondet_quot!(ctx, x5664, x6, 66);
    let x5666: BytePoly_32 = bigint_nondet_rem!(ctx, x5664, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5665, x6, 98), x5666, 98),
            x5664,
            98
        ),
        536459,
        4,
    )?;
    let x5667: BytePoly_32 = bigint_add!(bigint_sub!(x5615, x5666, 32), x6, 32);
    let x5668: BytePoly_32 = bigint_nondet_quot!(ctx, x5667, x6, 32);
    let x5669: BytePoly_32 = bigint_nondet_rem!(ctx, x5667, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5668, x6, 64), x5669, 64),
            x5667,
            64
        ),
        260103,
        4,
    )?;
    let x5670: BytePoly_64 = bigint_mul!(x5663, x5663, 64);
    let x5671: BytePoly_66 = bigint_nondet_quot!(ctx, x5670, x6, 66);
    let x5672: BytePoly_32 = bigint_nondet_rem!(ctx, x5670, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5671, x6, 98), x5672, 98),
            x5670,
            98
        ),
        536459,
        4,
    )?;
    let x5673: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5672, x5609, 32), x6, 32),
            x5609,
            32
        ),
        x6,
        32
    );
    let x5674: BytePoly_32 = bigint_nondet_quot!(ctx, x5673, x6, 32);
    let x5675: BytePoly_32 = bigint_nondet_rem!(ctx, x5673, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5674, x6, 64), x5675, 64),
            x5673,
            64
        ),
        260103,
        4,
    )?;
    let x5676: BytePoly_64 = bigint_mul!(x5663, x5675, 64);
    let x5677: BytePoly_66 = bigint_nondet_quot!(ctx, x5676, x6, 66);
    let x5678: BytePoly_32 = bigint_nondet_rem!(ctx, x5676, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5677, x6, 98), x5678, 98),
            x5676,
            98
        ),
        536459,
        4,
    )?;
    let x5679: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5678, x5669, 32), 32), x6, 32);
    let x5680: BytePoly_32 = bigint_nondet_quot!(ctx, x5679, x6, 32);
    let x5681: BytePoly_32 = bigint_nondet_rem!(ctx, x5679, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5680, x6, 64), x5681, 64),
            x5679,
            64
        ),
        260103,
        4,
    )?;
    let x5682: BytePoly_1 = bigint_nondet_rem!(ctx, x5617, x2, 1);
    let x5683: BytePoly_33 = bigint_nondet_quot!(ctx, x5617, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5683, x2, 34), x5682, 34),
            x5617,
            34
        ),
        268231,
        4,
    )?;
    let x5684: BytePoly_1 = bigint_sub!(x3, x5682, 1);
    eqz(ctx, &bigint_mul!(x5682, x5684, 2), 8131, 2)?;
    let x5685: BytePoly_32 = bigint_add!(bigint_sub!(x5675, x5645, 32), x6, 32);
    let x5686: BytePoly_32 = bigint_nondet_inv!(ctx, x5685, x6, 32);
    let x5687: BytePoly_64 = bigint_mul!(x5685, x5686, 64);
    let x5688: BytePoly_66 = bigint_nondet_quot!(ctx, x5687, x6, 66);
    let x5689: BytePoly_32 = bigint_nondet_rem!(ctx, x5687, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5688, x6, 98), x5689, 98),
            x5687,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5689, x1, 32), 34, 1)?;
    let x5690: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5681, x5647, 32), x6, 32),
        x5686,
        64
    );
    let x5691: BytePoly_66 = bigint_nondet_quot!(ctx, x5690, x6, 66);
    let x5692: BytePoly_32 = bigint_nondet_rem!(ctx, x5690, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5691, x6, 98), x5692, 98),
            x5690,
            98
        ),
        536459,
        4,
    )?;
    let x5693: BytePoly_64 = bigint_mul!(x5692, x5645, 64);
    let x5694: BytePoly_66 = bigint_nondet_quot!(ctx, x5693, x6, 66);
    let x5695: BytePoly_32 = bigint_nondet_rem!(ctx, x5693, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5694, x6, 98), x5695, 98),
            x5693,
            98
        ),
        536459,
        4,
    )?;
    let x5696: BytePoly_32 = bigint_add!(bigint_sub!(x5647, x5695, 32), x6, 32);
    let x5697: BytePoly_32 = bigint_nondet_quot!(ctx, x5696, x6, 32);
    let x5698: BytePoly_32 = bigint_nondet_rem!(ctx, x5696, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5697, x6, 64), x5698, 64),
            x5696,
            64
        ),
        260103,
        4,
    )?;
    let x5699: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5692, x5692, 64), x5645, 64),
                x6,
                64
            ),
            x5675,
            64
        ),
        x6,
        64
    );
    let x5700: BytePoly_66 = bigint_nondet_quot!(ctx, x5699, x6, 66);
    let x5701: BytePoly_32 = bigint_nondet_rem!(ctx, x5699, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5700, x6, 98), x5701, 98),
            x5699,
            98
        ),
        536459,
        4,
    )?;
    let x5702: BytePoly_64 = bigint_mul!(x5692, x5701, 64);
    let x5703: BytePoly_66 = bigint_nondet_quot!(ctx, x5702, x6, 66);
    let x5704: BytePoly_32 = bigint_nondet_rem!(ctx, x5702, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5703, x6, 98), x5704, 98),
            x5702,
            98
        ),
        536459,
        4,
    )?;
    let x5705: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5704, x5698, 32), 32), x6, 32);
    let x5706: BytePoly_32 = bigint_nondet_quot!(ctx, x5705, x6, 32);
    let x5707: BytePoly_32 = bigint_nondet_rem!(ctx, x5705, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5706, x6, 64), x5707, 64),
            x5705,
            64
        ),
        260103,
        4,
    )?;
    let x5708: BytePoly_33 = bigint_add!(
        bigint_mul!(x5701, x5682, 33),
        bigint_mul!(x5645, x5684, 33),
        33
    );
    let x5709: BytePoly_33 = bigint_add!(
        bigint_mul!(x5707, x5682, 33),
        bigint_mul!(x5647, x5684, 33),
        33
    );
    let x5710: BytePoly_35 = bigint_nondet_quot!(ctx, x5708, x6, 35);
    let x5711: BytePoly_32 = bigint_nondet_rem!(ctx, x5708, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5710, x6, 67), x5711, 67),
            x5708,
            67
        ),
        284487,
        4,
    )?;
    let x5712: BytePoly_35 = bigint_nondet_quot!(ctx, x5709, x6, 35);
    let x5713: BytePoly_32 = bigint_nondet_rem!(ctx, x5709, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5712, x6, 67), x5713, 67),
            x5709,
            67
        ),
        284487,
        4,
    )?;
    let x5714: BytePoly_64 = bigint_mul!(x5675, x5675, 64);
    let x5715: BytePoly_66 = bigint_nondet_quot!(ctx, x5714, x6, 66);
    let x5716: BytePoly_32 = bigint_nondet_rem!(ctx, x5714, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5715, x6, 98), x5716, 98),
            x5714,
            98
        ),
        536459,
        4,
    )?;
    let x5717: BytePoly_33 = bigint_add!(bigint_mul!(x5716, x0, 33), x5, 33);
    let x5718: BytePoly_35 = bigint_nondet_quot!(ctx, x5717, x6, 35);
    let x5719: BytePoly_32 = bigint_nondet_rem!(ctx, x5717, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5718, x6, 67), x5719, 67),
            x5717,
            67
        ),
        284487,
        4,
    )?;
    let x5720: BytePoly_32 = bigint_add!(x5681, x5681, 32);
    let x5721: BytePoly_32 = bigint_nondet_quot!(ctx, x5720, x6, 32);
    let x5722: BytePoly_32 = bigint_nondet_rem!(ctx, x5720, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5721, x6, 64), x5722, 64),
            x5720,
            64
        ),
        260103,
        4,
    )?;
    let x5723: BytePoly_32 = bigint_nondet_inv!(ctx, x5722, x6, 32);
    let x5724: BytePoly_64 = bigint_mul!(x5722, x5723, 64);
    let x5725: BytePoly_66 = bigint_nondet_quot!(ctx, x5724, x6, 66);
    let x5726: BytePoly_32 = bigint_nondet_rem!(ctx, x5724, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5725, x6, 98), x5726, 98),
            x5724,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5726, x3, 32), 34, 1)?;
    let x5727: BytePoly_64 = bigint_mul!(x5719, x5723, 64);
    let x5728: BytePoly_66 = bigint_nondet_quot!(ctx, x5727, x6, 66);
    let x5729: BytePoly_32 = bigint_nondet_rem!(ctx, x5727, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5728, x6, 98), x5729, 98),
            x5727,
            98
        ),
        536459,
        4,
    )?;
    let x5730: BytePoly_64 = bigint_mul!(x5729, x5675, 64);
    let x5731: BytePoly_66 = bigint_nondet_quot!(ctx, x5730, x6, 66);
    let x5732: BytePoly_32 = bigint_nondet_rem!(ctx, x5730, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5731, x6, 98), x5732, 98),
            x5730,
            98
        ),
        536459,
        4,
    )?;
    let x5733: BytePoly_32 = bigint_add!(bigint_sub!(x5681, x5732, 32), x6, 32);
    let x5734: BytePoly_32 = bigint_nondet_quot!(ctx, x5733, x6, 32);
    let x5735: BytePoly_32 = bigint_nondet_rem!(ctx, x5733, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5734, x6, 64), x5735, 64),
            x5733,
            64
        ),
        260103,
        4,
    )?;
    let x5736: BytePoly_64 = bigint_mul!(x5729, x5729, 64);
    let x5737: BytePoly_66 = bigint_nondet_quot!(ctx, x5736, x6, 66);
    let x5738: BytePoly_32 = bigint_nondet_rem!(ctx, x5736, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5737, x6, 98), x5738, 98),
            x5736,
            98
        ),
        536459,
        4,
    )?;
    let x5739: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5738, x5675, 32), x6, 32),
            x5675,
            32
        ),
        x6,
        32
    );
    let x5740: BytePoly_32 = bigint_nondet_quot!(ctx, x5739, x6, 32);
    let x5741: BytePoly_32 = bigint_nondet_rem!(ctx, x5739, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5740, x6, 64), x5741, 64),
            x5739,
            64
        ),
        260103,
        4,
    )?;
    let x5742: BytePoly_64 = bigint_mul!(x5729, x5741, 64);
    let x5743: BytePoly_66 = bigint_nondet_quot!(ctx, x5742, x6, 66);
    let x5744: BytePoly_32 = bigint_nondet_rem!(ctx, x5742, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5743, x6, 98), x5744, 98),
            x5742,
            98
        ),
        536459,
        4,
    )?;
    let x5745: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5744, x5735, 32), 32), x6, 32);
    let x5746: BytePoly_32 = bigint_nondet_quot!(ctx, x5745, x6, 32);
    let x5747: BytePoly_32 = bigint_nondet_rem!(ctx, x5745, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5746, x6, 64), x5747, 64),
            x5745,
            64
        ),
        260103,
        4,
    )?;
    let x5748: BytePoly_1 = bigint_nondet_rem!(ctx, x5683, x2, 1);
    let x5749: BytePoly_33 = bigint_nondet_quot!(ctx, x5683, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5749, x2, 34), x5748, 34),
            x5683,
            34
        ),
        268231,
        4,
    )?;
    let x5750: BytePoly_1 = bigint_sub!(x3, x5748, 1);
    eqz(ctx, &bigint_mul!(x5748, x5750, 2), 8131, 2)?;
    let x5751: BytePoly_32 = bigint_add!(bigint_sub!(x5741, x5711, 32), x6, 32);
    let x5752: BytePoly_32 = bigint_nondet_inv!(ctx, x5751, x6, 32);
    let x5753: BytePoly_64 = bigint_mul!(x5751, x5752, 64);
    let x5754: BytePoly_66 = bigint_nondet_quot!(ctx, x5753, x6, 66);
    let x5755: BytePoly_32 = bigint_nondet_rem!(ctx, x5753, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5754, x6, 98), x5755, 98),
            x5753,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5755, x1, 32), 34, 1)?;
    let x5756: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5747, x5713, 32), x6, 32),
        x5752,
        64
    );
    let x5757: BytePoly_66 = bigint_nondet_quot!(ctx, x5756, x6, 66);
    let x5758: BytePoly_32 = bigint_nondet_rem!(ctx, x5756, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5757, x6, 98), x5758, 98),
            x5756,
            98
        ),
        536459,
        4,
    )?;
    let x5759: BytePoly_64 = bigint_mul!(x5758, x5711, 64);
    let x5760: BytePoly_66 = bigint_nondet_quot!(ctx, x5759, x6, 66);
    let x5761: BytePoly_32 = bigint_nondet_rem!(ctx, x5759, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5760, x6, 98), x5761, 98),
            x5759,
            98
        ),
        536459,
        4,
    )?;
    let x5762: BytePoly_32 = bigint_add!(bigint_sub!(x5713, x5761, 32), x6, 32);
    let x5763: BytePoly_32 = bigint_nondet_quot!(ctx, x5762, x6, 32);
    let x5764: BytePoly_32 = bigint_nondet_rem!(ctx, x5762, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5763, x6, 64), x5764, 64),
            x5762,
            64
        ),
        260103,
        4,
    )?;
    let x5765: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5758, x5758, 64), x5711, 64),
                x6,
                64
            ),
            x5741,
            64
        ),
        x6,
        64
    );
    let x5766: BytePoly_66 = bigint_nondet_quot!(ctx, x5765, x6, 66);
    let x5767: BytePoly_32 = bigint_nondet_rem!(ctx, x5765, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5766, x6, 98), x5767, 98),
            x5765,
            98
        ),
        536459,
        4,
    )?;
    let x5768: BytePoly_64 = bigint_mul!(x5758, x5767, 64);
    let x5769: BytePoly_66 = bigint_nondet_quot!(ctx, x5768, x6, 66);
    let x5770: BytePoly_32 = bigint_nondet_rem!(ctx, x5768, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5769, x6, 98), x5770, 98),
            x5768,
            98
        ),
        536459,
        4,
    )?;
    let x5771: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5770, x5764, 32), 32), x6, 32);
    let x5772: BytePoly_32 = bigint_nondet_quot!(ctx, x5771, x6, 32);
    let x5773: BytePoly_32 = bigint_nondet_rem!(ctx, x5771, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5772, x6, 64), x5773, 64),
            x5771,
            64
        ),
        260103,
        4,
    )?;
    let x5774: BytePoly_33 = bigint_add!(
        bigint_mul!(x5767, x5748, 33),
        bigint_mul!(x5711, x5750, 33),
        33
    );
    let x5775: BytePoly_33 = bigint_add!(
        bigint_mul!(x5773, x5748, 33),
        bigint_mul!(x5713, x5750, 33),
        33
    );
    let x5776: BytePoly_35 = bigint_nondet_quot!(ctx, x5774, x6, 35);
    let x5777: BytePoly_32 = bigint_nondet_rem!(ctx, x5774, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5776, x6, 67), x5777, 67),
            x5774,
            67
        ),
        284487,
        4,
    )?;
    let x5778: BytePoly_35 = bigint_nondet_quot!(ctx, x5775, x6, 35);
    let x5779: BytePoly_32 = bigint_nondet_rem!(ctx, x5775, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5778, x6, 67), x5779, 67),
            x5775,
            67
        ),
        284487,
        4,
    )?;
    let x5780: BytePoly_64 = bigint_mul!(x5741, x5741, 64);
    let x5781: BytePoly_66 = bigint_nondet_quot!(ctx, x5780, x6, 66);
    let x5782: BytePoly_32 = bigint_nondet_rem!(ctx, x5780, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5781, x6, 98), x5782, 98),
            x5780,
            98
        ),
        536459,
        4,
    )?;
    let x5783: BytePoly_33 = bigint_add!(bigint_mul!(x5782, x0, 33), x5, 33);
    let x5784: BytePoly_35 = bigint_nondet_quot!(ctx, x5783, x6, 35);
    let x5785: BytePoly_32 = bigint_nondet_rem!(ctx, x5783, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5784, x6, 67), x5785, 67),
            x5783,
            67
        ),
        284487,
        4,
    )?;
    let x5786: BytePoly_32 = bigint_add!(x5747, x5747, 32);
    let x5787: BytePoly_32 = bigint_nondet_quot!(ctx, x5786, x6, 32);
    let x5788: BytePoly_32 = bigint_nondet_rem!(ctx, x5786, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5787, x6, 64), x5788, 64),
            x5786,
            64
        ),
        260103,
        4,
    )?;
    let x5789: BytePoly_32 = bigint_nondet_inv!(ctx, x5788, x6, 32);
    let x5790: BytePoly_64 = bigint_mul!(x5788, x5789, 64);
    let x5791: BytePoly_66 = bigint_nondet_quot!(ctx, x5790, x6, 66);
    let x5792: BytePoly_32 = bigint_nondet_rem!(ctx, x5790, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5791, x6, 98), x5792, 98),
            x5790,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5792, x3, 32), 34, 1)?;
    let x5793: BytePoly_64 = bigint_mul!(x5785, x5789, 64);
    let x5794: BytePoly_66 = bigint_nondet_quot!(ctx, x5793, x6, 66);
    let x5795: BytePoly_32 = bigint_nondet_rem!(ctx, x5793, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5794, x6, 98), x5795, 98),
            x5793,
            98
        ),
        536459,
        4,
    )?;
    let x5796: BytePoly_64 = bigint_mul!(x5795, x5741, 64);
    let x5797: BytePoly_66 = bigint_nondet_quot!(ctx, x5796, x6, 66);
    let x5798: BytePoly_32 = bigint_nondet_rem!(ctx, x5796, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5797, x6, 98), x5798, 98),
            x5796,
            98
        ),
        536459,
        4,
    )?;
    let x5799: BytePoly_32 = bigint_add!(bigint_sub!(x5747, x5798, 32), x6, 32);
    let x5800: BytePoly_32 = bigint_nondet_quot!(ctx, x5799, x6, 32);
    let x5801: BytePoly_32 = bigint_nondet_rem!(ctx, x5799, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5800, x6, 64), x5801, 64),
            x5799,
            64
        ),
        260103,
        4,
    )?;
    let x5802: BytePoly_64 = bigint_mul!(x5795, x5795, 64);
    let x5803: BytePoly_66 = bigint_nondet_quot!(ctx, x5802, x6, 66);
    let x5804: BytePoly_32 = bigint_nondet_rem!(ctx, x5802, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5803, x6, 98), x5804, 98),
            x5802,
            98
        ),
        536459,
        4,
    )?;
    let x5805: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5804, x5741, 32), x6, 32),
            x5741,
            32
        ),
        x6,
        32
    );
    let x5806: BytePoly_32 = bigint_nondet_quot!(ctx, x5805, x6, 32);
    let x5807: BytePoly_32 = bigint_nondet_rem!(ctx, x5805, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5806, x6, 64), x5807, 64),
            x5805,
            64
        ),
        260103,
        4,
    )?;
    let x5808: BytePoly_64 = bigint_mul!(x5795, x5807, 64);
    let x5809: BytePoly_66 = bigint_nondet_quot!(ctx, x5808, x6, 66);
    let x5810: BytePoly_32 = bigint_nondet_rem!(ctx, x5808, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5809, x6, 98), x5810, 98),
            x5808,
            98
        ),
        536459,
        4,
    )?;
    let x5811: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5810, x5801, 32), 32), x6, 32);
    let x5812: BytePoly_32 = bigint_nondet_quot!(ctx, x5811, x6, 32);
    let x5813: BytePoly_32 = bigint_nondet_rem!(ctx, x5811, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5812, x6, 64), x5813, 64),
            x5811,
            64
        ),
        260103,
        4,
    )?;
    let x5814: BytePoly_1 = bigint_nondet_rem!(ctx, x5749, x2, 1);
    let x5815: BytePoly_33 = bigint_nondet_quot!(ctx, x5749, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5815, x2, 34), x5814, 34),
            x5749,
            34
        ),
        268231,
        4,
    )?;
    let x5816: BytePoly_1 = bigint_sub!(x3, x5814, 1);
    eqz(ctx, &bigint_mul!(x5814, x5816, 2), 8131, 2)?;
    let x5817: BytePoly_32 = bigint_add!(bigint_sub!(x5807, x5777, 32), x6, 32);
    let x5818: BytePoly_32 = bigint_nondet_inv!(ctx, x5817, x6, 32);
    let x5819: BytePoly_64 = bigint_mul!(x5817, x5818, 64);
    let x5820: BytePoly_66 = bigint_nondet_quot!(ctx, x5819, x6, 66);
    let x5821: BytePoly_32 = bigint_nondet_rem!(ctx, x5819, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5820, x6, 98), x5821, 98),
            x5819,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5821, x1, 32), 34, 1)?;
    let x5822: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5813, x5779, 32), x6, 32),
        x5818,
        64
    );
    let x5823: BytePoly_66 = bigint_nondet_quot!(ctx, x5822, x6, 66);
    let x5824: BytePoly_32 = bigint_nondet_rem!(ctx, x5822, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5823, x6, 98), x5824, 98),
            x5822,
            98
        ),
        536459,
        4,
    )?;
    let x5825: BytePoly_64 = bigint_mul!(x5824, x5777, 64);
    let x5826: BytePoly_66 = bigint_nondet_quot!(ctx, x5825, x6, 66);
    let x5827: BytePoly_32 = bigint_nondet_rem!(ctx, x5825, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5826, x6, 98), x5827, 98),
            x5825,
            98
        ),
        536459,
        4,
    )?;
    let x5828: BytePoly_32 = bigint_add!(bigint_sub!(x5779, x5827, 32), x6, 32);
    let x5829: BytePoly_32 = bigint_nondet_quot!(ctx, x5828, x6, 32);
    let x5830: BytePoly_32 = bigint_nondet_rem!(ctx, x5828, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5829, x6, 64), x5830, 64),
            x5828,
            64
        ),
        260103,
        4,
    )?;
    let x5831: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5824, x5824, 64), x5777, 64),
                x6,
                64
            ),
            x5807,
            64
        ),
        x6,
        64
    );
    let x5832: BytePoly_66 = bigint_nondet_quot!(ctx, x5831, x6, 66);
    let x5833: BytePoly_32 = bigint_nondet_rem!(ctx, x5831, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5832, x6, 98), x5833, 98),
            x5831,
            98
        ),
        536459,
        4,
    )?;
    let x5834: BytePoly_64 = bigint_mul!(x5824, x5833, 64);
    let x5835: BytePoly_66 = bigint_nondet_quot!(ctx, x5834, x6, 66);
    let x5836: BytePoly_32 = bigint_nondet_rem!(ctx, x5834, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5835, x6, 98), x5836, 98),
            x5834,
            98
        ),
        536459,
        4,
    )?;
    let x5837: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5836, x5830, 32), 32), x6, 32);
    let x5838: BytePoly_32 = bigint_nondet_quot!(ctx, x5837, x6, 32);
    let x5839: BytePoly_32 = bigint_nondet_rem!(ctx, x5837, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5838, x6, 64), x5839, 64),
            x5837,
            64
        ),
        260103,
        4,
    )?;
    let x5840: BytePoly_33 = bigint_add!(
        bigint_mul!(x5833, x5814, 33),
        bigint_mul!(x5777, x5816, 33),
        33
    );
    let x5841: BytePoly_33 = bigint_add!(
        bigint_mul!(x5839, x5814, 33),
        bigint_mul!(x5779, x5816, 33),
        33
    );
    let x5842: BytePoly_35 = bigint_nondet_quot!(ctx, x5840, x6, 35);
    let x5843: BytePoly_32 = bigint_nondet_rem!(ctx, x5840, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5842, x6, 67), x5843, 67),
            x5840,
            67
        ),
        284487,
        4,
    )?;
    let x5844: BytePoly_35 = bigint_nondet_quot!(ctx, x5841, x6, 35);
    let x5845: BytePoly_32 = bigint_nondet_rem!(ctx, x5841, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5844, x6, 67), x5845, 67),
            x5841,
            67
        ),
        284487,
        4,
    )?;
    let x5846: BytePoly_64 = bigint_mul!(x5807, x5807, 64);
    let x5847: BytePoly_66 = bigint_nondet_quot!(ctx, x5846, x6, 66);
    let x5848: BytePoly_32 = bigint_nondet_rem!(ctx, x5846, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5847, x6, 98), x5848, 98),
            x5846,
            98
        ),
        536459,
        4,
    )?;
    let x5849: BytePoly_33 = bigint_add!(bigint_mul!(x5848, x0, 33), x5, 33);
    let x5850: BytePoly_35 = bigint_nondet_quot!(ctx, x5849, x6, 35);
    let x5851: BytePoly_32 = bigint_nondet_rem!(ctx, x5849, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5850, x6, 67), x5851, 67),
            x5849,
            67
        ),
        284487,
        4,
    )?;
    let x5852: BytePoly_32 = bigint_add!(x5813, x5813, 32);
    let x5853: BytePoly_32 = bigint_nondet_quot!(ctx, x5852, x6, 32);
    let x5854: BytePoly_32 = bigint_nondet_rem!(ctx, x5852, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5853, x6, 64), x5854, 64),
            x5852,
            64
        ),
        260103,
        4,
    )?;
    let x5855: BytePoly_32 = bigint_nondet_inv!(ctx, x5854, x6, 32);
    let x5856: BytePoly_64 = bigint_mul!(x5854, x5855, 64);
    let x5857: BytePoly_66 = bigint_nondet_quot!(ctx, x5856, x6, 66);
    let x5858: BytePoly_32 = bigint_nondet_rem!(ctx, x5856, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5857, x6, 98), x5858, 98),
            x5856,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5858, x3, 32), 34, 1)?;
    let x5859: BytePoly_64 = bigint_mul!(x5851, x5855, 64);
    let x5860: BytePoly_66 = bigint_nondet_quot!(ctx, x5859, x6, 66);
    let x5861: BytePoly_32 = bigint_nondet_rem!(ctx, x5859, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5860, x6, 98), x5861, 98),
            x5859,
            98
        ),
        536459,
        4,
    )?;
    let x5862: BytePoly_64 = bigint_mul!(x5861, x5807, 64);
    let x5863: BytePoly_66 = bigint_nondet_quot!(ctx, x5862, x6, 66);
    let x5864: BytePoly_32 = bigint_nondet_rem!(ctx, x5862, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5863, x6, 98), x5864, 98),
            x5862,
            98
        ),
        536459,
        4,
    )?;
    let x5865: BytePoly_32 = bigint_add!(bigint_sub!(x5813, x5864, 32), x6, 32);
    let x5866: BytePoly_32 = bigint_nondet_quot!(ctx, x5865, x6, 32);
    let x5867: BytePoly_32 = bigint_nondet_rem!(ctx, x5865, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5866, x6, 64), x5867, 64),
            x5865,
            64
        ),
        260103,
        4,
    )?;
    let x5868: BytePoly_64 = bigint_mul!(x5861, x5861, 64);
    let x5869: BytePoly_66 = bigint_nondet_quot!(ctx, x5868, x6, 66);
    let x5870: BytePoly_32 = bigint_nondet_rem!(ctx, x5868, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5869, x6, 98), x5870, 98),
            x5868,
            98
        ),
        536459,
        4,
    )?;
    let x5871: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5870, x5807, 32), x6, 32),
            x5807,
            32
        ),
        x6,
        32
    );
    let x5872: BytePoly_32 = bigint_nondet_quot!(ctx, x5871, x6, 32);
    let x5873: BytePoly_32 = bigint_nondet_rem!(ctx, x5871, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5872, x6, 64), x5873, 64),
            x5871,
            64
        ),
        260103,
        4,
    )?;
    let x5874: BytePoly_64 = bigint_mul!(x5861, x5873, 64);
    let x5875: BytePoly_66 = bigint_nondet_quot!(ctx, x5874, x6, 66);
    let x5876: BytePoly_32 = bigint_nondet_rem!(ctx, x5874, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5875, x6, 98), x5876, 98),
            x5874,
            98
        ),
        536459,
        4,
    )?;
    let x5877: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5876, x5867, 32), 32), x6, 32);
    let x5878: BytePoly_32 = bigint_nondet_quot!(ctx, x5877, x6, 32);
    let x5879: BytePoly_32 = bigint_nondet_rem!(ctx, x5877, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5878, x6, 64), x5879, 64),
            x5877,
            64
        ),
        260103,
        4,
    )?;
    let x5880: BytePoly_1 = bigint_nondet_rem!(ctx, x5815, x2, 1);
    let x5881: BytePoly_33 = bigint_nondet_quot!(ctx, x5815, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5881, x2, 34), x5880, 34),
            x5815,
            34
        ),
        268231,
        4,
    )?;
    let x5882: BytePoly_1 = bigint_sub!(x3, x5880, 1);
    eqz(ctx, &bigint_mul!(x5880, x5882, 2), 8131, 2)?;
    let x5883: BytePoly_32 = bigint_add!(bigint_sub!(x5873, x5843, 32), x6, 32);
    let x5884: BytePoly_32 = bigint_nondet_inv!(ctx, x5883, x6, 32);
    let x5885: BytePoly_64 = bigint_mul!(x5883, x5884, 64);
    let x5886: BytePoly_66 = bigint_nondet_quot!(ctx, x5885, x6, 66);
    let x5887: BytePoly_32 = bigint_nondet_rem!(ctx, x5885, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5886, x6, 98), x5887, 98),
            x5885,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5887, x1, 32), 34, 1)?;
    let x5888: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5879, x5845, 32), x6, 32),
        x5884,
        64
    );
    let x5889: BytePoly_66 = bigint_nondet_quot!(ctx, x5888, x6, 66);
    let x5890: BytePoly_32 = bigint_nondet_rem!(ctx, x5888, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5889, x6, 98), x5890, 98),
            x5888,
            98
        ),
        536459,
        4,
    )?;
    let x5891: BytePoly_64 = bigint_mul!(x5890, x5843, 64);
    let x5892: BytePoly_66 = bigint_nondet_quot!(ctx, x5891, x6, 66);
    let x5893: BytePoly_32 = bigint_nondet_rem!(ctx, x5891, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5892, x6, 98), x5893, 98),
            x5891,
            98
        ),
        536459,
        4,
    )?;
    let x5894: BytePoly_32 = bigint_add!(bigint_sub!(x5845, x5893, 32), x6, 32);
    let x5895: BytePoly_32 = bigint_nondet_quot!(ctx, x5894, x6, 32);
    let x5896: BytePoly_32 = bigint_nondet_rem!(ctx, x5894, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5895, x6, 64), x5896, 64),
            x5894,
            64
        ),
        260103,
        4,
    )?;
    let x5897: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5890, x5890, 64), x5843, 64),
                x6,
                64
            ),
            x5873,
            64
        ),
        x6,
        64
    );
    let x5898: BytePoly_66 = bigint_nondet_quot!(ctx, x5897, x6, 66);
    let x5899: BytePoly_32 = bigint_nondet_rem!(ctx, x5897, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5898, x6, 98), x5899, 98),
            x5897,
            98
        ),
        536459,
        4,
    )?;
    let x5900: BytePoly_64 = bigint_mul!(x5890, x5899, 64);
    let x5901: BytePoly_66 = bigint_nondet_quot!(ctx, x5900, x6, 66);
    let x5902: BytePoly_32 = bigint_nondet_rem!(ctx, x5900, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5901, x6, 98), x5902, 98),
            x5900,
            98
        ),
        536459,
        4,
    )?;
    let x5903: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5902, x5896, 32), 32), x6, 32);
    let x5904: BytePoly_32 = bigint_nondet_quot!(ctx, x5903, x6, 32);
    let x5905: BytePoly_32 = bigint_nondet_rem!(ctx, x5903, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5904, x6, 64), x5905, 64),
            x5903,
            64
        ),
        260103,
        4,
    )?;
    let x5906: BytePoly_33 = bigint_add!(
        bigint_mul!(x5899, x5880, 33),
        bigint_mul!(x5843, x5882, 33),
        33
    );
    let x5907: BytePoly_33 = bigint_add!(
        bigint_mul!(x5905, x5880, 33),
        bigint_mul!(x5845, x5882, 33),
        33
    );
    let x5908: BytePoly_35 = bigint_nondet_quot!(ctx, x5906, x6, 35);
    let x5909: BytePoly_32 = bigint_nondet_rem!(ctx, x5906, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5908, x6, 67), x5909, 67),
            x5906,
            67
        ),
        284487,
        4,
    )?;
    let x5910: BytePoly_35 = bigint_nondet_quot!(ctx, x5907, x6, 35);
    let x5911: BytePoly_32 = bigint_nondet_rem!(ctx, x5907, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5910, x6, 67), x5911, 67),
            x5907,
            67
        ),
        284487,
        4,
    )?;
    let x5912: BytePoly_64 = bigint_mul!(x5873, x5873, 64);
    let x5913: BytePoly_66 = bigint_nondet_quot!(ctx, x5912, x6, 66);
    let x5914: BytePoly_32 = bigint_nondet_rem!(ctx, x5912, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5913, x6, 98), x5914, 98),
            x5912,
            98
        ),
        536459,
        4,
    )?;
    let x5915: BytePoly_33 = bigint_add!(bigint_mul!(x5914, x0, 33), x5, 33);
    let x5916: BytePoly_35 = bigint_nondet_quot!(ctx, x5915, x6, 35);
    let x5917: BytePoly_32 = bigint_nondet_rem!(ctx, x5915, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5916, x6, 67), x5917, 67),
            x5915,
            67
        ),
        284487,
        4,
    )?;
    let x5918: BytePoly_32 = bigint_add!(x5879, x5879, 32);
    let x5919: BytePoly_32 = bigint_nondet_quot!(ctx, x5918, x6, 32);
    let x5920: BytePoly_32 = bigint_nondet_rem!(ctx, x5918, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5919, x6, 64), x5920, 64),
            x5918,
            64
        ),
        260103,
        4,
    )?;
    let x5921: BytePoly_32 = bigint_nondet_inv!(ctx, x5920, x6, 32);
    let x5922: BytePoly_64 = bigint_mul!(x5920, x5921, 64);
    let x5923: BytePoly_66 = bigint_nondet_quot!(ctx, x5922, x6, 66);
    let x5924: BytePoly_32 = bigint_nondet_rem!(ctx, x5922, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5923, x6, 98), x5924, 98),
            x5922,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5924, x3, 32), 34, 1)?;
    let x5925: BytePoly_64 = bigint_mul!(x5917, x5921, 64);
    let x5926: BytePoly_66 = bigint_nondet_quot!(ctx, x5925, x6, 66);
    let x5927: BytePoly_32 = bigint_nondet_rem!(ctx, x5925, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5926, x6, 98), x5927, 98),
            x5925,
            98
        ),
        536459,
        4,
    )?;
    let x5928: BytePoly_64 = bigint_mul!(x5927, x5873, 64);
    let x5929: BytePoly_66 = bigint_nondet_quot!(ctx, x5928, x6, 66);
    let x5930: BytePoly_32 = bigint_nondet_rem!(ctx, x5928, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5929, x6, 98), x5930, 98),
            x5928,
            98
        ),
        536459,
        4,
    )?;
    let x5931: BytePoly_32 = bigint_add!(bigint_sub!(x5879, x5930, 32), x6, 32);
    let x5932: BytePoly_32 = bigint_nondet_quot!(ctx, x5931, x6, 32);
    let x5933: BytePoly_32 = bigint_nondet_rem!(ctx, x5931, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5932, x6, 64), x5933, 64),
            x5931,
            64
        ),
        260103,
        4,
    )?;
    let x5934: BytePoly_64 = bigint_mul!(x5927, x5927, 64);
    let x5935: BytePoly_66 = bigint_nondet_quot!(ctx, x5934, x6, 66);
    let x5936: BytePoly_32 = bigint_nondet_rem!(ctx, x5934, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5935, x6, 98), x5936, 98),
            x5934,
            98
        ),
        536459,
        4,
    )?;
    let x5937: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x5936, x5873, 32), x6, 32),
            x5873,
            32
        ),
        x6,
        32
    );
    let x5938: BytePoly_32 = bigint_nondet_quot!(ctx, x5937, x6, 32);
    let x5939: BytePoly_32 = bigint_nondet_rem!(ctx, x5937, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5938, x6, 64), x5939, 64),
            x5937,
            64
        ),
        260103,
        4,
    )?;
    let x5940: BytePoly_64 = bigint_mul!(x5927, x5939, 64);
    let x5941: BytePoly_66 = bigint_nondet_quot!(ctx, x5940, x6, 66);
    let x5942: BytePoly_32 = bigint_nondet_rem!(ctx, x5940, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5941, x6, 98), x5942, 98),
            x5940,
            98
        ),
        536459,
        4,
    )?;
    let x5943: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5942, x5933, 32), 32), x6, 32);
    let x5944: BytePoly_32 = bigint_nondet_quot!(ctx, x5943, x6, 32);
    let x5945: BytePoly_32 = bigint_nondet_rem!(ctx, x5943, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5944, x6, 64), x5945, 64),
            x5943,
            64
        ),
        260103,
        4,
    )?;
    let x5946: BytePoly_1 = bigint_nondet_rem!(ctx, x5881, x2, 1);
    let x5947: BytePoly_33 = bigint_nondet_quot!(ctx, x5881, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5947, x2, 34), x5946, 34),
            x5881,
            34
        ),
        268231,
        4,
    )?;
    let x5948: BytePoly_1 = bigint_sub!(x3, x5946, 1);
    eqz(ctx, &bigint_mul!(x5946, x5948, 2), 8131, 2)?;
    let x5949: BytePoly_32 = bigint_add!(bigint_sub!(x5939, x5909, 32), x6, 32);
    let x5950: BytePoly_32 = bigint_nondet_inv!(ctx, x5949, x6, 32);
    let x5951: BytePoly_64 = bigint_mul!(x5949, x5950, 64);
    let x5952: BytePoly_66 = bigint_nondet_quot!(ctx, x5951, x6, 66);
    let x5953: BytePoly_32 = bigint_nondet_rem!(ctx, x5951, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5952, x6, 98), x5953, 98),
            x5951,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5953, x1, 32), 34, 1)?;
    let x5954: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x5945, x5911, 32), x6, 32),
        x5950,
        64
    );
    let x5955: BytePoly_66 = bigint_nondet_quot!(ctx, x5954, x6, 66);
    let x5956: BytePoly_32 = bigint_nondet_rem!(ctx, x5954, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5955, x6, 98), x5956, 98),
            x5954,
            98
        ),
        536459,
        4,
    )?;
    let x5957: BytePoly_64 = bigint_mul!(x5956, x5909, 64);
    let x5958: BytePoly_66 = bigint_nondet_quot!(ctx, x5957, x6, 66);
    let x5959: BytePoly_32 = bigint_nondet_rem!(ctx, x5957, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5958, x6, 98), x5959, 98),
            x5957,
            98
        ),
        536459,
        4,
    )?;
    let x5960: BytePoly_32 = bigint_add!(bigint_sub!(x5911, x5959, 32), x6, 32);
    let x5961: BytePoly_32 = bigint_nondet_quot!(ctx, x5960, x6, 32);
    let x5962: BytePoly_32 = bigint_nondet_rem!(ctx, x5960, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5961, x6, 64), x5962, 64),
            x5960,
            64
        ),
        260103,
        4,
    )?;
    let x5963: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x5956, x5956, 64), x5909, 64),
                x6,
                64
            ),
            x5939,
            64
        ),
        x6,
        64
    );
    let x5964: BytePoly_66 = bigint_nondet_quot!(ctx, x5963, x6, 66);
    let x5965: BytePoly_32 = bigint_nondet_rem!(ctx, x5963, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5964, x6, 98), x5965, 98),
            x5963,
            98
        ),
        536459,
        4,
    )?;
    let x5966: BytePoly_64 = bigint_mul!(x5956, x5965, 64);
    let x5967: BytePoly_66 = bigint_nondet_quot!(ctx, x5966, x6, 66);
    let x5968: BytePoly_32 = bigint_nondet_rem!(ctx, x5966, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5967, x6, 98), x5968, 98),
            x5966,
            98
        ),
        536459,
        4,
    )?;
    let x5969: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x5968, x5962, 32), 32), x6, 32);
    let x5970: BytePoly_32 = bigint_nondet_quot!(ctx, x5969, x6, 32);
    let x5971: BytePoly_32 = bigint_nondet_rem!(ctx, x5969, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5970, x6, 64), x5971, 64),
            x5969,
            64
        ),
        260103,
        4,
    )?;
    let x5972: BytePoly_33 = bigint_add!(
        bigint_mul!(x5965, x5946, 33),
        bigint_mul!(x5909, x5948, 33),
        33
    );
    let x5973: BytePoly_33 = bigint_add!(
        bigint_mul!(x5971, x5946, 33),
        bigint_mul!(x5911, x5948, 33),
        33
    );
    let x5974: BytePoly_35 = bigint_nondet_quot!(ctx, x5972, x6, 35);
    let x5975: BytePoly_32 = bigint_nondet_rem!(ctx, x5972, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5974, x6, 67), x5975, 67),
            x5972,
            67
        ),
        284487,
        4,
    )?;
    let x5976: BytePoly_35 = bigint_nondet_quot!(ctx, x5973, x6, 35);
    let x5977: BytePoly_32 = bigint_nondet_rem!(ctx, x5973, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5976, x6, 67), x5977, 67),
            x5973,
            67
        ),
        284487,
        4,
    )?;
    let x5978: BytePoly_64 = bigint_mul!(x5939, x5939, 64);
    let x5979: BytePoly_66 = bigint_nondet_quot!(ctx, x5978, x6, 66);
    let x5980: BytePoly_32 = bigint_nondet_rem!(ctx, x5978, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5979, x6, 98), x5980, 98),
            x5978,
            98
        ),
        536459,
        4,
    )?;
    let x5981: BytePoly_33 = bigint_add!(bigint_mul!(x5980, x0, 33), x5, 33);
    let x5982: BytePoly_35 = bigint_nondet_quot!(ctx, x5981, x6, 35);
    let x5983: BytePoly_32 = bigint_nondet_rem!(ctx, x5981, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5982, x6, 67), x5983, 67),
            x5981,
            67
        ),
        284487,
        4,
    )?;
    let x5984: BytePoly_32 = bigint_add!(x5945, x5945, 32);
    let x5985: BytePoly_32 = bigint_nondet_quot!(ctx, x5984, x6, 32);
    let x5986: BytePoly_32 = bigint_nondet_rem!(ctx, x5984, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5985, x6, 64), x5986, 64),
            x5984,
            64
        ),
        260103,
        4,
    )?;
    let x5987: BytePoly_32 = bigint_nondet_inv!(ctx, x5986, x6, 32);
    let x5988: BytePoly_64 = bigint_mul!(x5986, x5987, 64);
    let x5989: BytePoly_66 = bigint_nondet_quot!(ctx, x5988, x6, 66);
    let x5990: BytePoly_32 = bigint_nondet_rem!(ctx, x5988, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5989, x6, 98), x5990, 98),
            x5988,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x5990, x3, 32), 34, 1)?;
    let x5991: BytePoly_64 = bigint_mul!(x5983, x5987, 64);
    let x5992: BytePoly_66 = bigint_nondet_quot!(ctx, x5991, x6, 66);
    let x5993: BytePoly_32 = bigint_nondet_rem!(ctx, x5991, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5992, x6, 98), x5993, 98),
            x5991,
            98
        ),
        536459,
        4,
    )?;
    let x5994: BytePoly_64 = bigint_mul!(x5993, x5939, 64);
    let x5995: BytePoly_66 = bigint_nondet_quot!(ctx, x5994, x6, 66);
    let x5996: BytePoly_32 = bigint_nondet_rem!(ctx, x5994, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5995, x6, 98), x5996, 98),
            x5994,
            98
        ),
        536459,
        4,
    )?;
    let x5997: BytePoly_32 = bigint_add!(bigint_sub!(x5945, x5996, 32), x6, 32);
    let x5998: BytePoly_32 = bigint_nondet_quot!(ctx, x5997, x6, 32);
    let x5999: BytePoly_32 = bigint_nondet_rem!(ctx, x5997, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x5998, x6, 64), x5999, 64),
            x5997,
            64
        ),
        260103,
        4,
    )?;
    let x6000: BytePoly_64 = bigint_mul!(x5993, x5993, 64);
    let x6001: BytePoly_66 = bigint_nondet_quot!(ctx, x6000, x6, 66);
    let x6002: BytePoly_32 = bigint_nondet_rem!(ctx, x6000, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6001, x6, 98), x6002, 98),
            x6000,
            98
        ),
        536459,
        4,
    )?;
    let x6003: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6002, x5939, 32), x6, 32),
            x5939,
            32
        ),
        x6,
        32
    );
    let x6004: BytePoly_32 = bigint_nondet_quot!(ctx, x6003, x6, 32);
    let x6005: BytePoly_32 = bigint_nondet_rem!(ctx, x6003, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6004, x6, 64), x6005, 64),
            x6003,
            64
        ),
        260103,
        4,
    )?;
    let x6006: BytePoly_64 = bigint_mul!(x5993, x6005, 64);
    let x6007: BytePoly_66 = bigint_nondet_quot!(ctx, x6006, x6, 66);
    let x6008: BytePoly_32 = bigint_nondet_rem!(ctx, x6006, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6007, x6, 98), x6008, 98),
            x6006,
            98
        ),
        536459,
        4,
    )?;
    let x6009: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6008, x5999, 32), 32), x6, 32);
    let x6010: BytePoly_32 = bigint_nondet_quot!(ctx, x6009, x6, 32);
    let x6011: BytePoly_32 = bigint_nondet_rem!(ctx, x6009, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6010, x6, 64), x6011, 64),
            x6009,
            64
        ),
        260103,
        4,
    )?;
    let x6012: BytePoly_1 = bigint_nondet_rem!(ctx, x5947, x2, 1);
    let x6013: BytePoly_33 = bigint_nondet_quot!(ctx, x5947, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6013, x2, 34), x6012, 34),
            x5947,
            34
        ),
        268231,
        4,
    )?;
    let x6014: BytePoly_1 = bigint_sub!(x3, x6012, 1);
    eqz(ctx, &bigint_mul!(x6012, x6014, 2), 8131, 2)?;
    let x6015: BytePoly_32 = bigint_add!(bigint_sub!(x6005, x5975, 32), x6, 32);
    let x6016: BytePoly_32 = bigint_nondet_inv!(ctx, x6015, x6, 32);
    let x6017: BytePoly_64 = bigint_mul!(x6015, x6016, 64);
    let x6018: BytePoly_66 = bigint_nondet_quot!(ctx, x6017, x6, 66);
    let x6019: BytePoly_32 = bigint_nondet_rem!(ctx, x6017, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6018, x6, 98), x6019, 98),
            x6017,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6019, x1, 32), 34, 1)?;
    let x6020: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6011, x5977, 32), x6, 32),
        x6016,
        64
    );
    let x6021: BytePoly_66 = bigint_nondet_quot!(ctx, x6020, x6, 66);
    let x6022: BytePoly_32 = bigint_nondet_rem!(ctx, x6020, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6021, x6, 98), x6022, 98),
            x6020,
            98
        ),
        536459,
        4,
    )?;
    let x6023: BytePoly_64 = bigint_mul!(x6022, x5975, 64);
    let x6024: BytePoly_66 = bigint_nondet_quot!(ctx, x6023, x6, 66);
    let x6025: BytePoly_32 = bigint_nondet_rem!(ctx, x6023, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6024, x6, 98), x6025, 98),
            x6023,
            98
        ),
        536459,
        4,
    )?;
    let x6026: BytePoly_32 = bigint_add!(bigint_sub!(x5977, x6025, 32), x6, 32);
    let x6027: BytePoly_32 = bigint_nondet_quot!(ctx, x6026, x6, 32);
    let x6028: BytePoly_32 = bigint_nondet_rem!(ctx, x6026, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6027, x6, 64), x6028, 64),
            x6026,
            64
        ),
        260103,
        4,
    )?;
    let x6029: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6022, x6022, 64), x5975, 64),
                x6,
                64
            ),
            x6005,
            64
        ),
        x6,
        64
    );
    let x6030: BytePoly_66 = bigint_nondet_quot!(ctx, x6029, x6, 66);
    let x6031: BytePoly_32 = bigint_nondet_rem!(ctx, x6029, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6030, x6, 98), x6031, 98),
            x6029,
            98
        ),
        536459,
        4,
    )?;
    let x6032: BytePoly_64 = bigint_mul!(x6022, x6031, 64);
    let x6033: BytePoly_66 = bigint_nondet_quot!(ctx, x6032, x6, 66);
    let x6034: BytePoly_32 = bigint_nondet_rem!(ctx, x6032, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6033, x6, 98), x6034, 98),
            x6032,
            98
        ),
        536459,
        4,
    )?;
    let x6035: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6034, x6028, 32), 32), x6, 32);
    let x6036: BytePoly_32 = bigint_nondet_quot!(ctx, x6035, x6, 32);
    let x6037: BytePoly_32 = bigint_nondet_rem!(ctx, x6035, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6036, x6, 64), x6037, 64),
            x6035,
            64
        ),
        260103,
        4,
    )?;
    let x6038: BytePoly_33 = bigint_add!(
        bigint_mul!(x6031, x6012, 33),
        bigint_mul!(x5975, x6014, 33),
        33
    );
    let x6039: BytePoly_33 = bigint_add!(
        bigint_mul!(x6037, x6012, 33),
        bigint_mul!(x5977, x6014, 33),
        33
    );
    let x6040: BytePoly_35 = bigint_nondet_quot!(ctx, x6038, x6, 35);
    let x6041: BytePoly_32 = bigint_nondet_rem!(ctx, x6038, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6040, x6, 67), x6041, 67),
            x6038,
            67
        ),
        284487,
        4,
    )?;
    let x6042: BytePoly_35 = bigint_nondet_quot!(ctx, x6039, x6, 35);
    let x6043: BytePoly_32 = bigint_nondet_rem!(ctx, x6039, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6042, x6, 67), x6043, 67),
            x6039,
            67
        ),
        284487,
        4,
    )?;
    let x6044: BytePoly_64 = bigint_mul!(x6005, x6005, 64);
    let x6045: BytePoly_66 = bigint_nondet_quot!(ctx, x6044, x6, 66);
    let x6046: BytePoly_32 = bigint_nondet_rem!(ctx, x6044, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6045, x6, 98), x6046, 98),
            x6044,
            98
        ),
        536459,
        4,
    )?;
    let x6047: BytePoly_33 = bigint_add!(bigint_mul!(x6046, x0, 33), x5, 33);
    let x6048: BytePoly_35 = bigint_nondet_quot!(ctx, x6047, x6, 35);
    let x6049: BytePoly_32 = bigint_nondet_rem!(ctx, x6047, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6048, x6, 67), x6049, 67),
            x6047,
            67
        ),
        284487,
        4,
    )?;
    let x6050: BytePoly_32 = bigint_add!(x6011, x6011, 32);
    let x6051: BytePoly_32 = bigint_nondet_quot!(ctx, x6050, x6, 32);
    let x6052: BytePoly_32 = bigint_nondet_rem!(ctx, x6050, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6051, x6, 64), x6052, 64),
            x6050,
            64
        ),
        260103,
        4,
    )?;
    let x6053: BytePoly_32 = bigint_nondet_inv!(ctx, x6052, x6, 32);
    let x6054: BytePoly_64 = bigint_mul!(x6052, x6053, 64);
    let x6055: BytePoly_66 = bigint_nondet_quot!(ctx, x6054, x6, 66);
    let x6056: BytePoly_32 = bigint_nondet_rem!(ctx, x6054, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6055, x6, 98), x6056, 98),
            x6054,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6056, x3, 32), 34, 1)?;
    let x6057: BytePoly_64 = bigint_mul!(x6049, x6053, 64);
    let x6058: BytePoly_66 = bigint_nondet_quot!(ctx, x6057, x6, 66);
    let x6059: BytePoly_32 = bigint_nondet_rem!(ctx, x6057, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6058, x6, 98), x6059, 98),
            x6057,
            98
        ),
        536459,
        4,
    )?;
    let x6060: BytePoly_64 = bigint_mul!(x6059, x6005, 64);
    let x6061: BytePoly_66 = bigint_nondet_quot!(ctx, x6060, x6, 66);
    let x6062: BytePoly_32 = bigint_nondet_rem!(ctx, x6060, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6061, x6, 98), x6062, 98),
            x6060,
            98
        ),
        536459,
        4,
    )?;
    let x6063: BytePoly_32 = bigint_add!(bigint_sub!(x6011, x6062, 32), x6, 32);
    let x6064: BytePoly_32 = bigint_nondet_quot!(ctx, x6063, x6, 32);
    let x6065: BytePoly_32 = bigint_nondet_rem!(ctx, x6063, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6064, x6, 64), x6065, 64),
            x6063,
            64
        ),
        260103,
        4,
    )?;
    let x6066: BytePoly_64 = bigint_mul!(x6059, x6059, 64);
    let x6067: BytePoly_66 = bigint_nondet_quot!(ctx, x6066, x6, 66);
    let x6068: BytePoly_32 = bigint_nondet_rem!(ctx, x6066, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6067, x6, 98), x6068, 98),
            x6066,
            98
        ),
        536459,
        4,
    )?;
    let x6069: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6068, x6005, 32), x6, 32),
            x6005,
            32
        ),
        x6,
        32
    );
    let x6070: BytePoly_32 = bigint_nondet_quot!(ctx, x6069, x6, 32);
    let x6071: BytePoly_32 = bigint_nondet_rem!(ctx, x6069, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6070, x6, 64), x6071, 64),
            x6069,
            64
        ),
        260103,
        4,
    )?;
    let x6072: BytePoly_64 = bigint_mul!(x6059, x6071, 64);
    let x6073: BytePoly_66 = bigint_nondet_quot!(ctx, x6072, x6, 66);
    let x6074: BytePoly_32 = bigint_nondet_rem!(ctx, x6072, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6073, x6, 98), x6074, 98),
            x6072,
            98
        ),
        536459,
        4,
    )?;
    let x6075: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6074, x6065, 32), 32), x6, 32);
    let x6076: BytePoly_32 = bigint_nondet_quot!(ctx, x6075, x6, 32);
    let x6077: BytePoly_32 = bigint_nondet_rem!(ctx, x6075, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6076, x6, 64), x6077, 64),
            x6075,
            64
        ),
        260103,
        4,
    )?;
    let x6078: BytePoly_1 = bigint_nondet_rem!(ctx, x6013, x2, 1);
    let x6079: BytePoly_33 = bigint_nondet_quot!(ctx, x6013, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6079, x2, 34), x6078, 34),
            x6013,
            34
        ),
        268231,
        4,
    )?;
    let x6080: BytePoly_1 = bigint_sub!(x3, x6078, 1);
    eqz(ctx, &bigint_mul!(x6078, x6080, 2), 8131, 2)?;
    let x6081: BytePoly_32 = bigint_add!(bigint_sub!(x6071, x6041, 32), x6, 32);
    let x6082: BytePoly_32 = bigint_nondet_inv!(ctx, x6081, x6, 32);
    let x6083: BytePoly_64 = bigint_mul!(x6081, x6082, 64);
    let x6084: BytePoly_66 = bigint_nondet_quot!(ctx, x6083, x6, 66);
    let x6085: BytePoly_32 = bigint_nondet_rem!(ctx, x6083, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6084, x6, 98), x6085, 98),
            x6083,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6085, x1, 32), 34, 1)?;
    let x6086: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6077, x6043, 32), x6, 32),
        x6082,
        64
    );
    let x6087: BytePoly_66 = bigint_nondet_quot!(ctx, x6086, x6, 66);
    let x6088: BytePoly_32 = bigint_nondet_rem!(ctx, x6086, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6087, x6, 98), x6088, 98),
            x6086,
            98
        ),
        536459,
        4,
    )?;
    let x6089: BytePoly_64 = bigint_mul!(x6088, x6041, 64);
    let x6090: BytePoly_66 = bigint_nondet_quot!(ctx, x6089, x6, 66);
    let x6091: BytePoly_32 = bigint_nondet_rem!(ctx, x6089, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6090, x6, 98), x6091, 98),
            x6089,
            98
        ),
        536459,
        4,
    )?;
    let x6092: BytePoly_32 = bigint_add!(bigint_sub!(x6043, x6091, 32), x6, 32);
    let x6093: BytePoly_32 = bigint_nondet_quot!(ctx, x6092, x6, 32);
    let x6094: BytePoly_32 = bigint_nondet_rem!(ctx, x6092, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6093, x6, 64), x6094, 64),
            x6092,
            64
        ),
        260103,
        4,
    )?;
    let x6095: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6088, x6088, 64), x6041, 64),
                x6,
                64
            ),
            x6071,
            64
        ),
        x6,
        64
    );
    let x6096: BytePoly_66 = bigint_nondet_quot!(ctx, x6095, x6, 66);
    let x6097: BytePoly_32 = bigint_nondet_rem!(ctx, x6095, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6096, x6, 98), x6097, 98),
            x6095,
            98
        ),
        536459,
        4,
    )?;
    let x6098: BytePoly_64 = bigint_mul!(x6088, x6097, 64);
    let x6099: BytePoly_66 = bigint_nondet_quot!(ctx, x6098, x6, 66);
    let x6100: BytePoly_32 = bigint_nondet_rem!(ctx, x6098, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6099, x6, 98), x6100, 98),
            x6098,
            98
        ),
        536459,
        4,
    )?;
    let x6101: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6100, x6094, 32), 32), x6, 32);
    let x6102: BytePoly_32 = bigint_nondet_quot!(ctx, x6101, x6, 32);
    let x6103: BytePoly_32 = bigint_nondet_rem!(ctx, x6101, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6102, x6, 64), x6103, 64),
            x6101,
            64
        ),
        260103,
        4,
    )?;
    let x6104: BytePoly_33 = bigint_add!(
        bigint_mul!(x6097, x6078, 33),
        bigint_mul!(x6041, x6080, 33),
        33
    );
    let x6105: BytePoly_33 = bigint_add!(
        bigint_mul!(x6103, x6078, 33),
        bigint_mul!(x6043, x6080, 33),
        33
    );
    let x6106: BytePoly_35 = bigint_nondet_quot!(ctx, x6104, x6, 35);
    let x6107: BytePoly_32 = bigint_nondet_rem!(ctx, x6104, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6106, x6, 67), x6107, 67),
            x6104,
            67
        ),
        284487,
        4,
    )?;
    let x6108: BytePoly_35 = bigint_nondet_quot!(ctx, x6105, x6, 35);
    let x6109: BytePoly_32 = bigint_nondet_rem!(ctx, x6105, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6108, x6, 67), x6109, 67),
            x6105,
            67
        ),
        284487,
        4,
    )?;
    let x6110: BytePoly_64 = bigint_mul!(x6071, x6071, 64);
    let x6111: BytePoly_66 = bigint_nondet_quot!(ctx, x6110, x6, 66);
    let x6112: BytePoly_32 = bigint_nondet_rem!(ctx, x6110, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6111, x6, 98), x6112, 98),
            x6110,
            98
        ),
        536459,
        4,
    )?;
    let x6113: BytePoly_33 = bigint_add!(bigint_mul!(x6112, x0, 33), x5, 33);
    let x6114: BytePoly_35 = bigint_nondet_quot!(ctx, x6113, x6, 35);
    let x6115: BytePoly_32 = bigint_nondet_rem!(ctx, x6113, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6114, x6, 67), x6115, 67),
            x6113,
            67
        ),
        284487,
        4,
    )?;
    let x6116: BytePoly_32 = bigint_add!(x6077, x6077, 32);
    let x6117: BytePoly_32 = bigint_nondet_quot!(ctx, x6116, x6, 32);
    let x6118: BytePoly_32 = bigint_nondet_rem!(ctx, x6116, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6117, x6, 64), x6118, 64),
            x6116,
            64
        ),
        260103,
        4,
    )?;
    let x6119: BytePoly_32 = bigint_nondet_inv!(ctx, x6118, x6, 32);
    let x6120: BytePoly_64 = bigint_mul!(x6118, x6119, 64);
    let x6121: BytePoly_66 = bigint_nondet_quot!(ctx, x6120, x6, 66);
    let x6122: BytePoly_32 = bigint_nondet_rem!(ctx, x6120, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6121, x6, 98), x6122, 98),
            x6120,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6122, x3, 32), 34, 1)?;
    let x6123: BytePoly_64 = bigint_mul!(x6115, x6119, 64);
    let x6124: BytePoly_66 = bigint_nondet_quot!(ctx, x6123, x6, 66);
    let x6125: BytePoly_32 = bigint_nondet_rem!(ctx, x6123, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6124, x6, 98), x6125, 98),
            x6123,
            98
        ),
        536459,
        4,
    )?;
    let x6126: BytePoly_64 = bigint_mul!(x6125, x6071, 64);
    let x6127: BytePoly_66 = bigint_nondet_quot!(ctx, x6126, x6, 66);
    let x6128: BytePoly_32 = bigint_nondet_rem!(ctx, x6126, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6127, x6, 98), x6128, 98),
            x6126,
            98
        ),
        536459,
        4,
    )?;
    let x6129: BytePoly_32 = bigint_add!(bigint_sub!(x6077, x6128, 32), x6, 32);
    let x6130: BytePoly_32 = bigint_nondet_quot!(ctx, x6129, x6, 32);
    let x6131: BytePoly_32 = bigint_nondet_rem!(ctx, x6129, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6130, x6, 64), x6131, 64),
            x6129,
            64
        ),
        260103,
        4,
    )?;
    let x6132: BytePoly_64 = bigint_mul!(x6125, x6125, 64);
    let x6133: BytePoly_66 = bigint_nondet_quot!(ctx, x6132, x6, 66);
    let x6134: BytePoly_32 = bigint_nondet_rem!(ctx, x6132, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6133, x6, 98), x6134, 98),
            x6132,
            98
        ),
        536459,
        4,
    )?;
    let x6135: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6134, x6071, 32), x6, 32),
            x6071,
            32
        ),
        x6,
        32
    );
    let x6136: BytePoly_32 = bigint_nondet_quot!(ctx, x6135, x6, 32);
    let x6137: BytePoly_32 = bigint_nondet_rem!(ctx, x6135, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6136, x6, 64), x6137, 64),
            x6135,
            64
        ),
        260103,
        4,
    )?;
    let x6138: BytePoly_64 = bigint_mul!(x6125, x6137, 64);
    let x6139: BytePoly_66 = bigint_nondet_quot!(ctx, x6138, x6, 66);
    let x6140: BytePoly_32 = bigint_nondet_rem!(ctx, x6138, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6139, x6, 98), x6140, 98),
            x6138,
            98
        ),
        536459,
        4,
    )?;
    let x6141: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6140, x6131, 32), 32), x6, 32);
    let x6142: BytePoly_32 = bigint_nondet_quot!(ctx, x6141, x6, 32);
    let x6143: BytePoly_32 = bigint_nondet_rem!(ctx, x6141, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6142, x6, 64), x6143, 64),
            x6141,
            64
        ),
        260103,
        4,
    )?;
    let x6144: BytePoly_1 = bigint_nondet_rem!(ctx, x6079, x2, 1);
    let x6145: BytePoly_33 = bigint_nondet_quot!(ctx, x6079, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6145, x2, 34), x6144, 34),
            x6079,
            34
        ),
        268231,
        4,
    )?;
    let x6146: BytePoly_1 = bigint_sub!(x3, x6144, 1);
    eqz(ctx, &bigint_mul!(x6144, x6146, 2), 8131, 2)?;
    let x6147: BytePoly_32 = bigint_add!(bigint_sub!(x6137, x6107, 32), x6, 32);
    let x6148: BytePoly_32 = bigint_nondet_inv!(ctx, x6147, x6, 32);
    let x6149: BytePoly_64 = bigint_mul!(x6147, x6148, 64);
    let x6150: BytePoly_66 = bigint_nondet_quot!(ctx, x6149, x6, 66);
    let x6151: BytePoly_32 = bigint_nondet_rem!(ctx, x6149, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6150, x6, 98), x6151, 98),
            x6149,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6151, x1, 32), 34, 1)?;
    let x6152: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6143, x6109, 32), x6, 32),
        x6148,
        64
    );
    let x6153: BytePoly_66 = bigint_nondet_quot!(ctx, x6152, x6, 66);
    let x6154: BytePoly_32 = bigint_nondet_rem!(ctx, x6152, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6153, x6, 98), x6154, 98),
            x6152,
            98
        ),
        536459,
        4,
    )?;
    let x6155: BytePoly_64 = bigint_mul!(x6154, x6107, 64);
    let x6156: BytePoly_66 = bigint_nondet_quot!(ctx, x6155, x6, 66);
    let x6157: BytePoly_32 = bigint_nondet_rem!(ctx, x6155, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6156, x6, 98), x6157, 98),
            x6155,
            98
        ),
        536459,
        4,
    )?;
    let x6158: BytePoly_32 = bigint_add!(bigint_sub!(x6109, x6157, 32), x6, 32);
    let x6159: BytePoly_32 = bigint_nondet_quot!(ctx, x6158, x6, 32);
    let x6160: BytePoly_32 = bigint_nondet_rem!(ctx, x6158, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6159, x6, 64), x6160, 64),
            x6158,
            64
        ),
        260103,
        4,
    )?;
    let x6161: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6154, x6154, 64), x6107, 64),
                x6,
                64
            ),
            x6137,
            64
        ),
        x6,
        64
    );
    let x6162: BytePoly_66 = bigint_nondet_quot!(ctx, x6161, x6, 66);
    let x6163: BytePoly_32 = bigint_nondet_rem!(ctx, x6161, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6162, x6, 98), x6163, 98),
            x6161,
            98
        ),
        536459,
        4,
    )?;
    let x6164: BytePoly_64 = bigint_mul!(x6154, x6163, 64);
    let x6165: BytePoly_66 = bigint_nondet_quot!(ctx, x6164, x6, 66);
    let x6166: BytePoly_32 = bigint_nondet_rem!(ctx, x6164, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6165, x6, 98), x6166, 98),
            x6164,
            98
        ),
        536459,
        4,
    )?;
    let x6167: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6166, x6160, 32), 32), x6, 32);
    let x6168: BytePoly_32 = bigint_nondet_quot!(ctx, x6167, x6, 32);
    let x6169: BytePoly_32 = bigint_nondet_rem!(ctx, x6167, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6168, x6, 64), x6169, 64),
            x6167,
            64
        ),
        260103,
        4,
    )?;
    let x6170: BytePoly_33 = bigint_add!(
        bigint_mul!(x6163, x6144, 33),
        bigint_mul!(x6107, x6146, 33),
        33
    );
    let x6171: BytePoly_33 = bigint_add!(
        bigint_mul!(x6169, x6144, 33),
        bigint_mul!(x6109, x6146, 33),
        33
    );
    let x6172: BytePoly_35 = bigint_nondet_quot!(ctx, x6170, x6, 35);
    let x6173: BytePoly_32 = bigint_nondet_rem!(ctx, x6170, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6172, x6, 67), x6173, 67),
            x6170,
            67
        ),
        284487,
        4,
    )?;
    let x6174: BytePoly_35 = bigint_nondet_quot!(ctx, x6171, x6, 35);
    let x6175: BytePoly_32 = bigint_nondet_rem!(ctx, x6171, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6174, x6, 67), x6175, 67),
            x6171,
            67
        ),
        284487,
        4,
    )?;
    let x6176: BytePoly_64 = bigint_mul!(x6137, x6137, 64);
    let x6177: BytePoly_66 = bigint_nondet_quot!(ctx, x6176, x6, 66);
    let x6178: BytePoly_32 = bigint_nondet_rem!(ctx, x6176, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6177, x6, 98), x6178, 98),
            x6176,
            98
        ),
        536459,
        4,
    )?;
    let x6179: BytePoly_33 = bigint_add!(bigint_mul!(x6178, x0, 33), x5, 33);
    let x6180: BytePoly_35 = bigint_nondet_quot!(ctx, x6179, x6, 35);
    let x6181: BytePoly_32 = bigint_nondet_rem!(ctx, x6179, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6180, x6, 67), x6181, 67),
            x6179,
            67
        ),
        284487,
        4,
    )?;
    let x6182: BytePoly_32 = bigint_add!(x6143, x6143, 32);
    let x6183: BytePoly_32 = bigint_nondet_quot!(ctx, x6182, x6, 32);
    let x6184: BytePoly_32 = bigint_nondet_rem!(ctx, x6182, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6183, x6, 64), x6184, 64),
            x6182,
            64
        ),
        260103,
        4,
    )?;
    let x6185: BytePoly_32 = bigint_nondet_inv!(ctx, x6184, x6, 32);
    let x6186: BytePoly_64 = bigint_mul!(x6184, x6185, 64);
    let x6187: BytePoly_66 = bigint_nondet_quot!(ctx, x6186, x6, 66);
    let x6188: BytePoly_32 = bigint_nondet_rem!(ctx, x6186, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6187, x6, 98), x6188, 98),
            x6186,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6188, x3, 32), 34, 1)?;
    let x6189: BytePoly_64 = bigint_mul!(x6181, x6185, 64);
    let x6190: BytePoly_66 = bigint_nondet_quot!(ctx, x6189, x6, 66);
    let x6191: BytePoly_32 = bigint_nondet_rem!(ctx, x6189, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6190, x6, 98), x6191, 98),
            x6189,
            98
        ),
        536459,
        4,
    )?;
    let x6192: BytePoly_64 = bigint_mul!(x6191, x6137, 64);
    let x6193: BytePoly_66 = bigint_nondet_quot!(ctx, x6192, x6, 66);
    let x6194: BytePoly_32 = bigint_nondet_rem!(ctx, x6192, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6193, x6, 98), x6194, 98),
            x6192,
            98
        ),
        536459,
        4,
    )?;
    let x6195: BytePoly_32 = bigint_add!(bigint_sub!(x6143, x6194, 32), x6, 32);
    let x6196: BytePoly_32 = bigint_nondet_quot!(ctx, x6195, x6, 32);
    let x6197: BytePoly_32 = bigint_nondet_rem!(ctx, x6195, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6196, x6, 64), x6197, 64),
            x6195,
            64
        ),
        260103,
        4,
    )?;
    let x6198: BytePoly_64 = bigint_mul!(x6191, x6191, 64);
    let x6199: BytePoly_66 = bigint_nondet_quot!(ctx, x6198, x6, 66);
    let x6200: BytePoly_32 = bigint_nondet_rem!(ctx, x6198, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6199, x6, 98), x6200, 98),
            x6198,
            98
        ),
        536459,
        4,
    )?;
    let x6201: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6200, x6137, 32), x6, 32),
            x6137,
            32
        ),
        x6,
        32
    );
    let x6202: BytePoly_32 = bigint_nondet_quot!(ctx, x6201, x6, 32);
    let x6203: BytePoly_32 = bigint_nondet_rem!(ctx, x6201, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6202, x6, 64), x6203, 64),
            x6201,
            64
        ),
        260103,
        4,
    )?;
    let x6204: BytePoly_64 = bigint_mul!(x6191, x6203, 64);
    let x6205: BytePoly_66 = bigint_nondet_quot!(ctx, x6204, x6, 66);
    let x6206: BytePoly_32 = bigint_nondet_rem!(ctx, x6204, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6205, x6, 98), x6206, 98),
            x6204,
            98
        ),
        536459,
        4,
    )?;
    let x6207: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6206, x6197, 32), 32), x6, 32);
    let x6208: BytePoly_32 = bigint_nondet_quot!(ctx, x6207, x6, 32);
    let x6209: BytePoly_32 = bigint_nondet_rem!(ctx, x6207, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6208, x6, 64), x6209, 64),
            x6207,
            64
        ),
        260103,
        4,
    )?;
    let x6210: BytePoly_1 = bigint_nondet_rem!(ctx, x6145, x2, 1);
    let x6211: BytePoly_33 = bigint_nondet_quot!(ctx, x6145, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6211, x2, 34), x6210, 34),
            x6145,
            34
        ),
        268231,
        4,
    )?;
    let x6212: BytePoly_1 = bigint_sub!(x3, x6210, 1);
    eqz(ctx, &bigint_mul!(x6210, x6212, 2), 8131, 2)?;
    let x6213: BytePoly_32 = bigint_add!(bigint_sub!(x6203, x6173, 32), x6, 32);
    let x6214: BytePoly_32 = bigint_nondet_inv!(ctx, x6213, x6, 32);
    let x6215: BytePoly_64 = bigint_mul!(x6213, x6214, 64);
    let x6216: BytePoly_66 = bigint_nondet_quot!(ctx, x6215, x6, 66);
    let x6217: BytePoly_32 = bigint_nondet_rem!(ctx, x6215, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6216, x6, 98), x6217, 98),
            x6215,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6217, x1, 32), 34, 1)?;
    let x6218: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6209, x6175, 32), x6, 32),
        x6214,
        64
    );
    let x6219: BytePoly_66 = bigint_nondet_quot!(ctx, x6218, x6, 66);
    let x6220: BytePoly_32 = bigint_nondet_rem!(ctx, x6218, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6219, x6, 98), x6220, 98),
            x6218,
            98
        ),
        536459,
        4,
    )?;
    let x6221: BytePoly_64 = bigint_mul!(x6220, x6173, 64);
    let x6222: BytePoly_66 = bigint_nondet_quot!(ctx, x6221, x6, 66);
    let x6223: BytePoly_32 = bigint_nondet_rem!(ctx, x6221, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6222, x6, 98), x6223, 98),
            x6221,
            98
        ),
        536459,
        4,
    )?;
    let x6224: BytePoly_32 = bigint_add!(bigint_sub!(x6175, x6223, 32), x6, 32);
    let x6225: BytePoly_32 = bigint_nondet_quot!(ctx, x6224, x6, 32);
    let x6226: BytePoly_32 = bigint_nondet_rem!(ctx, x6224, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6225, x6, 64), x6226, 64),
            x6224,
            64
        ),
        260103,
        4,
    )?;
    let x6227: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6220, x6220, 64), x6173, 64),
                x6,
                64
            ),
            x6203,
            64
        ),
        x6,
        64
    );
    let x6228: BytePoly_66 = bigint_nondet_quot!(ctx, x6227, x6, 66);
    let x6229: BytePoly_32 = bigint_nondet_rem!(ctx, x6227, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6228, x6, 98), x6229, 98),
            x6227,
            98
        ),
        536459,
        4,
    )?;
    let x6230: BytePoly_64 = bigint_mul!(x6220, x6229, 64);
    let x6231: BytePoly_66 = bigint_nondet_quot!(ctx, x6230, x6, 66);
    let x6232: BytePoly_32 = bigint_nondet_rem!(ctx, x6230, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6231, x6, 98), x6232, 98),
            x6230,
            98
        ),
        536459,
        4,
    )?;
    let x6233: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6232, x6226, 32), 32), x6, 32);
    let x6234: BytePoly_32 = bigint_nondet_quot!(ctx, x6233, x6, 32);
    let x6235: BytePoly_32 = bigint_nondet_rem!(ctx, x6233, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6234, x6, 64), x6235, 64),
            x6233,
            64
        ),
        260103,
        4,
    )?;
    let x6236: BytePoly_33 = bigint_add!(
        bigint_mul!(x6229, x6210, 33),
        bigint_mul!(x6173, x6212, 33),
        33
    );
    let x6237: BytePoly_33 = bigint_add!(
        bigint_mul!(x6235, x6210, 33),
        bigint_mul!(x6175, x6212, 33),
        33
    );
    let x6238: BytePoly_35 = bigint_nondet_quot!(ctx, x6236, x6, 35);
    let x6239: BytePoly_32 = bigint_nondet_rem!(ctx, x6236, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6238, x6, 67), x6239, 67),
            x6236,
            67
        ),
        284487,
        4,
    )?;
    let x6240: BytePoly_35 = bigint_nondet_quot!(ctx, x6237, x6, 35);
    let x6241: BytePoly_32 = bigint_nondet_rem!(ctx, x6237, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6240, x6, 67), x6241, 67),
            x6237,
            67
        ),
        284487,
        4,
    )?;
    let x6242: BytePoly_64 = bigint_mul!(x6203, x6203, 64);
    let x6243: BytePoly_66 = bigint_nondet_quot!(ctx, x6242, x6, 66);
    let x6244: BytePoly_32 = bigint_nondet_rem!(ctx, x6242, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6243, x6, 98), x6244, 98),
            x6242,
            98
        ),
        536459,
        4,
    )?;
    let x6245: BytePoly_33 = bigint_add!(bigint_mul!(x6244, x0, 33), x5, 33);
    let x6246: BytePoly_35 = bigint_nondet_quot!(ctx, x6245, x6, 35);
    let x6247: BytePoly_32 = bigint_nondet_rem!(ctx, x6245, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6246, x6, 67), x6247, 67),
            x6245,
            67
        ),
        284487,
        4,
    )?;
    let x6248: BytePoly_32 = bigint_add!(x6209, x6209, 32);
    let x6249: BytePoly_32 = bigint_nondet_quot!(ctx, x6248, x6, 32);
    let x6250: BytePoly_32 = bigint_nondet_rem!(ctx, x6248, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6249, x6, 64), x6250, 64),
            x6248,
            64
        ),
        260103,
        4,
    )?;
    let x6251: BytePoly_32 = bigint_nondet_inv!(ctx, x6250, x6, 32);
    let x6252: BytePoly_64 = bigint_mul!(x6250, x6251, 64);
    let x6253: BytePoly_66 = bigint_nondet_quot!(ctx, x6252, x6, 66);
    let x6254: BytePoly_32 = bigint_nondet_rem!(ctx, x6252, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6253, x6, 98), x6254, 98),
            x6252,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6254, x3, 32), 34, 1)?;
    let x6255: BytePoly_64 = bigint_mul!(x6247, x6251, 64);
    let x6256: BytePoly_66 = bigint_nondet_quot!(ctx, x6255, x6, 66);
    let x6257: BytePoly_32 = bigint_nondet_rem!(ctx, x6255, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6256, x6, 98), x6257, 98),
            x6255,
            98
        ),
        536459,
        4,
    )?;
    let x6258: BytePoly_64 = bigint_mul!(x6257, x6203, 64);
    let x6259: BytePoly_66 = bigint_nondet_quot!(ctx, x6258, x6, 66);
    let x6260: BytePoly_32 = bigint_nondet_rem!(ctx, x6258, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6259, x6, 98), x6260, 98),
            x6258,
            98
        ),
        536459,
        4,
    )?;
    let x6261: BytePoly_32 = bigint_add!(bigint_sub!(x6209, x6260, 32), x6, 32);
    let x6262: BytePoly_32 = bigint_nondet_quot!(ctx, x6261, x6, 32);
    let x6263: BytePoly_32 = bigint_nondet_rem!(ctx, x6261, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6262, x6, 64), x6263, 64),
            x6261,
            64
        ),
        260103,
        4,
    )?;
    let x6264: BytePoly_64 = bigint_mul!(x6257, x6257, 64);
    let x6265: BytePoly_66 = bigint_nondet_quot!(ctx, x6264, x6, 66);
    let x6266: BytePoly_32 = bigint_nondet_rem!(ctx, x6264, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6265, x6, 98), x6266, 98),
            x6264,
            98
        ),
        536459,
        4,
    )?;
    let x6267: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6266, x6203, 32), x6, 32),
            x6203,
            32
        ),
        x6,
        32
    );
    let x6268: BytePoly_32 = bigint_nondet_quot!(ctx, x6267, x6, 32);
    let x6269: BytePoly_32 = bigint_nondet_rem!(ctx, x6267, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6268, x6, 64), x6269, 64),
            x6267,
            64
        ),
        260103,
        4,
    )?;
    let x6270: BytePoly_64 = bigint_mul!(x6257, x6269, 64);
    let x6271: BytePoly_66 = bigint_nondet_quot!(ctx, x6270, x6, 66);
    let x6272: BytePoly_32 = bigint_nondet_rem!(ctx, x6270, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6271, x6, 98), x6272, 98),
            x6270,
            98
        ),
        536459,
        4,
    )?;
    let x6273: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6272, x6263, 32), 32), x6, 32);
    let x6274: BytePoly_32 = bigint_nondet_quot!(ctx, x6273, x6, 32);
    let x6275: BytePoly_32 = bigint_nondet_rem!(ctx, x6273, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6274, x6, 64), x6275, 64),
            x6273,
            64
        ),
        260103,
        4,
    )?;
    let x6276: BytePoly_1 = bigint_nondet_rem!(ctx, x6211, x2, 1);
    let x6277: BytePoly_33 = bigint_nondet_quot!(ctx, x6211, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6277, x2, 34), x6276, 34),
            x6211,
            34
        ),
        268231,
        4,
    )?;
    let x6278: BytePoly_1 = bigint_sub!(x3, x6276, 1);
    eqz(ctx, &bigint_mul!(x6276, x6278, 2), 8131, 2)?;
    let x6279: BytePoly_32 = bigint_add!(bigint_sub!(x6269, x6239, 32), x6, 32);
    let x6280: BytePoly_32 = bigint_nondet_inv!(ctx, x6279, x6, 32);
    let x6281: BytePoly_64 = bigint_mul!(x6279, x6280, 64);
    let x6282: BytePoly_66 = bigint_nondet_quot!(ctx, x6281, x6, 66);
    let x6283: BytePoly_32 = bigint_nondet_rem!(ctx, x6281, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6282, x6, 98), x6283, 98),
            x6281,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6283, x1, 32), 34, 1)?;
    let x6284: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6275, x6241, 32), x6, 32),
        x6280,
        64
    );
    let x6285: BytePoly_66 = bigint_nondet_quot!(ctx, x6284, x6, 66);
    let x6286: BytePoly_32 = bigint_nondet_rem!(ctx, x6284, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6285, x6, 98), x6286, 98),
            x6284,
            98
        ),
        536459,
        4,
    )?;
    let x6287: BytePoly_64 = bigint_mul!(x6286, x6239, 64);
    let x6288: BytePoly_66 = bigint_nondet_quot!(ctx, x6287, x6, 66);
    let x6289: BytePoly_32 = bigint_nondet_rem!(ctx, x6287, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6288, x6, 98), x6289, 98),
            x6287,
            98
        ),
        536459,
        4,
    )?;
    let x6290: BytePoly_32 = bigint_add!(bigint_sub!(x6241, x6289, 32), x6, 32);
    let x6291: BytePoly_32 = bigint_nondet_quot!(ctx, x6290, x6, 32);
    let x6292: BytePoly_32 = bigint_nondet_rem!(ctx, x6290, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6291, x6, 64), x6292, 64),
            x6290,
            64
        ),
        260103,
        4,
    )?;
    let x6293: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6286, x6286, 64), x6239, 64),
                x6,
                64
            ),
            x6269,
            64
        ),
        x6,
        64
    );
    let x6294: BytePoly_66 = bigint_nondet_quot!(ctx, x6293, x6, 66);
    let x6295: BytePoly_32 = bigint_nondet_rem!(ctx, x6293, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6294, x6, 98), x6295, 98),
            x6293,
            98
        ),
        536459,
        4,
    )?;
    let x6296: BytePoly_64 = bigint_mul!(x6286, x6295, 64);
    let x6297: BytePoly_66 = bigint_nondet_quot!(ctx, x6296, x6, 66);
    let x6298: BytePoly_32 = bigint_nondet_rem!(ctx, x6296, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6297, x6, 98), x6298, 98),
            x6296,
            98
        ),
        536459,
        4,
    )?;
    let x6299: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6298, x6292, 32), 32), x6, 32);
    let x6300: BytePoly_32 = bigint_nondet_quot!(ctx, x6299, x6, 32);
    let x6301: BytePoly_32 = bigint_nondet_rem!(ctx, x6299, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6300, x6, 64), x6301, 64),
            x6299,
            64
        ),
        260103,
        4,
    )?;
    let x6302: BytePoly_33 = bigint_add!(
        bigint_mul!(x6295, x6276, 33),
        bigint_mul!(x6239, x6278, 33),
        33
    );
    let x6303: BytePoly_33 = bigint_add!(
        bigint_mul!(x6301, x6276, 33),
        bigint_mul!(x6241, x6278, 33),
        33
    );
    let x6304: BytePoly_35 = bigint_nondet_quot!(ctx, x6302, x6, 35);
    let x6305: BytePoly_32 = bigint_nondet_rem!(ctx, x6302, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6304, x6, 67), x6305, 67),
            x6302,
            67
        ),
        284487,
        4,
    )?;
    let x6306: BytePoly_35 = bigint_nondet_quot!(ctx, x6303, x6, 35);
    let x6307: BytePoly_32 = bigint_nondet_rem!(ctx, x6303, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6306, x6, 67), x6307, 67),
            x6303,
            67
        ),
        284487,
        4,
    )?;
    let x6308: BytePoly_64 = bigint_mul!(x6269, x6269, 64);
    let x6309: BytePoly_66 = bigint_nondet_quot!(ctx, x6308, x6, 66);
    let x6310: BytePoly_32 = bigint_nondet_rem!(ctx, x6308, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6309, x6, 98), x6310, 98),
            x6308,
            98
        ),
        536459,
        4,
    )?;
    let x6311: BytePoly_33 = bigint_add!(bigint_mul!(x6310, x0, 33), x5, 33);
    let x6312: BytePoly_35 = bigint_nondet_quot!(ctx, x6311, x6, 35);
    let x6313: BytePoly_32 = bigint_nondet_rem!(ctx, x6311, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6312, x6, 67), x6313, 67),
            x6311,
            67
        ),
        284487,
        4,
    )?;
    let x6314: BytePoly_32 = bigint_add!(x6275, x6275, 32);
    let x6315: BytePoly_32 = bigint_nondet_quot!(ctx, x6314, x6, 32);
    let x6316: BytePoly_32 = bigint_nondet_rem!(ctx, x6314, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6315, x6, 64), x6316, 64),
            x6314,
            64
        ),
        260103,
        4,
    )?;
    let x6317: BytePoly_32 = bigint_nondet_inv!(ctx, x6316, x6, 32);
    let x6318: BytePoly_64 = bigint_mul!(x6316, x6317, 64);
    let x6319: BytePoly_66 = bigint_nondet_quot!(ctx, x6318, x6, 66);
    let x6320: BytePoly_32 = bigint_nondet_rem!(ctx, x6318, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6319, x6, 98), x6320, 98),
            x6318,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6320, x3, 32), 34, 1)?;
    let x6321: BytePoly_64 = bigint_mul!(x6313, x6317, 64);
    let x6322: BytePoly_66 = bigint_nondet_quot!(ctx, x6321, x6, 66);
    let x6323: BytePoly_32 = bigint_nondet_rem!(ctx, x6321, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6322, x6, 98), x6323, 98),
            x6321,
            98
        ),
        536459,
        4,
    )?;
    let x6324: BytePoly_64 = bigint_mul!(x6323, x6269, 64);
    let x6325: BytePoly_66 = bigint_nondet_quot!(ctx, x6324, x6, 66);
    let x6326: BytePoly_32 = bigint_nondet_rem!(ctx, x6324, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6325, x6, 98), x6326, 98),
            x6324,
            98
        ),
        536459,
        4,
    )?;
    let x6327: BytePoly_32 = bigint_add!(bigint_sub!(x6275, x6326, 32), x6, 32);
    let x6328: BytePoly_32 = bigint_nondet_quot!(ctx, x6327, x6, 32);
    let x6329: BytePoly_32 = bigint_nondet_rem!(ctx, x6327, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6328, x6, 64), x6329, 64),
            x6327,
            64
        ),
        260103,
        4,
    )?;
    let x6330: BytePoly_64 = bigint_mul!(x6323, x6323, 64);
    let x6331: BytePoly_66 = bigint_nondet_quot!(ctx, x6330, x6, 66);
    let x6332: BytePoly_32 = bigint_nondet_rem!(ctx, x6330, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6331, x6, 98), x6332, 98),
            x6330,
            98
        ),
        536459,
        4,
    )?;
    let x6333: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6332, x6269, 32), x6, 32),
            x6269,
            32
        ),
        x6,
        32
    );
    let x6334: BytePoly_32 = bigint_nondet_quot!(ctx, x6333, x6, 32);
    let x6335: BytePoly_32 = bigint_nondet_rem!(ctx, x6333, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6334, x6, 64), x6335, 64),
            x6333,
            64
        ),
        260103,
        4,
    )?;
    let x6336: BytePoly_64 = bigint_mul!(x6323, x6335, 64);
    let x6337: BytePoly_66 = bigint_nondet_quot!(ctx, x6336, x6, 66);
    let x6338: BytePoly_32 = bigint_nondet_rem!(ctx, x6336, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6337, x6, 98), x6338, 98),
            x6336,
            98
        ),
        536459,
        4,
    )?;
    let x6339: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6338, x6329, 32), 32), x6, 32);
    let x6340: BytePoly_32 = bigint_nondet_quot!(ctx, x6339, x6, 32);
    let x6341: BytePoly_32 = bigint_nondet_rem!(ctx, x6339, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6340, x6, 64), x6341, 64),
            x6339,
            64
        ),
        260103,
        4,
    )?;
    let x6342: BytePoly_1 = bigint_nondet_rem!(ctx, x6277, x2, 1);
    let x6343: BytePoly_33 = bigint_nondet_quot!(ctx, x6277, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6343, x2, 34), x6342, 34),
            x6277,
            34
        ),
        268231,
        4,
    )?;
    let x6344: BytePoly_1 = bigint_sub!(x3, x6342, 1);
    eqz(ctx, &bigint_mul!(x6342, x6344, 2), 8131, 2)?;
    let x6345: BytePoly_32 = bigint_add!(bigint_sub!(x6335, x6305, 32), x6, 32);
    let x6346: BytePoly_32 = bigint_nondet_inv!(ctx, x6345, x6, 32);
    let x6347: BytePoly_64 = bigint_mul!(x6345, x6346, 64);
    let x6348: BytePoly_66 = bigint_nondet_quot!(ctx, x6347, x6, 66);
    let x6349: BytePoly_32 = bigint_nondet_rem!(ctx, x6347, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6348, x6, 98), x6349, 98),
            x6347,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6349, x1, 32), 34, 1)?;
    let x6350: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6341, x6307, 32), x6, 32),
        x6346,
        64
    );
    let x6351: BytePoly_66 = bigint_nondet_quot!(ctx, x6350, x6, 66);
    let x6352: BytePoly_32 = bigint_nondet_rem!(ctx, x6350, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6351, x6, 98), x6352, 98),
            x6350,
            98
        ),
        536459,
        4,
    )?;
    let x6353: BytePoly_64 = bigint_mul!(x6352, x6305, 64);
    let x6354: BytePoly_66 = bigint_nondet_quot!(ctx, x6353, x6, 66);
    let x6355: BytePoly_32 = bigint_nondet_rem!(ctx, x6353, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6354, x6, 98), x6355, 98),
            x6353,
            98
        ),
        536459,
        4,
    )?;
    let x6356: BytePoly_32 = bigint_add!(bigint_sub!(x6307, x6355, 32), x6, 32);
    let x6357: BytePoly_32 = bigint_nondet_quot!(ctx, x6356, x6, 32);
    let x6358: BytePoly_32 = bigint_nondet_rem!(ctx, x6356, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6357, x6, 64), x6358, 64),
            x6356,
            64
        ),
        260103,
        4,
    )?;
    let x6359: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6352, x6352, 64), x6305, 64),
                x6,
                64
            ),
            x6335,
            64
        ),
        x6,
        64
    );
    let x6360: BytePoly_66 = bigint_nondet_quot!(ctx, x6359, x6, 66);
    let x6361: BytePoly_32 = bigint_nondet_rem!(ctx, x6359, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6360, x6, 98), x6361, 98),
            x6359,
            98
        ),
        536459,
        4,
    )?;
    let x6362: BytePoly_64 = bigint_mul!(x6352, x6361, 64);
    let x6363: BytePoly_66 = bigint_nondet_quot!(ctx, x6362, x6, 66);
    let x6364: BytePoly_32 = bigint_nondet_rem!(ctx, x6362, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6363, x6, 98), x6364, 98),
            x6362,
            98
        ),
        536459,
        4,
    )?;
    let x6365: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6364, x6358, 32), 32), x6, 32);
    let x6366: BytePoly_32 = bigint_nondet_quot!(ctx, x6365, x6, 32);
    let x6367: BytePoly_32 = bigint_nondet_rem!(ctx, x6365, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6366, x6, 64), x6367, 64),
            x6365,
            64
        ),
        260103,
        4,
    )?;
    let x6368: BytePoly_33 = bigint_add!(
        bigint_mul!(x6361, x6342, 33),
        bigint_mul!(x6305, x6344, 33),
        33
    );
    let x6369: BytePoly_33 = bigint_add!(
        bigint_mul!(x6367, x6342, 33),
        bigint_mul!(x6307, x6344, 33),
        33
    );
    let x6370: BytePoly_35 = bigint_nondet_quot!(ctx, x6368, x6, 35);
    let x6371: BytePoly_32 = bigint_nondet_rem!(ctx, x6368, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6370, x6, 67), x6371, 67),
            x6368,
            67
        ),
        284487,
        4,
    )?;
    let x6372: BytePoly_35 = bigint_nondet_quot!(ctx, x6369, x6, 35);
    let x6373: BytePoly_32 = bigint_nondet_rem!(ctx, x6369, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6372, x6, 67), x6373, 67),
            x6369,
            67
        ),
        284487,
        4,
    )?;
    let x6374: BytePoly_64 = bigint_mul!(x6335, x6335, 64);
    let x6375: BytePoly_66 = bigint_nondet_quot!(ctx, x6374, x6, 66);
    let x6376: BytePoly_32 = bigint_nondet_rem!(ctx, x6374, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6375, x6, 98), x6376, 98),
            x6374,
            98
        ),
        536459,
        4,
    )?;
    let x6377: BytePoly_33 = bigint_add!(bigint_mul!(x6376, x0, 33), x5, 33);
    let x6378: BytePoly_35 = bigint_nondet_quot!(ctx, x6377, x6, 35);
    let x6379: BytePoly_32 = bigint_nondet_rem!(ctx, x6377, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6378, x6, 67), x6379, 67),
            x6377,
            67
        ),
        284487,
        4,
    )?;
    let x6380: BytePoly_32 = bigint_add!(x6341, x6341, 32);
    let x6381: BytePoly_32 = bigint_nondet_quot!(ctx, x6380, x6, 32);
    let x6382: BytePoly_32 = bigint_nondet_rem!(ctx, x6380, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6381, x6, 64), x6382, 64),
            x6380,
            64
        ),
        260103,
        4,
    )?;
    let x6383: BytePoly_32 = bigint_nondet_inv!(ctx, x6382, x6, 32);
    let x6384: BytePoly_64 = bigint_mul!(x6382, x6383, 64);
    let x6385: BytePoly_66 = bigint_nondet_quot!(ctx, x6384, x6, 66);
    let x6386: BytePoly_32 = bigint_nondet_rem!(ctx, x6384, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6385, x6, 98), x6386, 98),
            x6384,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6386, x3, 32), 34, 1)?;
    let x6387: BytePoly_64 = bigint_mul!(x6379, x6383, 64);
    let x6388: BytePoly_66 = bigint_nondet_quot!(ctx, x6387, x6, 66);
    let x6389: BytePoly_32 = bigint_nondet_rem!(ctx, x6387, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6388, x6, 98), x6389, 98),
            x6387,
            98
        ),
        536459,
        4,
    )?;
    let x6390: BytePoly_64 = bigint_mul!(x6389, x6335, 64);
    let x6391: BytePoly_66 = bigint_nondet_quot!(ctx, x6390, x6, 66);
    let x6392: BytePoly_32 = bigint_nondet_rem!(ctx, x6390, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6391, x6, 98), x6392, 98),
            x6390,
            98
        ),
        536459,
        4,
    )?;
    let x6393: BytePoly_32 = bigint_add!(bigint_sub!(x6341, x6392, 32), x6, 32);
    let x6394: BytePoly_32 = bigint_nondet_quot!(ctx, x6393, x6, 32);
    let x6395: BytePoly_32 = bigint_nondet_rem!(ctx, x6393, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6394, x6, 64), x6395, 64),
            x6393,
            64
        ),
        260103,
        4,
    )?;
    let x6396: BytePoly_64 = bigint_mul!(x6389, x6389, 64);
    let x6397: BytePoly_66 = bigint_nondet_quot!(ctx, x6396, x6, 66);
    let x6398: BytePoly_32 = bigint_nondet_rem!(ctx, x6396, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6397, x6, 98), x6398, 98),
            x6396,
            98
        ),
        536459,
        4,
    )?;
    let x6399: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6398, x6335, 32), x6, 32),
            x6335,
            32
        ),
        x6,
        32
    );
    let x6400: BytePoly_32 = bigint_nondet_quot!(ctx, x6399, x6, 32);
    let x6401: BytePoly_32 = bigint_nondet_rem!(ctx, x6399, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6400, x6, 64), x6401, 64),
            x6399,
            64
        ),
        260103,
        4,
    )?;
    let x6402: BytePoly_64 = bigint_mul!(x6389, x6401, 64);
    let x6403: BytePoly_66 = bigint_nondet_quot!(ctx, x6402, x6, 66);
    let x6404: BytePoly_32 = bigint_nondet_rem!(ctx, x6402, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6403, x6, 98), x6404, 98),
            x6402,
            98
        ),
        536459,
        4,
    )?;
    let x6405: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6404, x6395, 32), 32), x6, 32);
    let x6406: BytePoly_32 = bigint_nondet_quot!(ctx, x6405, x6, 32);
    let x6407: BytePoly_32 = bigint_nondet_rem!(ctx, x6405, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6406, x6, 64), x6407, 64),
            x6405,
            64
        ),
        260103,
        4,
    )?;
    let x6408: BytePoly_1 = bigint_nondet_rem!(ctx, x6343, x2, 1);
    let x6409: BytePoly_33 = bigint_nondet_quot!(ctx, x6343, x2, 33);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6409, x2, 34), x6408, 34),
            x6343,
            34
        ),
        268231,
        4,
    )?;
    let x6410: BytePoly_1 = bigint_sub!(x3, x6408, 1);
    eqz(ctx, &bigint_mul!(x6408, x6410, 2), 8131, 2)?;
    let x6411: BytePoly_32 = bigint_add!(bigint_sub!(x6401, x6371, 32), x6, 32);
    let x6412: BytePoly_32 = bigint_nondet_inv!(ctx, x6411, x6, 32);
    let x6413: BytePoly_64 = bigint_mul!(x6411, x6412, 64);
    let x6414: BytePoly_66 = bigint_nondet_quot!(ctx, x6413, x6, 66);
    let x6415: BytePoly_32 = bigint_nondet_rem!(ctx, x6413, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6414, x6, 98), x6415, 98),
            x6413,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6415, x1, 32), 34, 1)?;
    let x6416: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6407, x6373, 32), x6, 32),
        x6412,
        64
    );
    let x6417: BytePoly_66 = bigint_nondet_quot!(ctx, x6416, x6, 66);
    let x6418: BytePoly_32 = bigint_nondet_rem!(ctx, x6416, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6417, x6, 98), x6418, 98),
            x6416,
            98
        ),
        536459,
        4,
    )?;
    let x6419: BytePoly_64 = bigint_mul!(x6418, x6371, 64);
    let x6420: BytePoly_66 = bigint_nondet_quot!(ctx, x6419, x6, 66);
    let x6421: BytePoly_32 = bigint_nondet_rem!(ctx, x6419, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6420, x6, 98), x6421, 98),
            x6419,
            98
        ),
        536459,
        4,
    )?;
    let x6422: BytePoly_32 = bigint_add!(bigint_sub!(x6373, x6421, 32), x6, 32);
    let x6423: BytePoly_32 = bigint_nondet_quot!(ctx, x6422, x6, 32);
    let x6424: BytePoly_32 = bigint_nondet_rem!(ctx, x6422, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6423, x6, 64), x6424, 64),
            x6422,
            64
        ),
        260103,
        4,
    )?;
    let x6425: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6418, x6418, 64), x6371, 64),
                x6,
                64
            ),
            x6401,
            64
        ),
        x6,
        64
    );
    let x6426: BytePoly_66 = bigint_nondet_quot!(ctx, x6425, x6, 66);
    let x6427: BytePoly_32 = bigint_nondet_rem!(ctx, x6425, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6426, x6, 98), x6427, 98),
            x6425,
            98
        ),
        536459,
        4,
    )?;
    let x6428: BytePoly_64 = bigint_mul!(x6418, x6427, 64);
    let x6429: BytePoly_66 = bigint_nondet_quot!(ctx, x6428, x6, 66);
    let x6430: BytePoly_32 = bigint_nondet_rem!(ctx, x6428, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6429, x6, 98), x6430, 98),
            x6428,
            98
        ),
        536459,
        4,
    )?;
    let x6431: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6430, x6424, 32), 32), x6, 32);
    let x6432: BytePoly_32 = bigint_nondet_quot!(ctx, x6431, x6, 32);
    let x6433: BytePoly_32 = bigint_nondet_rem!(ctx, x6431, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6432, x6, 64), x6433, 64),
            x6431,
            64
        ),
        260103,
        4,
    )?;
    let x6434: BytePoly_33 = bigint_add!(
        bigint_mul!(x6427, x6408, 33),
        bigint_mul!(x6371, x6410, 33),
        33
    );
    let x6435: BytePoly_33 = bigint_add!(
        bigint_mul!(x6433, x6408, 33),
        bigint_mul!(x6373, x6410, 33),
        33
    );
    let x6436: BytePoly_35 = bigint_nondet_quot!(ctx, x6434, x6, 35);
    let x6437: BytePoly_32 = bigint_nondet_rem!(ctx, x6434, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6436, x6, 67), x6437, 67),
            x6434,
            67
        ),
        284487,
        4,
    )?;
    let x6438: BytePoly_35 = bigint_nondet_quot!(ctx, x6435, x6, 35);
    let x6439: BytePoly_32 = bigint_nondet_rem!(ctx, x6435, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6438, x6, 67), x6439, 67),
            x6435,
            67
        ),
        284487,
        4,
    )?;
    let x6440: BytePoly_64 = bigint_mul!(x6401, x6401, 64);
    let x6441: BytePoly_66 = bigint_nondet_quot!(ctx, x6440, x6, 66);
    let x6442: BytePoly_32 = bigint_nondet_rem!(ctx, x6440, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6441, x6, 98), x6442, 98),
            x6440,
            98
        ),
        536459,
        4,
    )?;
    let x6443: BytePoly_33 = bigint_add!(bigint_mul!(x6442, x0, 33), x5, 33);
    let x6444: BytePoly_35 = bigint_nondet_quot!(ctx, x6443, x6, 35);
    let x6445: BytePoly_32 = bigint_nondet_rem!(ctx, x6443, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6444, x6, 67), x6445, 67),
            x6443,
            67
        ),
        284487,
        4,
    )?;
    let x6446: BytePoly_32 = bigint_add!(x6407, x6407, 32);
    let x6447: BytePoly_32 = bigint_nondet_quot!(ctx, x6446, x6, 32);
    let x6448: BytePoly_32 = bigint_nondet_rem!(ctx, x6446, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6447, x6, 64), x6448, 64),
            x6446,
            64
        ),
        260103,
        4,
    )?;
    let x6449: BytePoly_32 = bigint_nondet_inv!(ctx, x6448, x6, 32);
    let x6450: BytePoly_64 = bigint_mul!(x6448, x6449, 64);
    let x6451: BytePoly_66 = bigint_nondet_quot!(ctx, x6450, x6, 66);
    let x6452: BytePoly_32 = bigint_nondet_rem!(ctx, x6450, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6451, x6, 98), x6452, 98),
            x6450,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6452, x3, 32), 34, 1)?;
    let x6453: BytePoly_64 = bigint_mul!(x6445, x6449, 64);
    let x6454: BytePoly_66 = bigint_nondet_quot!(ctx, x6453, x6, 66);
    let x6455: BytePoly_32 = bigint_nondet_rem!(ctx, x6453, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6454, x6, 98), x6455, 98),
            x6453,
            98
        ),
        536459,
        4,
    )?;
    let x6456: BytePoly_64 = bigint_mul!(x6455, x6401, 64);
    let x6457: BytePoly_66 = bigint_nondet_quot!(ctx, x6456, x6, 66);
    let x6458: BytePoly_32 = bigint_nondet_rem!(ctx, x6456, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6457, x6, 98), x6458, 98),
            x6456,
            98
        ),
        536459,
        4,
    )?;
    let x6459: BytePoly_32 = bigint_add!(bigint_sub!(x6407, x6458, 32), x6, 32);
    let x6460: BytePoly_32 = bigint_nondet_quot!(ctx, x6459, x6, 32);
    let x6461: BytePoly_32 = bigint_nondet_rem!(ctx, x6459, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6460, x6, 64), x6461, 64),
            x6459,
            64
        ),
        260103,
        4,
    )?;
    let x6462: BytePoly_64 = bigint_mul!(x6455, x6455, 64);
    let x6463: BytePoly_66 = bigint_nondet_quot!(ctx, x6462, x6, 66);
    let x6464: BytePoly_32 = bigint_nondet_rem!(ctx, x6462, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6463, x6, 98), x6464, 98),
            x6462,
            98
        ),
        536459,
        4,
    )?;
    let x6465: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x6464, x6401, 32), x6, 32),
            x6401,
            32
        ),
        x6,
        32
    );
    let x6466: BytePoly_32 = bigint_nondet_quot!(ctx, x6465, x6, 32);
    let x6467: BytePoly_32 = bigint_nondet_rem!(ctx, x6465, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6466, x6, 64), x6467, 64),
            x6465,
            64
        ),
        260103,
        4,
    )?;
    let x6468: BytePoly_64 = bigint_mul!(x6455, x6467, 64);
    let x6469: BytePoly_66 = bigint_nondet_quot!(ctx, x6468, x6, 66);
    let x6470: BytePoly_32 = bigint_nondet_rem!(ctx, x6468, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6469, x6, 98), x6470, 98),
            x6468,
            98
        ),
        536459,
        4,
    )?;
    let x6471: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6470, x6461, 32), 32), x6, 32);
    let x6472: BytePoly_32 = bigint_nondet_quot!(ctx, x6471, x6, 32);
    let x6473: BytePoly_32 = bigint_nondet_rem!(ctx, x6471, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6472, x6, 64), x6473, 64),
            x6471,
            64
        ),
        260103,
        4,
    )?;
    let x6474: BytePoly_32 = bigint_add!(bigint_sub!(x15, x6437, 32), x6, 32);
    let x6475: BytePoly_32 = bigint_nondet_inv!(ctx, x6474, x6, 32);
    let x6476: BytePoly_64 = bigint_mul!(x6474, x6475, 64);
    let x6477: BytePoly_66 = bigint_nondet_quot!(ctx, x6476, x6, 66);
    let x6478: BytePoly_32 = bigint_nondet_rem!(ctx, x6476, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6477, x6, 98), x6478, 98),
            x6476,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6478, x1, 32), 34, 1)?;
    let x6479: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2172, x6439, 32), x6, 32),
        x6475,
        64
    );
    let x6480: BytePoly_66 = bigint_nondet_quot!(ctx, x6479, x6, 66);
    let x6481: BytePoly_32 = bigint_nondet_rem!(ctx, x6479, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6480, x6, 98), x6481, 98),
            x6479,
            98
        ),
        536459,
        4,
    )?;
    let x6482: BytePoly_64 = bigint_mul!(x6481, x6437, 64);
    let x6483: BytePoly_66 = bigint_nondet_quot!(ctx, x6482, x6, 66);
    let x6484: BytePoly_32 = bigint_nondet_rem!(ctx, x6482, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6483, x6, 98), x6484, 98),
            x6482,
            98
        ),
        536459,
        4,
    )?;
    let x6485: BytePoly_32 = bigint_add!(bigint_sub!(x6439, x6484, 32), x6, 32);
    let x6486: BytePoly_32 = bigint_nondet_quot!(ctx, x6485, x6, 32);
    let x6487: BytePoly_32 = bigint_nondet_rem!(ctx, x6485, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6486, x6, 64), x6487, 64),
            x6485,
            64
        ),
        260103,
        4,
    )?;
    let x6488: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6481, x6481, 64), x6437, 64),
                x6,
                64
            ),
            x15,
            64
        ),
        x6,
        64
    );
    let x6489: BytePoly_66 = bigint_nondet_quot!(ctx, x6488, x6, 66);
    let x6490: BytePoly_32 = bigint_nondet_rem!(ctx, x6488, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6489, x6, 98), x6490, 98),
            x6488,
            98
        ),
        536459,
        4,
    )?;
    let x6491: BytePoly_64 = bigint_mul!(x6481, x6490, 64);
    let x6492: BytePoly_66 = bigint_nondet_quot!(ctx, x6491, x6, 66);
    let x6493: BytePoly_32 = bigint_nondet_rem!(ctx, x6491, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6492, x6, 98), x6493, 98),
            x6491,
            98
        ),
        536459,
        4,
    )?;
    let x6494: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6493, x6487, 32), 32), x6, 32);
    let x6495: BytePoly_32 = bigint_nondet_quot!(ctx, x6494, x6, 32);
    let x6496: BytePoly_32 = bigint_nondet_rem!(ctx, x6494, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6495, x6, 64), x6496, 64),
            x6494,
            64
        ),
        260103,
        4,
    )?;
    let x6497: BytePoly_32 = bigint_add!(bigint_sub!(x6490, x4346, 32), x6, 32);
    let x6498: BytePoly_32 = bigint_nondet_inv!(ctx, x6497, x6, 32);
    let x6499: BytePoly_64 = bigint_mul!(x6497, x6498, 64);
    let x6500: BytePoly_66 = bigint_nondet_quot!(ctx, x6499, x6, 66);
    let x6501: BytePoly_32 = bigint_nondet_rem!(ctx, x6499, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6500, x6, 98), x6501, 98),
            x6499,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x6501, x1, 32), 34, 1)?;
    let x6502: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x6496, x4352, 32), x6, 32),
        x6498,
        64
    );
    let x6503: BytePoly_66 = bigint_nondet_quot!(ctx, x6502, x6, 66);
    let x6504: BytePoly_32 = bigint_nondet_rem!(ctx, x6502, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6503, x6, 98), x6504, 98),
            x6502,
            98
        ),
        536459,
        4,
    )?;
    let x6505: BytePoly_64 = bigint_mul!(x6504, x4346, 64);
    let x6506: BytePoly_66 = bigint_nondet_quot!(ctx, x6505, x6, 66);
    let x6507: BytePoly_32 = bigint_nondet_rem!(ctx, x6505, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6506, x6, 98), x6507, 98),
            x6505,
            98
        ),
        536459,
        4,
    )?;
    let x6508: BytePoly_32 = bigint_add!(bigint_sub!(x4352, x6507, 32), x6, 32);
    let x6509: BytePoly_32 = bigint_nondet_quot!(ctx, x6508, x6, 32);
    let x6510: BytePoly_32 = bigint_nondet_rem!(ctx, x6508, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6509, x6, 64), x6510, 64),
            x6508,
            64
        ),
        260103,
        4,
    )?;
    let x6511: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x6504, x6504, 64), x4346, 64),
                x6,
                64
            ),
            x6490,
            64
        ),
        x6,
        64
    );
    let x6512: BytePoly_66 = bigint_nondet_quot!(ctx, x6511, x6, 66);
    let x6513: BytePoly_32 = bigint_nondet_rem!(ctx, x6511, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6512, x6, 98), x6513, 98),
            x6511,
            98
        ),
        536459,
        4,
    )?;
    let x6514: BytePoly_64 = bigint_mul!(x6504, x6513, 64);
    let x6515: BytePoly_66 = bigint_nondet_quot!(ctx, x6514, x6, 66);
    let x6516: BytePoly_32 = bigint_nondet_rem!(ctx, x6514, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6515, x6, 98), x6516, 98),
            x6514,
            98
        ),
        536459,
        4,
    )?;
    let x6517: BytePoly_32 =
        bigint_add!(bigint_sub!(x6, bigint_add!(x6516, x6510, 32), 32), x6, 32);
    let x6518: BytePoly_32 = bigint_nondet_quot!(ctx, x6517, x6, 32);
    let x6519: BytePoly_32 = bigint_nondet_rem!(ctx, x6517, x6, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x6518, x6, 64), x6519, 64),
            x6517,
            64
        ),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x13, x6513, 33), 34, 1)?;
    return Ok(());
}
pub fn ec_aff_add_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 1);
    let x1: BytePoly_1 = bigint_const!(ctx, 11);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x3: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x4: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    let x5: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x6: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    let x7: BytePoly_1 = bigint_def!(ctx, 1, 5, 1);
    let x8: BytePoly_1 = bigint_def!(ctx, 1, 6, 1);
    eqz(ctx, &bigint_sub!(x4, x4, 1), 34, 1)?;
    let x9: BytePoly_1 = bigint_add!(bigint_sub!(x5, x2, 1), x1, 1);
    let x10: BytePoly_1 = bigint_nondet_inv!(ctx, x9, x1, 1);
    let x11: BytePoly_2 = bigint_mul!(x9, x10, 2);
    let x12: BytePoly_3 = bigint_nondet_quot!(ctx, x11, x1, 3);
    let x13: BytePoly_1 = bigint_nondet_rem!(ctx, x11, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x12, x1, 4), x13, 4), x11, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x13, x0, 1), 34, 1)?;
    let x14: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x6, x3, 1), x1, 1), x10, 2);
    let x15: BytePoly_3 = bigint_nondet_quot!(ctx, x14, x1, 3);
    let x16: BytePoly_1 = bigint_nondet_rem!(ctx, x14, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x15, x1, 4), x16, 4), x14, 4),
        24387,
        2,
    )?;
    let x17: BytePoly_2 = bigint_mul!(x16, x2, 2);
    let x18: BytePoly_3 = bigint_nondet_quot!(ctx, x17, x1, 3);
    let x19: BytePoly_1 = bigint_nondet_rem!(ctx, x17, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x18, x1, 4), x19, 4), x17, 4),
        24387,
        2,
    )?;
    let x20: BytePoly_1 = bigint_add!(bigint_sub!(x3, x19, 1), x1, 1);
    let x21: BytePoly_1 = bigint_nondet_quot!(ctx, x20, x1, 1);
    let x22: BytePoly_1 = bigint_nondet_rem!(ctx, x20, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x21, x1, 2), x22, 2), x20, 2),
        8131,
        2,
    )?;
    let x23: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x16, x16, 2), x2, 2), x1, 2),
            x5,
            2
        ),
        x1,
        2
    );
    let x24: BytePoly_3 = bigint_nondet_quot!(ctx, x23, x1, 3);
    let x25: BytePoly_1 = bigint_nondet_rem!(ctx, x23, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x24, x1, 4), x25, 4), x23, 4),
        24387,
        2,
    )?;
    let x26: BytePoly_2 = bigint_mul!(x16, x25, 2);
    let x27: BytePoly_3 = bigint_nondet_quot!(ctx, x26, x1, 3);
    let x28: BytePoly_1 = bigint_nondet_rem!(ctx, x26, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x27, x1, 4), x28, 4), x26, 4),
        24387,
        2,
    )?;
    let x29: BytePoly_1 = bigint_add!(bigint_sub!(x1, bigint_add!(x28, x22, 1), 1), x1, 1);
    let x30: BytePoly_1 = bigint_nondet_quot!(ctx, x29, x1, 1);
    let x31: BytePoly_1 = bigint_nondet_rem!(ctx, x29, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x30, x1, 2), x31, 2), x29, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x25, x7, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x31, x8, 1), 34, 1)?;
    return Ok(());
}
pub fn ec_aff_doub_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 5);
    let x1: BytePoly_1 = bigint_const!(ctx, 3);
    let x2: BytePoly_1 = bigint_const!(ctx, 1);
    let x3: BytePoly_1 = bigint_const!(ctx, 11);
    let x4: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x5: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x6: BytePoly_2 = bigint_def!(ctx, 2, 2, 1);
    let x7: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x8: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    let x9: BytePoly_2 = bigint_mul!(x4, x4, 2);
    let x10: BytePoly_3 = bigint_nondet_quot!(ctx, x9, x3, 3);
    let x11: BytePoly_1 = bigint_nondet_rem!(ctx, x9, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x10, x3, 4), x11, 4), x9, 4),
        24387,
        2,
    )?;
    let x12: BytePoly_2 = bigint_add!(bigint_mul!(x11, x1, 2), x0, 2);
    let x13: BytePoly_3 = bigint_nondet_quot!(ctx, x12, x3, 3);
    let x14: BytePoly_1 = bigint_nondet_rem!(ctx, x12, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x13, x3, 4), x14, 4), x12, 4),
        24387,
        2,
    )?;
    let x15: BytePoly_1 = bigint_add!(x5, x5, 1);
    let x16: BytePoly_1 = bigint_nondet_quot!(ctx, x15, x3, 1);
    let x17: BytePoly_1 = bigint_nondet_rem!(ctx, x15, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x16, x3, 2), x17, 2), x15, 2),
        8131,
        2,
    )?;
    let x18: BytePoly_1 = bigint_nondet_inv!(ctx, x17, x3, 1);
    let x19: BytePoly_2 = bigint_mul!(x17, x18, 2);
    let x20: BytePoly_3 = bigint_nondet_quot!(ctx, x19, x3, 3);
    let x21: BytePoly_1 = bigint_nondet_rem!(ctx, x19, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x20, x3, 4), x21, 4), x19, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x21, x2, 1), 34, 1)?;
    let x22: BytePoly_2 = bigint_mul!(x14, x18, 2);
    let x23: BytePoly_3 = bigint_nondet_quot!(ctx, x22, x3, 3);
    let x24: BytePoly_1 = bigint_nondet_rem!(ctx, x22, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x23, x3, 4), x24, 4), x22, 4),
        24387,
        2,
    )?;
    let x25: BytePoly_2 = bigint_mul!(x24, x4, 2);
    let x26: BytePoly_3 = bigint_nondet_quot!(ctx, x25, x3, 3);
    let x27: BytePoly_1 = bigint_nondet_rem!(ctx, x25, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x26, x3, 4), x27, 4), x25, 4),
        24387,
        2,
    )?;
    let x28: BytePoly_1 = bigint_add!(bigint_sub!(x5, x27, 1), x3, 1);
    let x29: BytePoly_1 = bigint_nondet_quot!(ctx, x28, x3, 1);
    let x30: BytePoly_1 = bigint_nondet_rem!(ctx, x28, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x29, x3, 2), x30, 2), x28, 2),
        8131,
        2,
    )?;
    let x31: BytePoly_2 = bigint_mul!(x24, x24, 2);
    let x32: BytePoly_3 = bigint_nondet_quot!(ctx, x31, x3, 3);
    let x33: BytePoly_1 = bigint_nondet_rem!(ctx, x31, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x32, x3, 4), x33, 4), x31, 4),
        24387,
        2,
    )?;
    let x34: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x33, x4, 1), x3, 1), x4, 1),
        x3,
        1
    );
    let x35: BytePoly_1 = bigint_nondet_quot!(ctx, x34, x3, 1);
    let x36: BytePoly_1 = bigint_nondet_rem!(ctx, x34, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x35, x3, 2), x36, 2), x34, 2),
        8131,
        2,
    )?;
    let x37: BytePoly_2 = bigint_mul!(x24, x36, 2);
    let x38: BytePoly_3 = bigint_nondet_quot!(ctx, x37, x3, 3);
    let x39: BytePoly_1 = bigint_nondet_rem!(ctx, x37, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x38, x3, 4), x39, 4), x37, 4),
        24387,
        2,
    )?;
    let x40: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x39, x30, 1), 1), x3, 1);
    let x41: BytePoly_1 = bigint_nondet_quot!(ctx, x40, x3, 1);
    let x42: BytePoly_1 = bigint_nondet_rem!(ctx, x40, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x41, x3, 2), x42, 2), x40, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x36, x7, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x42, x8, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x6, x6, 2), 34, 1)?;
    return Ok(());
}
pub fn ec_aff_mul_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 3);
    let x1: BytePoly_1 = bigint_const!(ctx, 1);
    let x2: BytePoly_1 = bigint_const!(ctx, 5);
    let x3: BytePoly_1 = bigint_const!(ctx, 11);
    let x4: BytePoly_1 = bigint_const!(ctx, 2);
    let x5: BytePoly_1 = bigint_const!(ctx, 1);
    let x6: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x7: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x8: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    let x9: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x10: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    let x11: BytePoly_1 = bigint_def!(ctx, 1, 5, 1);
    let x12: BytePoly_1 = bigint_def!(ctx, 1, 6, 1);
    let x13: BytePoly_1 = bigint_def!(ctx, 1, 7, 1);
    eqz(ctx, &bigint_sub!(x6, x6, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x7, x7, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x8, x8, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x9, x9, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x10, x10, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x11, x11, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x12, x12, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x13, x13, 1), 34, 1)?;
    let x14: BytePoly_2 = bigint_mul!(x10, x10, 2);
    let x15: BytePoly_3 = bigint_nondet_quot!(ctx, x14, x3, 3);
    let x16: BytePoly_1 = bigint_nondet_rem!(ctx, x14, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x15, x3, 4), x16, 4), x14, 4),
        24387,
        2,
    )?;
    let x17: BytePoly_2 = bigint_mul!(x9, x9, 2);
    let x18: BytePoly_3 = bigint_nondet_quot!(ctx, x17, x3, 3);
    let x19: BytePoly_1 = bigint_nondet_rem!(ctx, x17, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x18, x3, 4), x19, 4), x17, 4),
        24387,
        2,
    )?;
    let x20: BytePoly_2 = bigint_mul!(x9, x19, 2);
    let x21: BytePoly_3 = bigint_nondet_quot!(ctx, x20, x3, 3);
    let x22: BytePoly_1 = bigint_nondet_rem!(ctx, x20, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x21, x3, 4), x22, 4), x20, 4),
        24387,
        2,
    )?;
    let x23: BytePoly_2 = bigint_mul!(x9, x2, 2);
    let x24: BytePoly_3 = bigint_nondet_quot!(ctx, x23, x3, 3);
    let x25: BytePoly_1 = bigint_nondet_rem!(ctx, x23, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x24, x3, 4), x25, 4), x23, 4),
        24387,
        2,
    )?;
    let x26: BytePoly_1 = bigint_add!(bigint_add!(x22, x25, 1), x1, 1);
    let x27: BytePoly_1 = bigint_nondet_quot!(ctx, x26, x3, 1);
    let x28: BytePoly_1 = bigint_nondet_rem!(ctx, x26, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x27, x3, 2), x28, 2), x26, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x16, x28, 1), 34, 1)?;
    let x29: BytePoly_1 = bigint_nondet_rem!(ctx, x8, x4, 1);
    let x30: BytePoly_1 = bigint_nondet_quot!(ctx, x8, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x30, x4, 2), x29, 2), x8, 2),
        8131,
        2,
    )?;
    let x31: BytePoly_1 = bigint_sub!(x5, x29, 1);
    eqz(ctx, &bigint_mul!(x29, x31, 2), 8131, 2)?;
    let x32: BytePoly_1 = bigint_add!(bigint_sub!(x6, x9, 1), x3, 1);
    let x33: BytePoly_1 = bigint_nondet_inv!(ctx, x32, x3, 1);
    let x34: BytePoly_2 = bigint_mul!(x32, x33, 2);
    let x35: BytePoly_3 = bigint_nondet_quot!(ctx, x34, x3, 3);
    let x36: BytePoly_1 = bigint_nondet_rem!(ctx, x34, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x35, x3, 4), x36, 4), x34, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x36, x1, 1), 34, 1)?;
    let x37: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x7, x10, 1), x3, 1), x33, 2);
    let x38: BytePoly_3 = bigint_nondet_quot!(ctx, x37, x3, 3);
    let x39: BytePoly_1 = bigint_nondet_rem!(ctx, x37, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x38, x3, 4), x39, 4), x37, 4),
        24387,
        2,
    )?;
    let x40: BytePoly_2 = bigint_mul!(x39, x9, 2);
    let x41: BytePoly_3 = bigint_nondet_quot!(ctx, x40, x3, 3);
    let x42: BytePoly_1 = bigint_nondet_rem!(ctx, x40, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x41, x3, 4), x42, 4), x40, 4),
        24387,
        2,
    )?;
    let x43: BytePoly_1 = bigint_add!(bigint_sub!(x10, x42, 1), x3, 1);
    let x44: BytePoly_1 = bigint_nondet_quot!(ctx, x43, x3, 1);
    let x45: BytePoly_1 = bigint_nondet_rem!(ctx, x43, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x44, x3, 2), x45, 2), x43, 2),
        8131,
        2,
    )?;
    let x46: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x39, x39, 2), x9, 2), x3, 2),
            x6,
            2
        ),
        x3,
        2
    );
    let x47: BytePoly_3 = bigint_nondet_quot!(ctx, x46, x3, 3);
    let x48: BytePoly_1 = bigint_nondet_rem!(ctx, x46, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x47, x3, 4), x48, 4), x46, 4),
        24387,
        2,
    )?;
    let x49: BytePoly_2 = bigint_mul!(x39, x48, 2);
    let x50: BytePoly_3 = bigint_nondet_quot!(ctx, x49, x3, 3);
    let x51: BytePoly_1 = bigint_nondet_rem!(ctx, x49, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x50, x3, 4), x51, 4), x49, 4),
        24387,
        2,
    )?;
    let x52: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x51, x45, 1), 1), x3, 1);
    let x53: BytePoly_1 = bigint_nondet_quot!(ctx, x52, x3, 1);
    let x54: BytePoly_1 = bigint_nondet_rem!(ctx, x52, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x53, x3, 2), x54, 2), x52, 2),
        8131,
        2,
    )?;
    let x55: BytePoly_2 = bigint_add!(bigint_mul!(x48, x29, 2), bigint_mul!(x9, x31, 2), 2);
    let x56: BytePoly_2 = bigint_add!(bigint_mul!(x54, x29, 2), bigint_mul!(x10, x31, 2), 2);
    let x57: BytePoly_3 = bigint_nondet_quot!(ctx, x55, x3, 3);
    let x58: BytePoly_1 = bigint_nondet_rem!(ctx, x55, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x57, x3, 4), x58, 4), x55, 4),
        24387,
        2,
    )?;
    let x59: BytePoly_3 = bigint_nondet_quot!(ctx, x56, x3, 3);
    let x60: BytePoly_1 = bigint_nondet_rem!(ctx, x56, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x59, x3, 4), x60, 4), x56, 4),
        24387,
        2,
    )?;
    let x61: BytePoly_2 = bigint_mul!(x6, x6, 2);
    let x62: BytePoly_3 = bigint_nondet_quot!(ctx, x61, x3, 3);
    let x63: BytePoly_1 = bigint_nondet_rem!(ctx, x61, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x62, x3, 4), x63, 4), x61, 4),
        24387,
        2,
    )?;
    let x64: BytePoly_2 = bigint_add!(bigint_mul!(x63, x0, 2), x2, 2);
    let x65: BytePoly_3 = bigint_nondet_quot!(ctx, x64, x3, 3);
    let x66: BytePoly_1 = bigint_nondet_rem!(ctx, x64, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x65, x3, 4), x66, 4), x64, 4),
        24387,
        2,
    )?;
    let x67: BytePoly_1 = bigint_add!(x7, x7, 1);
    let x68: BytePoly_1 = bigint_nondet_quot!(ctx, x67, x3, 1);
    let x69: BytePoly_1 = bigint_nondet_rem!(ctx, x67, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x68, x3, 2), x69, 2), x67, 2),
        8131,
        2,
    )?;
    let x70: BytePoly_1 = bigint_nondet_inv!(ctx, x69, x3, 1);
    let x71: BytePoly_2 = bigint_mul!(x69, x70, 2);
    let x72: BytePoly_3 = bigint_nondet_quot!(ctx, x71, x3, 3);
    let x73: BytePoly_1 = bigint_nondet_rem!(ctx, x71, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x72, x3, 4), x73, 4), x71, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x73, x5, 1), 34, 1)?;
    let x74: BytePoly_2 = bigint_mul!(x66, x70, 2);
    let x75: BytePoly_3 = bigint_nondet_quot!(ctx, x74, x3, 3);
    let x76: BytePoly_1 = bigint_nondet_rem!(ctx, x74, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x75, x3, 4), x76, 4), x74, 4),
        24387,
        2,
    )?;
    let x77: BytePoly_2 = bigint_mul!(x76, x6, 2);
    let x78: BytePoly_3 = bigint_nondet_quot!(ctx, x77, x3, 3);
    let x79: BytePoly_1 = bigint_nondet_rem!(ctx, x77, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x78, x3, 4), x79, 4), x77, 4),
        24387,
        2,
    )?;
    let x80: BytePoly_1 = bigint_add!(bigint_sub!(x7, x79, 1), x3, 1);
    let x81: BytePoly_1 = bigint_nondet_quot!(ctx, x80, x3, 1);
    let x82: BytePoly_1 = bigint_nondet_rem!(ctx, x80, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x81, x3, 2), x82, 2), x80, 2),
        8131,
        2,
    )?;
    let x83: BytePoly_2 = bigint_mul!(x76, x76, 2);
    let x84: BytePoly_3 = bigint_nondet_quot!(ctx, x83, x3, 3);
    let x85: BytePoly_1 = bigint_nondet_rem!(ctx, x83, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x84, x3, 4), x85, 4), x83, 4),
        24387,
        2,
    )?;
    let x86: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x85, x6, 1), x3, 1), x6, 1),
        x3,
        1
    );
    let x87: BytePoly_1 = bigint_nondet_quot!(ctx, x86, x3, 1);
    let x88: BytePoly_1 = bigint_nondet_rem!(ctx, x86, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x87, x3, 2), x88, 2), x86, 2),
        8131,
        2,
    )?;
    let x89: BytePoly_2 = bigint_mul!(x76, x88, 2);
    let x90: BytePoly_3 = bigint_nondet_quot!(ctx, x89, x3, 3);
    let x91: BytePoly_1 = bigint_nondet_rem!(ctx, x89, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x90, x3, 4), x91, 4), x89, 4),
        24387,
        2,
    )?;
    let x92: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x91, x82, 1), 1), x3, 1);
    let x93: BytePoly_1 = bigint_nondet_quot!(ctx, x92, x3, 1);
    let x94: BytePoly_1 = bigint_nondet_rem!(ctx, x92, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x93, x3, 2), x94, 2), x92, 2),
        8131,
        2,
    )?;
    let x95: BytePoly_1 = bigint_nondet_rem!(ctx, x30, x4, 1);
    let x96: BytePoly_1 = bigint_nondet_quot!(ctx, x30, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x96, x4, 2), x95, 2), x30, 2),
        8131,
        2,
    )?;
    let x97: BytePoly_1 = bigint_sub!(x5, x95, 1);
    eqz(ctx, &bigint_mul!(x95, x97, 2), 8131, 2)?;
    let x98: BytePoly_1 = bigint_add!(bigint_sub!(x88, x58, 1), x3, 1);
    let x99: BytePoly_1 = bigint_nondet_inv!(ctx, x98, x3, 1);
    let x100: BytePoly_2 = bigint_mul!(x98, x99, 2);
    let x101: BytePoly_3 = bigint_nondet_quot!(ctx, x100, x3, 3);
    let x102: BytePoly_1 = bigint_nondet_rem!(ctx, x100, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x101, x3, 4), x102, 4), x100, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x102, x1, 1), 34, 1)?;
    let x103: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x94, x60, 1), x3, 1), x99, 2);
    let x104: BytePoly_3 = bigint_nondet_quot!(ctx, x103, x3, 3);
    let x105: BytePoly_1 = bigint_nondet_rem!(ctx, x103, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x104, x3, 4), x105, 4), x103, 4),
        24387,
        2,
    )?;
    let x106: BytePoly_2 = bigint_mul!(x105, x58, 2);
    let x107: BytePoly_3 = bigint_nondet_quot!(ctx, x106, x3, 3);
    let x108: BytePoly_1 = bigint_nondet_rem!(ctx, x106, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x107, x3, 4), x108, 4), x106, 4),
        24387,
        2,
    )?;
    let x109: BytePoly_1 = bigint_add!(bigint_sub!(x60, x108, 1), x3, 1);
    let x110: BytePoly_1 = bigint_nondet_quot!(ctx, x109, x3, 1);
    let x111: BytePoly_1 = bigint_nondet_rem!(ctx, x109, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x110, x3, 2), x111, 2), x109, 2),
        8131,
        2,
    )?;
    let x112: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x105, x105, 2), x58, 2), x3, 2),
            x88,
            2
        ),
        x3,
        2
    );
    let x113: BytePoly_3 = bigint_nondet_quot!(ctx, x112, x3, 3);
    let x114: BytePoly_1 = bigint_nondet_rem!(ctx, x112, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x113, x3, 4), x114, 4), x112, 4),
        24387,
        2,
    )?;
    let x115: BytePoly_2 = bigint_mul!(x105, x114, 2);
    let x116: BytePoly_3 = bigint_nondet_quot!(ctx, x115, x3, 3);
    let x117: BytePoly_1 = bigint_nondet_rem!(ctx, x115, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x116, x3, 4), x117, 4), x115, 4),
        24387,
        2,
    )?;
    let x118: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x117, x111, 1), 1), x3, 1);
    let x119: BytePoly_1 = bigint_nondet_quot!(ctx, x118, x3, 1);
    let x120: BytePoly_1 = bigint_nondet_rem!(ctx, x118, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x119, x3, 2), x120, 2), x118, 2),
        8131,
        2,
    )?;
    let x121: BytePoly_2 = bigint_add!(bigint_mul!(x114, x95, 2), bigint_mul!(x58, x97, 2), 2);
    let x122: BytePoly_2 = bigint_add!(bigint_mul!(x120, x95, 2), bigint_mul!(x60, x97, 2), 2);
    let x123: BytePoly_3 = bigint_nondet_quot!(ctx, x121, x3, 3);
    let x124: BytePoly_1 = bigint_nondet_rem!(ctx, x121, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x123, x3, 4), x124, 4), x121, 4),
        24387,
        2,
    )?;
    let x125: BytePoly_3 = bigint_nondet_quot!(ctx, x122, x3, 3);
    let x126: BytePoly_1 = bigint_nondet_rem!(ctx, x122, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x125, x3, 4), x126, 4), x122, 4),
        24387,
        2,
    )?;
    let x127: BytePoly_2 = bigint_mul!(x88, x88, 2);
    let x128: BytePoly_3 = bigint_nondet_quot!(ctx, x127, x3, 3);
    let x129: BytePoly_1 = bigint_nondet_rem!(ctx, x127, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x128, x3, 4), x129, 4), x127, 4),
        24387,
        2,
    )?;
    let x130: BytePoly_2 = bigint_add!(bigint_mul!(x129, x0, 2), x2, 2);
    let x131: BytePoly_3 = bigint_nondet_quot!(ctx, x130, x3, 3);
    let x132: BytePoly_1 = bigint_nondet_rem!(ctx, x130, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x131, x3, 4), x132, 4), x130, 4),
        24387,
        2,
    )?;
    let x133: BytePoly_1 = bigint_add!(x94, x94, 1);
    let x134: BytePoly_1 = bigint_nondet_quot!(ctx, x133, x3, 1);
    let x135: BytePoly_1 = bigint_nondet_rem!(ctx, x133, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x134, x3, 2), x135, 2), x133, 2),
        8131,
        2,
    )?;
    let x136: BytePoly_1 = bigint_nondet_inv!(ctx, x135, x3, 1);
    let x137: BytePoly_2 = bigint_mul!(x135, x136, 2);
    let x138: BytePoly_3 = bigint_nondet_quot!(ctx, x137, x3, 3);
    let x139: BytePoly_1 = bigint_nondet_rem!(ctx, x137, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x138, x3, 4), x139, 4), x137, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x139, x5, 1), 34, 1)?;
    let x140: BytePoly_2 = bigint_mul!(x132, x136, 2);
    let x141: BytePoly_3 = bigint_nondet_quot!(ctx, x140, x3, 3);
    let x142: BytePoly_1 = bigint_nondet_rem!(ctx, x140, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x141, x3, 4), x142, 4), x140, 4),
        24387,
        2,
    )?;
    let x143: BytePoly_2 = bigint_mul!(x142, x88, 2);
    let x144: BytePoly_3 = bigint_nondet_quot!(ctx, x143, x3, 3);
    let x145: BytePoly_1 = bigint_nondet_rem!(ctx, x143, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x144, x3, 4), x145, 4), x143, 4),
        24387,
        2,
    )?;
    let x146: BytePoly_1 = bigint_add!(bigint_sub!(x94, x145, 1), x3, 1);
    let x147: BytePoly_1 = bigint_nondet_quot!(ctx, x146, x3, 1);
    let x148: BytePoly_1 = bigint_nondet_rem!(ctx, x146, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x147, x3, 2), x148, 2), x146, 2),
        8131,
        2,
    )?;
    let x149: BytePoly_2 = bigint_mul!(x142, x142, 2);
    let x150: BytePoly_3 = bigint_nondet_quot!(ctx, x149, x3, 3);
    let x151: BytePoly_1 = bigint_nondet_rem!(ctx, x149, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x150, x3, 4), x151, 4), x149, 4),
        24387,
        2,
    )?;
    let x152: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x151, x88, 1), x3, 1), x88, 1),
        x3,
        1
    );
    let x153: BytePoly_1 = bigint_nondet_quot!(ctx, x152, x3, 1);
    let x154: BytePoly_1 = bigint_nondet_rem!(ctx, x152, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x153, x3, 2), x154, 2), x152, 2),
        8131,
        2,
    )?;
    let x155: BytePoly_2 = bigint_mul!(x142, x154, 2);
    let x156: BytePoly_3 = bigint_nondet_quot!(ctx, x155, x3, 3);
    let x157: BytePoly_1 = bigint_nondet_rem!(ctx, x155, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x156, x3, 4), x157, 4), x155, 4),
        24387,
        2,
    )?;
    let x158: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x157, x148, 1), 1), x3, 1);
    let x159: BytePoly_1 = bigint_nondet_quot!(ctx, x158, x3, 1);
    let x160: BytePoly_1 = bigint_nondet_rem!(ctx, x158, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x159, x3, 2), x160, 2), x158, 2),
        8131,
        2,
    )?;
    let x161: BytePoly_1 = bigint_nondet_rem!(ctx, x96, x4, 1);
    let x162: BytePoly_1 = bigint_nondet_quot!(ctx, x96, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x162, x4, 2), x161, 2), x96, 2),
        8131,
        2,
    )?;
    let x163: BytePoly_1 = bigint_sub!(x5, x161, 1);
    eqz(ctx, &bigint_mul!(x161, x163, 2), 8131, 2)?;
    let x164: BytePoly_1 = bigint_add!(bigint_sub!(x154, x124, 1), x3, 1);
    let x165: BytePoly_1 = bigint_nondet_inv!(ctx, x164, x3, 1);
    let x166: BytePoly_2 = bigint_mul!(x164, x165, 2);
    let x167: BytePoly_3 = bigint_nondet_quot!(ctx, x166, x3, 3);
    let x168: BytePoly_1 = bigint_nondet_rem!(ctx, x166, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x167, x3, 4), x168, 4), x166, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x168, x1, 1), 34, 1)?;
    let x169: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x160, x126, 1), x3, 1), x165, 2);
    let x170: BytePoly_3 = bigint_nondet_quot!(ctx, x169, x3, 3);
    let x171: BytePoly_1 = bigint_nondet_rem!(ctx, x169, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x170, x3, 4), x171, 4), x169, 4),
        24387,
        2,
    )?;
    let x172: BytePoly_2 = bigint_mul!(x171, x124, 2);
    let x173: BytePoly_3 = bigint_nondet_quot!(ctx, x172, x3, 3);
    let x174: BytePoly_1 = bigint_nondet_rem!(ctx, x172, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x173, x3, 4), x174, 4), x172, 4),
        24387,
        2,
    )?;
    let x175: BytePoly_1 = bigint_add!(bigint_sub!(x126, x174, 1), x3, 1);
    let x176: BytePoly_1 = bigint_nondet_quot!(ctx, x175, x3, 1);
    let x177: BytePoly_1 = bigint_nondet_rem!(ctx, x175, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x176, x3, 2), x177, 2), x175, 2),
        8131,
        2,
    )?;
    let x178: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x171, x171, 2), x124, 2), x3, 2),
            x154,
            2
        ),
        x3,
        2
    );
    let x179: BytePoly_3 = bigint_nondet_quot!(ctx, x178, x3, 3);
    let x180: BytePoly_1 = bigint_nondet_rem!(ctx, x178, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x179, x3, 4), x180, 4), x178, 4),
        24387,
        2,
    )?;
    let x181: BytePoly_2 = bigint_mul!(x171, x180, 2);
    let x182: BytePoly_3 = bigint_nondet_quot!(ctx, x181, x3, 3);
    let x183: BytePoly_1 = bigint_nondet_rem!(ctx, x181, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x182, x3, 4), x183, 4), x181, 4),
        24387,
        2,
    )?;
    let x184: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x183, x177, 1), 1), x3, 1);
    let x185: BytePoly_1 = bigint_nondet_quot!(ctx, x184, x3, 1);
    let x186: BytePoly_1 = bigint_nondet_rem!(ctx, x184, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x185, x3, 2), x186, 2), x184, 2),
        8131,
        2,
    )?;
    let x187: BytePoly_2 = bigint_add!(bigint_mul!(x180, x161, 2), bigint_mul!(x124, x163, 2), 2);
    let x188: BytePoly_2 = bigint_add!(bigint_mul!(x186, x161, 2), bigint_mul!(x126, x163, 2), 2);
    let x189: BytePoly_3 = bigint_nondet_quot!(ctx, x187, x3, 3);
    let x190: BytePoly_1 = bigint_nondet_rem!(ctx, x187, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x189, x3, 4), x190, 4), x187, 4),
        24387,
        2,
    )?;
    let x191: BytePoly_3 = bigint_nondet_quot!(ctx, x188, x3, 3);
    let x192: BytePoly_1 = bigint_nondet_rem!(ctx, x188, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x191, x3, 4), x192, 4), x188, 4),
        24387,
        2,
    )?;
    let x193: BytePoly_2 = bigint_mul!(x154, x154, 2);
    let x194: BytePoly_3 = bigint_nondet_quot!(ctx, x193, x3, 3);
    let x195: BytePoly_1 = bigint_nondet_rem!(ctx, x193, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x194, x3, 4), x195, 4), x193, 4),
        24387,
        2,
    )?;
    let x196: BytePoly_2 = bigint_add!(bigint_mul!(x195, x0, 2), x2, 2);
    let x197: BytePoly_3 = bigint_nondet_quot!(ctx, x196, x3, 3);
    let x198: BytePoly_1 = bigint_nondet_rem!(ctx, x196, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x197, x3, 4), x198, 4), x196, 4),
        24387,
        2,
    )?;
    let x199: BytePoly_1 = bigint_add!(x160, x160, 1);
    let x200: BytePoly_1 = bigint_nondet_quot!(ctx, x199, x3, 1);
    let x201: BytePoly_1 = bigint_nondet_rem!(ctx, x199, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x200, x3, 2), x201, 2), x199, 2),
        8131,
        2,
    )?;
    let x202: BytePoly_1 = bigint_nondet_inv!(ctx, x201, x3, 1);
    let x203: BytePoly_2 = bigint_mul!(x201, x202, 2);
    let x204: BytePoly_3 = bigint_nondet_quot!(ctx, x203, x3, 3);
    let x205: BytePoly_1 = bigint_nondet_rem!(ctx, x203, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x204, x3, 4), x205, 4), x203, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x205, x5, 1), 34, 1)?;
    let x206: BytePoly_2 = bigint_mul!(x198, x202, 2);
    let x207: BytePoly_3 = bigint_nondet_quot!(ctx, x206, x3, 3);
    let x208: BytePoly_1 = bigint_nondet_rem!(ctx, x206, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x207, x3, 4), x208, 4), x206, 4),
        24387,
        2,
    )?;
    let x209: BytePoly_2 = bigint_mul!(x208, x154, 2);
    let x210: BytePoly_3 = bigint_nondet_quot!(ctx, x209, x3, 3);
    let x211: BytePoly_1 = bigint_nondet_rem!(ctx, x209, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x210, x3, 4), x211, 4), x209, 4),
        24387,
        2,
    )?;
    let x212: BytePoly_1 = bigint_add!(bigint_sub!(x160, x211, 1), x3, 1);
    let x213: BytePoly_1 = bigint_nondet_quot!(ctx, x212, x3, 1);
    let x214: BytePoly_1 = bigint_nondet_rem!(ctx, x212, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x213, x3, 2), x214, 2), x212, 2),
        8131,
        2,
    )?;
    let x215: BytePoly_2 = bigint_mul!(x208, x208, 2);
    let x216: BytePoly_3 = bigint_nondet_quot!(ctx, x215, x3, 3);
    let x217: BytePoly_1 = bigint_nondet_rem!(ctx, x215, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x216, x3, 4), x217, 4), x215, 4),
        24387,
        2,
    )?;
    let x218: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x217, x154, 1), x3, 1), x154, 1),
        x3,
        1
    );
    let x219: BytePoly_1 = bigint_nondet_quot!(ctx, x218, x3, 1);
    let x220: BytePoly_1 = bigint_nondet_rem!(ctx, x218, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x219, x3, 2), x220, 2), x218, 2),
        8131,
        2,
    )?;
    let x221: BytePoly_2 = bigint_mul!(x208, x220, 2);
    let x222: BytePoly_3 = bigint_nondet_quot!(ctx, x221, x3, 3);
    let x223: BytePoly_1 = bigint_nondet_rem!(ctx, x221, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x222, x3, 4), x223, 4), x221, 4),
        24387,
        2,
    )?;
    let x224: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x223, x214, 1), 1), x3, 1);
    let x225: BytePoly_1 = bigint_nondet_quot!(ctx, x224, x3, 1);
    let x226: BytePoly_1 = bigint_nondet_rem!(ctx, x224, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x225, x3, 2), x226, 2), x224, 2),
        8131,
        2,
    )?;
    let x227: BytePoly_1 = bigint_nondet_rem!(ctx, x162, x4, 1);
    let x228: BytePoly_1 = bigint_nondet_quot!(ctx, x162, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x228, x4, 2), x227, 2), x162, 2),
        8131,
        2,
    )?;
    let x229: BytePoly_1 = bigint_sub!(x5, x227, 1);
    eqz(ctx, &bigint_mul!(x227, x229, 2), 8131, 2)?;
    let x230: BytePoly_1 = bigint_add!(bigint_sub!(x220, x190, 1), x3, 1);
    let x231: BytePoly_1 = bigint_nondet_inv!(ctx, x230, x3, 1);
    let x232: BytePoly_2 = bigint_mul!(x230, x231, 2);
    let x233: BytePoly_3 = bigint_nondet_quot!(ctx, x232, x3, 3);
    let x234: BytePoly_1 = bigint_nondet_rem!(ctx, x232, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x233, x3, 4), x234, 4), x232, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x234, x1, 1), 34, 1)?;
    let x235: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x226, x192, 1), x3, 1), x231, 2);
    let x236: BytePoly_3 = bigint_nondet_quot!(ctx, x235, x3, 3);
    let x237: BytePoly_1 = bigint_nondet_rem!(ctx, x235, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x236, x3, 4), x237, 4), x235, 4),
        24387,
        2,
    )?;
    let x238: BytePoly_2 = bigint_mul!(x237, x190, 2);
    let x239: BytePoly_3 = bigint_nondet_quot!(ctx, x238, x3, 3);
    let x240: BytePoly_1 = bigint_nondet_rem!(ctx, x238, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x239, x3, 4), x240, 4), x238, 4),
        24387,
        2,
    )?;
    let x241: BytePoly_1 = bigint_add!(bigint_sub!(x192, x240, 1), x3, 1);
    let x242: BytePoly_1 = bigint_nondet_quot!(ctx, x241, x3, 1);
    let x243: BytePoly_1 = bigint_nondet_rem!(ctx, x241, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x242, x3, 2), x243, 2), x241, 2),
        8131,
        2,
    )?;
    let x244: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x237, x237, 2), x190, 2), x3, 2),
            x220,
            2
        ),
        x3,
        2
    );
    let x245: BytePoly_3 = bigint_nondet_quot!(ctx, x244, x3, 3);
    let x246: BytePoly_1 = bigint_nondet_rem!(ctx, x244, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x245, x3, 4), x246, 4), x244, 4),
        24387,
        2,
    )?;
    let x247: BytePoly_2 = bigint_mul!(x237, x246, 2);
    let x248: BytePoly_3 = bigint_nondet_quot!(ctx, x247, x3, 3);
    let x249: BytePoly_1 = bigint_nondet_rem!(ctx, x247, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x248, x3, 4), x249, 4), x247, 4),
        24387,
        2,
    )?;
    let x250: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x249, x243, 1), 1), x3, 1);
    let x251: BytePoly_1 = bigint_nondet_quot!(ctx, x250, x3, 1);
    let x252: BytePoly_1 = bigint_nondet_rem!(ctx, x250, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x251, x3, 2), x252, 2), x250, 2),
        8131,
        2,
    )?;
    let x253: BytePoly_2 = bigint_add!(bigint_mul!(x246, x227, 2), bigint_mul!(x190, x229, 2), 2);
    let x254: BytePoly_2 = bigint_add!(bigint_mul!(x252, x227, 2), bigint_mul!(x192, x229, 2), 2);
    let x255: BytePoly_3 = bigint_nondet_quot!(ctx, x253, x3, 3);
    let x256: BytePoly_1 = bigint_nondet_rem!(ctx, x253, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x255, x3, 4), x256, 4), x253, 4),
        24387,
        2,
    )?;
    let x257: BytePoly_3 = bigint_nondet_quot!(ctx, x254, x3, 3);
    let x258: BytePoly_1 = bigint_nondet_rem!(ctx, x254, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x257, x3, 4), x258, 4), x254, 4),
        24387,
        2,
    )?;
    let x259: BytePoly_2 = bigint_mul!(x220, x220, 2);
    let x260: BytePoly_3 = bigint_nondet_quot!(ctx, x259, x3, 3);
    let x261: BytePoly_1 = bigint_nondet_rem!(ctx, x259, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x260, x3, 4), x261, 4), x259, 4),
        24387,
        2,
    )?;
    let x262: BytePoly_2 = bigint_add!(bigint_mul!(x261, x0, 2), x2, 2);
    let x263: BytePoly_3 = bigint_nondet_quot!(ctx, x262, x3, 3);
    let x264: BytePoly_1 = bigint_nondet_rem!(ctx, x262, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x263, x3, 4), x264, 4), x262, 4),
        24387,
        2,
    )?;
    let x265: BytePoly_1 = bigint_add!(x226, x226, 1);
    let x266: BytePoly_1 = bigint_nondet_quot!(ctx, x265, x3, 1);
    let x267: BytePoly_1 = bigint_nondet_rem!(ctx, x265, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x266, x3, 2), x267, 2), x265, 2),
        8131,
        2,
    )?;
    let x268: BytePoly_1 = bigint_nondet_inv!(ctx, x267, x3, 1);
    let x269: BytePoly_2 = bigint_mul!(x267, x268, 2);
    let x270: BytePoly_3 = bigint_nondet_quot!(ctx, x269, x3, 3);
    let x271: BytePoly_1 = bigint_nondet_rem!(ctx, x269, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x270, x3, 4), x271, 4), x269, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x271, x5, 1), 34, 1)?;
    let x272: BytePoly_2 = bigint_mul!(x264, x268, 2);
    let x273: BytePoly_3 = bigint_nondet_quot!(ctx, x272, x3, 3);
    let x274: BytePoly_1 = bigint_nondet_rem!(ctx, x272, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x273, x3, 4), x274, 4), x272, 4),
        24387,
        2,
    )?;
    let x275: BytePoly_2 = bigint_mul!(x274, x220, 2);
    let x276: BytePoly_3 = bigint_nondet_quot!(ctx, x275, x3, 3);
    let x277: BytePoly_1 = bigint_nondet_rem!(ctx, x275, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x276, x3, 4), x277, 4), x275, 4),
        24387,
        2,
    )?;
    let x278: BytePoly_1 = bigint_add!(bigint_sub!(x226, x277, 1), x3, 1);
    let x279: BytePoly_1 = bigint_nondet_quot!(ctx, x278, x3, 1);
    let x280: BytePoly_1 = bigint_nondet_rem!(ctx, x278, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x279, x3, 2), x280, 2), x278, 2),
        8131,
        2,
    )?;
    let x281: BytePoly_2 = bigint_mul!(x274, x274, 2);
    let x282: BytePoly_3 = bigint_nondet_quot!(ctx, x281, x3, 3);
    let x283: BytePoly_1 = bigint_nondet_rem!(ctx, x281, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x282, x3, 4), x283, 4), x281, 4),
        24387,
        2,
    )?;
    let x284: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x283, x220, 1), x3, 1), x220, 1),
        x3,
        1
    );
    let x285: BytePoly_1 = bigint_nondet_quot!(ctx, x284, x3, 1);
    let x286: BytePoly_1 = bigint_nondet_rem!(ctx, x284, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x285, x3, 2), x286, 2), x284, 2),
        8131,
        2,
    )?;
    let x287: BytePoly_2 = bigint_mul!(x274, x286, 2);
    let x288: BytePoly_3 = bigint_nondet_quot!(ctx, x287, x3, 3);
    let x289: BytePoly_1 = bigint_nondet_rem!(ctx, x287, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x288, x3, 4), x289, 4), x287, 4),
        24387,
        2,
    )?;
    let x290: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x289, x280, 1), 1), x3, 1);
    let x291: BytePoly_1 = bigint_nondet_quot!(ctx, x290, x3, 1);
    let x292: BytePoly_1 = bigint_nondet_rem!(ctx, x290, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x291, x3, 2), x292, 2), x290, 2),
        8131,
        2,
    )?;
    let x293: BytePoly_1 = bigint_nondet_rem!(ctx, x228, x4, 1);
    let x294: BytePoly_1 = bigint_nondet_quot!(ctx, x228, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x294, x4, 2), x293, 2), x228, 2),
        8131,
        2,
    )?;
    let x295: BytePoly_1 = bigint_sub!(x5, x293, 1);
    eqz(ctx, &bigint_mul!(x293, x295, 2), 8131, 2)?;
    let x296: BytePoly_1 = bigint_add!(bigint_sub!(x286, x256, 1), x3, 1);
    let x297: BytePoly_1 = bigint_nondet_inv!(ctx, x296, x3, 1);
    let x298: BytePoly_2 = bigint_mul!(x296, x297, 2);
    let x299: BytePoly_3 = bigint_nondet_quot!(ctx, x298, x3, 3);
    let x300: BytePoly_1 = bigint_nondet_rem!(ctx, x298, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x299, x3, 4), x300, 4), x298, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x300, x1, 1), 34, 1)?;
    let x301: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x292, x258, 1), x3, 1), x297, 2);
    let x302: BytePoly_3 = bigint_nondet_quot!(ctx, x301, x3, 3);
    let x303: BytePoly_1 = bigint_nondet_rem!(ctx, x301, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x302, x3, 4), x303, 4), x301, 4),
        24387,
        2,
    )?;
    let x304: BytePoly_2 = bigint_mul!(x303, x256, 2);
    let x305: BytePoly_3 = bigint_nondet_quot!(ctx, x304, x3, 3);
    let x306: BytePoly_1 = bigint_nondet_rem!(ctx, x304, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x305, x3, 4), x306, 4), x304, 4),
        24387,
        2,
    )?;
    let x307: BytePoly_1 = bigint_add!(bigint_sub!(x258, x306, 1), x3, 1);
    let x308: BytePoly_1 = bigint_nondet_quot!(ctx, x307, x3, 1);
    let x309: BytePoly_1 = bigint_nondet_rem!(ctx, x307, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x308, x3, 2), x309, 2), x307, 2),
        8131,
        2,
    )?;
    let x310: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x303, x303, 2), x256, 2), x3, 2),
            x286,
            2
        ),
        x3,
        2
    );
    let x311: BytePoly_3 = bigint_nondet_quot!(ctx, x310, x3, 3);
    let x312: BytePoly_1 = bigint_nondet_rem!(ctx, x310, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x311, x3, 4), x312, 4), x310, 4),
        24387,
        2,
    )?;
    let x313: BytePoly_2 = bigint_mul!(x303, x312, 2);
    let x314: BytePoly_3 = bigint_nondet_quot!(ctx, x313, x3, 3);
    let x315: BytePoly_1 = bigint_nondet_rem!(ctx, x313, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x314, x3, 4), x315, 4), x313, 4),
        24387,
        2,
    )?;
    let x316: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x315, x309, 1), 1), x3, 1);
    let x317: BytePoly_1 = bigint_nondet_quot!(ctx, x316, x3, 1);
    let x318: BytePoly_1 = bigint_nondet_rem!(ctx, x316, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x317, x3, 2), x318, 2), x316, 2),
        8131,
        2,
    )?;
    let x319: BytePoly_2 = bigint_add!(bigint_mul!(x312, x293, 2), bigint_mul!(x256, x295, 2), 2);
    let x320: BytePoly_2 = bigint_add!(bigint_mul!(x318, x293, 2), bigint_mul!(x258, x295, 2), 2);
    let x321: BytePoly_3 = bigint_nondet_quot!(ctx, x319, x3, 3);
    let x322: BytePoly_1 = bigint_nondet_rem!(ctx, x319, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x321, x3, 4), x322, 4), x319, 4),
        24387,
        2,
    )?;
    let x323: BytePoly_3 = bigint_nondet_quot!(ctx, x320, x3, 3);
    let x324: BytePoly_1 = bigint_nondet_rem!(ctx, x320, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x323, x3, 4), x324, 4), x320, 4),
        24387,
        2,
    )?;
    let x325: BytePoly_2 = bigint_mul!(x286, x286, 2);
    let x326: BytePoly_3 = bigint_nondet_quot!(ctx, x325, x3, 3);
    let x327: BytePoly_1 = bigint_nondet_rem!(ctx, x325, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x326, x3, 4), x327, 4), x325, 4),
        24387,
        2,
    )?;
    let x328: BytePoly_2 = bigint_add!(bigint_mul!(x327, x0, 2), x2, 2);
    let x329: BytePoly_3 = bigint_nondet_quot!(ctx, x328, x3, 3);
    let x330: BytePoly_1 = bigint_nondet_rem!(ctx, x328, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x329, x3, 4), x330, 4), x328, 4),
        24387,
        2,
    )?;
    let x331: BytePoly_1 = bigint_add!(x292, x292, 1);
    let x332: BytePoly_1 = bigint_nondet_quot!(ctx, x331, x3, 1);
    let x333: BytePoly_1 = bigint_nondet_rem!(ctx, x331, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x332, x3, 2), x333, 2), x331, 2),
        8131,
        2,
    )?;
    let x334: BytePoly_1 = bigint_nondet_inv!(ctx, x333, x3, 1);
    let x335: BytePoly_2 = bigint_mul!(x333, x334, 2);
    let x336: BytePoly_3 = bigint_nondet_quot!(ctx, x335, x3, 3);
    let x337: BytePoly_1 = bigint_nondet_rem!(ctx, x335, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x336, x3, 4), x337, 4), x335, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x337, x5, 1), 34, 1)?;
    let x338: BytePoly_2 = bigint_mul!(x330, x334, 2);
    let x339: BytePoly_3 = bigint_nondet_quot!(ctx, x338, x3, 3);
    let x340: BytePoly_1 = bigint_nondet_rem!(ctx, x338, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x339, x3, 4), x340, 4), x338, 4),
        24387,
        2,
    )?;
    let x341: BytePoly_2 = bigint_mul!(x340, x286, 2);
    let x342: BytePoly_3 = bigint_nondet_quot!(ctx, x341, x3, 3);
    let x343: BytePoly_1 = bigint_nondet_rem!(ctx, x341, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x342, x3, 4), x343, 4), x341, 4),
        24387,
        2,
    )?;
    let x344: BytePoly_1 = bigint_add!(bigint_sub!(x292, x343, 1), x3, 1);
    let x345: BytePoly_1 = bigint_nondet_quot!(ctx, x344, x3, 1);
    let x346: BytePoly_1 = bigint_nondet_rem!(ctx, x344, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x345, x3, 2), x346, 2), x344, 2),
        8131,
        2,
    )?;
    let x347: BytePoly_2 = bigint_mul!(x340, x340, 2);
    let x348: BytePoly_3 = bigint_nondet_quot!(ctx, x347, x3, 3);
    let x349: BytePoly_1 = bigint_nondet_rem!(ctx, x347, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x348, x3, 4), x349, 4), x347, 4),
        24387,
        2,
    )?;
    let x350: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x349, x286, 1), x3, 1), x286, 1),
        x3,
        1
    );
    let x351: BytePoly_1 = bigint_nondet_quot!(ctx, x350, x3, 1);
    let x352: BytePoly_1 = bigint_nondet_rem!(ctx, x350, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x351, x3, 2), x352, 2), x350, 2),
        8131,
        2,
    )?;
    let x353: BytePoly_2 = bigint_mul!(x340, x352, 2);
    let x354: BytePoly_3 = bigint_nondet_quot!(ctx, x353, x3, 3);
    let x355: BytePoly_1 = bigint_nondet_rem!(ctx, x353, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x354, x3, 4), x355, 4), x353, 4),
        24387,
        2,
    )?;
    let x356: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x355, x346, 1), 1), x3, 1);
    let x357: BytePoly_1 = bigint_nondet_quot!(ctx, x356, x3, 1);
    let x358: BytePoly_1 = bigint_nondet_rem!(ctx, x356, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x357, x3, 2), x358, 2), x356, 2),
        8131,
        2,
    )?;
    let x359: BytePoly_1 = bigint_nondet_rem!(ctx, x294, x4, 1);
    let x360: BytePoly_1 = bigint_nondet_quot!(ctx, x294, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x360, x4, 2), x359, 2), x294, 2),
        8131,
        2,
    )?;
    let x361: BytePoly_1 = bigint_sub!(x5, x359, 1);
    eqz(ctx, &bigint_mul!(x359, x361, 2), 8131, 2)?;
    let x362: BytePoly_1 = bigint_add!(bigint_sub!(x352, x322, 1), x3, 1);
    let x363: BytePoly_1 = bigint_nondet_inv!(ctx, x362, x3, 1);
    let x364: BytePoly_2 = bigint_mul!(x362, x363, 2);
    let x365: BytePoly_3 = bigint_nondet_quot!(ctx, x364, x3, 3);
    let x366: BytePoly_1 = bigint_nondet_rem!(ctx, x364, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x365, x3, 4), x366, 4), x364, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x366, x1, 1), 34, 1)?;
    let x367: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x358, x324, 1), x3, 1), x363, 2);
    let x368: BytePoly_3 = bigint_nondet_quot!(ctx, x367, x3, 3);
    let x369: BytePoly_1 = bigint_nondet_rem!(ctx, x367, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x368, x3, 4), x369, 4), x367, 4),
        24387,
        2,
    )?;
    let x370: BytePoly_2 = bigint_mul!(x369, x322, 2);
    let x371: BytePoly_3 = bigint_nondet_quot!(ctx, x370, x3, 3);
    let x372: BytePoly_1 = bigint_nondet_rem!(ctx, x370, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x371, x3, 4), x372, 4), x370, 4),
        24387,
        2,
    )?;
    let x373: BytePoly_1 = bigint_add!(bigint_sub!(x324, x372, 1), x3, 1);
    let x374: BytePoly_1 = bigint_nondet_quot!(ctx, x373, x3, 1);
    let x375: BytePoly_1 = bigint_nondet_rem!(ctx, x373, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x374, x3, 2), x375, 2), x373, 2),
        8131,
        2,
    )?;
    let x376: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x369, x369, 2), x322, 2), x3, 2),
            x352,
            2
        ),
        x3,
        2
    );
    let x377: BytePoly_3 = bigint_nondet_quot!(ctx, x376, x3, 3);
    let x378: BytePoly_1 = bigint_nondet_rem!(ctx, x376, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x377, x3, 4), x378, 4), x376, 4),
        24387,
        2,
    )?;
    let x379: BytePoly_2 = bigint_mul!(x369, x378, 2);
    let x380: BytePoly_3 = bigint_nondet_quot!(ctx, x379, x3, 3);
    let x381: BytePoly_1 = bigint_nondet_rem!(ctx, x379, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x380, x3, 4), x381, 4), x379, 4),
        24387,
        2,
    )?;
    let x382: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x381, x375, 1), 1), x3, 1);
    let x383: BytePoly_1 = bigint_nondet_quot!(ctx, x382, x3, 1);
    let x384: BytePoly_1 = bigint_nondet_rem!(ctx, x382, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x383, x3, 2), x384, 2), x382, 2),
        8131,
        2,
    )?;
    let x385: BytePoly_2 = bigint_add!(bigint_mul!(x378, x359, 2), bigint_mul!(x322, x361, 2), 2);
    let x386: BytePoly_2 = bigint_add!(bigint_mul!(x384, x359, 2), bigint_mul!(x324, x361, 2), 2);
    let x387: BytePoly_3 = bigint_nondet_quot!(ctx, x385, x3, 3);
    let x388: BytePoly_1 = bigint_nondet_rem!(ctx, x385, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x387, x3, 4), x388, 4), x385, 4),
        24387,
        2,
    )?;
    let x389: BytePoly_3 = bigint_nondet_quot!(ctx, x386, x3, 3);
    let x390: BytePoly_1 = bigint_nondet_rem!(ctx, x386, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x389, x3, 4), x390, 4), x386, 4),
        24387,
        2,
    )?;
    let x391: BytePoly_2 = bigint_mul!(x352, x352, 2);
    let x392: BytePoly_3 = bigint_nondet_quot!(ctx, x391, x3, 3);
    let x393: BytePoly_1 = bigint_nondet_rem!(ctx, x391, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x392, x3, 4), x393, 4), x391, 4),
        24387,
        2,
    )?;
    let x394: BytePoly_2 = bigint_add!(bigint_mul!(x393, x0, 2), x2, 2);
    let x395: BytePoly_3 = bigint_nondet_quot!(ctx, x394, x3, 3);
    let x396: BytePoly_1 = bigint_nondet_rem!(ctx, x394, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x395, x3, 4), x396, 4), x394, 4),
        24387,
        2,
    )?;
    let x397: BytePoly_1 = bigint_add!(x358, x358, 1);
    let x398: BytePoly_1 = bigint_nondet_quot!(ctx, x397, x3, 1);
    let x399: BytePoly_1 = bigint_nondet_rem!(ctx, x397, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x398, x3, 2), x399, 2), x397, 2),
        8131,
        2,
    )?;
    let x400: BytePoly_1 = bigint_nondet_inv!(ctx, x399, x3, 1);
    let x401: BytePoly_2 = bigint_mul!(x399, x400, 2);
    let x402: BytePoly_3 = bigint_nondet_quot!(ctx, x401, x3, 3);
    let x403: BytePoly_1 = bigint_nondet_rem!(ctx, x401, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x402, x3, 4), x403, 4), x401, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x403, x5, 1), 34, 1)?;
    let x404: BytePoly_2 = bigint_mul!(x396, x400, 2);
    let x405: BytePoly_3 = bigint_nondet_quot!(ctx, x404, x3, 3);
    let x406: BytePoly_1 = bigint_nondet_rem!(ctx, x404, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x405, x3, 4), x406, 4), x404, 4),
        24387,
        2,
    )?;
    let x407: BytePoly_2 = bigint_mul!(x406, x352, 2);
    let x408: BytePoly_3 = bigint_nondet_quot!(ctx, x407, x3, 3);
    let x409: BytePoly_1 = bigint_nondet_rem!(ctx, x407, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x408, x3, 4), x409, 4), x407, 4),
        24387,
        2,
    )?;
    let x410: BytePoly_1 = bigint_add!(bigint_sub!(x358, x409, 1), x3, 1);
    let x411: BytePoly_1 = bigint_nondet_quot!(ctx, x410, x3, 1);
    let x412: BytePoly_1 = bigint_nondet_rem!(ctx, x410, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x411, x3, 2), x412, 2), x410, 2),
        8131,
        2,
    )?;
    let x413: BytePoly_2 = bigint_mul!(x406, x406, 2);
    let x414: BytePoly_3 = bigint_nondet_quot!(ctx, x413, x3, 3);
    let x415: BytePoly_1 = bigint_nondet_rem!(ctx, x413, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x414, x3, 4), x415, 4), x413, 4),
        24387,
        2,
    )?;
    let x416: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x415, x352, 1), x3, 1), x352, 1),
        x3,
        1
    );
    let x417: BytePoly_1 = bigint_nondet_quot!(ctx, x416, x3, 1);
    let x418: BytePoly_1 = bigint_nondet_rem!(ctx, x416, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x417, x3, 2), x418, 2), x416, 2),
        8131,
        2,
    )?;
    let x419: BytePoly_2 = bigint_mul!(x406, x418, 2);
    let x420: BytePoly_3 = bigint_nondet_quot!(ctx, x419, x3, 3);
    let x421: BytePoly_1 = bigint_nondet_rem!(ctx, x419, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x420, x3, 4), x421, 4), x419, 4),
        24387,
        2,
    )?;
    let x422: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x421, x412, 1), 1), x3, 1);
    let x423: BytePoly_1 = bigint_nondet_quot!(ctx, x422, x3, 1);
    let x424: BytePoly_1 = bigint_nondet_rem!(ctx, x422, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x423, x3, 2), x424, 2), x422, 2),
        8131,
        2,
    )?;
    let x425: BytePoly_1 = bigint_nondet_rem!(ctx, x360, x4, 1);
    let x426: BytePoly_1 = bigint_nondet_quot!(ctx, x360, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x426, x4, 2), x425, 2), x360, 2),
        8131,
        2,
    )?;
    let x427: BytePoly_1 = bigint_sub!(x5, x425, 1);
    eqz(ctx, &bigint_mul!(x425, x427, 2), 8131, 2)?;
    let x428: BytePoly_1 = bigint_add!(bigint_sub!(x418, x388, 1), x3, 1);
    let x429: BytePoly_1 = bigint_nondet_inv!(ctx, x428, x3, 1);
    let x430: BytePoly_2 = bigint_mul!(x428, x429, 2);
    let x431: BytePoly_3 = bigint_nondet_quot!(ctx, x430, x3, 3);
    let x432: BytePoly_1 = bigint_nondet_rem!(ctx, x430, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x431, x3, 4), x432, 4), x430, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x432, x1, 1), 34, 1)?;
    let x433: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x424, x390, 1), x3, 1), x429, 2);
    let x434: BytePoly_3 = bigint_nondet_quot!(ctx, x433, x3, 3);
    let x435: BytePoly_1 = bigint_nondet_rem!(ctx, x433, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x434, x3, 4), x435, 4), x433, 4),
        24387,
        2,
    )?;
    let x436: BytePoly_2 = bigint_mul!(x435, x388, 2);
    let x437: BytePoly_3 = bigint_nondet_quot!(ctx, x436, x3, 3);
    let x438: BytePoly_1 = bigint_nondet_rem!(ctx, x436, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x437, x3, 4), x438, 4), x436, 4),
        24387,
        2,
    )?;
    let x439: BytePoly_1 = bigint_add!(bigint_sub!(x390, x438, 1), x3, 1);
    let x440: BytePoly_1 = bigint_nondet_quot!(ctx, x439, x3, 1);
    let x441: BytePoly_1 = bigint_nondet_rem!(ctx, x439, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x440, x3, 2), x441, 2), x439, 2),
        8131,
        2,
    )?;
    let x442: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x435, x435, 2), x388, 2), x3, 2),
            x418,
            2
        ),
        x3,
        2
    );
    let x443: BytePoly_3 = bigint_nondet_quot!(ctx, x442, x3, 3);
    let x444: BytePoly_1 = bigint_nondet_rem!(ctx, x442, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x443, x3, 4), x444, 4), x442, 4),
        24387,
        2,
    )?;
    let x445: BytePoly_2 = bigint_mul!(x435, x444, 2);
    let x446: BytePoly_3 = bigint_nondet_quot!(ctx, x445, x3, 3);
    let x447: BytePoly_1 = bigint_nondet_rem!(ctx, x445, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x446, x3, 4), x447, 4), x445, 4),
        24387,
        2,
    )?;
    let x448: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x447, x441, 1), 1), x3, 1);
    let x449: BytePoly_1 = bigint_nondet_quot!(ctx, x448, x3, 1);
    let x450: BytePoly_1 = bigint_nondet_rem!(ctx, x448, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x449, x3, 2), x450, 2), x448, 2),
        8131,
        2,
    )?;
    let x451: BytePoly_2 = bigint_add!(bigint_mul!(x444, x425, 2), bigint_mul!(x388, x427, 2), 2);
    let x452: BytePoly_2 = bigint_add!(bigint_mul!(x450, x425, 2), bigint_mul!(x390, x427, 2), 2);
    let x453: BytePoly_3 = bigint_nondet_quot!(ctx, x451, x3, 3);
    let x454: BytePoly_1 = bigint_nondet_rem!(ctx, x451, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x453, x3, 4), x454, 4), x451, 4),
        24387,
        2,
    )?;
    let x455: BytePoly_3 = bigint_nondet_quot!(ctx, x452, x3, 3);
    let x456: BytePoly_1 = bigint_nondet_rem!(ctx, x452, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x455, x3, 4), x456, 4), x452, 4),
        24387,
        2,
    )?;
    let x457: BytePoly_2 = bigint_mul!(x418, x418, 2);
    let x458: BytePoly_3 = bigint_nondet_quot!(ctx, x457, x3, 3);
    let x459: BytePoly_1 = bigint_nondet_rem!(ctx, x457, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x458, x3, 4), x459, 4), x457, 4),
        24387,
        2,
    )?;
    let x460: BytePoly_2 = bigint_add!(bigint_mul!(x459, x0, 2), x2, 2);
    let x461: BytePoly_3 = bigint_nondet_quot!(ctx, x460, x3, 3);
    let x462: BytePoly_1 = bigint_nondet_rem!(ctx, x460, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x461, x3, 4), x462, 4), x460, 4),
        24387,
        2,
    )?;
    let x463: BytePoly_1 = bigint_add!(x424, x424, 1);
    let x464: BytePoly_1 = bigint_nondet_quot!(ctx, x463, x3, 1);
    let x465: BytePoly_1 = bigint_nondet_rem!(ctx, x463, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x464, x3, 2), x465, 2), x463, 2),
        8131,
        2,
    )?;
    let x466: BytePoly_1 = bigint_nondet_inv!(ctx, x465, x3, 1);
    let x467: BytePoly_2 = bigint_mul!(x465, x466, 2);
    let x468: BytePoly_3 = bigint_nondet_quot!(ctx, x467, x3, 3);
    let x469: BytePoly_1 = bigint_nondet_rem!(ctx, x467, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x468, x3, 4), x469, 4), x467, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x469, x5, 1), 34, 1)?;
    let x470: BytePoly_2 = bigint_mul!(x462, x466, 2);
    let x471: BytePoly_3 = bigint_nondet_quot!(ctx, x470, x3, 3);
    let x472: BytePoly_1 = bigint_nondet_rem!(ctx, x470, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x471, x3, 4), x472, 4), x470, 4),
        24387,
        2,
    )?;
    let x473: BytePoly_2 = bigint_mul!(x472, x418, 2);
    let x474: BytePoly_3 = bigint_nondet_quot!(ctx, x473, x3, 3);
    let x475: BytePoly_1 = bigint_nondet_rem!(ctx, x473, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x474, x3, 4), x475, 4), x473, 4),
        24387,
        2,
    )?;
    let x476: BytePoly_1 = bigint_add!(bigint_sub!(x424, x475, 1), x3, 1);
    let x477: BytePoly_1 = bigint_nondet_quot!(ctx, x476, x3, 1);
    let x478: BytePoly_1 = bigint_nondet_rem!(ctx, x476, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x477, x3, 2), x478, 2), x476, 2),
        8131,
        2,
    )?;
    let x479: BytePoly_2 = bigint_mul!(x472, x472, 2);
    let x480: BytePoly_3 = bigint_nondet_quot!(ctx, x479, x3, 3);
    let x481: BytePoly_1 = bigint_nondet_rem!(ctx, x479, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x480, x3, 4), x481, 4), x479, 4),
        24387,
        2,
    )?;
    let x482: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x481, x418, 1), x3, 1), x418, 1),
        x3,
        1
    );
    let x483: BytePoly_1 = bigint_nondet_quot!(ctx, x482, x3, 1);
    let x484: BytePoly_1 = bigint_nondet_rem!(ctx, x482, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x483, x3, 2), x484, 2), x482, 2),
        8131,
        2,
    )?;
    let x485: BytePoly_2 = bigint_mul!(x472, x484, 2);
    let x486: BytePoly_3 = bigint_nondet_quot!(ctx, x485, x3, 3);
    let x487: BytePoly_1 = bigint_nondet_rem!(ctx, x485, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x486, x3, 4), x487, 4), x485, 4),
        24387,
        2,
    )?;
    let x488: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x487, x478, 1), 1), x3, 1);
    let x489: BytePoly_1 = bigint_nondet_quot!(ctx, x488, x3, 1);
    let x490: BytePoly_1 = bigint_nondet_rem!(ctx, x488, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x489, x3, 2), x490, 2), x488, 2),
        8131,
        2,
    )?;
    let x491: BytePoly_1 = bigint_nondet_rem!(ctx, x426, x4, 1);
    let x492: BytePoly_1 = bigint_nondet_quot!(ctx, x426, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x492, x4, 2), x491, 2), x426, 2),
        8131,
        2,
    )?;
    let x493: BytePoly_1 = bigint_sub!(x5, x491, 1);
    eqz(ctx, &bigint_mul!(x491, x493, 2), 8131, 2)?;
    let x494: BytePoly_1 = bigint_add!(bigint_sub!(x484, x454, 1), x3, 1);
    let x495: BytePoly_1 = bigint_nondet_inv!(ctx, x494, x3, 1);
    let x496: BytePoly_2 = bigint_mul!(x494, x495, 2);
    let x497: BytePoly_3 = bigint_nondet_quot!(ctx, x496, x3, 3);
    let x498: BytePoly_1 = bigint_nondet_rem!(ctx, x496, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x497, x3, 4), x498, 4), x496, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x498, x1, 1), 34, 1)?;
    let x499: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x490, x456, 1), x3, 1), x495, 2);
    let x500: BytePoly_3 = bigint_nondet_quot!(ctx, x499, x3, 3);
    let x501: BytePoly_1 = bigint_nondet_rem!(ctx, x499, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x500, x3, 4), x501, 4), x499, 4),
        24387,
        2,
    )?;
    let x502: BytePoly_2 = bigint_mul!(x501, x454, 2);
    let x503: BytePoly_3 = bigint_nondet_quot!(ctx, x502, x3, 3);
    let x504: BytePoly_1 = bigint_nondet_rem!(ctx, x502, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x503, x3, 4), x504, 4), x502, 4),
        24387,
        2,
    )?;
    let x505: BytePoly_1 = bigint_add!(bigint_sub!(x456, x504, 1), x3, 1);
    let x506: BytePoly_1 = bigint_nondet_quot!(ctx, x505, x3, 1);
    let x507: BytePoly_1 = bigint_nondet_rem!(ctx, x505, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x506, x3, 2), x507, 2), x505, 2),
        8131,
        2,
    )?;
    let x508: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x501, x501, 2), x454, 2), x3, 2),
            x484,
            2
        ),
        x3,
        2
    );
    let x509: BytePoly_3 = bigint_nondet_quot!(ctx, x508, x3, 3);
    let x510: BytePoly_1 = bigint_nondet_rem!(ctx, x508, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x509, x3, 4), x510, 4), x508, 4),
        24387,
        2,
    )?;
    let x511: BytePoly_2 = bigint_mul!(x501, x510, 2);
    let x512: BytePoly_3 = bigint_nondet_quot!(ctx, x511, x3, 3);
    let x513: BytePoly_1 = bigint_nondet_rem!(ctx, x511, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x512, x3, 4), x513, 4), x511, 4),
        24387,
        2,
    )?;
    let x514: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x513, x507, 1), 1), x3, 1);
    let x515: BytePoly_1 = bigint_nondet_quot!(ctx, x514, x3, 1);
    let x516: BytePoly_1 = bigint_nondet_rem!(ctx, x514, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x515, x3, 2), x516, 2), x514, 2),
        8131,
        2,
    )?;
    let x517: BytePoly_2 = bigint_add!(bigint_mul!(x510, x491, 2), bigint_mul!(x454, x493, 2), 2);
    let x518: BytePoly_2 = bigint_add!(bigint_mul!(x516, x491, 2), bigint_mul!(x456, x493, 2), 2);
    let x519: BytePoly_3 = bigint_nondet_quot!(ctx, x517, x3, 3);
    let x520: BytePoly_1 = bigint_nondet_rem!(ctx, x517, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x519, x3, 4), x520, 4), x517, 4),
        24387,
        2,
    )?;
    let x521: BytePoly_3 = bigint_nondet_quot!(ctx, x518, x3, 3);
    let x522: BytePoly_1 = bigint_nondet_rem!(ctx, x518, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x521, x3, 4), x522, 4), x518, 4),
        24387,
        2,
    )?;
    let x523: BytePoly_2 = bigint_mul!(x484, x484, 2);
    let x524: BytePoly_3 = bigint_nondet_quot!(ctx, x523, x3, 3);
    let x525: BytePoly_1 = bigint_nondet_rem!(ctx, x523, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x524, x3, 4), x525, 4), x523, 4),
        24387,
        2,
    )?;
    let x526: BytePoly_2 = bigint_add!(bigint_mul!(x525, x0, 2), x2, 2);
    let x527: BytePoly_3 = bigint_nondet_quot!(ctx, x526, x3, 3);
    let x528: BytePoly_1 = bigint_nondet_rem!(ctx, x526, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x527, x3, 4), x528, 4), x526, 4),
        24387,
        2,
    )?;
    let x529: BytePoly_1 = bigint_add!(x490, x490, 1);
    let x530: BytePoly_1 = bigint_nondet_quot!(ctx, x529, x3, 1);
    let x531: BytePoly_1 = bigint_nondet_rem!(ctx, x529, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x530, x3, 2), x531, 2), x529, 2),
        8131,
        2,
    )?;
    let x532: BytePoly_1 = bigint_nondet_inv!(ctx, x531, x3, 1);
    let x533: BytePoly_2 = bigint_mul!(x531, x532, 2);
    let x534: BytePoly_3 = bigint_nondet_quot!(ctx, x533, x3, 3);
    let x535: BytePoly_1 = bigint_nondet_rem!(ctx, x533, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x534, x3, 4), x535, 4), x533, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x535, x5, 1), 34, 1)?;
    let x536: BytePoly_2 = bigint_mul!(x528, x532, 2);
    let x537: BytePoly_3 = bigint_nondet_quot!(ctx, x536, x3, 3);
    let x538: BytePoly_1 = bigint_nondet_rem!(ctx, x536, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x537, x3, 4), x538, 4), x536, 4),
        24387,
        2,
    )?;
    let x539: BytePoly_2 = bigint_mul!(x538, x484, 2);
    let x540: BytePoly_3 = bigint_nondet_quot!(ctx, x539, x3, 3);
    let x541: BytePoly_1 = bigint_nondet_rem!(ctx, x539, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x540, x3, 4), x541, 4), x539, 4),
        24387,
        2,
    )?;
    let x542: BytePoly_1 = bigint_add!(bigint_sub!(x490, x541, 1), x3, 1);
    let x543: BytePoly_1 = bigint_nondet_quot!(ctx, x542, x3, 1);
    let x544: BytePoly_1 = bigint_nondet_rem!(ctx, x542, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x543, x3, 2), x544, 2), x542, 2),
        8131,
        2,
    )?;
    let x545: BytePoly_2 = bigint_mul!(x538, x538, 2);
    let x546: BytePoly_3 = bigint_nondet_quot!(ctx, x545, x3, 3);
    let x547: BytePoly_1 = bigint_nondet_rem!(ctx, x545, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x546, x3, 4), x547, 4), x545, 4),
        24387,
        2,
    )?;
    let x548: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x547, x484, 1), x3, 1), x484, 1),
        x3,
        1
    );
    let x549: BytePoly_1 = bigint_nondet_quot!(ctx, x548, x3, 1);
    let x550: BytePoly_1 = bigint_nondet_rem!(ctx, x548, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x549, x3, 2), x550, 2), x548, 2),
        8131,
        2,
    )?;
    let x551: BytePoly_2 = bigint_mul!(x538, x550, 2);
    let x552: BytePoly_3 = bigint_nondet_quot!(ctx, x551, x3, 3);
    let x553: BytePoly_1 = bigint_nondet_rem!(ctx, x551, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x552, x3, 4), x553, 4), x551, 4),
        24387,
        2,
    )?;
    let x554: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x553, x544, 1), 1), x3, 1);
    let x555: BytePoly_1 = bigint_nondet_quot!(ctx, x554, x3, 1);
    let x556: BytePoly_1 = bigint_nondet_rem!(ctx, x554, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x555, x3, 2), x556, 2), x554, 2),
        8131,
        2,
    )?;
    let x557: BytePoly_1 = bigint_nondet_rem!(ctx, x492, x4, 1);
    let x558: BytePoly_1 = bigint_nondet_quot!(ctx, x492, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x558, x4, 2), x557, 2), x492, 2),
        8131,
        2,
    )?;
    let x559: BytePoly_1 = bigint_sub!(x5, x557, 1);
    eqz(ctx, &bigint_mul!(x557, x559, 2), 8131, 2)?;
    let x560: BytePoly_1 = bigint_add!(bigint_sub!(x550, x520, 1), x3, 1);
    let x561: BytePoly_1 = bigint_nondet_inv!(ctx, x560, x3, 1);
    let x562: BytePoly_2 = bigint_mul!(x560, x561, 2);
    let x563: BytePoly_3 = bigint_nondet_quot!(ctx, x562, x3, 3);
    let x564: BytePoly_1 = bigint_nondet_rem!(ctx, x562, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x563, x3, 4), x564, 4), x562, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x564, x1, 1), 34, 1)?;
    let x565: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x556, x522, 1), x3, 1), x561, 2);
    let x566: BytePoly_3 = bigint_nondet_quot!(ctx, x565, x3, 3);
    let x567: BytePoly_1 = bigint_nondet_rem!(ctx, x565, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x566, x3, 4), x567, 4), x565, 4),
        24387,
        2,
    )?;
    let x568: BytePoly_2 = bigint_mul!(x567, x520, 2);
    let x569: BytePoly_3 = bigint_nondet_quot!(ctx, x568, x3, 3);
    let x570: BytePoly_1 = bigint_nondet_rem!(ctx, x568, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x569, x3, 4), x570, 4), x568, 4),
        24387,
        2,
    )?;
    let x571: BytePoly_1 = bigint_add!(bigint_sub!(x522, x570, 1), x3, 1);
    let x572: BytePoly_1 = bigint_nondet_quot!(ctx, x571, x3, 1);
    let x573: BytePoly_1 = bigint_nondet_rem!(ctx, x571, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x572, x3, 2), x573, 2), x571, 2),
        8131,
        2,
    )?;
    let x574: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x567, x567, 2), x520, 2), x3, 2),
            x550,
            2
        ),
        x3,
        2
    );
    let x575: BytePoly_3 = bigint_nondet_quot!(ctx, x574, x3, 3);
    let x576: BytePoly_1 = bigint_nondet_rem!(ctx, x574, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x575, x3, 4), x576, 4), x574, 4),
        24387,
        2,
    )?;
    let x577: BytePoly_2 = bigint_mul!(x567, x576, 2);
    let x578: BytePoly_3 = bigint_nondet_quot!(ctx, x577, x3, 3);
    let x579: BytePoly_1 = bigint_nondet_rem!(ctx, x577, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x578, x3, 4), x579, 4), x577, 4),
        24387,
        2,
    )?;
    let x580: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x579, x573, 1), 1), x3, 1);
    let x581: BytePoly_1 = bigint_nondet_quot!(ctx, x580, x3, 1);
    let x582: BytePoly_1 = bigint_nondet_rem!(ctx, x580, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x581, x3, 2), x582, 2), x580, 2),
        8131,
        2,
    )?;
    let x583: BytePoly_2 = bigint_add!(bigint_mul!(x576, x557, 2), bigint_mul!(x520, x559, 2), 2);
    let x584: BytePoly_2 = bigint_add!(bigint_mul!(x582, x557, 2), bigint_mul!(x522, x559, 2), 2);
    let x585: BytePoly_3 = bigint_nondet_quot!(ctx, x583, x3, 3);
    let x586: BytePoly_1 = bigint_nondet_rem!(ctx, x583, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x585, x3, 4), x586, 4), x583, 4),
        24387,
        2,
    )?;
    let x587: BytePoly_3 = bigint_nondet_quot!(ctx, x584, x3, 3);
    let x588: BytePoly_1 = bigint_nondet_rem!(ctx, x584, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x587, x3, 4), x588, 4), x584, 4),
        24387,
        2,
    )?;
    let x589: BytePoly_2 = bigint_mul!(x550, x550, 2);
    let x590: BytePoly_3 = bigint_nondet_quot!(ctx, x589, x3, 3);
    let x591: BytePoly_1 = bigint_nondet_rem!(ctx, x589, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x590, x3, 4), x591, 4), x589, 4),
        24387,
        2,
    )?;
    let x592: BytePoly_2 = bigint_add!(bigint_mul!(x591, x0, 2), x2, 2);
    let x593: BytePoly_3 = bigint_nondet_quot!(ctx, x592, x3, 3);
    let x594: BytePoly_1 = bigint_nondet_rem!(ctx, x592, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x593, x3, 4), x594, 4), x592, 4),
        24387,
        2,
    )?;
    let x595: BytePoly_1 = bigint_add!(x556, x556, 1);
    let x596: BytePoly_1 = bigint_nondet_quot!(ctx, x595, x3, 1);
    let x597: BytePoly_1 = bigint_nondet_rem!(ctx, x595, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x596, x3, 2), x597, 2), x595, 2),
        8131,
        2,
    )?;
    let x598: BytePoly_1 = bigint_nondet_inv!(ctx, x597, x3, 1);
    let x599: BytePoly_2 = bigint_mul!(x597, x598, 2);
    let x600: BytePoly_3 = bigint_nondet_quot!(ctx, x599, x3, 3);
    let x601: BytePoly_1 = bigint_nondet_rem!(ctx, x599, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x600, x3, 4), x601, 4), x599, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x601, x5, 1), 34, 1)?;
    let x602: BytePoly_2 = bigint_mul!(x594, x598, 2);
    let x603: BytePoly_3 = bigint_nondet_quot!(ctx, x602, x3, 3);
    let x604: BytePoly_1 = bigint_nondet_rem!(ctx, x602, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x603, x3, 4), x604, 4), x602, 4),
        24387,
        2,
    )?;
    let x605: BytePoly_2 = bigint_mul!(x604, x550, 2);
    let x606: BytePoly_3 = bigint_nondet_quot!(ctx, x605, x3, 3);
    let x607: BytePoly_1 = bigint_nondet_rem!(ctx, x605, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x606, x3, 4), x607, 4), x605, 4),
        24387,
        2,
    )?;
    let x608: BytePoly_1 = bigint_add!(bigint_sub!(x556, x607, 1), x3, 1);
    let x609: BytePoly_1 = bigint_nondet_quot!(ctx, x608, x3, 1);
    let x610: BytePoly_1 = bigint_nondet_rem!(ctx, x608, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x609, x3, 2), x610, 2), x608, 2),
        8131,
        2,
    )?;
    let x611: BytePoly_2 = bigint_mul!(x604, x604, 2);
    let x612: BytePoly_3 = bigint_nondet_quot!(ctx, x611, x3, 3);
    let x613: BytePoly_1 = bigint_nondet_rem!(ctx, x611, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x612, x3, 4), x613, 4), x611, 4),
        24387,
        2,
    )?;
    let x614: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x613, x550, 1), x3, 1), x550, 1),
        x3,
        1
    );
    let x615: BytePoly_1 = bigint_nondet_quot!(ctx, x614, x3, 1);
    let x616: BytePoly_1 = bigint_nondet_rem!(ctx, x614, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x615, x3, 2), x616, 2), x614, 2),
        8131,
        2,
    )?;
    let x617: BytePoly_2 = bigint_mul!(x604, x616, 2);
    let x618: BytePoly_3 = bigint_nondet_quot!(ctx, x617, x3, 3);
    let x619: BytePoly_1 = bigint_nondet_rem!(ctx, x617, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x618, x3, 4), x619, 4), x617, 4),
        24387,
        2,
    )?;
    let x620: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x619, x610, 1), 1), x3, 1);
    let x621: BytePoly_1 = bigint_nondet_quot!(ctx, x620, x3, 1);
    let x622: BytePoly_1 = bigint_nondet_rem!(ctx, x620, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x621, x3, 2), x622, 2), x620, 2),
        8131,
        2,
    )?;
    let x623: BytePoly_1 = bigint_nondet_rem!(ctx, x558, x4, 1);
    let x624: BytePoly_1 = bigint_nondet_quot!(ctx, x558, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x624, x4, 2), x623, 2), x558, 2),
        8131,
        2,
    )?;
    let x625: BytePoly_1 = bigint_sub!(x5, x623, 1);
    eqz(ctx, &bigint_mul!(x623, x625, 2), 8131, 2)?;
    let x626: BytePoly_1 = bigint_add!(bigint_sub!(x616, x586, 1), x3, 1);
    let x627: BytePoly_1 = bigint_nondet_inv!(ctx, x626, x3, 1);
    let x628: BytePoly_2 = bigint_mul!(x626, x627, 2);
    let x629: BytePoly_3 = bigint_nondet_quot!(ctx, x628, x3, 3);
    let x630: BytePoly_1 = bigint_nondet_rem!(ctx, x628, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x629, x3, 4), x630, 4), x628, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x630, x1, 1), 34, 1)?;
    let x631: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x622, x588, 1), x3, 1), x627, 2);
    let x632: BytePoly_3 = bigint_nondet_quot!(ctx, x631, x3, 3);
    let x633: BytePoly_1 = bigint_nondet_rem!(ctx, x631, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x632, x3, 4), x633, 4), x631, 4),
        24387,
        2,
    )?;
    let x634: BytePoly_2 = bigint_mul!(x633, x586, 2);
    let x635: BytePoly_3 = bigint_nondet_quot!(ctx, x634, x3, 3);
    let x636: BytePoly_1 = bigint_nondet_rem!(ctx, x634, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x635, x3, 4), x636, 4), x634, 4),
        24387,
        2,
    )?;
    let x637: BytePoly_1 = bigint_add!(bigint_sub!(x588, x636, 1), x3, 1);
    let x638: BytePoly_1 = bigint_nondet_quot!(ctx, x637, x3, 1);
    let x639: BytePoly_1 = bigint_nondet_rem!(ctx, x637, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x638, x3, 2), x639, 2), x637, 2),
        8131,
        2,
    )?;
    let x640: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x633, x633, 2), x586, 2), x3, 2),
            x616,
            2
        ),
        x3,
        2
    );
    let x641: BytePoly_3 = bigint_nondet_quot!(ctx, x640, x3, 3);
    let x642: BytePoly_1 = bigint_nondet_rem!(ctx, x640, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x641, x3, 4), x642, 4), x640, 4),
        24387,
        2,
    )?;
    let x643: BytePoly_2 = bigint_mul!(x633, x642, 2);
    let x644: BytePoly_3 = bigint_nondet_quot!(ctx, x643, x3, 3);
    let x645: BytePoly_1 = bigint_nondet_rem!(ctx, x643, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x644, x3, 4), x645, 4), x643, 4),
        24387,
        2,
    )?;
    let x646: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x645, x639, 1), 1), x3, 1);
    let x647: BytePoly_1 = bigint_nondet_quot!(ctx, x646, x3, 1);
    let x648: BytePoly_1 = bigint_nondet_rem!(ctx, x646, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x647, x3, 2), x648, 2), x646, 2),
        8131,
        2,
    )?;
    let x649: BytePoly_2 = bigint_add!(bigint_mul!(x642, x623, 2), bigint_mul!(x586, x625, 2), 2);
    let x650: BytePoly_2 = bigint_add!(bigint_mul!(x648, x623, 2), bigint_mul!(x588, x625, 2), 2);
    let x651: BytePoly_3 = bigint_nondet_quot!(ctx, x649, x3, 3);
    let x652: BytePoly_1 = bigint_nondet_rem!(ctx, x649, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x651, x3, 4), x652, 4), x649, 4),
        24387,
        2,
    )?;
    let x653: BytePoly_3 = bigint_nondet_quot!(ctx, x650, x3, 3);
    let x654: BytePoly_1 = bigint_nondet_rem!(ctx, x650, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x653, x3, 4), x654, 4), x650, 4),
        24387,
        2,
    )?;
    let x655: BytePoly_2 = bigint_mul!(x616, x616, 2);
    let x656: BytePoly_3 = bigint_nondet_quot!(ctx, x655, x3, 3);
    let x657: BytePoly_1 = bigint_nondet_rem!(ctx, x655, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x656, x3, 4), x657, 4), x655, 4),
        24387,
        2,
    )?;
    let x658: BytePoly_2 = bigint_add!(bigint_mul!(x657, x0, 2), x2, 2);
    let x659: BytePoly_3 = bigint_nondet_quot!(ctx, x658, x3, 3);
    let x660: BytePoly_1 = bigint_nondet_rem!(ctx, x658, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x659, x3, 4), x660, 4), x658, 4),
        24387,
        2,
    )?;
    let x661: BytePoly_1 = bigint_add!(x622, x622, 1);
    let x662: BytePoly_1 = bigint_nondet_quot!(ctx, x661, x3, 1);
    let x663: BytePoly_1 = bigint_nondet_rem!(ctx, x661, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x662, x3, 2), x663, 2), x661, 2),
        8131,
        2,
    )?;
    let x664: BytePoly_1 = bigint_nondet_inv!(ctx, x663, x3, 1);
    let x665: BytePoly_2 = bigint_mul!(x663, x664, 2);
    let x666: BytePoly_3 = bigint_nondet_quot!(ctx, x665, x3, 3);
    let x667: BytePoly_1 = bigint_nondet_rem!(ctx, x665, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x666, x3, 4), x667, 4), x665, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x667, x5, 1), 34, 1)?;
    let x668: BytePoly_2 = bigint_mul!(x660, x664, 2);
    let x669: BytePoly_3 = bigint_nondet_quot!(ctx, x668, x3, 3);
    let x670: BytePoly_1 = bigint_nondet_rem!(ctx, x668, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x669, x3, 4), x670, 4), x668, 4),
        24387,
        2,
    )?;
    let x671: BytePoly_2 = bigint_mul!(x670, x616, 2);
    let x672: BytePoly_3 = bigint_nondet_quot!(ctx, x671, x3, 3);
    let x673: BytePoly_1 = bigint_nondet_rem!(ctx, x671, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x672, x3, 4), x673, 4), x671, 4),
        24387,
        2,
    )?;
    let x674: BytePoly_1 = bigint_add!(bigint_sub!(x622, x673, 1), x3, 1);
    let x675: BytePoly_1 = bigint_nondet_quot!(ctx, x674, x3, 1);
    let x676: BytePoly_1 = bigint_nondet_rem!(ctx, x674, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x675, x3, 2), x676, 2), x674, 2),
        8131,
        2,
    )?;
    let x677: BytePoly_2 = bigint_mul!(x670, x670, 2);
    let x678: BytePoly_3 = bigint_nondet_quot!(ctx, x677, x3, 3);
    let x679: BytePoly_1 = bigint_nondet_rem!(ctx, x677, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x678, x3, 4), x679, 4), x677, 4),
        24387,
        2,
    )?;
    let x680: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x679, x616, 1), x3, 1), x616, 1),
        x3,
        1
    );
    let x681: BytePoly_1 = bigint_nondet_quot!(ctx, x680, x3, 1);
    let x682: BytePoly_1 = bigint_nondet_rem!(ctx, x680, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x681, x3, 2), x682, 2), x680, 2),
        8131,
        2,
    )?;
    let x683: BytePoly_2 = bigint_mul!(x670, x682, 2);
    let x684: BytePoly_3 = bigint_nondet_quot!(ctx, x683, x3, 3);
    let x685: BytePoly_1 = bigint_nondet_rem!(ctx, x683, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x684, x3, 4), x685, 4), x683, 4),
        24387,
        2,
    )?;
    let x686: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x685, x676, 1), 1), x3, 1);
    let x687: BytePoly_1 = bigint_nondet_quot!(ctx, x686, x3, 1);
    let x688: BytePoly_1 = bigint_nondet_rem!(ctx, x686, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x687, x3, 2), x688, 2), x686, 2),
        8131,
        2,
    )?;
    let x689: BytePoly_1 = bigint_nondet_rem!(ctx, x624, x4, 1);
    let x690: BytePoly_1 = bigint_nondet_quot!(ctx, x624, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x690, x4, 2), x689, 2), x624, 2),
        8131,
        2,
    )?;
    let x691: BytePoly_1 = bigint_sub!(x5, x689, 1);
    eqz(ctx, &bigint_mul!(x689, x691, 2), 8131, 2)?;
    let x692: BytePoly_1 = bigint_add!(bigint_sub!(x682, x652, 1), x3, 1);
    let x693: BytePoly_1 = bigint_nondet_inv!(ctx, x692, x3, 1);
    let x694: BytePoly_2 = bigint_mul!(x692, x693, 2);
    let x695: BytePoly_3 = bigint_nondet_quot!(ctx, x694, x3, 3);
    let x696: BytePoly_1 = bigint_nondet_rem!(ctx, x694, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x695, x3, 4), x696, 4), x694, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x696, x1, 1), 34, 1)?;
    let x697: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x688, x654, 1), x3, 1), x693, 2);
    let x698: BytePoly_3 = bigint_nondet_quot!(ctx, x697, x3, 3);
    let x699: BytePoly_1 = bigint_nondet_rem!(ctx, x697, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x698, x3, 4), x699, 4), x697, 4),
        24387,
        2,
    )?;
    let x700: BytePoly_2 = bigint_mul!(x699, x652, 2);
    let x701: BytePoly_3 = bigint_nondet_quot!(ctx, x700, x3, 3);
    let x702: BytePoly_1 = bigint_nondet_rem!(ctx, x700, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x701, x3, 4), x702, 4), x700, 4),
        24387,
        2,
    )?;
    let x703: BytePoly_1 = bigint_add!(bigint_sub!(x654, x702, 1), x3, 1);
    let x704: BytePoly_1 = bigint_nondet_quot!(ctx, x703, x3, 1);
    let x705: BytePoly_1 = bigint_nondet_rem!(ctx, x703, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x704, x3, 2), x705, 2), x703, 2),
        8131,
        2,
    )?;
    let x706: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x699, x699, 2), x652, 2), x3, 2),
            x682,
            2
        ),
        x3,
        2
    );
    let x707: BytePoly_3 = bigint_nondet_quot!(ctx, x706, x3, 3);
    let x708: BytePoly_1 = bigint_nondet_rem!(ctx, x706, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x707, x3, 4), x708, 4), x706, 4),
        24387,
        2,
    )?;
    let x709: BytePoly_2 = bigint_mul!(x699, x708, 2);
    let x710: BytePoly_3 = bigint_nondet_quot!(ctx, x709, x3, 3);
    let x711: BytePoly_1 = bigint_nondet_rem!(ctx, x709, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x710, x3, 4), x711, 4), x709, 4),
        24387,
        2,
    )?;
    let x712: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x711, x705, 1), 1), x3, 1);
    let x713: BytePoly_1 = bigint_nondet_quot!(ctx, x712, x3, 1);
    let x714: BytePoly_1 = bigint_nondet_rem!(ctx, x712, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x713, x3, 2), x714, 2), x712, 2),
        8131,
        2,
    )?;
    let x715: BytePoly_2 = bigint_add!(bigint_mul!(x708, x689, 2), bigint_mul!(x652, x691, 2), 2);
    let x716: BytePoly_2 = bigint_add!(bigint_mul!(x714, x689, 2), bigint_mul!(x654, x691, 2), 2);
    let x717: BytePoly_3 = bigint_nondet_quot!(ctx, x715, x3, 3);
    let x718: BytePoly_1 = bigint_nondet_rem!(ctx, x715, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x717, x3, 4), x718, 4), x715, 4),
        24387,
        2,
    )?;
    let x719: BytePoly_3 = bigint_nondet_quot!(ctx, x716, x3, 3);
    let x720: BytePoly_1 = bigint_nondet_rem!(ctx, x716, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x719, x3, 4), x720, 4), x716, 4),
        24387,
        2,
    )?;
    let x721: BytePoly_2 = bigint_mul!(x682, x682, 2);
    let x722: BytePoly_3 = bigint_nondet_quot!(ctx, x721, x3, 3);
    let x723: BytePoly_1 = bigint_nondet_rem!(ctx, x721, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x722, x3, 4), x723, 4), x721, 4),
        24387,
        2,
    )?;
    let x724: BytePoly_2 = bigint_add!(bigint_mul!(x723, x0, 2), x2, 2);
    let x725: BytePoly_3 = bigint_nondet_quot!(ctx, x724, x3, 3);
    let x726: BytePoly_1 = bigint_nondet_rem!(ctx, x724, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x725, x3, 4), x726, 4), x724, 4),
        24387,
        2,
    )?;
    let x727: BytePoly_1 = bigint_add!(x688, x688, 1);
    let x728: BytePoly_1 = bigint_nondet_quot!(ctx, x727, x3, 1);
    let x729: BytePoly_1 = bigint_nondet_rem!(ctx, x727, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x728, x3, 2), x729, 2), x727, 2),
        8131,
        2,
    )?;
    let x730: BytePoly_1 = bigint_nondet_inv!(ctx, x729, x3, 1);
    let x731: BytePoly_2 = bigint_mul!(x729, x730, 2);
    let x732: BytePoly_3 = bigint_nondet_quot!(ctx, x731, x3, 3);
    let x733: BytePoly_1 = bigint_nondet_rem!(ctx, x731, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x732, x3, 4), x733, 4), x731, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x733, x5, 1), 34, 1)?;
    let x734: BytePoly_2 = bigint_mul!(x726, x730, 2);
    let x735: BytePoly_3 = bigint_nondet_quot!(ctx, x734, x3, 3);
    let x736: BytePoly_1 = bigint_nondet_rem!(ctx, x734, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x735, x3, 4), x736, 4), x734, 4),
        24387,
        2,
    )?;
    let x737: BytePoly_2 = bigint_mul!(x736, x682, 2);
    let x738: BytePoly_3 = bigint_nondet_quot!(ctx, x737, x3, 3);
    let x739: BytePoly_1 = bigint_nondet_rem!(ctx, x737, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x738, x3, 4), x739, 4), x737, 4),
        24387,
        2,
    )?;
    let x740: BytePoly_1 = bigint_add!(bigint_sub!(x688, x739, 1), x3, 1);
    let x741: BytePoly_1 = bigint_nondet_quot!(ctx, x740, x3, 1);
    let x742: BytePoly_1 = bigint_nondet_rem!(ctx, x740, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x741, x3, 2), x742, 2), x740, 2),
        8131,
        2,
    )?;
    let x743: BytePoly_2 = bigint_mul!(x736, x736, 2);
    let x744: BytePoly_3 = bigint_nondet_quot!(ctx, x743, x3, 3);
    let x745: BytePoly_1 = bigint_nondet_rem!(ctx, x743, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x744, x3, 4), x745, 4), x743, 4),
        24387,
        2,
    )?;
    let x746: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x745, x682, 1), x3, 1), x682, 1),
        x3,
        1
    );
    let x747: BytePoly_1 = bigint_nondet_quot!(ctx, x746, x3, 1);
    let x748: BytePoly_1 = bigint_nondet_rem!(ctx, x746, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x747, x3, 2), x748, 2), x746, 2),
        8131,
        2,
    )?;
    let x749: BytePoly_2 = bigint_mul!(x736, x748, 2);
    let x750: BytePoly_3 = bigint_nondet_quot!(ctx, x749, x3, 3);
    let x751: BytePoly_1 = bigint_nondet_rem!(ctx, x749, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x750, x3, 4), x751, 4), x749, 4),
        24387,
        2,
    )?;
    let x752: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x751, x742, 1), 1), x3, 1);
    let x753: BytePoly_1 = bigint_nondet_quot!(ctx, x752, x3, 1);
    let x754: BytePoly_1 = bigint_nondet_rem!(ctx, x752, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x753, x3, 2), x754, 2), x752, 2),
        8131,
        2,
    )?;
    let x755: BytePoly_1 = bigint_nondet_rem!(ctx, x690, x4, 1);
    let x756: BytePoly_1 = bigint_nondet_quot!(ctx, x690, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x756, x4, 2), x755, 2), x690, 2),
        8131,
        2,
    )?;
    let x757: BytePoly_1 = bigint_sub!(x5, x755, 1);
    eqz(ctx, &bigint_mul!(x755, x757, 2), 8131, 2)?;
    let x758: BytePoly_1 = bigint_add!(bigint_sub!(x748, x718, 1), x3, 1);
    let x759: BytePoly_1 = bigint_nondet_inv!(ctx, x758, x3, 1);
    let x760: BytePoly_2 = bigint_mul!(x758, x759, 2);
    let x761: BytePoly_3 = bigint_nondet_quot!(ctx, x760, x3, 3);
    let x762: BytePoly_1 = bigint_nondet_rem!(ctx, x760, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x761, x3, 4), x762, 4), x760, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x762, x1, 1), 34, 1)?;
    let x763: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x754, x720, 1), x3, 1), x759, 2);
    let x764: BytePoly_3 = bigint_nondet_quot!(ctx, x763, x3, 3);
    let x765: BytePoly_1 = bigint_nondet_rem!(ctx, x763, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x764, x3, 4), x765, 4), x763, 4),
        24387,
        2,
    )?;
    let x766: BytePoly_2 = bigint_mul!(x765, x718, 2);
    let x767: BytePoly_3 = bigint_nondet_quot!(ctx, x766, x3, 3);
    let x768: BytePoly_1 = bigint_nondet_rem!(ctx, x766, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x767, x3, 4), x768, 4), x766, 4),
        24387,
        2,
    )?;
    let x769: BytePoly_1 = bigint_add!(bigint_sub!(x720, x768, 1), x3, 1);
    let x770: BytePoly_1 = bigint_nondet_quot!(ctx, x769, x3, 1);
    let x771: BytePoly_1 = bigint_nondet_rem!(ctx, x769, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x770, x3, 2), x771, 2), x769, 2),
        8131,
        2,
    )?;
    let x772: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x765, x765, 2), x718, 2), x3, 2),
            x748,
            2
        ),
        x3,
        2
    );
    let x773: BytePoly_3 = bigint_nondet_quot!(ctx, x772, x3, 3);
    let x774: BytePoly_1 = bigint_nondet_rem!(ctx, x772, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x773, x3, 4), x774, 4), x772, 4),
        24387,
        2,
    )?;
    let x775: BytePoly_2 = bigint_mul!(x765, x774, 2);
    let x776: BytePoly_3 = bigint_nondet_quot!(ctx, x775, x3, 3);
    let x777: BytePoly_1 = bigint_nondet_rem!(ctx, x775, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x776, x3, 4), x777, 4), x775, 4),
        24387,
        2,
    )?;
    let x778: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x777, x771, 1), 1), x3, 1);
    let x779: BytePoly_1 = bigint_nondet_quot!(ctx, x778, x3, 1);
    let x780: BytePoly_1 = bigint_nondet_rem!(ctx, x778, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x779, x3, 2), x780, 2), x778, 2),
        8131,
        2,
    )?;
    let x781: BytePoly_2 = bigint_add!(bigint_mul!(x774, x755, 2), bigint_mul!(x718, x757, 2), 2);
    let x782: BytePoly_2 = bigint_add!(bigint_mul!(x780, x755, 2), bigint_mul!(x720, x757, 2), 2);
    let x783: BytePoly_3 = bigint_nondet_quot!(ctx, x781, x3, 3);
    let x784: BytePoly_1 = bigint_nondet_rem!(ctx, x781, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x783, x3, 4), x784, 4), x781, 4),
        24387,
        2,
    )?;
    let x785: BytePoly_3 = bigint_nondet_quot!(ctx, x782, x3, 3);
    let x786: BytePoly_1 = bigint_nondet_rem!(ctx, x782, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x785, x3, 4), x786, 4), x782, 4),
        24387,
        2,
    )?;
    let x787: BytePoly_2 = bigint_mul!(x748, x748, 2);
    let x788: BytePoly_3 = bigint_nondet_quot!(ctx, x787, x3, 3);
    let x789: BytePoly_1 = bigint_nondet_rem!(ctx, x787, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x788, x3, 4), x789, 4), x787, 4),
        24387,
        2,
    )?;
    let x790: BytePoly_2 = bigint_add!(bigint_mul!(x789, x0, 2), x2, 2);
    let x791: BytePoly_3 = bigint_nondet_quot!(ctx, x790, x3, 3);
    let x792: BytePoly_1 = bigint_nondet_rem!(ctx, x790, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x791, x3, 4), x792, 4), x790, 4),
        24387,
        2,
    )?;
    let x793: BytePoly_1 = bigint_add!(x754, x754, 1);
    let x794: BytePoly_1 = bigint_nondet_quot!(ctx, x793, x3, 1);
    let x795: BytePoly_1 = bigint_nondet_rem!(ctx, x793, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x794, x3, 2), x795, 2), x793, 2),
        8131,
        2,
    )?;
    let x796: BytePoly_1 = bigint_nondet_inv!(ctx, x795, x3, 1);
    let x797: BytePoly_2 = bigint_mul!(x795, x796, 2);
    let x798: BytePoly_3 = bigint_nondet_quot!(ctx, x797, x3, 3);
    let x799: BytePoly_1 = bigint_nondet_rem!(ctx, x797, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x798, x3, 4), x799, 4), x797, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x799, x5, 1), 34, 1)?;
    let x800: BytePoly_2 = bigint_mul!(x792, x796, 2);
    let x801: BytePoly_3 = bigint_nondet_quot!(ctx, x800, x3, 3);
    let x802: BytePoly_1 = bigint_nondet_rem!(ctx, x800, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x801, x3, 4), x802, 4), x800, 4),
        24387,
        2,
    )?;
    let x803: BytePoly_2 = bigint_mul!(x802, x748, 2);
    let x804: BytePoly_3 = bigint_nondet_quot!(ctx, x803, x3, 3);
    let x805: BytePoly_1 = bigint_nondet_rem!(ctx, x803, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x804, x3, 4), x805, 4), x803, 4),
        24387,
        2,
    )?;
    let x806: BytePoly_1 = bigint_add!(bigint_sub!(x754, x805, 1), x3, 1);
    let x807: BytePoly_1 = bigint_nondet_quot!(ctx, x806, x3, 1);
    let x808: BytePoly_1 = bigint_nondet_rem!(ctx, x806, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x807, x3, 2), x808, 2), x806, 2),
        8131,
        2,
    )?;
    let x809: BytePoly_2 = bigint_mul!(x802, x802, 2);
    let x810: BytePoly_3 = bigint_nondet_quot!(ctx, x809, x3, 3);
    let x811: BytePoly_1 = bigint_nondet_rem!(ctx, x809, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x810, x3, 4), x811, 4), x809, 4),
        24387,
        2,
    )?;
    let x812: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x811, x748, 1), x3, 1), x748, 1),
        x3,
        1
    );
    let x813: BytePoly_1 = bigint_nondet_quot!(ctx, x812, x3, 1);
    let x814: BytePoly_1 = bigint_nondet_rem!(ctx, x812, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x813, x3, 2), x814, 2), x812, 2),
        8131,
        2,
    )?;
    let x815: BytePoly_2 = bigint_mul!(x802, x814, 2);
    let x816: BytePoly_3 = bigint_nondet_quot!(ctx, x815, x3, 3);
    let x817: BytePoly_1 = bigint_nondet_rem!(ctx, x815, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x816, x3, 4), x817, 4), x815, 4),
        24387,
        2,
    )?;
    let x818: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x817, x808, 1), 1), x3, 1);
    let x819: BytePoly_1 = bigint_nondet_quot!(ctx, x818, x3, 1);
    let x820: BytePoly_1 = bigint_nondet_rem!(ctx, x818, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x819, x3, 2), x820, 2), x818, 2),
        8131,
        2,
    )?;
    let x821: BytePoly_1 = bigint_nondet_rem!(ctx, x756, x4, 1);
    let x822: BytePoly_1 = bigint_nondet_quot!(ctx, x756, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x822, x4, 2), x821, 2), x756, 2),
        8131,
        2,
    )?;
    let x823: BytePoly_1 = bigint_sub!(x5, x821, 1);
    eqz(ctx, &bigint_mul!(x821, x823, 2), 8131, 2)?;
    let x824: BytePoly_1 = bigint_add!(bigint_sub!(x814, x784, 1), x3, 1);
    let x825: BytePoly_1 = bigint_nondet_inv!(ctx, x824, x3, 1);
    let x826: BytePoly_2 = bigint_mul!(x824, x825, 2);
    let x827: BytePoly_3 = bigint_nondet_quot!(ctx, x826, x3, 3);
    let x828: BytePoly_1 = bigint_nondet_rem!(ctx, x826, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x827, x3, 4), x828, 4), x826, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x828, x1, 1), 34, 1)?;
    let x829: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x820, x786, 1), x3, 1), x825, 2);
    let x830: BytePoly_3 = bigint_nondet_quot!(ctx, x829, x3, 3);
    let x831: BytePoly_1 = bigint_nondet_rem!(ctx, x829, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x830, x3, 4), x831, 4), x829, 4),
        24387,
        2,
    )?;
    let x832: BytePoly_2 = bigint_mul!(x831, x784, 2);
    let x833: BytePoly_3 = bigint_nondet_quot!(ctx, x832, x3, 3);
    let x834: BytePoly_1 = bigint_nondet_rem!(ctx, x832, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x833, x3, 4), x834, 4), x832, 4),
        24387,
        2,
    )?;
    let x835: BytePoly_1 = bigint_add!(bigint_sub!(x786, x834, 1), x3, 1);
    let x836: BytePoly_1 = bigint_nondet_quot!(ctx, x835, x3, 1);
    let x837: BytePoly_1 = bigint_nondet_rem!(ctx, x835, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x836, x3, 2), x837, 2), x835, 2),
        8131,
        2,
    )?;
    let x838: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x831, x831, 2), x784, 2), x3, 2),
            x814,
            2
        ),
        x3,
        2
    );
    let x839: BytePoly_3 = bigint_nondet_quot!(ctx, x838, x3, 3);
    let x840: BytePoly_1 = bigint_nondet_rem!(ctx, x838, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x839, x3, 4), x840, 4), x838, 4),
        24387,
        2,
    )?;
    let x841: BytePoly_2 = bigint_mul!(x831, x840, 2);
    let x842: BytePoly_3 = bigint_nondet_quot!(ctx, x841, x3, 3);
    let x843: BytePoly_1 = bigint_nondet_rem!(ctx, x841, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x842, x3, 4), x843, 4), x841, 4),
        24387,
        2,
    )?;
    let x844: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x843, x837, 1), 1), x3, 1);
    let x845: BytePoly_1 = bigint_nondet_quot!(ctx, x844, x3, 1);
    let x846: BytePoly_1 = bigint_nondet_rem!(ctx, x844, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x845, x3, 2), x846, 2), x844, 2),
        8131,
        2,
    )?;
    let x847: BytePoly_2 = bigint_add!(bigint_mul!(x840, x821, 2), bigint_mul!(x784, x823, 2), 2);
    let x848: BytePoly_2 = bigint_add!(bigint_mul!(x846, x821, 2), bigint_mul!(x786, x823, 2), 2);
    let x849: BytePoly_3 = bigint_nondet_quot!(ctx, x847, x3, 3);
    let x850: BytePoly_1 = bigint_nondet_rem!(ctx, x847, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x849, x3, 4), x850, 4), x847, 4),
        24387,
        2,
    )?;
    let x851: BytePoly_3 = bigint_nondet_quot!(ctx, x848, x3, 3);
    let x852: BytePoly_1 = bigint_nondet_rem!(ctx, x848, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x851, x3, 4), x852, 4), x848, 4),
        24387,
        2,
    )?;
    let x853: BytePoly_2 = bigint_mul!(x814, x814, 2);
    let x854: BytePoly_3 = bigint_nondet_quot!(ctx, x853, x3, 3);
    let x855: BytePoly_1 = bigint_nondet_rem!(ctx, x853, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x854, x3, 4), x855, 4), x853, 4),
        24387,
        2,
    )?;
    let x856: BytePoly_2 = bigint_add!(bigint_mul!(x855, x0, 2), x2, 2);
    let x857: BytePoly_3 = bigint_nondet_quot!(ctx, x856, x3, 3);
    let x858: BytePoly_1 = bigint_nondet_rem!(ctx, x856, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x857, x3, 4), x858, 4), x856, 4),
        24387,
        2,
    )?;
    let x859: BytePoly_1 = bigint_add!(x820, x820, 1);
    let x860: BytePoly_1 = bigint_nondet_quot!(ctx, x859, x3, 1);
    let x861: BytePoly_1 = bigint_nondet_rem!(ctx, x859, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x860, x3, 2), x861, 2), x859, 2),
        8131,
        2,
    )?;
    let x862: BytePoly_1 = bigint_nondet_inv!(ctx, x861, x3, 1);
    let x863: BytePoly_2 = bigint_mul!(x861, x862, 2);
    let x864: BytePoly_3 = bigint_nondet_quot!(ctx, x863, x3, 3);
    let x865: BytePoly_1 = bigint_nondet_rem!(ctx, x863, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x864, x3, 4), x865, 4), x863, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x865, x5, 1), 34, 1)?;
    let x866: BytePoly_2 = bigint_mul!(x858, x862, 2);
    let x867: BytePoly_3 = bigint_nondet_quot!(ctx, x866, x3, 3);
    let x868: BytePoly_1 = bigint_nondet_rem!(ctx, x866, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x867, x3, 4), x868, 4), x866, 4),
        24387,
        2,
    )?;
    let x869: BytePoly_2 = bigint_mul!(x868, x814, 2);
    let x870: BytePoly_3 = bigint_nondet_quot!(ctx, x869, x3, 3);
    let x871: BytePoly_1 = bigint_nondet_rem!(ctx, x869, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x870, x3, 4), x871, 4), x869, 4),
        24387,
        2,
    )?;
    let x872: BytePoly_1 = bigint_add!(bigint_sub!(x820, x871, 1), x3, 1);
    let x873: BytePoly_1 = bigint_nondet_quot!(ctx, x872, x3, 1);
    let x874: BytePoly_1 = bigint_nondet_rem!(ctx, x872, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x873, x3, 2), x874, 2), x872, 2),
        8131,
        2,
    )?;
    let x875: BytePoly_2 = bigint_mul!(x868, x868, 2);
    let x876: BytePoly_3 = bigint_nondet_quot!(ctx, x875, x3, 3);
    let x877: BytePoly_1 = bigint_nondet_rem!(ctx, x875, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x876, x3, 4), x877, 4), x875, 4),
        24387,
        2,
    )?;
    let x878: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x877, x814, 1), x3, 1), x814, 1),
        x3,
        1
    );
    let x879: BytePoly_1 = bigint_nondet_quot!(ctx, x878, x3, 1);
    let x880: BytePoly_1 = bigint_nondet_rem!(ctx, x878, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x879, x3, 2), x880, 2), x878, 2),
        8131,
        2,
    )?;
    let x881: BytePoly_2 = bigint_mul!(x868, x880, 2);
    let x882: BytePoly_3 = bigint_nondet_quot!(ctx, x881, x3, 3);
    let x883: BytePoly_1 = bigint_nondet_rem!(ctx, x881, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x882, x3, 4), x883, 4), x881, 4),
        24387,
        2,
    )?;
    let x884: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x883, x874, 1), 1), x3, 1);
    let x885: BytePoly_1 = bigint_nondet_quot!(ctx, x884, x3, 1);
    let x886: BytePoly_1 = bigint_nondet_rem!(ctx, x884, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x885, x3, 2), x886, 2), x884, 2),
        8131,
        2,
    )?;
    let x887: BytePoly_1 = bigint_nondet_rem!(ctx, x822, x4, 1);
    let x888: BytePoly_1 = bigint_nondet_quot!(ctx, x822, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x888, x4, 2), x887, 2), x822, 2),
        8131,
        2,
    )?;
    let x889: BytePoly_1 = bigint_sub!(x5, x887, 1);
    eqz(ctx, &bigint_mul!(x887, x889, 2), 8131, 2)?;
    let x890: BytePoly_1 = bigint_add!(bigint_sub!(x880, x850, 1), x3, 1);
    let x891: BytePoly_1 = bigint_nondet_inv!(ctx, x890, x3, 1);
    let x892: BytePoly_2 = bigint_mul!(x890, x891, 2);
    let x893: BytePoly_3 = bigint_nondet_quot!(ctx, x892, x3, 3);
    let x894: BytePoly_1 = bigint_nondet_rem!(ctx, x892, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x893, x3, 4), x894, 4), x892, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x894, x1, 1), 34, 1)?;
    let x895: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x886, x852, 1), x3, 1), x891, 2);
    let x896: BytePoly_3 = bigint_nondet_quot!(ctx, x895, x3, 3);
    let x897: BytePoly_1 = bigint_nondet_rem!(ctx, x895, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x896, x3, 4), x897, 4), x895, 4),
        24387,
        2,
    )?;
    let x898: BytePoly_2 = bigint_mul!(x897, x850, 2);
    let x899: BytePoly_3 = bigint_nondet_quot!(ctx, x898, x3, 3);
    let x900: BytePoly_1 = bigint_nondet_rem!(ctx, x898, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x899, x3, 4), x900, 4), x898, 4),
        24387,
        2,
    )?;
    let x901: BytePoly_1 = bigint_add!(bigint_sub!(x852, x900, 1), x3, 1);
    let x902: BytePoly_1 = bigint_nondet_quot!(ctx, x901, x3, 1);
    let x903: BytePoly_1 = bigint_nondet_rem!(ctx, x901, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x902, x3, 2), x903, 2), x901, 2),
        8131,
        2,
    )?;
    let x904: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x897, x897, 2), x850, 2), x3, 2),
            x880,
            2
        ),
        x3,
        2
    );
    let x905: BytePoly_3 = bigint_nondet_quot!(ctx, x904, x3, 3);
    let x906: BytePoly_1 = bigint_nondet_rem!(ctx, x904, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x905, x3, 4), x906, 4), x904, 4),
        24387,
        2,
    )?;
    let x907: BytePoly_2 = bigint_mul!(x897, x906, 2);
    let x908: BytePoly_3 = bigint_nondet_quot!(ctx, x907, x3, 3);
    let x909: BytePoly_1 = bigint_nondet_rem!(ctx, x907, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x908, x3, 4), x909, 4), x907, 4),
        24387,
        2,
    )?;
    let x910: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x909, x903, 1), 1), x3, 1);
    let x911: BytePoly_1 = bigint_nondet_quot!(ctx, x910, x3, 1);
    let x912: BytePoly_1 = bigint_nondet_rem!(ctx, x910, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x911, x3, 2), x912, 2), x910, 2),
        8131,
        2,
    )?;
    let x913: BytePoly_2 = bigint_add!(bigint_mul!(x906, x887, 2), bigint_mul!(x850, x889, 2), 2);
    let x914: BytePoly_2 = bigint_add!(bigint_mul!(x912, x887, 2), bigint_mul!(x852, x889, 2), 2);
    let x915: BytePoly_3 = bigint_nondet_quot!(ctx, x913, x3, 3);
    let x916: BytePoly_1 = bigint_nondet_rem!(ctx, x913, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x915, x3, 4), x916, 4), x913, 4),
        24387,
        2,
    )?;
    let x917: BytePoly_3 = bigint_nondet_quot!(ctx, x914, x3, 3);
    let x918: BytePoly_1 = bigint_nondet_rem!(ctx, x914, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x917, x3, 4), x918, 4), x914, 4),
        24387,
        2,
    )?;
    let x919: BytePoly_2 = bigint_mul!(x880, x880, 2);
    let x920: BytePoly_3 = bigint_nondet_quot!(ctx, x919, x3, 3);
    let x921: BytePoly_1 = bigint_nondet_rem!(ctx, x919, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x920, x3, 4), x921, 4), x919, 4),
        24387,
        2,
    )?;
    let x922: BytePoly_2 = bigint_add!(bigint_mul!(x921, x0, 2), x2, 2);
    let x923: BytePoly_3 = bigint_nondet_quot!(ctx, x922, x3, 3);
    let x924: BytePoly_1 = bigint_nondet_rem!(ctx, x922, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x923, x3, 4), x924, 4), x922, 4),
        24387,
        2,
    )?;
    let x925: BytePoly_1 = bigint_add!(x886, x886, 1);
    let x926: BytePoly_1 = bigint_nondet_quot!(ctx, x925, x3, 1);
    let x927: BytePoly_1 = bigint_nondet_rem!(ctx, x925, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x926, x3, 2), x927, 2), x925, 2),
        8131,
        2,
    )?;
    let x928: BytePoly_1 = bigint_nondet_inv!(ctx, x927, x3, 1);
    let x929: BytePoly_2 = bigint_mul!(x927, x928, 2);
    let x930: BytePoly_3 = bigint_nondet_quot!(ctx, x929, x3, 3);
    let x931: BytePoly_1 = bigint_nondet_rem!(ctx, x929, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x930, x3, 4), x931, 4), x929, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x931, x5, 1), 34, 1)?;
    let x932: BytePoly_2 = bigint_mul!(x924, x928, 2);
    let x933: BytePoly_3 = bigint_nondet_quot!(ctx, x932, x3, 3);
    let x934: BytePoly_1 = bigint_nondet_rem!(ctx, x932, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x933, x3, 4), x934, 4), x932, 4),
        24387,
        2,
    )?;
    let x935: BytePoly_2 = bigint_mul!(x934, x880, 2);
    let x936: BytePoly_3 = bigint_nondet_quot!(ctx, x935, x3, 3);
    let x937: BytePoly_1 = bigint_nondet_rem!(ctx, x935, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x936, x3, 4), x937, 4), x935, 4),
        24387,
        2,
    )?;
    let x938: BytePoly_1 = bigint_add!(bigint_sub!(x886, x937, 1), x3, 1);
    let x939: BytePoly_1 = bigint_nondet_quot!(ctx, x938, x3, 1);
    let x940: BytePoly_1 = bigint_nondet_rem!(ctx, x938, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x939, x3, 2), x940, 2), x938, 2),
        8131,
        2,
    )?;
    let x941: BytePoly_2 = bigint_mul!(x934, x934, 2);
    let x942: BytePoly_3 = bigint_nondet_quot!(ctx, x941, x3, 3);
    let x943: BytePoly_1 = bigint_nondet_rem!(ctx, x941, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x942, x3, 4), x943, 4), x941, 4),
        24387,
        2,
    )?;
    let x944: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x943, x880, 1), x3, 1), x880, 1),
        x3,
        1
    );
    let x945: BytePoly_1 = bigint_nondet_quot!(ctx, x944, x3, 1);
    let x946: BytePoly_1 = bigint_nondet_rem!(ctx, x944, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x945, x3, 2), x946, 2), x944, 2),
        8131,
        2,
    )?;
    let x947: BytePoly_2 = bigint_mul!(x934, x946, 2);
    let x948: BytePoly_3 = bigint_nondet_quot!(ctx, x947, x3, 3);
    let x949: BytePoly_1 = bigint_nondet_rem!(ctx, x947, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x948, x3, 4), x949, 4), x947, 4),
        24387,
        2,
    )?;
    let x950: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x949, x940, 1), 1), x3, 1);
    let x951: BytePoly_1 = bigint_nondet_quot!(ctx, x950, x3, 1);
    let x952: BytePoly_1 = bigint_nondet_rem!(ctx, x950, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x951, x3, 2), x952, 2), x950, 2),
        8131,
        2,
    )?;
    let x953: BytePoly_1 = bigint_nondet_rem!(ctx, x888, x4, 1);
    let x954: BytePoly_1 = bigint_nondet_quot!(ctx, x888, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x954, x4, 2), x953, 2), x888, 2),
        8131,
        2,
    )?;
    let x955: BytePoly_1 = bigint_sub!(x5, x953, 1);
    eqz(ctx, &bigint_mul!(x953, x955, 2), 8131, 2)?;
    let x956: BytePoly_1 = bigint_add!(bigint_sub!(x946, x916, 1), x3, 1);
    let x957: BytePoly_1 = bigint_nondet_inv!(ctx, x956, x3, 1);
    let x958: BytePoly_2 = bigint_mul!(x956, x957, 2);
    let x959: BytePoly_3 = bigint_nondet_quot!(ctx, x958, x3, 3);
    let x960: BytePoly_1 = bigint_nondet_rem!(ctx, x958, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x959, x3, 4), x960, 4), x958, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x960, x1, 1), 34, 1)?;
    let x961: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x952, x918, 1), x3, 1), x957, 2);
    let x962: BytePoly_3 = bigint_nondet_quot!(ctx, x961, x3, 3);
    let x963: BytePoly_1 = bigint_nondet_rem!(ctx, x961, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x962, x3, 4), x963, 4), x961, 4),
        24387,
        2,
    )?;
    let x964: BytePoly_2 = bigint_mul!(x963, x916, 2);
    let x965: BytePoly_3 = bigint_nondet_quot!(ctx, x964, x3, 3);
    let x966: BytePoly_1 = bigint_nondet_rem!(ctx, x964, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x965, x3, 4), x966, 4), x964, 4),
        24387,
        2,
    )?;
    let x967: BytePoly_1 = bigint_add!(bigint_sub!(x918, x966, 1), x3, 1);
    let x968: BytePoly_1 = bigint_nondet_quot!(ctx, x967, x3, 1);
    let x969: BytePoly_1 = bigint_nondet_rem!(ctx, x967, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x968, x3, 2), x969, 2), x967, 2),
        8131,
        2,
    )?;
    let x970: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x963, x963, 2), x916, 2), x3, 2),
            x946,
            2
        ),
        x3,
        2
    );
    let x971: BytePoly_3 = bigint_nondet_quot!(ctx, x970, x3, 3);
    let x972: BytePoly_1 = bigint_nondet_rem!(ctx, x970, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x971, x3, 4), x972, 4), x970, 4),
        24387,
        2,
    )?;
    let x973: BytePoly_2 = bigint_mul!(x963, x972, 2);
    let x974: BytePoly_3 = bigint_nondet_quot!(ctx, x973, x3, 3);
    let x975: BytePoly_1 = bigint_nondet_rem!(ctx, x973, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x974, x3, 4), x975, 4), x973, 4),
        24387,
        2,
    )?;
    let x976: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x975, x969, 1), 1), x3, 1);
    let x977: BytePoly_1 = bigint_nondet_quot!(ctx, x976, x3, 1);
    let x978: BytePoly_1 = bigint_nondet_rem!(ctx, x976, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x977, x3, 2), x978, 2), x976, 2),
        8131,
        2,
    )?;
    let x979: BytePoly_2 = bigint_add!(bigint_mul!(x972, x953, 2), bigint_mul!(x916, x955, 2), 2);
    let x980: BytePoly_2 = bigint_add!(bigint_mul!(x978, x953, 2), bigint_mul!(x918, x955, 2), 2);
    let x981: BytePoly_3 = bigint_nondet_quot!(ctx, x979, x3, 3);
    let x982: BytePoly_1 = bigint_nondet_rem!(ctx, x979, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x981, x3, 4), x982, 4), x979, 4),
        24387,
        2,
    )?;
    let x983: BytePoly_3 = bigint_nondet_quot!(ctx, x980, x3, 3);
    let x984: BytePoly_1 = bigint_nondet_rem!(ctx, x980, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x983, x3, 4), x984, 4), x980, 4),
        24387,
        2,
    )?;
    let x985: BytePoly_2 = bigint_mul!(x946, x946, 2);
    let x986: BytePoly_3 = bigint_nondet_quot!(ctx, x985, x3, 3);
    let x987: BytePoly_1 = bigint_nondet_rem!(ctx, x985, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x986, x3, 4), x987, 4), x985, 4),
        24387,
        2,
    )?;
    let x988: BytePoly_2 = bigint_add!(bigint_mul!(x987, x0, 2), x2, 2);
    let x989: BytePoly_3 = bigint_nondet_quot!(ctx, x988, x3, 3);
    let x990: BytePoly_1 = bigint_nondet_rem!(ctx, x988, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x989, x3, 4), x990, 4), x988, 4),
        24387,
        2,
    )?;
    let x991: BytePoly_1 = bigint_add!(x952, x952, 1);
    let x992: BytePoly_1 = bigint_nondet_quot!(ctx, x991, x3, 1);
    let x993: BytePoly_1 = bigint_nondet_rem!(ctx, x991, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x992, x3, 2), x993, 2), x991, 2),
        8131,
        2,
    )?;
    let x994: BytePoly_1 = bigint_nondet_inv!(ctx, x993, x3, 1);
    let x995: BytePoly_2 = bigint_mul!(x993, x994, 2);
    let x996: BytePoly_3 = bigint_nondet_quot!(ctx, x995, x3, 3);
    let x997: BytePoly_1 = bigint_nondet_rem!(ctx, x995, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x996, x3, 4), x997, 4), x995, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x997, x5, 1), 34, 1)?;
    let x998: BytePoly_2 = bigint_mul!(x990, x994, 2);
    let x999: BytePoly_3 = bigint_nondet_quot!(ctx, x998, x3, 3);
    let x1000: BytePoly_1 = bigint_nondet_rem!(ctx, x998, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x999, x3, 4), x1000, 4), x998, 4),
        24387,
        2,
    )?;
    let x1001: BytePoly_2 = bigint_mul!(x1000, x946, 2);
    let x1002: BytePoly_3 = bigint_nondet_quot!(ctx, x1001, x3, 3);
    let x1003: BytePoly_1 = bigint_nondet_rem!(ctx, x1001, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1002, x3, 4), x1003, 4), x1001, 4),
        24387,
        2,
    )?;
    let x1004: BytePoly_1 = bigint_add!(bigint_sub!(x952, x1003, 1), x3, 1);
    let x1005: BytePoly_1 = bigint_nondet_quot!(ctx, x1004, x3, 1);
    let x1006: BytePoly_1 = bigint_nondet_rem!(ctx, x1004, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1005, x3, 2), x1006, 2), x1004, 2),
        8131,
        2,
    )?;
    let x1007: BytePoly_2 = bigint_mul!(x1000, x1000, 2);
    let x1008: BytePoly_3 = bigint_nondet_quot!(ctx, x1007, x3, 3);
    let x1009: BytePoly_1 = bigint_nondet_rem!(ctx, x1007, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1008, x3, 4), x1009, 4), x1007, 4),
        24387,
        2,
    )?;
    let x1010: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1009, x946, 1), x3, 1), x946, 1),
        x3,
        1
    );
    let x1011: BytePoly_1 = bigint_nondet_quot!(ctx, x1010, x3, 1);
    let x1012: BytePoly_1 = bigint_nondet_rem!(ctx, x1010, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1011, x3, 2), x1012, 2), x1010, 2),
        8131,
        2,
    )?;
    let x1013: BytePoly_2 = bigint_mul!(x1000, x1012, 2);
    let x1014: BytePoly_3 = bigint_nondet_quot!(ctx, x1013, x3, 3);
    let x1015: BytePoly_1 = bigint_nondet_rem!(ctx, x1013, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1014, x3, 4), x1015, 4), x1013, 4),
        24387,
        2,
    )?;
    let x1016: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1015, x1006, 1), 1), x3, 1);
    let x1017: BytePoly_1 = bigint_nondet_quot!(ctx, x1016, x3, 1);
    let x1018: BytePoly_1 = bigint_nondet_rem!(ctx, x1016, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1017, x3, 2), x1018, 2), x1016, 2),
        8131,
        2,
    )?;
    let x1019: BytePoly_1 = bigint_nondet_rem!(ctx, x954, x4, 1);
    let x1020: BytePoly_1 = bigint_nondet_quot!(ctx, x954, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1020, x4, 2), x1019, 2), x954, 2),
        8131,
        2,
    )?;
    let x1021: BytePoly_1 = bigint_sub!(x5, x1019, 1);
    eqz(ctx, &bigint_mul!(x1019, x1021, 2), 8131, 2)?;
    let x1022: BytePoly_1 = bigint_add!(bigint_sub!(x1012, x982, 1), x3, 1);
    let x1023: BytePoly_1 = bigint_nondet_inv!(ctx, x1022, x3, 1);
    let x1024: BytePoly_2 = bigint_mul!(x1022, x1023, 2);
    let x1025: BytePoly_3 = bigint_nondet_quot!(ctx, x1024, x3, 3);
    let x1026: BytePoly_1 = bigint_nondet_rem!(ctx, x1024, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1025, x3, 4), x1026, 4), x1024, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1026, x1, 1), 34, 1)?;
    let x1027: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1018, x984, 1), x3, 1), x1023, 2);
    let x1028: BytePoly_3 = bigint_nondet_quot!(ctx, x1027, x3, 3);
    let x1029: BytePoly_1 = bigint_nondet_rem!(ctx, x1027, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1028, x3, 4), x1029, 4), x1027, 4),
        24387,
        2,
    )?;
    let x1030: BytePoly_2 = bigint_mul!(x1029, x982, 2);
    let x1031: BytePoly_3 = bigint_nondet_quot!(ctx, x1030, x3, 3);
    let x1032: BytePoly_1 = bigint_nondet_rem!(ctx, x1030, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1031, x3, 4), x1032, 4), x1030, 4),
        24387,
        2,
    )?;
    let x1033: BytePoly_1 = bigint_add!(bigint_sub!(x984, x1032, 1), x3, 1);
    let x1034: BytePoly_1 = bigint_nondet_quot!(ctx, x1033, x3, 1);
    let x1035: BytePoly_1 = bigint_nondet_rem!(ctx, x1033, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1034, x3, 2), x1035, 2), x1033, 2),
        8131,
        2,
    )?;
    let x1036: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1029, x1029, 2), x982, 2), x3, 2),
            x1012,
            2
        ),
        x3,
        2
    );
    let x1037: BytePoly_3 = bigint_nondet_quot!(ctx, x1036, x3, 3);
    let x1038: BytePoly_1 = bigint_nondet_rem!(ctx, x1036, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1037, x3, 4), x1038, 4), x1036, 4),
        24387,
        2,
    )?;
    let x1039: BytePoly_2 = bigint_mul!(x1029, x1038, 2);
    let x1040: BytePoly_3 = bigint_nondet_quot!(ctx, x1039, x3, 3);
    let x1041: BytePoly_1 = bigint_nondet_rem!(ctx, x1039, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1040, x3, 4), x1041, 4), x1039, 4),
        24387,
        2,
    )?;
    let x1042: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1041, x1035, 1), 1), x3, 1);
    let x1043: BytePoly_1 = bigint_nondet_quot!(ctx, x1042, x3, 1);
    let x1044: BytePoly_1 = bigint_nondet_rem!(ctx, x1042, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1043, x3, 2), x1044, 2), x1042, 2),
        8131,
        2,
    )?;
    let x1045: BytePoly_2 =
        bigint_add!(bigint_mul!(x1038, x1019, 2), bigint_mul!(x982, x1021, 2), 2);
    let x1046: BytePoly_2 =
        bigint_add!(bigint_mul!(x1044, x1019, 2), bigint_mul!(x984, x1021, 2), 2);
    let x1047: BytePoly_3 = bigint_nondet_quot!(ctx, x1045, x3, 3);
    let x1048: BytePoly_1 = bigint_nondet_rem!(ctx, x1045, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1047, x3, 4), x1048, 4), x1045, 4),
        24387,
        2,
    )?;
    let x1049: BytePoly_3 = bigint_nondet_quot!(ctx, x1046, x3, 3);
    let x1050: BytePoly_1 = bigint_nondet_rem!(ctx, x1046, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1049, x3, 4), x1050, 4), x1046, 4),
        24387,
        2,
    )?;
    let x1051: BytePoly_2 = bigint_mul!(x1012, x1012, 2);
    let x1052: BytePoly_3 = bigint_nondet_quot!(ctx, x1051, x3, 3);
    let x1053: BytePoly_1 = bigint_nondet_rem!(ctx, x1051, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1052, x3, 4), x1053, 4), x1051, 4),
        24387,
        2,
    )?;
    let x1054: BytePoly_2 = bigint_add!(bigint_mul!(x1053, x0, 2), x2, 2);
    let x1055: BytePoly_3 = bigint_nondet_quot!(ctx, x1054, x3, 3);
    let x1056: BytePoly_1 = bigint_nondet_rem!(ctx, x1054, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1055, x3, 4), x1056, 4), x1054, 4),
        24387,
        2,
    )?;
    let x1057: BytePoly_1 = bigint_add!(x1018, x1018, 1);
    let x1058: BytePoly_1 = bigint_nondet_quot!(ctx, x1057, x3, 1);
    let x1059: BytePoly_1 = bigint_nondet_rem!(ctx, x1057, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1058, x3, 2), x1059, 2), x1057, 2),
        8131,
        2,
    )?;
    let x1060: BytePoly_1 = bigint_nondet_inv!(ctx, x1059, x3, 1);
    let x1061: BytePoly_2 = bigint_mul!(x1059, x1060, 2);
    let x1062: BytePoly_3 = bigint_nondet_quot!(ctx, x1061, x3, 3);
    let x1063: BytePoly_1 = bigint_nondet_rem!(ctx, x1061, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1062, x3, 4), x1063, 4), x1061, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1063, x5, 1), 34, 1)?;
    let x1064: BytePoly_2 = bigint_mul!(x1056, x1060, 2);
    let x1065: BytePoly_3 = bigint_nondet_quot!(ctx, x1064, x3, 3);
    let x1066: BytePoly_1 = bigint_nondet_rem!(ctx, x1064, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1065, x3, 4), x1066, 4), x1064, 4),
        24387,
        2,
    )?;
    let x1067: BytePoly_2 = bigint_mul!(x1066, x1012, 2);
    let x1068: BytePoly_3 = bigint_nondet_quot!(ctx, x1067, x3, 3);
    let x1069: BytePoly_1 = bigint_nondet_rem!(ctx, x1067, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1068, x3, 4), x1069, 4), x1067, 4),
        24387,
        2,
    )?;
    let x1070: BytePoly_1 = bigint_add!(bigint_sub!(x1018, x1069, 1), x3, 1);
    let x1071: BytePoly_1 = bigint_nondet_quot!(ctx, x1070, x3, 1);
    let x1072: BytePoly_1 = bigint_nondet_rem!(ctx, x1070, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1071, x3, 2), x1072, 2), x1070, 2),
        8131,
        2,
    )?;
    let x1073: BytePoly_2 = bigint_mul!(x1066, x1066, 2);
    let x1074: BytePoly_3 = bigint_nondet_quot!(ctx, x1073, x3, 3);
    let x1075: BytePoly_1 = bigint_nondet_rem!(ctx, x1073, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1074, x3, 4), x1075, 4), x1073, 4),
        24387,
        2,
    )?;
    let x1076: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1075, x1012, 1), x3, 1), x1012, 1),
        x3,
        1
    );
    let x1077: BytePoly_1 = bigint_nondet_quot!(ctx, x1076, x3, 1);
    let x1078: BytePoly_1 = bigint_nondet_rem!(ctx, x1076, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1077, x3, 2), x1078, 2), x1076, 2),
        8131,
        2,
    )?;
    let x1079: BytePoly_2 = bigint_mul!(x1066, x1078, 2);
    let x1080: BytePoly_3 = bigint_nondet_quot!(ctx, x1079, x3, 3);
    let x1081: BytePoly_1 = bigint_nondet_rem!(ctx, x1079, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1080, x3, 4), x1081, 4), x1079, 4),
        24387,
        2,
    )?;
    let x1082: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1081, x1072, 1), 1), x3, 1);
    let x1083: BytePoly_1 = bigint_nondet_quot!(ctx, x1082, x3, 1);
    let x1084: BytePoly_1 = bigint_nondet_rem!(ctx, x1082, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1083, x3, 2), x1084, 2), x1082, 2),
        8131,
        2,
    )?;
    let x1085: BytePoly_1 = bigint_nondet_rem!(ctx, x1020, x4, 1);
    let x1086: BytePoly_1 = bigint_nondet_quot!(ctx, x1020, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1086, x4, 2), x1085, 2), x1020, 2),
        8131,
        2,
    )?;
    let x1087: BytePoly_1 = bigint_sub!(x5, x1085, 1);
    eqz(ctx, &bigint_mul!(x1085, x1087, 2), 8131, 2)?;
    let x1088: BytePoly_1 = bigint_add!(bigint_sub!(x1078, x1048, 1), x3, 1);
    let x1089: BytePoly_1 = bigint_nondet_inv!(ctx, x1088, x3, 1);
    let x1090: BytePoly_2 = bigint_mul!(x1088, x1089, 2);
    let x1091: BytePoly_3 = bigint_nondet_quot!(ctx, x1090, x3, 3);
    let x1092: BytePoly_1 = bigint_nondet_rem!(ctx, x1090, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1091, x3, 4), x1092, 4), x1090, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1092, x1, 1), 34, 1)?;
    let x1093: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1084, x1050, 1), x3, 1), x1089, 2);
    let x1094: BytePoly_3 = bigint_nondet_quot!(ctx, x1093, x3, 3);
    let x1095: BytePoly_1 = bigint_nondet_rem!(ctx, x1093, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1094, x3, 4), x1095, 4), x1093, 4),
        24387,
        2,
    )?;
    let x1096: BytePoly_2 = bigint_mul!(x1095, x1048, 2);
    let x1097: BytePoly_3 = bigint_nondet_quot!(ctx, x1096, x3, 3);
    let x1098: BytePoly_1 = bigint_nondet_rem!(ctx, x1096, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1097, x3, 4), x1098, 4), x1096, 4),
        24387,
        2,
    )?;
    let x1099: BytePoly_1 = bigint_add!(bigint_sub!(x1050, x1098, 1), x3, 1);
    let x1100: BytePoly_1 = bigint_nondet_quot!(ctx, x1099, x3, 1);
    let x1101: BytePoly_1 = bigint_nondet_rem!(ctx, x1099, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1100, x3, 2), x1101, 2), x1099, 2),
        8131,
        2,
    )?;
    let x1102: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1095, x1095, 2), x1048, 2), x3, 2),
            x1078,
            2
        ),
        x3,
        2
    );
    let x1103: BytePoly_3 = bigint_nondet_quot!(ctx, x1102, x3, 3);
    let x1104: BytePoly_1 = bigint_nondet_rem!(ctx, x1102, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1103, x3, 4), x1104, 4), x1102, 4),
        24387,
        2,
    )?;
    let x1105: BytePoly_2 = bigint_mul!(x1095, x1104, 2);
    let x1106: BytePoly_3 = bigint_nondet_quot!(ctx, x1105, x3, 3);
    let x1107: BytePoly_1 = bigint_nondet_rem!(ctx, x1105, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1106, x3, 4), x1107, 4), x1105, 4),
        24387,
        2,
    )?;
    let x1108: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1107, x1101, 1), 1), x3, 1);
    let x1109: BytePoly_1 = bigint_nondet_quot!(ctx, x1108, x3, 1);
    let x1110: BytePoly_1 = bigint_nondet_rem!(ctx, x1108, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1109, x3, 2), x1110, 2), x1108, 2),
        8131,
        2,
    )?;
    let x1111: BytePoly_2 = bigint_add!(
        bigint_mul!(x1104, x1085, 2),
        bigint_mul!(x1048, x1087, 2),
        2
    );
    let x1112: BytePoly_2 = bigint_add!(
        bigint_mul!(x1110, x1085, 2),
        bigint_mul!(x1050, x1087, 2),
        2
    );
    let x1113: BytePoly_3 = bigint_nondet_quot!(ctx, x1111, x3, 3);
    let x1114: BytePoly_1 = bigint_nondet_rem!(ctx, x1111, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1113, x3, 4), x1114, 4), x1111, 4),
        24387,
        2,
    )?;
    let x1115: BytePoly_3 = bigint_nondet_quot!(ctx, x1112, x3, 3);
    let x1116: BytePoly_1 = bigint_nondet_rem!(ctx, x1112, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1115, x3, 4), x1116, 4), x1112, 4),
        24387,
        2,
    )?;
    let x1117: BytePoly_2 = bigint_mul!(x1078, x1078, 2);
    let x1118: BytePoly_3 = bigint_nondet_quot!(ctx, x1117, x3, 3);
    let x1119: BytePoly_1 = bigint_nondet_rem!(ctx, x1117, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1118, x3, 4), x1119, 4), x1117, 4),
        24387,
        2,
    )?;
    let x1120: BytePoly_2 = bigint_add!(bigint_mul!(x1119, x0, 2), x2, 2);
    let x1121: BytePoly_3 = bigint_nondet_quot!(ctx, x1120, x3, 3);
    let x1122: BytePoly_1 = bigint_nondet_rem!(ctx, x1120, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1121, x3, 4), x1122, 4), x1120, 4),
        24387,
        2,
    )?;
    let x1123: BytePoly_1 = bigint_add!(x1084, x1084, 1);
    let x1124: BytePoly_1 = bigint_nondet_quot!(ctx, x1123, x3, 1);
    let x1125: BytePoly_1 = bigint_nondet_rem!(ctx, x1123, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1124, x3, 2), x1125, 2), x1123, 2),
        8131,
        2,
    )?;
    let x1126: BytePoly_1 = bigint_nondet_inv!(ctx, x1125, x3, 1);
    let x1127: BytePoly_2 = bigint_mul!(x1125, x1126, 2);
    let x1128: BytePoly_3 = bigint_nondet_quot!(ctx, x1127, x3, 3);
    let x1129: BytePoly_1 = bigint_nondet_rem!(ctx, x1127, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1128, x3, 4), x1129, 4), x1127, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1129, x5, 1), 34, 1)?;
    let x1130: BytePoly_2 = bigint_mul!(x1122, x1126, 2);
    let x1131: BytePoly_3 = bigint_nondet_quot!(ctx, x1130, x3, 3);
    let x1132: BytePoly_1 = bigint_nondet_rem!(ctx, x1130, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1131, x3, 4), x1132, 4), x1130, 4),
        24387,
        2,
    )?;
    let x1133: BytePoly_2 = bigint_mul!(x1132, x1078, 2);
    let x1134: BytePoly_3 = bigint_nondet_quot!(ctx, x1133, x3, 3);
    let x1135: BytePoly_1 = bigint_nondet_rem!(ctx, x1133, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1134, x3, 4), x1135, 4), x1133, 4),
        24387,
        2,
    )?;
    let x1136: BytePoly_1 = bigint_add!(bigint_sub!(x1084, x1135, 1), x3, 1);
    let x1137: BytePoly_1 = bigint_nondet_quot!(ctx, x1136, x3, 1);
    let x1138: BytePoly_1 = bigint_nondet_rem!(ctx, x1136, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1137, x3, 2), x1138, 2), x1136, 2),
        8131,
        2,
    )?;
    let x1139: BytePoly_2 = bigint_mul!(x1132, x1132, 2);
    let x1140: BytePoly_3 = bigint_nondet_quot!(ctx, x1139, x3, 3);
    let x1141: BytePoly_1 = bigint_nondet_rem!(ctx, x1139, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1140, x3, 4), x1141, 4), x1139, 4),
        24387,
        2,
    )?;
    let x1142: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1141, x1078, 1), x3, 1), x1078, 1),
        x3,
        1
    );
    let x1143: BytePoly_1 = bigint_nondet_quot!(ctx, x1142, x3, 1);
    let x1144: BytePoly_1 = bigint_nondet_rem!(ctx, x1142, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1143, x3, 2), x1144, 2), x1142, 2),
        8131,
        2,
    )?;
    let x1145: BytePoly_2 = bigint_mul!(x1132, x1144, 2);
    let x1146: BytePoly_3 = bigint_nondet_quot!(ctx, x1145, x3, 3);
    let x1147: BytePoly_1 = bigint_nondet_rem!(ctx, x1145, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1146, x3, 4), x1147, 4), x1145, 4),
        24387,
        2,
    )?;
    let x1148: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1147, x1138, 1), 1), x3, 1);
    let x1149: BytePoly_1 = bigint_nondet_quot!(ctx, x1148, x3, 1);
    let x1150: BytePoly_1 = bigint_nondet_rem!(ctx, x1148, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1149, x3, 2), x1150, 2), x1148, 2),
        8131,
        2,
    )?;
    let x1151: BytePoly_1 = bigint_nondet_rem!(ctx, x1086, x4, 1);
    let x1152: BytePoly_1 = bigint_nondet_quot!(ctx, x1086, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1152, x4, 2), x1151, 2), x1086, 2),
        8131,
        2,
    )?;
    let x1153: BytePoly_1 = bigint_sub!(x5, x1151, 1);
    eqz(ctx, &bigint_mul!(x1151, x1153, 2), 8131, 2)?;
    let x1154: BytePoly_1 = bigint_add!(bigint_sub!(x1144, x1114, 1), x3, 1);
    let x1155: BytePoly_1 = bigint_nondet_inv!(ctx, x1154, x3, 1);
    let x1156: BytePoly_2 = bigint_mul!(x1154, x1155, 2);
    let x1157: BytePoly_3 = bigint_nondet_quot!(ctx, x1156, x3, 3);
    let x1158: BytePoly_1 = bigint_nondet_rem!(ctx, x1156, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1157, x3, 4), x1158, 4), x1156, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1158, x1, 1), 34, 1)?;
    let x1159: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1150, x1116, 1), x3, 1), x1155, 2);
    let x1160: BytePoly_3 = bigint_nondet_quot!(ctx, x1159, x3, 3);
    let x1161: BytePoly_1 = bigint_nondet_rem!(ctx, x1159, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1160, x3, 4), x1161, 4), x1159, 4),
        24387,
        2,
    )?;
    let x1162: BytePoly_2 = bigint_mul!(x1161, x1114, 2);
    let x1163: BytePoly_3 = bigint_nondet_quot!(ctx, x1162, x3, 3);
    let x1164: BytePoly_1 = bigint_nondet_rem!(ctx, x1162, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1163, x3, 4), x1164, 4), x1162, 4),
        24387,
        2,
    )?;
    let x1165: BytePoly_1 = bigint_add!(bigint_sub!(x1116, x1164, 1), x3, 1);
    let x1166: BytePoly_1 = bigint_nondet_quot!(ctx, x1165, x3, 1);
    let x1167: BytePoly_1 = bigint_nondet_rem!(ctx, x1165, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1166, x3, 2), x1167, 2), x1165, 2),
        8131,
        2,
    )?;
    let x1168: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1161, x1161, 2), x1114, 2), x3, 2),
            x1144,
            2
        ),
        x3,
        2
    );
    let x1169: BytePoly_3 = bigint_nondet_quot!(ctx, x1168, x3, 3);
    let x1170: BytePoly_1 = bigint_nondet_rem!(ctx, x1168, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1169, x3, 4), x1170, 4), x1168, 4),
        24387,
        2,
    )?;
    let x1171: BytePoly_2 = bigint_mul!(x1161, x1170, 2);
    let x1172: BytePoly_3 = bigint_nondet_quot!(ctx, x1171, x3, 3);
    let x1173: BytePoly_1 = bigint_nondet_rem!(ctx, x1171, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1172, x3, 4), x1173, 4), x1171, 4),
        24387,
        2,
    )?;
    let x1174: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1173, x1167, 1), 1), x3, 1);
    let x1175: BytePoly_1 = bigint_nondet_quot!(ctx, x1174, x3, 1);
    let x1176: BytePoly_1 = bigint_nondet_rem!(ctx, x1174, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1175, x3, 2), x1176, 2), x1174, 2),
        8131,
        2,
    )?;
    let x1177: BytePoly_2 = bigint_add!(
        bigint_mul!(x1170, x1151, 2),
        bigint_mul!(x1114, x1153, 2),
        2
    );
    let x1178: BytePoly_2 = bigint_add!(
        bigint_mul!(x1176, x1151, 2),
        bigint_mul!(x1116, x1153, 2),
        2
    );
    let x1179: BytePoly_3 = bigint_nondet_quot!(ctx, x1177, x3, 3);
    let x1180: BytePoly_1 = bigint_nondet_rem!(ctx, x1177, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1179, x3, 4), x1180, 4), x1177, 4),
        24387,
        2,
    )?;
    let x1181: BytePoly_3 = bigint_nondet_quot!(ctx, x1178, x3, 3);
    let x1182: BytePoly_1 = bigint_nondet_rem!(ctx, x1178, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1181, x3, 4), x1182, 4), x1178, 4),
        24387,
        2,
    )?;
    let x1183: BytePoly_2 = bigint_mul!(x1144, x1144, 2);
    let x1184: BytePoly_3 = bigint_nondet_quot!(ctx, x1183, x3, 3);
    let x1185: BytePoly_1 = bigint_nondet_rem!(ctx, x1183, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1184, x3, 4), x1185, 4), x1183, 4),
        24387,
        2,
    )?;
    let x1186: BytePoly_2 = bigint_add!(bigint_mul!(x1185, x0, 2), x2, 2);
    let x1187: BytePoly_3 = bigint_nondet_quot!(ctx, x1186, x3, 3);
    let x1188: BytePoly_1 = bigint_nondet_rem!(ctx, x1186, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1187, x3, 4), x1188, 4), x1186, 4),
        24387,
        2,
    )?;
    let x1189: BytePoly_1 = bigint_add!(x1150, x1150, 1);
    let x1190: BytePoly_1 = bigint_nondet_quot!(ctx, x1189, x3, 1);
    let x1191: BytePoly_1 = bigint_nondet_rem!(ctx, x1189, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1190, x3, 2), x1191, 2), x1189, 2),
        8131,
        2,
    )?;
    let x1192: BytePoly_1 = bigint_nondet_inv!(ctx, x1191, x3, 1);
    let x1193: BytePoly_2 = bigint_mul!(x1191, x1192, 2);
    let x1194: BytePoly_3 = bigint_nondet_quot!(ctx, x1193, x3, 3);
    let x1195: BytePoly_1 = bigint_nondet_rem!(ctx, x1193, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1194, x3, 4), x1195, 4), x1193, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1195, x5, 1), 34, 1)?;
    let x1196: BytePoly_2 = bigint_mul!(x1188, x1192, 2);
    let x1197: BytePoly_3 = bigint_nondet_quot!(ctx, x1196, x3, 3);
    let x1198: BytePoly_1 = bigint_nondet_rem!(ctx, x1196, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1197, x3, 4), x1198, 4), x1196, 4),
        24387,
        2,
    )?;
    let x1199: BytePoly_2 = bigint_mul!(x1198, x1144, 2);
    let x1200: BytePoly_3 = bigint_nondet_quot!(ctx, x1199, x3, 3);
    let x1201: BytePoly_1 = bigint_nondet_rem!(ctx, x1199, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1200, x3, 4), x1201, 4), x1199, 4),
        24387,
        2,
    )?;
    let x1202: BytePoly_1 = bigint_add!(bigint_sub!(x1150, x1201, 1), x3, 1);
    let x1203: BytePoly_1 = bigint_nondet_quot!(ctx, x1202, x3, 1);
    let x1204: BytePoly_1 = bigint_nondet_rem!(ctx, x1202, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1203, x3, 2), x1204, 2), x1202, 2),
        8131,
        2,
    )?;
    let x1205: BytePoly_2 = bigint_mul!(x1198, x1198, 2);
    let x1206: BytePoly_3 = bigint_nondet_quot!(ctx, x1205, x3, 3);
    let x1207: BytePoly_1 = bigint_nondet_rem!(ctx, x1205, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1206, x3, 4), x1207, 4), x1205, 4),
        24387,
        2,
    )?;
    let x1208: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1207, x1144, 1), x3, 1), x1144, 1),
        x3,
        1
    );
    let x1209: BytePoly_1 = bigint_nondet_quot!(ctx, x1208, x3, 1);
    let x1210: BytePoly_1 = bigint_nondet_rem!(ctx, x1208, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1209, x3, 2), x1210, 2), x1208, 2),
        8131,
        2,
    )?;
    let x1211: BytePoly_2 = bigint_mul!(x1198, x1210, 2);
    let x1212: BytePoly_3 = bigint_nondet_quot!(ctx, x1211, x3, 3);
    let x1213: BytePoly_1 = bigint_nondet_rem!(ctx, x1211, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1212, x3, 4), x1213, 4), x1211, 4),
        24387,
        2,
    )?;
    let x1214: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1213, x1204, 1), 1), x3, 1);
    let x1215: BytePoly_1 = bigint_nondet_quot!(ctx, x1214, x3, 1);
    let x1216: BytePoly_1 = bigint_nondet_rem!(ctx, x1214, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1215, x3, 2), x1216, 2), x1214, 2),
        8131,
        2,
    )?;
    let x1217: BytePoly_1 = bigint_nondet_rem!(ctx, x1152, x4, 1);
    let x1218: BytePoly_1 = bigint_nondet_quot!(ctx, x1152, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1218, x4, 2), x1217, 2), x1152, 2),
        8131,
        2,
    )?;
    let x1219: BytePoly_1 = bigint_sub!(x5, x1217, 1);
    eqz(ctx, &bigint_mul!(x1217, x1219, 2), 8131, 2)?;
    let x1220: BytePoly_1 = bigint_add!(bigint_sub!(x1210, x1180, 1), x3, 1);
    let x1221: BytePoly_1 = bigint_nondet_inv!(ctx, x1220, x3, 1);
    let x1222: BytePoly_2 = bigint_mul!(x1220, x1221, 2);
    let x1223: BytePoly_3 = bigint_nondet_quot!(ctx, x1222, x3, 3);
    let x1224: BytePoly_1 = bigint_nondet_rem!(ctx, x1222, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1223, x3, 4), x1224, 4), x1222, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1224, x1, 1), 34, 1)?;
    let x1225: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1216, x1182, 1), x3, 1), x1221, 2);
    let x1226: BytePoly_3 = bigint_nondet_quot!(ctx, x1225, x3, 3);
    let x1227: BytePoly_1 = bigint_nondet_rem!(ctx, x1225, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1226, x3, 4), x1227, 4), x1225, 4),
        24387,
        2,
    )?;
    let x1228: BytePoly_2 = bigint_mul!(x1227, x1180, 2);
    let x1229: BytePoly_3 = bigint_nondet_quot!(ctx, x1228, x3, 3);
    let x1230: BytePoly_1 = bigint_nondet_rem!(ctx, x1228, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1229, x3, 4), x1230, 4), x1228, 4),
        24387,
        2,
    )?;
    let x1231: BytePoly_1 = bigint_add!(bigint_sub!(x1182, x1230, 1), x3, 1);
    let x1232: BytePoly_1 = bigint_nondet_quot!(ctx, x1231, x3, 1);
    let x1233: BytePoly_1 = bigint_nondet_rem!(ctx, x1231, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1232, x3, 2), x1233, 2), x1231, 2),
        8131,
        2,
    )?;
    let x1234: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1227, x1227, 2), x1180, 2), x3, 2),
            x1210,
            2
        ),
        x3,
        2
    );
    let x1235: BytePoly_3 = bigint_nondet_quot!(ctx, x1234, x3, 3);
    let x1236: BytePoly_1 = bigint_nondet_rem!(ctx, x1234, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1235, x3, 4), x1236, 4), x1234, 4),
        24387,
        2,
    )?;
    let x1237: BytePoly_2 = bigint_mul!(x1227, x1236, 2);
    let x1238: BytePoly_3 = bigint_nondet_quot!(ctx, x1237, x3, 3);
    let x1239: BytePoly_1 = bigint_nondet_rem!(ctx, x1237, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1238, x3, 4), x1239, 4), x1237, 4),
        24387,
        2,
    )?;
    let x1240: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1239, x1233, 1), 1), x3, 1);
    let x1241: BytePoly_1 = bigint_nondet_quot!(ctx, x1240, x3, 1);
    let x1242: BytePoly_1 = bigint_nondet_rem!(ctx, x1240, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1241, x3, 2), x1242, 2), x1240, 2),
        8131,
        2,
    )?;
    let x1243: BytePoly_2 = bigint_add!(
        bigint_mul!(x1236, x1217, 2),
        bigint_mul!(x1180, x1219, 2),
        2
    );
    let x1244: BytePoly_2 = bigint_add!(
        bigint_mul!(x1242, x1217, 2),
        bigint_mul!(x1182, x1219, 2),
        2
    );
    let x1245: BytePoly_3 = bigint_nondet_quot!(ctx, x1243, x3, 3);
    let x1246: BytePoly_1 = bigint_nondet_rem!(ctx, x1243, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1245, x3, 4), x1246, 4), x1243, 4),
        24387,
        2,
    )?;
    let x1247: BytePoly_3 = bigint_nondet_quot!(ctx, x1244, x3, 3);
    let x1248: BytePoly_1 = bigint_nondet_rem!(ctx, x1244, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1247, x3, 4), x1248, 4), x1244, 4),
        24387,
        2,
    )?;
    let x1249: BytePoly_2 = bigint_mul!(x1210, x1210, 2);
    let x1250: BytePoly_3 = bigint_nondet_quot!(ctx, x1249, x3, 3);
    let x1251: BytePoly_1 = bigint_nondet_rem!(ctx, x1249, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1250, x3, 4), x1251, 4), x1249, 4),
        24387,
        2,
    )?;
    let x1252: BytePoly_2 = bigint_add!(bigint_mul!(x1251, x0, 2), x2, 2);
    let x1253: BytePoly_3 = bigint_nondet_quot!(ctx, x1252, x3, 3);
    let x1254: BytePoly_1 = bigint_nondet_rem!(ctx, x1252, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1253, x3, 4), x1254, 4), x1252, 4),
        24387,
        2,
    )?;
    let x1255: BytePoly_1 = bigint_add!(x1216, x1216, 1);
    let x1256: BytePoly_1 = bigint_nondet_quot!(ctx, x1255, x3, 1);
    let x1257: BytePoly_1 = bigint_nondet_rem!(ctx, x1255, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1256, x3, 2), x1257, 2), x1255, 2),
        8131,
        2,
    )?;
    let x1258: BytePoly_1 = bigint_nondet_inv!(ctx, x1257, x3, 1);
    let x1259: BytePoly_2 = bigint_mul!(x1257, x1258, 2);
    let x1260: BytePoly_3 = bigint_nondet_quot!(ctx, x1259, x3, 3);
    let x1261: BytePoly_1 = bigint_nondet_rem!(ctx, x1259, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1260, x3, 4), x1261, 4), x1259, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1261, x5, 1), 34, 1)?;
    let x1262: BytePoly_2 = bigint_mul!(x1254, x1258, 2);
    let x1263: BytePoly_3 = bigint_nondet_quot!(ctx, x1262, x3, 3);
    let x1264: BytePoly_1 = bigint_nondet_rem!(ctx, x1262, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1263, x3, 4), x1264, 4), x1262, 4),
        24387,
        2,
    )?;
    let x1265: BytePoly_2 = bigint_mul!(x1264, x1210, 2);
    let x1266: BytePoly_3 = bigint_nondet_quot!(ctx, x1265, x3, 3);
    let x1267: BytePoly_1 = bigint_nondet_rem!(ctx, x1265, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1266, x3, 4), x1267, 4), x1265, 4),
        24387,
        2,
    )?;
    let x1268: BytePoly_1 = bigint_add!(bigint_sub!(x1216, x1267, 1), x3, 1);
    let x1269: BytePoly_1 = bigint_nondet_quot!(ctx, x1268, x3, 1);
    let x1270: BytePoly_1 = bigint_nondet_rem!(ctx, x1268, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1269, x3, 2), x1270, 2), x1268, 2),
        8131,
        2,
    )?;
    let x1271: BytePoly_2 = bigint_mul!(x1264, x1264, 2);
    let x1272: BytePoly_3 = bigint_nondet_quot!(ctx, x1271, x3, 3);
    let x1273: BytePoly_1 = bigint_nondet_rem!(ctx, x1271, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1272, x3, 4), x1273, 4), x1271, 4),
        24387,
        2,
    )?;
    let x1274: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1273, x1210, 1), x3, 1), x1210, 1),
        x3,
        1
    );
    let x1275: BytePoly_1 = bigint_nondet_quot!(ctx, x1274, x3, 1);
    let x1276: BytePoly_1 = bigint_nondet_rem!(ctx, x1274, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1275, x3, 2), x1276, 2), x1274, 2),
        8131,
        2,
    )?;
    let x1277: BytePoly_2 = bigint_mul!(x1264, x1276, 2);
    let x1278: BytePoly_3 = bigint_nondet_quot!(ctx, x1277, x3, 3);
    let x1279: BytePoly_1 = bigint_nondet_rem!(ctx, x1277, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1278, x3, 4), x1279, 4), x1277, 4),
        24387,
        2,
    )?;
    let x1280: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1279, x1270, 1), 1), x3, 1);
    let x1281: BytePoly_1 = bigint_nondet_quot!(ctx, x1280, x3, 1);
    let x1282: BytePoly_1 = bigint_nondet_rem!(ctx, x1280, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1281, x3, 2), x1282, 2), x1280, 2),
        8131,
        2,
    )?;
    let x1283: BytePoly_1 = bigint_nondet_rem!(ctx, x1218, x4, 1);
    let x1284: BytePoly_1 = bigint_nondet_quot!(ctx, x1218, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1284, x4, 2), x1283, 2), x1218, 2),
        8131,
        2,
    )?;
    let x1285: BytePoly_1 = bigint_sub!(x5, x1283, 1);
    eqz(ctx, &bigint_mul!(x1283, x1285, 2), 8131, 2)?;
    let x1286: BytePoly_1 = bigint_add!(bigint_sub!(x1276, x1246, 1), x3, 1);
    let x1287: BytePoly_1 = bigint_nondet_inv!(ctx, x1286, x3, 1);
    let x1288: BytePoly_2 = bigint_mul!(x1286, x1287, 2);
    let x1289: BytePoly_3 = bigint_nondet_quot!(ctx, x1288, x3, 3);
    let x1290: BytePoly_1 = bigint_nondet_rem!(ctx, x1288, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1289, x3, 4), x1290, 4), x1288, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1290, x1, 1), 34, 1)?;
    let x1291: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1282, x1248, 1), x3, 1), x1287, 2);
    let x1292: BytePoly_3 = bigint_nondet_quot!(ctx, x1291, x3, 3);
    let x1293: BytePoly_1 = bigint_nondet_rem!(ctx, x1291, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1292, x3, 4), x1293, 4), x1291, 4),
        24387,
        2,
    )?;
    let x1294: BytePoly_2 = bigint_mul!(x1293, x1246, 2);
    let x1295: BytePoly_3 = bigint_nondet_quot!(ctx, x1294, x3, 3);
    let x1296: BytePoly_1 = bigint_nondet_rem!(ctx, x1294, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1295, x3, 4), x1296, 4), x1294, 4),
        24387,
        2,
    )?;
    let x1297: BytePoly_1 = bigint_add!(bigint_sub!(x1248, x1296, 1), x3, 1);
    let x1298: BytePoly_1 = bigint_nondet_quot!(ctx, x1297, x3, 1);
    let x1299: BytePoly_1 = bigint_nondet_rem!(ctx, x1297, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1298, x3, 2), x1299, 2), x1297, 2),
        8131,
        2,
    )?;
    let x1300: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1293, x1293, 2), x1246, 2), x3, 2),
            x1276,
            2
        ),
        x3,
        2
    );
    let x1301: BytePoly_3 = bigint_nondet_quot!(ctx, x1300, x3, 3);
    let x1302: BytePoly_1 = bigint_nondet_rem!(ctx, x1300, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1301, x3, 4), x1302, 4), x1300, 4),
        24387,
        2,
    )?;
    let x1303: BytePoly_2 = bigint_mul!(x1293, x1302, 2);
    let x1304: BytePoly_3 = bigint_nondet_quot!(ctx, x1303, x3, 3);
    let x1305: BytePoly_1 = bigint_nondet_rem!(ctx, x1303, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1304, x3, 4), x1305, 4), x1303, 4),
        24387,
        2,
    )?;
    let x1306: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1305, x1299, 1), 1), x3, 1);
    let x1307: BytePoly_1 = bigint_nondet_quot!(ctx, x1306, x3, 1);
    let x1308: BytePoly_1 = bigint_nondet_rem!(ctx, x1306, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1307, x3, 2), x1308, 2), x1306, 2),
        8131,
        2,
    )?;
    let x1309: BytePoly_2 = bigint_add!(
        bigint_mul!(x1302, x1283, 2),
        bigint_mul!(x1246, x1285, 2),
        2
    );
    let x1310: BytePoly_2 = bigint_add!(
        bigint_mul!(x1308, x1283, 2),
        bigint_mul!(x1248, x1285, 2),
        2
    );
    let x1311: BytePoly_3 = bigint_nondet_quot!(ctx, x1309, x3, 3);
    let x1312: BytePoly_1 = bigint_nondet_rem!(ctx, x1309, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1311, x3, 4), x1312, 4), x1309, 4),
        24387,
        2,
    )?;
    let x1313: BytePoly_3 = bigint_nondet_quot!(ctx, x1310, x3, 3);
    let x1314: BytePoly_1 = bigint_nondet_rem!(ctx, x1310, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1313, x3, 4), x1314, 4), x1310, 4),
        24387,
        2,
    )?;
    let x1315: BytePoly_2 = bigint_mul!(x1276, x1276, 2);
    let x1316: BytePoly_3 = bigint_nondet_quot!(ctx, x1315, x3, 3);
    let x1317: BytePoly_1 = bigint_nondet_rem!(ctx, x1315, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1316, x3, 4), x1317, 4), x1315, 4),
        24387,
        2,
    )?;
    let x1318: BytePoly_2 = bigint_add!(bigint_mul!(x1317, x0, 2), x2, 2);
    let x1319: BytePoly_3 = bigint_nondet_quot!(ctx, x1318, x3, 3);
    let x1320: BytePoly_1 = bigint_nondet_rem!(ctx, x1318, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1319, x3, 4), x1320, 4), x1318, 4),
        24387,
        2,
    )?;
    let x1321: BytePoly_1 = bigint_add!(x1282, x1282, 1);
    let x1322: BytePoly_1 = bigint_nondet_quot!(ctx, x1321, x3, 1);
    let x1323: BytePoly_1 = bigint_nondet_rem!(ctx, x1321, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1322, x3, 2), x1323, 2), x1321, 2),
        8131,
        2,
    )?;
    let x1324: BytePoly_1 = bigint_nondet_inv!(ctx, x1323, x3, 1);
    let x1325: BytePoly_2 = bigint_mul!(x1323, x1324, 2);
    let x1326: BytePoly_3 = bigint_nondet_quot!(ctx, x1325, x3, 3);
    let x1327: BytePoly_1 = bigint_nondet_rem!(ctx, x1325, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1326, x3, 4), x1327, 4), x1325, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1327, x5, 1), 34, 1)?;
    let x1328: BytePoly_2 = bigint_mul!(x1320, x1324, 2);
    let x1329: BytePoly_3 = bigint_nondet_quot!(ctx, x1328, x3, 3);
    let x1330: BytePoly_1 = bigint_nondet_rem!(ctx, x1328, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1329, x3, 4), x1330, 4), x1328, 4),
        24387,
        2,
    )?;
    let x1331: BytePoly_2 = bigint_mul!(x1330, x1276, 2);
    let x1332: BytePoly_3 = bigint_nondet_quot!(ctx, x1331, x3, 3);
    let x1333: BytePoly_1 = bigint_nondet_rem!(ctx, x1331, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1332, x3, 4), x1333, 4), x1331, 4),
        24387,
        2,
    )?;
    let x1334: BytePoly_1 = bigint_add!(bigint_sub!(x1282, x1333, 1), x3, 1);
    let x1335: BytePoly_1 = bigint_nondet_quot!(ctx, x1334, x3, 1);
    let x1336: BytePoly_1 = bigint_nondet_rem!(ctx, x1334, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1335, x3, 2), x1336, 2), x1334, 2),
        8131,
        2,
    )?;
    let x1337: BytePoly_2 = bigint_mul!(x1330, x1330, 2);
    let x1338: BytePoly_3 = bigint_nondet_quot!(ctx, x1337, x3, 3);
    let x1339: BytePoly_1 = bigint_nondet_rem!(ctx, x1337, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1338, x3, 4), x1339, 4), x1337, 4),
        24387,
        2,
    )?;
    let x1340: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1339, x1276, 1), x3, 1), x1276, 1),
        x3,
        1
    );
    let x1341: BytePoly_1 = bigint_nondet_quot!(ctx, x1340, x3, 1);
    let x1342: BytePoly_1 = bigint_nondet_rem!(ctx, x1340, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1341, x3, 2), x1342, 2), x1340, 2),
        8131,
        2,
    )?;
    let x1343: BytePoly_2 = bigint_mul!(x1330, x1342, 2);
    let x1344: BytePoly_3 = bigint_nondet_quot!(ctx, x1343, x3, 3);
    let x1345: BytePoly_1 = bigint_nondet_rem!(ctx, x1343, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1344, x3, 4), x1345, 4), x1343, 4),
        24387,
        2,
    )?;
    let x1346: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1345, x1336, 1), 1), x3, 1);
    let x1347: BytePoly_1 = bigint_nondet_quot!(ctx, x1346, x3, 1);
    let x1348: BytePoly_1 = bigint_nondet_rem!(ctx, x1346, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1347, x3, 2), x1348, 2), x1346, 2),
        8131,
        2,
    )?;
    let x1349: BytePoly_1 = bigint_nondet_rem!(ctx, x1284, x4, 1);
    let x1350: BytePoly_1 = bigint_nondet_quot!(ctx, x1284, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1350, x4, 2), x1349, 2), x1284, 2),
        8131,
        2,
    )?;
    let x1351: BytePoly_1 = bigint_sub!(x5, x1349, 1);
    eqz(ctx, &bigint_mul!(x1349, x1351, 2), 8131, 2)?;
    let x1352: BytePoly_1 = bigint_add!(bigint_sub!(x1342, x1312, 1), x3, 1);
    let x1353: BytePoly_1 = bigint_nondet_inv!(ctx, x1352, x3, 1);
    let x1354: BytePoly_2 = bigint_mul!(x1352, x1353, 2);
    let x1355: BytePoly_3 = bigint_nondet_quot!(ctx, x1354, x3, 3);
    let x1356: BytePoly_1 = bigint_nondet_rem!(ctx, x1354, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1355, x3, 4), x1356, 4), x1354, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1356, x1, 1), 34, 1)?;
    let x1357: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1348, x1314, 1), x3, 1), x1353, 2);
    let x1358: BytePoly_3 = bigint_nondet_quot!(ctx, x1357, x3, 3);
    let x1359: BytePoly_1 = bigint_nondet_rem!(ctx, x1357, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1358, x3, 4), x1359, 4), x1357, 4),
        24387,
        2,
    )?;
    let x1360: BytePoly_2 = bigint_mul!(x1359, x1312, 2);
    let x1361: BytePoly_3 = bigint_nondet_quot!(ctx, x1360, x3, 3);
    let x1362: BytePoly_1 = bigint_nondet_rem!(ctx, x1360, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1361, x3, 4), x1362, 4), x1360, 4),
        24387,
        2,
    )?;
    let x1363: BytePoly_1 = bigint_add!(bigint_sub!(x1314, x1362, 1), x3, 1);
    let x1364: BytePoly_1 = bigint_nondet_quot!(ctx, x1363, x3, 1);
    let x1365: BytePoly_1 = bigint_nondet_rem!(ctx, x1363, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1364, x3, 2), x1365, 2), x1363, 2),
        8131,
        2,
    )?;
    let x1366: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1359, x1359, 2), x1312, 2), x3, 2),
            x1342,
            2
        ),
        x3,
        2
    );
    let x1367: BytePoly_3 = bigint_nondet_quot!(ctx, x1366, x3, 3);
    let x1368: BytePoly_1 = bigint_nondet_rem!(ctx, x1366, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1367, x3, 4), x1368, 4), x1366, 4),
        24387,
        2,
    )?;
    let x1369: BytePoly_2 = bigint_mul!(x1359, x1368, 2);
    let x1370: BytePoly_3 = bigint_nondet_quot!(ctx, x1369, x3, 3);
    let x1371: BytePoly_1 = bigint_nondet_rem!(ctx, x1369, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1370, x3, 4), x1371, 4), x1369, 4),
        24387,
        2,
    )?;
    let x1372: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1371, x1365, 1), 1), x3, 1);
    let x1373: BytePoly_1 = bigint_nondet_quot!(ctx, x1372, x3, 1);
    let x1374: BytePoly_1 = bigint_nondet_rem!(ctx, x1372, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1373, x3, 2), x1374, 2), x1372, 2),
        8131,
        2,
    )?;
    let x1375: BytePoly_2 = bigint_add!(
        bigint_mul!(x1368, x1349, 2),
        bigint_mul!(x1312, x1351, 2),
        2
    );
    let x1376: BytePoly_2 = bigint_add!(
        bigint_mul!(x1374, x1349, 2),
        bigint_mul!(x1314, x1351, 2),
        2
    );
    let x1377: BytePoly_3 = bigint_nondet_quot!(ctx, x1375, x3, 3);
    let x1378: BytePoly_1 = bigint_nondet_rem!(ctx, x1375, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1377, x3, 4), x1378, 4), x1375, 4),
        24387,
        2,
    )?;
    let x1379: BytePoly_3 = bigint_nondet_quot!(ctx, x1376, x3, 3);
    let x1380: BytePoly_1 = bigint_nondet_rem!(ctx, x1376, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1379, x3, 4), x1380, 4), x1376, 4),
        24387,
        2,
    )?;
    let x1381: BytePoly_2 = bigint_mul!(x1342, x1342, 2);
    let x1382: BytePoly_3 = bigint_nondet_quot!(ctx, x1381, x3, 3);
    let x1383: BytePoly_1 = bigint_nondet_rem!(ctx, x1381, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1382, x3, 4), x1383, 4), x1381, 4),
        24387,
        2,
    )?;
    let x1384: BytePoly_2 = bigint_add!(bigint_mul!(x1383, x0, 2), x2, 2);
    let x1385: BytePoly_3 = bigint_nondet_quot!(ctx, x1384, x3, 3);
    let x1386: BytePoly_1 = bigint_nondet_rem!(ctx, x1384, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1385, x3, 4), x1386, 4), x1384, 4),
        24387,
        2,
    )?;
    let x1387: BytePoly_1 = bigint_add!(x1348, x1348, 1);
    let x1388: BytePoly_1 = bigint_nondet_quot!(ctx, x1387, x3, 1);
    let x1389: BytePoly_1 = bigint_nondet_rem!(ctx, x1387, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1388, x3, 2), x1389, 2), x1387, 2),
        8131,
        2,
    )?;
    let x1390: BytePoly_1 = bigint_nondet_inv!(ctx, x1389, x3, 1);
    let x1391: BytePoly_2 = bigint_mul!(x1389, x1390, 2);
    let x1392: BytePoly_3 = bigint_nondet_quot!(ctx, x1391, x3, 3);
    let x1393: BytePoly_1 = bigint_nondet_rem!(ctx, x1391, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1392, x3, 4), x1393, 4), x1391, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1393, x5, 1), 34, 1)?;
    let x1394: BytePoly_2 = bigint_mul!(x1386, x1390, 2);
    let x1395: BytePoly_3 = bigint_nondet_quot!(ctx, x1394, x3, 3);
    let x1396: BytePoly_1 = bigint_nondet_rem!(ctx, x1394, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1395, x3, 4), x1396, 4), x1394, 4),
        24387,
        2,
    )?;
    let x1397: BytePoly_2 = bigint_mul!(x1396, x1342, 2);
    let x1398: BytePoly_3 = bigint_nondet_quot!(ctx, x1397, x3, 3);
    let x1399: BytePoly_1 = bigint_nondet_rem!(ctx, x1397, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1398, x3, 4), x1399, 4), x1397, 4),
        24387,
        2,
    )?;
    let x1400: BytePoly_1 = bigint_add!(bigint_sub!(x1348, x1399, 1), x3, 1);
    let x1401: BytePoly_1 = bigint_nondet_quot!(ctx, x1400, x3, 1);
    let x1402: BytePoly_1 = bigint_nondet_rem!(ctx, x1400, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1401, x3, 2), x1402, 2), x1400, 2),
        8131,
        2,
    )?;
    let x1403: BytePoly_2 = bigint_mul!(x1396, x1396, 2);
    let x1404: BytePoly_3 = bigint_nondet_quot!(ctx, x1403, x3, 3);
    let x1405: BytePoly_1 = bigint_nondet_rem!(ctx, x1403, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1404, x3, 4), x1405, 4), x1403, 4),
        24387,
        2,
    )?;
    let x1406: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1405, x1342, 1), x3, 1), x1342, 1),
        x3,
        1
    );
    let x1407: BytePoly_1 = bigint_nondet_quot!(ctx, x1406, x3, 1);
    let x1408: BytePoly_1 = bigint_nondet_rem!(ctx, x1406, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1407, x3, 2), x1408, 2), x1406, 2),
        8131,
        2,
    )?;
    let x1409: BytePoly_2 = bigint_mul!(x1396, x1408, 2);
    let x1410: BytePoly_3 = bigint_nondet_quot!(ctx, x1409, x3, 3);
    let x1411: BytePoly_1 = bigint_nondet_rem!(ctx, x1409, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1410, x3, 4), x1411, 4), x1409, 4),
        24387,
        2,
    )?;
    let x1412: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1411, x1402, 1), 1), x3, 1);
    let x1413: BytePoly_1 = bigint_nondet_quot!(ctx, x1412, x3, 1);
    let x1414: BytePoly_1 = bigint_nondet_rem!(ctx, x1412, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1413, x3, 2), x1414, 2), x1412, 2),
        8131,
        2,
    )?;
    let x1415: BytePoly_1 = bigint_nondet_rem!(ctx, x1350, x4, 1);
    let x1416: BytePoly_1 = bigint_nondet_quot!(ctx, x1350, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1416, x4, 2), x1415, 2), x1350, 2),
        8131,
        2,
    )?;
    let x1417: BytePoly_1 = bigint_sub!(x5, x1415, 1);
    eqz(ctx, &bigint_mul!(x1415, x1417, 2), 8131, 2)?;
    let x1418: BytePoly_1 = bigint_add!(bigint_sub!(x1408, x1378, 1), x3, 1);
    let x1419: BytePoly_1 = bigint_nondet_inv!(ctx, x1418, x3, 1);
    let x1420: BytePoly_2 = bigint_mul!(x1418, x1419, 2);
    let x1421: BytePoly_3 = bigint_nondet_quot!(ctx, x1420, x3, 3);
    let x1422: BytePoly_1 = bigint_nondet_rem!(ctx, x1420, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1421, x3, 4), x1422, 4), x1420, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1422, x1, 1), 34, 1)?;
    let x1423: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1414, x1380, 1), x3, 1), x1419, 2);
    let x1424: BytePoly_3 = bigint_nondet_quot!(ctx, x1423, x3, 3);
    let x1425: BytePoly_1 = bigint_nondet_rem!(ctx, x1423, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1424, x3, 4), x1425, 4), x1423, 4),
        24387,
        2,
    )?;
    let x1426: BytePoly_2 = bigint_mul!(x1425, x1378, 2);
    let x1427: BytePoly_3 = bigint_nondet_quot!(ctx, x1426, x3, 3);
    let x1428: BytePoly_1 = bigint_nondet_rem!(ctx, x1426, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1427, x3, 4), x1428, 4), x1426, 4),
        24387,
        2,
    )?;
    let x1429: BytePoly_1 = bigint_add!(bigint_sub!(x1380, x1428, 1), x3, 1);
    let x1430: BytePoly_1 = bigint_nondet_quot!(ctx, x1429, x3, 1);
    let x1431: BytePoly_1 = bigint_nondet_rem!(ctx, x1429, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1430, x3, 2), x1431, 2), x1429, 2),
        8131,
        2,
    )?;
    let x1432: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1425, x1425, 2), x1378, 2), x3, 2),
            x1408,
            2
        ),
        x3,
        2
    );
    let x1433: BytePoly_3 = bigint_nondet_quot!(ctx, x1432, x3, 3);
    let x1434: BytePoly_1 = bigint_nondet_rem!(ctx, x1432, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1433, x3, 4), x1434, 4), x1432, 4),
        24387,
        2,
    )?;
    let x1435: BytePoly_2 = bigint_mul!(x1425, x1434, 2);
    let x1436: BytePoly_3 = bigint_nondet_quot!(ctx, x1435, x3, 3);
    let x1437: BytePoly_1 = bigint_nondet_rem!(ctx, x1435, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1436, x3, 4), x1437, 4), x1435, 4),
        24387,
        2,
    )?;
    let x1438: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1437, x1431, 1), 1), x3, 1);
    let x1439: BytePoly_1 = bigint_nondet_quot!(ctx, x1438, x3, 1);
    let x1440: BytePoly_1 = bigint_nondet_rem!(ctx, x1438, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1439, x3, 2), x1440, 2), x1438, 2),
        8131,
        2,
    )?;
    let x1441: BytePoly_2 = bigint_add!(
        bigint_mul!(x1434, x1415, 2),
        bigint_mul!(x1378, x1417, 2),
        2
    );
    let x1442: BytePoly_2 = bigint_add!(
        bigint_mul!(x1440, x1415, 2),
        bigint_mul!(x1380, x1417, 2),
        2
    );
    let x1443: BytePoly_3 = bigint_nondet_quot!(ctx, x1441, x3, 3);
    let x1444: BytePoly_1 = bigint_nondet_rem!(ctx, x1441, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1443, x3, 4), x1444, 4), x1441, 4),
        24387,
        2,
    )?;
    let x1445: BytePoly_3 = bigint_nondet_quot!(ctx, x1442, x3, 3);
    let x1446: BytePoly_1 = bigint_nondet_rem!(ctx, x1442, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1445, x3, 4), x1446, 4), x1442, 4),
        24387,
        2,
    )?;
    let x1447: BytePoly_2 = bigint_mul!(x1408, x1408, 2);
    let x1448: BytePoly_3 = bigint_nondet_quot!(ctx, x1447, x3, 3);
    let x1449: BytePoly_1 = bigint_nondet_rem!(ctx, x1447, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1448, x3, 4), x1449, 4), x1447, 4),
        24387,
        2,
    )?;
    let x1450: BytePoly_2 = bigint_add!(bigint_mul!(x1449, x0, 2), x2, 2);
    let x1451: BytePoly_3 = bigint_nondet_quot!(ctx, x1450, x3, 3);
    let x1452: BytePoly_1 = bigint_nondet_rem!(ctx, x1450, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1451, x3, 4), x1452, 4), x1450, 4),
        24387,
        2,
    )?;
    let x1453: BytePoly_1 = bigint_add!(x1414, x1414, 1);
    let x1454: BytePoly_1 = bigint_nondet_quot!(ctx, x1453, x3, 1);
    let x1455: BytePoly_1 = bigint_nondet_rem!(ctx, x1453, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1454, x3, 2), x1455, 2), x1453, 2),
        8131,
        2,
    )?;
    let x1456: BytePoly_1 = bigint_nondet_inv!(ctx, x1455, x3, 1);
    let x1457: BytePoly_2 = bigint_mul!(x1455, x1456, 2);
    let x1458: BytePoly_3 = bigint_nondet_quot!(ctx, x1457, x3, 3);
    let x1459: BytePoly_1 = bigint_nondet_rem!(ctx, x1457, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1458, x3, 4), x1459, 4), x1457, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1459, x5, 1), 34, 1)?;
    let x1460: BytePoly_2 = bigint_mul!(x1452, x1456, 2);
    let x1461: BytePoly_3 = bigint_nondet_quot!(ctx, x1460, x3, 3);
    let x1462: BytePoly_1 = bigint_nondet_rem!(ctx, x1460, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1461, x3, 4), x1462, 4), x1460, 4),
        24387,
        2,
    )?;
    let x1463: BytePoly_2 = bigint_mul!(x1462, x1408, 2);
    let x1464: BytePoly_3 = bigint_nondet_quot!(ctx, x1463, x3, 3);
    let x1465: BytePoly_1 = bigint_nondet_rem!(ctx, x1463, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1464, x3, 4), x1465, 4), x1463, 4),
        24387,
        2,
    )?;
    let x1466: BytePoly_1 = bigint_add!(bigint_sub!(x1414, x1465, 1), x3, 1);
    let x1467: BytePoly_1 = bigint_nondet_quot!(ctx, x1466, x3, 1);
    let x1468: BytePoly_1 = bigint_nondet_rem!(ctx, x1466, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1467, x3, 2), x1468, 2), x1466, 2),
        8131,
        2,
    )?;
    let x1469: BytePoly_2 = bigint_mul!(x1462, x1462, 2);
    let x1470: BytePoly_3 = bigint_nondet_quot!(ctx, x1469, x3, 3);
    let x1471: BytePoly_1 = bigint_nondet_rem!(ctx, x1469, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1470, x3, 4), x1471, 4), x1469, 4),
        24387,
        2,
    )?;
    let x1472: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1471, x1408, 1), x3, 1), x1408, 1),
        x3,
        1
    );
    let x1473: BytePoly_1 = bigint_nondet_quot!(ctx, x1472, x3, 1);
    let x1474: BytePoly_1 = bigint_nondet_rem!(ctx, x1472, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1473, x3, 2), x1474, 2), x1472, 2),
        8131,
        2,
    )?;
    let x1475: BytePoly_2 = bigint_mul!(x1462, x1474, 2);
    let x1476: BytePoly_3 = bigint_nondet_quot!(ctx, x1475, x3, 3);
    let x1477: BytePoly_1 = bigint_nondet_rem!(ctx, x1475, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1476, x3, 4), x1477, 4), x1475, 4),
        24387,
        2,
    )?;
    let x1478: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1477, x1468, 1), 1), x3, 1);
    let x1479: BytePoly_1 = bigint_nondet_quot!(ctx, x1478, x3, 1);
    let x1480: BytePoly_1 = bigint_nondet_rem!(ctx, x1478, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1479, x3, 2), x1480, 2), x1478, 2),
        8131,
        2,
    )?;
    let x1481: BytePoly_1 = bigint_nondet_rem!(ctx, x1416, x4, 1);
    let x1482: BytePoly_1 = bigint_nondet_quot!(ctx, x1416, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1482, x4, 2), x1481, 2), x1416, 2),
        8131,
        2,
    )?;
    let x1483: BytePoly_1 = bigint_sub!(x5, x1481, 1);
    eqz(ctx, &bigint_mul!(x1481, x1483, 2), 8131, 2)?;
    let x1484: BytePoly_1 = bigint_add!(bigint_sub!(x1474, x1444, 1), x3, 1);
    let x1485: BytePoly_1 = bigint_nondet_inv!(ctx, x1484, x3, 1);
    let x1486: BytePoly_2 = bigint_mul!(x1484, x1485, 2);
    let x1487: BytePoly_3 = bigint_nondet_quot!(ctx, x1486, x3, 3);
    let x1488: BytePoly_1 = bigint_nondet_rem!(ctx, x1486, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1487, x3, 4), x1488, 4), x1486, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1488, x1, 1), 34, 1)?;
    let x1489: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1480, x1446, 1), x3, 1), x1485, 2);
    let x1490: BytePoly_3 = bigint_nondet_quot!(ctx, x1489, x3, 3);
    let x1491: BytePoly_1 = bigint_nondet_rem!(ctx, x1489, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1490, x3, 4), x1491, 4), x1489, 4),
        24387,
        2,
    )?;
    let x1492: BytePoly_2 = bigint_mul!(x1491, x1444, 2);
    let x1493: BytePoly_3 = bigint_nondet_quot!(ctx, x1492, x3, 3);
    let x1494: BytePoly_1 = bigint_nondet_rem!(ctx, x1492, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1493, x3, 4), x1494, 4), x1492, 4),
        24387,
        2,
    )?;
    let x1495: BytePoly_1 = bigint_add!(bigint_sub!(x1446, x1494, 1), x3, 1);
    let x1496: BytePoly_1 = bigint_nondet_quot!(ctx, x1495, x3, 1);
    let x1497: BytePoly_1 = bigint_nondet_rem!(ctx, x1495, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1496, x3, 2), x1497, 2), x1495, 2),
        8131,
        2,
    )?;
    let x1498: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1491, x1491, 2), x1444, 2), x3, 2),
            x1474,
            2
        ),
        x3,
        2
    );
    let x1499: BytePoly_3 = bigint_nondet_quot!(ctx, x1498, x3, 3);
    let x1500: BytePoly_1 = bigint_nondet_rem!(ctx, x1498, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1499, x3, 4), x1500, 4), x1498, 4),
        24387,
        2,
    )?;
    let x1501: BytePoly_2 = bigint_mul!(x1491, x1500, 2);
    let x1502: BytePoly_3 = bigint_nondet_quot!(ctx, x1501, x3, 3);
    let x1503: BytePoly_1 = bigint_nondet_rem!(ctx, x1501, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1502, x3, 4), x1503, 4), x1501, 4),
        24387,
        2,
    )?;
    let x1504: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1503, x1497, 1), 1), x3, 1);
    let x1505: BytePoly_1 = bigint_nondet_quot!(ctx, x1504, x3, 1);
    let x1506: BytePoly_1 = bigint_nondet_rem!(ctx, x1504, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1505, x3, 2), x1506, 2), x1504, 2),
        8131,
        2,
    )?;
    let x1507: BytePoly_2 = bigint_add!(
        bigint_mul!(x1500, x1481, 2),
        bigint_mul!(x1444, x1483, 2),
        2
    );
    let x1508: BytePoly_2 = bigint_add!(
        bigint_mul!(x1506, x1481, 2),
        bigint_mul!(x1446, x1483, 2),
        2
    );
    let x1509: BytePoly_3 = bigint_nondet_quot!(ctx, x1507, x3, 3);
    let x1510: BytePoly_1 = bigint_nondet_rem!(ctx, x1507, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1509, x3, 4), x1510, 4), x1507, 4),
        24387,
        2,
    )?;
    let x1511: BytePoly_3 = bigint_nondet_quot!(ctx, x1508, x3, 3);
    let x1512: BytePoly_1 = bigint_nondet_rem!(ctx, x1508, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1511, x3, 4), x1512, 4), x1508, 4),
        24387,
        2,
    )?;
    let x1513: BytePoly_2 = bigint_mul!(x1474, x1474, 2);
    let x1514: BytePoly_3 = bigint_nondet_quot!(ctx, x1513, x3, 3);
    let x1515: BytePoly_1 = bigint_nondet_rem!(ctx, x1513, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1514, x3, 4), x1515, 4), x1513, 4),
        24387,
        2,
    )?;
    let x1516: BytePoly_2 = bigint_add!(bigint_mul!(x1515, x0, 2), x2, 2);
    let x1517: BytePoly_3 = bigint_nondet_quot!(ctx, x1516, x3, 3);
    let x1518: BytePoly_1 = bigint_nondet_rem!(ctx, x1516, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1517, x3, 4), x1518, 4), x1516, 4),
        24387,
        2,
    )?;
    let x1519: BytePoly_1 = bigint_add!(x1480, x1480, 1);
    let x1520: BytePoly_1 = bigint_nondet_quot!(ctx, x1519, x3, 1);
    let x1521: BytePoly_1 = bigint_nondet_rem!(ctx, x1519, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1520, x3, 2), x1521, 2), x1519, 2),
        8131,
        2,
    )?;
    let x1522: BytePoly_1 = bigint_nondet_inv!(ctx, x1521, x3, 1);
    let x1523: BytePoly_2 = bigint_mul!(x1521, x1522, 2);
    let x1524: BytePoly_3 = bigint_nondet_quot!(ctx, x1523, x3, 3);
    let x1525: BytePoly_1 = bigint_nondet_rem!(ctx, x1523, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1524, x3, 4), x1525, 4), x1523, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1525, x5, 1), 34, 1)?;
    let x1526: BytePoly_2 = bigint_mul!(x1518, x1522, 2);
    let x1527: BytePoly_3 = bigint_nondet_quot!(ctx, x1526, x3, 3);
    let x1528: BytePoly_1 = bigint_nondet_rem!(ctx, x1526, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1527, x3, 4), x1528, 4), x1526, 4),
        24387,
        2,
    )?;
    let x1529: BytePoly_2 = bigint_mul!(x1528, x1474, 2);
    let x1530: BytePoly_3 = bigint_nondet_quot!(ctx, x1529, x3, 3);
    let x1531: BytePoly_1 = bigint_nondet_rem!(ctx, x1529, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1530, x3, 4), x1531, 4), x1529, 4),
        24387,
        2,
    )?;
    let x1532: BytePoly_1 = bigint_add!(bigint_sub!(x1480, x1531, 1), x3, 1);
    let x1533: BytePoly_1 = bigint_nondet_quot!(ctx, x1532, x3, 1);
    let x1534: BytePoly_1 = bigint_nondet_rem!(ctx, x1532, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1533, x3, 2), x1534, 2), x1532, 2),
        8131,
        2,
    )?;
    let x1535: BytePoly_2 = bigint_mul!(x1528, x1528, 2);
    let x1536: BytePoly_3 = bigint_nondet_quot!(ctx, x1535, x3, 3);
    let x1537: BytePoly_1 = bigint_nondet_rem!(ctx, x1535, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1536, x3, 4), x1537, 4), x1535, 4),
        24387,
        2,
    )?;
    let x1538: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1537, x1474, 1), x3, 1), x1474, 1),
        x3,
        1
    );
    let x1539: BytePoly_1 = bigint_nondet_quot!(ctx, x1538, x3, 1);
    let x1540: BytePoly_1 = bigint_nondet_rem!(ctx, x1538, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1539, x3, 2), x1540, 2), x1538, 2),
        8131,
        2,
    )?;
    let x1541: BytePoly_2 = bigint_mul!(x1528, x1540, 2);
    let x1542: BytePoly_3 = bigint_nondet_quot!(ctx, x1541, x3, 3);
    let x1543: BytePoly_1 = bigint_nondet_rem!(ctx, x1541, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1542, x3, 4), x1543, 4), x1541, 4),
        24387,
        2,
    )?;
    let x1544: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1543, x1534, 1), 1), x3, 1);
    let x1545: BytePoly_1 = bigint_nondet_quot!(ctx, x1544, x3, 1);
    let x1546: BytePoly_1 = bigint_nondet_rem!(ctx, x1544, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1545, x3, 2), x1546, 2), x1544, 2),
        8131,
        2,
    )?;
    let x1547: BytePoly_1 = bigint_nondet_rem!(ctx, x1482, x4, 1);
    let x1548: BytePoly_1 = bigint_nondet_quot!(ctx, x1482, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1548, x4, 2), x1547, 2), x1482, 2),
        8131,
        2,
    )?;
    let x1549: BytePoly_1 = bigint_sub!(x5, x1547, 1);
    eqz(ctx, &bigint_mul!(x1547, x1549, 2), 8131, 2)?;
    let x1550: BytePoly_1 = bigint_add!(bigint_sub!(x1540, x1510, 1), x3, 1);
    let x1551: BytePoly_1 = bigint_nondet_inv!(ctx, x1550, x3, 1);
    let x1552: BytePoly_2 = bigint_mul!(x1550, x1551, 2);
    let x1553: BytePoly_3 = bigint_nondet_quot!(ctx, x1552, x3, 3);
    let x1554: BytePoly_1 = bigint_nondet_rem!(ctx, x1552, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1553, x3, 4), x1554, 4), x1552, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1554, x1, 1), 34, 1)?;
    let x1555: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1546, x1512, 1), x3, 1), x1551, 2);
    let x1556: BytePoly_3 = bigint_nondet_quot!(ctx, x1555, x3, 3);
    let x1557: BytePoly_1 = bigint_nondet_rem!(ctx, x1555, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1556, x3, 4), x1557, 4), x1555, 4),
        24387,
        2,
    )?;
    let x1558: BytePoly_2 = bigint_mul!(x1557, x1510, 2);
    let x1559: BytePoly_3 = bigint_nondet_quot!(ctx, x1558, x3, 3);
    let x1560: BytePoly_1 = bigint_nondet_rem!(ctx, x1558, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1559, x3, 4), x1560, 4), x1558, 4),
        24387,
        2,
    )?;
    let x1561: BytePoly_1 = bigint_add!(bigint_sub!(x1512, x1560, 1), x3, 1);
    let x1562: BytePoly_1 = bigint_nondet_quot!(ctx, x1561, x3, 1);
    let x1563: BytePoly_1 = bigint_nondet_rem!(ctx, x1561, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1562, x3, 2), x1563, 2), x1561, 2),
        8131,
        2,
    )?;
    let x1564: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1557, x1557, 2), x1510, 2), x3, 2),
            x1540,
            2
        ),
        x3,
        2
    );
    let x1565: BytePoly_3 = bigint_nondet_quot!(ctx, x1564, x3, 3);
    let x1566: BytePoly_1 = bigint_nondet_rem!(ctx, x1564, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1565, x3, 4), x1566, 4), x1564, 4),
        24387,
        2,
    )?;
    let x1567: BytePoly_2 = bigint_mul!(x1557, x1566, 2);
    let x1568: BytePoly_3 = bigint_nondet_quot!(ctx, x1567, x3, 3);
    let x1569: BytePoly_1 = bigint_nondet_rem!(ctx, x1567, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1568, x3, 4), x1569, 4), x1567, 4),
        24387,
        2,
    )?;
    let x1570: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1569, x1563, 1), 1), x3, 1);
    let x1571: BytePoly_1 = bigint_nondet_quot!(ctx, x1570, x3, 1);
    let x1572: BytePoly_1 = bigint_nondet_rem!(ctx, x1570, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1571, x3, 2), x1572, 2), x1570, 2),
        8131,
        2,
    )?;
    let x1573: BytePoly_2 = bigint_add!(
        bigint_mul!(x1566, x1547, 2),
        bigint_mul!(x1510, x1549, 2),
        2
    );
    let x1574: BytePoly_2 = bigint_add!(
        bigint_mul!(x1572, x1547, 2),
        bigint_mul!(x1512, x1549, 2),
        2
    );
    let x1575: BytePoly_3 = bigint_nondet_quot!(ctx, x1573, x3, 3);
    let x1576: BytePoly_1 = bigint_nondet_rem!(ctx, x1573, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1575, x3, 4), x1576, 4), x1573, 4),
        24387,
        2,
    )?;
    let x1577: BytePoly_3 = bigint_nondet_quot!(ctx, x1574, x3, 3);
    let x1578: BytePoly_1 = bigint_nondet_rem!(ctx, x1574, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1577, x3, 4), x1578, 4), x1574, 4),
        24387,
        2,
    )?;
    let x1579: BytePoly_2 = bigint_mul!(x1540, x1540, 2);
    let x1580: BytePoly_3 = bigint_nondet_quot!(ctx, x1579, x3, 3);
    let x1581: BytePoly_1 = bigint_nondet_rem!(ctx, x1579, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1580, x3, 4), x1581, 4), x1579, 4),
        24387,
        2,
    )?;
    let x1582: BytePoly_2 = bigint_add!(bigint_mul!(x1581, x0, 2), x2, 2);
    let x1583: BytePoly_3 = bigint_nondet_quot!(ctx, x1582, x3, 3);
    let x1584: BytePoly_1 = bigint_nondet_rem!(ctx, x1582, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1583, x3, 4), x1584, 4), x1582, 4),
        24387,
        2,
    )?;
    let x1585: BytePoly_1 = bigint_add!(x1546, x1546, 1);
    let x1586: BytePoly_1 = bigint_nondet_quot!(ctx, x1585, x3, 1);
    let x1587: BytePoly_1 = bigint_nondet_rem!(ctx, x1585, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1586, x3, 2), x1587, 2), x1585, 2),
        8131,
        2,
    )?;
    let x1588: BytePoly_1 = bigint_nondet_inv!(ctx, x1587, x3, 1);
    let x1589: BytePoly_2 = bigint_mul!(x1587, x1588, 2);
    let x1590: BytePoly_3 = bigint_nondet_quot!(ctx, x1589, x3, 3);
    let x1591: BytePoly_1 = bigint_nondet_rem!(ctx, x1589, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1590, x3, 4), x1591, 4), x1589, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1591, x5, 1), 34, 1)?;
    let x1592: BytePoly_2 = bigint_mul!(x1584, x1588, 2);
    let x1593: BytePoly_3 = bigint_nondet_quot!(ctx, x1592, x3, 3);
    let x1594: BytePoly_1 = bigint_nondet_rem!(ctx, x1592, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1593, x3, 4), x1594, 4), x1592, 4),
        24387,
        2,
    )?;
    let x1595: BytePoly_2 = bigint_mul!(x1594, x1540, 2);
    let x1596: BytePoly_3 = bigint_nondet_quot!(ctx, x1595, x3, 3);
    let x1597: BytePoly_1 = bigint_nondet_rem!(ctx, x1595, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1596, x3, 4), x1597, 4), x1595, 4),
        24387,
        2,
    )?;
    let x1598: BytePoly_1 = bigint_add!(bigint_sub!(x1546, x1597, 1), x3, 1);
    let x1599: BytePoly_1 = bigint_nondet_quot!(ctx, x1598, x3, 1);
    let x1600: BytePoly_1 = bigint_nondet_rem!(ctx, x1598, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1599, x3, 2), x1600, 2), x1598, 2),
        8131,
        2,
    )?;
    let x1601: BytePoly_2 = bigint_mul!(x1594, x1594, 2);
    let x1602: BytePoly_3 = bigint_nondet_quot!(ctx, x1601, x3, 3);
    let x1603: BytePoly_1 = bigint_nondet_rem!(ctx, x1601, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1602, x3, 4), x1603, 4), x1601, 4),
        24387,
        2,
    )?;
    let x1604: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1603, x1540, 1), x3, 1), x1540, 1),
        x3,
        1
    );
    let x1605: BytePoly_1 = bigint_nondet_quot!(ctx, x1604, x3, 1);
    let x1606: BytePoly_1 = bigint_nondet_rem!(ctx, x1604, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1605, x3, 2), x1606, 2), x1604, 2),
        8131,
        2,
    )?;
    let x1607: BytePoly_2 = bigint_mul!(x1594, x1606, 2);
    let x1608: BytePoly_3 = bigint_nondet_quot!(ctx, x1607, x3, 3);
    let x1609: BytePoly_1 = bigint_nondet_rem!(ctx, x1607, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1608, x3, 4), x1609, 4), x1607, 4),
        24387,
        2,
    )?;
    let x1610: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1609, x1600, 1), 1), x3, 1);
    let x1611: BytePoly_1 = bigint_nondet_quot!(ctx, x1610, x3, 1);
    let x1612: BytePoly_1 = bigint_nondet_rem!(ctx, x1610, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1611, x3, 2), x1612, 2), x1610, 2),
        8131,
        2,
    )?;
    let x1613: BytePoly_1 = bigint_nondet_rem!(ctx, x1548, x4, 1);
    let x1614: BytePoly_1 = bigint_nondet_quot!(ctx, x1548, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1614, x4, 2), x1613, 2), x1548, 2),
        8131,
        2,
    )?;
    let x1615: BytePoly_1 = bigint_sub!(x5, x1613, 1);
    eqz(ctx, &bigint_mul!(x1613, x1615, 2), 8131, 2)?;
    let x1616: BytePoly_1 = bigint_add!(bigint_sub!(x1606, x1576, 1), x3, 1);
    let x1617: BytePoly_1 = bigint_nondet_inv!(ctx, x1616, x3, 1);
    let x1618: BytePoly_2 = bigint_mul!(x1616, x1617, 2);
    let x1619: BytePoly_3 = bigint_nondet_quot!(ctx, x1618, x3, 3);
    let x1620: BytePoly_1 = bigint_nondet_rem!(ctx, x1618, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1619, x3, 4), x1620, 4), x1618, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1620, x1, 1), 34, 1)?;
    let x1621: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1612, x1578, 1), x3, 1), x1617, 2);
    let x1622: BytePoly_3 = bigint_nondet_quot!(ctx, x1621, x3, 3);
    let x1623: BytePoly_1 = bigint_nondet_rem!(ctx, x1621, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1622, x3, 4), x1623, 4), x1621, 4),
        24387,
        2,
    )?;
    let x1624: BytePoly_2 = bigint_mul!(x1623, x1576, 2);
    let x1625: BytePoly_3 = bigint_nondet_quot!(ctx, x1624, x3, 3);
    let x1626: BytePoly_1 = bigint_nondet_rem!(ctx, x1624, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1625, x3, 4), x1626, 4), x1624, 4),
        24387,
        2,
    )?;
    let x1627: BytePoly_1 = bigint_add!(bigint_sub!(x1578, x1626, 1), x3, 1);
    let x1628: BytePoly_1 = bigint_nondet_quot!(ctx, x1627, x3, 1);
    let x1629: BytePoly_1 = bigint_nondet_rem!(ctx, x1627, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1628, x3, 2), x1629, 2), x1627, 2),
        8131,
        2,
    )?;
    let x1630: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1623, x1623, 2), x1576, 2), x3, 2),
            x1606,
            2
        ),
        x3,
        2
    );
    let x1631: BytePoly_3 = bigint_nondet_quot!(ctx, x1630, x3, 3);
    let x1632: BytePoly_1 = bigint_nondet_rem!(ctx, x1630, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1631, x3, 4), x1632, 4), x1630, 4),
        24387,
        2,
    )?;
    let x1633: BytePoly_2 = bigint_mul!(x1623, x1632, 2);
    let x1634: BytePoly_3 = bigint_nondet_quot!(ctx, x1633, x3, 3);
    let x1635: BytePoly_1 = bigint_nondet_rem!(ctx, x1633, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1634, x3, 4), x1635, 4), x1633, 4),
        24387,
        2,
    )?;
    let x1636: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1635, x1629, 1), 1), x3, 1);
    let x1637: BytePoly_1 = bigint_nondet_quot!(ctx, x1636, x3, 1);
    let x1638: BytePoly_1 = bigint_nondet_rem!(ctx, x1636, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1637, x3, 2), x1638, 2), x1636, 2),
        8131,
        2,
    )?;
    let x1639: BytePoly_2 = bigint_add!(
        bigint_mul!(x1632, x1613, 2),
        bigint_mul!(x1576, x1615, 2),
        2
    );
    let x1640: BytePoly_2 = bigint_add!(
        bigint_mul!(x1638, x1613, 2),
        bigint_mul!(x1578, x1615, 2),
        2
    );
    let x1641: BytePoly_3 = bigint_nondet_quot!(ctx, x1639, x3, 3);
    let x1642: BytePoly_1 = bigint_nondet_rem!(ctx, x1639, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1641, x3, 4), x1642, 4), x1639, 4),
        24387,
        2,
    )?;
    let x1643: BytePoly_3 = bigint_nondet_quot!(ctx, x1640, x3, 3);
    let x1644: BytePoly_1 = bigint_nondet_rem!(ctx, x1640, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1643, x3, 4), x1644, 4), x1640, 4),
        24387,
        2,
    )?;
    let x1645: BytePoly_2 = bigint_mul!(x1606, x1606, 2);
    let x1646: BytePoly_3 = bigint_nondet_quot!(ctx, x1645, x3, 3);
    let x1647: BytePoly_1 = bigint_nondet_rem!(ctx, x1645, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1646, x3, 4), x1647, 4), x1645, 4),
        24387,
        2,
    )?;
    let x1648: BytePoly_2 = bigint_add!(bigint_mul!(x1647, x0, 2), x2, 2);
    let x1649: BytePoly_3 = bigint_nondet_quot!(ctx, x1648, x3, 3);
    let x1650: BytePoly_1 = bigint_nondet_rem!(ctx, x1648, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1649, x3, 4), x1650, 4), x1648, 4),
        24387,
        2,
    )?;
    let x1651: BytePoly_1 = bigint_add!(x1612, x1612, 1);
    let x1652: BytePoly_1 = bigint_nondet_quot!(ctx, x1651, x3, 1);
    let x1653: BytePoly_1 = bigint_nondet_rem!(ctx, x1651, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1652, x3, 2), x1653, 2), x1651, 2),
        8131,
        2,
    )?;
    let x1654: BytePoly_1 = bigint_nondet_inv!(ctx, x1653, x3, 1);
    let x1655: BytePoly_2 = bigint_mul!(x1653, x1654, 2);
    let x1656: BytePoly_3 = bigint_nondet_quot!(ctx, x1655, x3, 3);
    let x1657: BytePoly_1 = bigint_nondet_rem!(ctx, x1655, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1656, x3, 4), x1657, 4), x1655, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1657, x5, 1), 34, 1)?;
    let x1658: BytePoly_2 = bigint_mul!(x1650, x1654, 2);
    let x1659: BytePoly_3 = bigint_nondet_quot!(ctx, x1658, x3, 3);
    let x1660: BytePoly_1 = bigint_nondet_rem!(ctx, x1658, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1659, x3, 4), x1660, 4), x1658, 4),
        24387,
        2,
    )?;
    let x1661: BytePoly_2 = bigint_mul!(x1660, x1606, 2);
    let x1662: BytePoly_3 = bigint_nondet_quot!(ctx, x1661, x3, 3);
    let x1663: BytePoly_1 = bigint_nondet_rem!(ctx, x1661, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1662, x3, 4), x1663, 4), x1661, 4),
        24387,
        2,
    )?;
    let x1664: BytePoly_1 = bigint_add!(bigint_sub!(x1612, x1663, 1), x3, 1);
    let x1665: BytePoly_1 = bigint_nondet_quot!(ctx, x1664, x3, 1);
    let x1666: BytePoly_1 = bigint_nondet_rem!(ctx, x1664, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1665, x3, 2), x1666, 2), x1664, 2),
        8131,
        2,
    )?;
    let x1667: BytePoly_2 = bigint_mul!(x1660, x1660, 2);
    let x1668: BytePoly_3 = bigint_nondet_quot!(ctx, x1667, x3, 3);
    let x1669: BytePoly_1 = bigint_nondet_rem!(ctx, x1667, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1668, x3, 4), x1669, 4), x1667, 4),
        24387,
        2,
    )?;
    let x1670: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1669, x1606, 1), x3, 1), x1606, 1),
        x3,
        1
    );
    let x1671: BytePoly_1 = bigint_nondet_quot!(ctx, x1670, x3, 1);
    let x1672: BytePoly_1 = bigint_nondet_rem!(ctx, x1670, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1671, x3, 2), x1672, 2), x1670, 2),
        8131,
        2,
    )?;
    let x1673: BytePoly_2 = bigint_mul!(x1660, x1672, 2);
    let x1674: BytePoly_3 = bigint_nondet_quot!(ctx, x1673, x3, 3);
    let x1675: BytePoly_1 = bigint_nondet_rem!(ctx, x1673, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1674, x3, 4), x1675, 4), x1673, 4),
        24387,
        2,
    )?;
    let x1676: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1675, x1666, 1), 1), x3, 1);
    let x1677: BytePoly_1 = bigint_nondet_quot!(ctx, x1676, x3, 1);
    let x1678: BytePoly_1 = bigint_nondet_rem!(ctx, x1676, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1677, x3, 2), x1678, 2), x1676, 2),
        8131,
        2,
    )?;
    let x1679: BytePoly_1 = bigint_nondet_rem!(ctx, x1614, x4, 1);
    let x1680: BytePoly_1 = bigint_nondet_quot!(ctx, x1614, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1680, x4, 2), x1679, 2), x1614, 2),
        8131,
        2,
    )?;
    let x1681: BytePoly_1 = bigint_sub!(x5, x1679, 1);
    eqz(ctx, &bigint_mul!(x1679, x1681, 2), 8131, 2)?;
    let x1682: BytePoly_1 = bigint_add!(bigint_sub!(x1672, x1642, 1), x3, 1);
    let x1683: BytePoly_1 = bigint_nondet_inv!(ctx, x1682, x3, 1);
    let x1684: BytePoly_2 = bigint_mul!(x1682, x1683, 2);
    let x1685: BytePoly_3 = bigint_nondet_quot!(ctx, x1684, x3, 3);
    let x1686: BytePoly_1 = bigint_nondet_rem!(ctx, x1684, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1685, x3, 4), x1686, 4), x1684, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1686, x1, 1), 34, 1)?;
    let x1687: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1678, x1644, 1), x3, 1), x1683, 2);
    let x1688: BytePoly_3 = bigint_nondet_quot!(ctx, x1687, x3, 3);
    let x1689: BytePoly_1 = bigint_nondet_rem!(ctx, x1687, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1688, x3, 4), x1689, 4), x1687, 4),
        24387,
        2,
    )?;
    let x1690: BytePoly_2 = bigint_mul!(x1689, x1642, 2);
    let x1691: BytePoly_3 = bigint_nondet_quot!(ctx, x1690, x3, 3);
    let x1692: BytePoly_1 = bigint_nondet_rem!(ctx, x1690, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1691, x3, 4), x1692, 4), x1690, 4),
        24387,
        2,
    )?;
    let x1693: BytePoly_1 = bigint_add!(bigint_sub!(x1644, x1692, 1), x3, 1);
    let x1694: BytePoly_1 = bigint_nondet_quot!(ctx, x1693, x3, 1);
    let x1695: BytePoly_1 = bigint_nondet_rem!(ctx, x1693, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1694, x3, 2), x1695, 2), x1693, 2),
        8131,
        2,
    )?;
    let x1696: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1689, x1689, 2), x1642, 2), x3, 2),
            x1672,
            2
        ),
        x3,
        2
    );
    let x1697: BytePoly_3 = bigint_nondet_quot!(ctx, x1696, x3, 3);
    let x1698: BytePoly_1 = bigint_nondet_rem!(ctx, x1696, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1697, x3, 4), x1698, 4), x1696, 4),
        24387,
        2,
    )?;
    let x1699: BytePoly_2 = bigint_mul!(x1689, x1698, 2);
    let x1700: BytePoly_3 = bigint_nondet_quot!(ctx, x1699, x3, 3);
    let x1701: BytePoly_1 = bigint_nondet_rem!(ctx, x1699, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1700, x3, 4), x1701, 4), x1699, 4),
        24387,
        2,
    )?;
    let x1702: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1701, x1695, 1), 1), x3, 1);
    let x1703: BytePoly_1 = bigint_nondet_quot!(ctx, x1702, x3, 1);
    let x1704: BytePoly_1 = bigint_nondet_rem!(ctx, x1702, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1703, x3, 2), x1704, 2), x1702, 2),
        8131,
        2,
    )?;
    let x1705: BytePoly_2 = bigint_add!(
        bigint_mul!(x1698, x1679, 2),
        bigint_mul!(x1642, x1681, 2),
        2
    );
    let x1706: BytePoly_2 = bigint_add!(
        bigint_mul!(x1704, x1679, 2),
        bigint_mul!(x1644, x1681, 2),
        2
    );
    let x1707: BytePoly_3 = bigint_nondet_quot!(ctx, x1705, x3, 3);
    let x1708: BytePoly_1 = bigint_nondet_rem!(ctx, x1705, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1707, x3, 4), x1708, 4), x1705, 4),
        24387,
        2,
    )?;
    let x1709: BytePoly_3 = bigint_nondet_quot!(ctx, x1706, x3, 3);
    let x1710: BytePoly_1 = bigint_nondet_rem!(ctx, x1706, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1709, x3, 4), x1710, 4), x1706, 4),
        24387,
        2,
    )?;
    let x1711: BytePoly_2 = bigint_mul!(x1672, x1672, 2);
    let x1712: BytePoly_3 = bigint_nondet_quot!(ctx, x1711, x3, 3);
    let x1713: BytePoly_1 = bigint_nondet_rem!(ctx, x1711, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1712, x3, 4), x1713, 4), x1711, 4),
        24387,
        2,
    )?;
    let x1714: BytePoly_2 = bigint_add!(bigint_mul!(x1713, x0, 2), x2, 2);
    let x1715: BytePoly_3 = bigint_nondet_quot!(ctx, x1714, x3, 3);
    let x1716: BytePoly_1 = bigint_nondet_rem!(ctx, x1714, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1715, x3, 4), x1716, 4), x1714, 4),
        24387,
        2,
    )?;
    let x1717: BytePoly_1 = bigint_add!(x1678, x1678, 1);
    let x1718: BytePoly_1 = bigint_nondet_quot!(ctx, x1717, x3, 1);
    let x1719: BytePoly_1 = bigint_nondet_rem!(ctx, x1717, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1718, x3, 2), x1719, 2), x1717, 2),
        8131,
        2,
    )?;
    let x1720: BytePoly_1 = bigint_nondet_inv!(ctx, x1719, x3, 1);
    let x1721: BytePoly_2 = bigint_mul!(x1719, x1720, 2);
    let x1722: BytePoly_3 = bigint_nondet_quot!(ctx, x1721, x3, 3);
    let x1723: BytePoly_1 = bigint_nondet_rem!(ctx, x1721, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1722, x3, 4), x1723, 4), x1721, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1723, x5, 1), 34, 1)?;
    let x1724: BytePoly_2 = bigint_mul!(x1716, x1720, 2);
    let x1725: BytePoly_3 = bigint_nondet_quot!(ctx, x1724, x3, 3);
    let x1726: BytePoly_1 = bigint_nondet_rem!(ctx, x1724, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1725, x3, 4), x1726, 4), x1724, 4),
        24387,
        2,
    )?;
    let x1727: BytePoly_2 = bigint_mul!(x1726, x1672, 2);
    let x1728: BytePoly_3 = bigint_nondet_quot!(ctx, x1727, x3, 3);
    let x1729: BytePoly_1 = bigint_nondet_rem!(ctx, x1727, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1728, x3, 4), x1729, 4), x1727, 4),
        24387,
        2,
    )?;
    let x1730: BytePoly_1 = bigint_add!(bigint_sub!(x1678, x1729, 1), x3, 1);
    let x1731: BytePoly_1 = bigint_nondet_quot!(ctx, x1730, x3, 1);
    let x1732: BytePoly_1 = bigint_nondet_rem!(ctx, x1730, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1731, x3, 2), x1732, 2), x1730, 2),
        8131,
        2,
    )?;
    let x1733: BytePoly_2 = bigint_mul!(x1726, x1726, 2);
    let x1734: BytePoly_3 = bigint_nondet_quot!(ctx, x1733, x3, 3);
    let x1735: BytePoly_1 = bigint_nondet_rem!(ctx, x1733, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1734, x3, 4), x1735, 4), x1733, 4),
        24387,
        2,
    )?;
    let x1736: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1735, x1672, 1), x3, 1), x1672, 1),
        x3,
        1
    );
    let x1737: BytePoly_1 = bigint_nondet_quot!(ctx, x1736, x3, 1);
    let x1738: BytePoly_1 = bigint_nondet_rem!(ctx, x1736, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1737, x3, 2), x1738, 2), x1736, 2),
        8131,
        2,
    )?;
    let x1739: BytePoly_2 = bigint_mul!(x1726, x1738, 2);
    let x1740: BytePoly_3 = bigint_nondet_quot!(ctx, x1739, x3, 3);
    let x1741: BytePoly_1 = bigint_nondet_rem!(ctx, x1739, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1740, x3, 4), x1741, 4), x1739, 4),
        24387,
        2,
    )?;
    let x1742: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1741, x1732, 1), 1), x3, 1);
    let x1743: BytePoly_1 = bigint_nondet_quot!(ctx, x1742, x3, 1);
    let x1744: BytePoly_1 = bigint_nondet_rem!(ctx, x1742, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1743, x3, 2), x1744, 2), x1742, 2),
        8131,
        2,
    )?;
    let x1745: BytePoly_1 = bigint_nondet_rem!(ctx, x1680, x4, 1);
    let x1746: BytePoly_1 = bigint_nondet_quot!(ctx, x1680, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1746, x4, 2), x1745, 2), x1680, 2),
        8131,
        2,
    )?;
    let x1747: BytePoly_1 = bigint_sub!(x5, x1745, 1);
    eqz(ctx, &bigint_mul!(x1745, x1747, 2), 8131, 2)?;
    let x1748: BytePoly_1 = bigint_add!(bigint_sub!(x1738, x1708, 1), x3, 1);
    let x1749: BytePoly_1 = bigint_nondet_inv!(ctx, x1748, x3, 1);
    let x1750: BytePoly_2 = bigint_mul!(x1748, x1749, 2);
    let x1751: BytePoly_3 = bigint_nondet_quot!(ctx, x1750, x3, 3);
    let x1752: BytePoly_1 = bigint_nondet_rem!(ctx, x1750, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1751, x3, 4), x1752, 4), x1750, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1752, x1, 1), 34, 1)?;
    let x1753: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1744, x1710, 1), x3, 1), x1749, 2);
    let x1754: BytePoly_3 = bigint_nondet_quot!(ctx, x1753, x3, 3);
    let x1755: BytePoly_1 = bigint_nondet_rem!(ctx, x1753, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1754, x3, 4), x1755, 4), x1753, 4),
        24387,
        2,
    )?;
    let x1756: BytePoly_2 = bigint_mul!(x1755, x1708, 2);
    let x1757: BytePoly_3 = bigint_nondet_quot!(ctx, x1756, x3, 3);
    let x1758: BytePoly_1 = bigint_nondet_rem!(ctx, x1756, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1757, x3, 4), x1758, 4), x1756, 4),
        24387,
        2,
    )?;
    let x1759: BytePoly_1 = bigint_add!(bigint_sub!(x1710, x1758, 1), x3, 1);
    let x1760: BytePoly_1 = bigint_nondet_quot!(ctx, x1759, x3, 1);
    let x1761: BytePoly_1 = bigint_nondet_rem!(ctx, x1759, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1760, x3, 2), x1761, 2), x1759, 2),
        8131,
        2,
    )?;
    let x1762: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1755, x1755, 2), x1708, 2), x3, 2),
            x1738,
            2
        ),
        x3,
        2
    );
    let x1763: BytePoly_3 = bigint_nondet_quot!(ctx, x1762, x3, 3);
    let x1764: BytePoly_1 = bigint_nondet_rem!(ctx, x1762, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1763, x3, 4), x1764, 4), x1762, 4),
        24387,
        2,
    )?;
    let x1765: BytePoly_2 = bigint_mul!(x1755, x1764, 2);
    let x1766: BytePoly_3 = bigint_nondet_quot!(ctx, x1765, x3, 3);
    let x1767: BytePoly_1 = bigint_nondet_rem!(ctx, x1765, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1766, x3, 4), x1767, 4), x1765, 4),
        24387,
        2,
    )?;
    let x1768: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1767, x1761, 1), 1), x3, 1);
    let x1769: BytePoly_1 = bigint_nondet_quot!(ctx, x1768, x3, 1);
    let x1770: BytePoly_1 = bigint_nondet_rem!(ctx, x1768, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1769, x3, 2), x1770, 2), x1768, 2),
        8131,
        2,
    )?;
    let x1771: BytePoly_2 = bigint_add!(
        bigint_mul!(x1764, x1745, 2),
        bigint_mul!(x1708, x1747, 2),
        2
    );
    let x1772: BytePoly_2 = bigint_add!(
        bigint_mul!(x1770, x1745, 2),
        bigint_mul!(x1710, x1747, 2),
        2
    );
    let x1773: BytePoly_3 = bigint_nondet_quot!(ctx, x1771, x3, 3);
    let x1774: BytePoly_1 = bigint_nondet_rem!(ctx, x1771, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1773, x3, 4), x1774, 4), x1771, 4),
        24387,
        2,
    )?;
    let x1775: BytePoly_3 = bigint_nondet_quot!(ctx, x1772, x3, 3);
    let x1776: BytePoly_1 = bigint_nondet_rem!(ctx, x1772, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1775, x3, 4), x1776, 4), x1772, 4),
        24387,
        2,
    )?;
    let x1777: BytePoly_2 = bigint_mul!(x1738, x1738, 2);
    let x1778: BytePoly_3 = bigint_nondet_quot!(ctx, x1777, x3, 3);
    let x1779: BytePoly_1 = bigint_nondet_rem!(ctx, x1777, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1778, x3, 4), x1779, 4), x1777, 4),
        24387,
        2,
    )?;
    let x1780: BytePoly_2 = bigint_add!(bigint_mul!(x1779, x0, 2), x2, 2);
    let x1781: BytePoly_3 = bigint_nondet_quot!(ctx, x1780, x3, 3);
    let x1782: BytePoly_1 = bigint_nondet_rem!(ctx, x1780, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1781, x3, 4), x1782, 4), x1780, 4),
        24387,
        2,
    )?;
    let x1783: BytePoly_1 = bigint_add!(x1744, x1744, 1);
    let x1784: BytePoly_1 = bigint_nondet_quot!(ctx, x1783, x3, 1);
    let x1785: BytePoly_1 = bigint_nondet_rem!(ctx, x1783, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1784, x3, 2), x1785, 2), x1783, 2),
        8131,
        2,
    )?;
    let x1786: BytePoly_1 = bigint_nondet_inv!(ctx, x1785, x3, 1);
    let x1787: BytePoly_2 = bigint_mul!(x1785, x1786, 2);
    let x1788: BytePoly_3 = bigint_nondet_quot!(ctx, x1787, x3, 3);
    let x1789: BytePoly_1 = bigint_nondet_rem!(ctx, x1787, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1788, x3, 4), x1789, 4), x1787, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1789, x5, 1), 34, 1)?;
    let x1790: BytePoly_2 = bigint_mul!(x1782, x1786, 2);
    let x1791: BytePoly_3 = bigint_nondet_quot!(ctx, x1790, x3, 3);
    let x1792: BytePoly_1 = bigint_nondet_rem!(ctx, x1790, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1791, x3, 4), x1792, 4), x1790, 4),
        24387,
        2,
    )?;
    let x1793: BytePoly_2 = bigint_mul!(x1792, x1738, 2);
    let x1794: BytePoly_3 = bigint_nondet_quot!(ctx, x1793, x3, 3);
    let x1795: BytePoly_1 = bigint_nondet_rem!(ctx, x1793, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1794, x3, 4), x1795, 4), x1793, 4),
        24387,
        2,
    )?;
    let x1796: BytePoly_1 = bigint_add!(bigint_sub!(x1744, x1795, 1), x3, 1);
    let x1797: BytePoly_1 = bigint_nondet_quot!(ctx, x1796, x3, 1);
    let x1798: BytePoly_1 = bigint_nondet_rem!(ctx, x1796, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1797, x3, 2), x1798, 2), x1796, 2),
        8131,
        2,
    )?;
    let x1799: BytePoly_2 = bigint_mul!(x1792, x1792, 2);
    let x1800: BytePoly_3 = bigint_nondet_quot!(ctx, x1799, x3, 3);
    let x1801: BytePoly_1 = bigint_nondet_rem!(ctx, x1799, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1800, x3, 4), x1801, 4), x1799, 4),
        24387,
        2,
    )?;
    let x1802: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1801, x1738, 1), x3, 1), x1738, 1),
        x3,
        1
    );
    let x1803: BytePoly_1 = bigint_nondet_quot!(ctx, x1802, x3, 1);
    let x1804: BytePoly_1 = bigint_nondet_rem!(ctx, x1802, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1803, x3, 2), x1804, 2), x1802, 2),
        8131,
        2,
    )?;
    let x1805: BytePoly_2 = bigint_mul!(x1792, x1804, 2);
    let x1806: BytePoly_3 = bigint_nondet_quot!(ctx, x1805, x3, 3);
    let x1807: BytePoly_1 = bigint_nondet_rem!(ctx, x1805, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1806, x3, 4), x1807, 4), x1805, 4),
        24387,
        2,
    )?;
    let x1808: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1807, x1798, 1), 1), x3, 1);
    let x1809: BytePoly_1 = bigint_nondet_quot!(ctx, x1808, x3, 1);
    let x1810: BytePoly_1 = bigint_nondet_rem!(ctx, x1808, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1809, x3, 2), x1810, 2), x1808, 2),
        8131,
        2,
    )?;
    let x1811: BytePoly_1 = bigint_nondet_rem!(ctx, x1746, x4, 1);
    let x1812: BytePoly_1 = bigint_nondet_quot!(ctx, x1746, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1812, x4, 2), x1811, 2), x1746, 2),
        8131,
        2,
    )?;
    let x1813: BytePoly_1 = bigint_sub!(x5, x1811, 1);
    eqz(ctx, &bigint_mul!(x1811, x1813, 2), 8131, 2)?;
    let x1814: BytePoly_1 = bigint_add!(bigint_sub!(x1804, x1774, 1), x3, 1);
    let x1815: BytePoly_1 = bigint_nondet_inv!(ctx, x1814, x3, 1);
    let x1816: BytePoly_2 = bigint_mul!(x1814, x1815, 2);
    let x1817: BytePoly_3 = bigint_nondet_quot!(ctx, x1816, x3, 3);
    let x1818: BytePoly_1 = bigint_nondet_rem!(ctx, x1816, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1817, x3, 4), x1818, 4), x1816, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1818, x1, 1), 34, 1)?;
    let x1819: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1810, x1776, 1), x3, 1), x1815, 2);
    let x1820: BytePoly_3 = bigint_nondet_quot!(ctx, x1819, x3, 3);
    let x1821: BytePoly_1 = bigint_nondet_rem!(ctx, x1819, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1820, x3, 4), x1821, 4), x1819, 4),
        24387,
        2,
    )?;
    let x1822: BytePoly_2 = bigint_mul!(x1821, x1774, 2);
    let x1823: BytePoly_3 = bigint_nondet_quot!(ctx, x1822, x3, 3);
    let x1824: BytePoly_1 = bigint_nondet_rem!(ctx, x1822, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1823, x3, 4), x1824, 4), x1822, 4),
        24387,
        2,
    )?;
    let x1825: BytePoly_1 = bigint_add!(bigint_sub!(x1776, x1824, 1), x3, 1);
    let x1826: BytePoly_1 = bigint_nondet_quot!(ctx, x1825, x3, 1);
    let x1827: BytePoly_1 = bigint_nondet_rem!(ctx, x1825, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1826, x3, 2), x1827, 2), x1825, 2),
        8131,
        2,
    )?;
    let x1828: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1821, x1821, 2), x1774, 2), x3, 2),
            x1804,
            2
        ),
        x3,
        2
    );
    let x1829: BytePoly_3 = bigint_nondet_quot!(ctx, x1828, x3, 3);
    let x1830: BytePoly_1 = bigint_nondet_rem!(ctx, x1828, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1829, x3, 4), x1830, 4), x1828, 4),
        24387,
        2,
    )?;
    let x1831: BytePoly_2 = bigint_mul!(x1821, x1830, 2);
    let x1832: BytePoly_3 = bigint_nondet_quot!(ctx, x1831, x3, 3);
    let x1833: BytePoly_1 = bigint_nondet_rem!(ctx, x1831, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1832, x3, 4), x1833, 4), x1831, 4),
        24387,
        2,
    )?;
    let x1834: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1833, x1827, 1), 1), x3, 1);
    let x1835: BytePoly_1 = bigint_nondet_quot!(ctx, x1834, x3, 1);
    let x1836: BytePoly_1 = bigint_nondet_rem!(ctx, x1834, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1835, x3, 2), x1836, 2), x1834, 2),
        8131,
        2,
    )?;
    let x1837: BytePoly_2 = bigint_add!(
        bigint_mul!(x1830, x1811, 2),
        bigint_mul!(x1774, x1813, 2),
        2
    );
    let x1838: BytePoly_2 = bigint_add!(
        bigint_mul!(x1836, x1811, 2),
        bigint_mul!(x1776, x1813, 2),
        2
    );
    let x1839: BytePoly_3 = bigint_nondet_quot!(ctx, x1837, x3, 3);
    let x1840: BytePoly_1 = bigint_nondet_rem!(ctx, x1837, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1839, x3, 4), x1840, 4), x1837, 4),
        24387,
        2,
    )?;
    let x1841: BytePoly_3 = bigint_nondet_quot!(ctx, x1838, x3, 3);
    let x1842: BytePoly_1 = bigint_nondet_rem!(ctx, x1838, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1841, x3, 4), x1842, 4), x1838, 4),
        24387,
        2,
    )?;
    let x1843: BytePoly_2 = bigint_mul!(x1804, x1804, 2);
    let x1844: BytePoly_3 = bigint_nondet_quot!(ctx, x1843, x3, 3);
    let x1845: BytePoly_1 = bigint_nondet_rem!(ctx, x1843, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1844, x3, 4), x1845, 4), x1843, 4),
        24387,
        2,
    )?;
    let x1846: BytePoly_2 = bigint_add!(bigint_mul!(x1845, x0, 2), x2, 2);
    let x1847: BytePoly_3 = bigint_nondet_quot!(ctx, x1846, x3, 3);
    let x1848: BytePoly_1 = bigint_nondet_rem!(ctx, x1846, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1847, x3, 4), x1848, 4), x1846, 4),
        24387,
        2,
    )?;
    let x1849: BytePoly_1 = bigint_add!(x1810, x1810, 1);
    let x1850: BytePoly_1 = bigint_nondet_quot!(ctx, x1849, x3, 1);
    let x1851: BytePoly_1 = bigint_nondet_rem!(ctx, x1849, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1850, x3, 2), x1851, 2), x1849, 2),
        8131,
        2,
    )?;
    let x1852: BytePoly_1 = bigint_nondet_inv!(ctx, x1851, x3, 1);
    let x1853: BytePoly_2 = bigint_mul!(x1851, x1852, 2);
    let x1854: BytePoly_3 = bigint_nondet_quot!(ctx, x1853, x3, 3);
    let x1855: BytePoly_1 = bigint_nondet_rem!(ctx, x1853, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1854, x3, 4), x1855, 4), x1853, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1855, x5, 1), 34, 1)?;
    let x1856: BytePoly_2 = bigint_mul!(x1848, x1852, 2);
    let x1857: BytePoly_3 = bigint_nondet_quot!(ctx, x1856, x3, 3);
    let x1858: BytePoly_1 = bigint_nondet_rem!(ctx, x1856, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1857, x3, 4), x1858, 4), x1856, 4),
        24387,
        2,
    )?;
    let x1859: BytePoly_2 = bigint_mul!(x1858, x1804, 2);
    let x1860: BytePoly_3 = bigint_nondet_quot!(ctx, x1859, x3, 3);
    let x1861: BytePoly_1 = bigint_nondet_rem!(ctx, x1859, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1860, x3, 4), x1861, 4), x1859, 4),
        24387,
        2,
    )?;
    let x1862: BytePoly_1 = bigint_add!(bigint_sub!(x1810, x1861, 1), x3, 1);
    let x1863: BytePoly_1 = bigint_nondet_quot!(ctx, x1862, x3, 1);
    let x1864: BytePoly_1 = bigint_nondet_rem!(ctx, x1862, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1863, x3, 2), x1864, 2), x1862, 2),
        8131,
        2,
    )?;
    let x1865: BytePoly_2 = bigint_mul!(x1858, x1858, 2);
    let x1866: BytePoly_3 = bigint_nondet_quot!(ctx, x1865, x3, 3);
    let x1867: BytePoly_1 = bigint_nondet_rem!(ctx, x1865, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1866, x3, 4), x1867, 4), x1865, 4),
        24387,
        2,
    )?;
    let x1868: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1867, x1804, 1), x3, 1), x1804, 1),
        x3,
        1
    );
    let x1869: BytePoly_1 = bigint_nondet_quot!(ctx, x1868, x3, 1);
    let x1870: BytePoly_1 = bigint_nondet_rem!(ctx, x1868, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1869, x3, 2), x1870, 2), x1868, 2),
        8131,
        2,
    )?;
    let x1871: BytePoly_2 = bigint_mul!(x1858, x1870, 2);
    let x1872: BytePoly_3 = bigint_nondet_quot!(ctx, x1871, x3, 3);
    let x1873: BytePoly_1 = bigint_nondet_rem!(ctx, x1871, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1872, x3, 4), x1873, 4), x1871, 4),
        24387,
        2,
    )?;
    let x1874: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1873, x1864, 1), 1), x3, 1);
    let x1875: BytePoly_1 = bigint_nondet_quot!(ctx, x1874, x3, 1);
    let x1876: BytePoly_1 = bigint_nondet_rem!(ctx, x1874, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1875, x3, 2), x1876, 2), x1874, 2),
        8131,
        2,
    )?;
    let x1877: BytePoly_1 = bigint_nondet_rem!(ctx, x1812, x4, 1);
    let x1878: BytePoly_1 = bigint_nondet_quot!(ctx, x1812, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1878, x4, 2), x1877, 2), x1812, 2),
        8131,
        2,
    )?;
    let x1879: BytePoly_1 = bigint_sub!(x5, x1877, 1);
    eqz(ctx, &bigint_mul!(x1877, x1879, 2), 8131, 2)?;
    let x1880: BytePoly_1 = bigint_add!(bigint_sub!(x1870, x1840, 1), x3, 1);
    let x1881: BytePoly_1 = bigint_nondet_inv!(ctx, x1880, x3, 1);
    let x1882: BytePoly_2 = bigint_mul!(x1880, x1881, 2);
    let x1883: BytePoly_3 = bigint_nondet_quot!(ctx, x1882, x3, 3);
    let x1884: BytePoly_1 = bigint_nondet_rem!(ctx, x1882, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1883, x3, 4), x1884, 4), x1882, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1884, x1, 1), 34, 1)?;
    let x1885: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1876, x1842, 1), x3, 1), x1881, 2);
    let x1886: BytePoly_3 = bigint_nondet_quot!(ctx, x1885, x3, 3);
    let x1887: BytePoly_1 = bigint_nondet_rem!(ctx, x1885, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1886, x3, 4), x1887, 4), x1885, 4),
        24387,
        2,
    )?;
    let x1888: BytePoly_2 = bigint_mul!(x1887, x1840, 2);
    let x1889: BytePoly_3 = bigint_nondet_quot!(ctx, x1888, x3, 3);
    let x1890: BytePoly_1 = bigint_nondet_rem!(ctx, x1888, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1889, x3, 4), x1890, 4), x1888, 4),
        24387,
        2,
    )?;
    let x1891: BytePoly_1 = bigint_add!(bigint_sub!(x1842, x1890, 1), x3, 1);
    let x1892: BytePoly_1 = bigint_nondet_quot!(ctx, x1891, x3, 1);
    let x1893: BytePoly_1 = bigint_nondet_rem!(ctx, x1891, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1892, x3, 2), x1893, 2), x1891, 2),
        8131,
        2,
    )?;
    let x1894: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1887, x1887, 2), x1840, 2), x3, 2),
            x1870,
            2
        ),
        x3,
        2
    );
    let x1895: BytePoly_3 = bigint_nondet_quot!(ctx, x1894, x3, 3);
    let x1896: BytePoly_1 = bigint_nondet_rem!(ctx, x1894, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1895, x3, 4), x1896, 4), x1894, 4),
        24387,
        2,
    )?;
    let x1897: BytePoly_2 = bigint_mul!(x1887, x1896, 2);
    let x1898: BytePoly_3 = bigint_nondet_quot!(ctx, x1897, x3, 3);
    let x1899: BytePoly_1 = bigint_nondet_rem!(ctx, x1897, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1898, x3, 4), x1899, 4), x1897, 4),
        24387,
        2,
    )?;
    let x1900: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1899, x1893, 1), 1), x3, 1);
    let x1901: BytePoly_1 = bigint_nondet_quot!(ctx, x1900, x3, 1);
    let x1902: BytePoly_1 = bigint_nondet_rem!(ctx, x1900, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1901, x3, 2), x1902, 2), x1900, 2),
        8131,
        2,
    )?;
    let x1903: BytePoly_2 = bigint_add!(
        bigint_mul!(x1896, x1877, 2),
        bigint_mul!(x1840, x1879, 2),
        2
    );
    let x1904: BytePoly_2 = bigint_add!(
        bigint_mul!(x1902, x1877, 2),
        bigint_mul!(x1842, x1879, 2),
        2
    );
    let x1905: BytePoly_3 = bigint_nondet_quot!(ctx, x1903, x3, 3);
    let x1906: BytePoly_1 = bigint_nondet_rem!(ctx, x1903, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1905, x3, 4), x1906, 4), x1903, 4),
        24387,
        2,
    )?;
    let x1907: BytePoly_3 = bigint_nondet_quot!(ctx, x1904, x3, 3);
    let x1908: BytePoly_1 = bigint_nondet_rem!(ctx, x1904, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1907, x3, 4), x1908, 4), x1904, 4),
        24387,
        2,
    )?;
    let x1909: BytePoly_2 = bigint_mul!(x1870, x1870, 2);
    let x1910: BytePoly_3 = bigint_nondet_quot!(ctx, x1909, x3, 3);
    let x1911: BytePoly_1 = bigint_nondet_rem!(ctx, x1909, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1910, x3, 4), x1911, 4), x1909, 4),
        24387,
        2,
    )?;
    let x1912: BytePoly_2 = bigint_add!(bigint_mul!(x1911, x0, 2), x2, 2);
    let x1913: BytePoly_3 = bigint_nondet_quot!(ctx, x1912, x3, 3);
    let x1914: BytePoly_1 = bigint_nondet_rem!(ctx, x1912, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1913, x3, 4), x1914, 4), x1912, 4),
        24387,
        2,
    )?;
    let x1915: BytePoly_1 = bigint_add!(x1876, x1876, 1);
    let x1916: BytePoly_1 = bigint_nondet_quot!(ctx, x1915, x3, 1);
    let x1917: BytePoly_1 = bigint_nondet_rem!(ctx, x1915, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1916, x3, 2), x1917, 2), x1915, 2),
        8131,
        2,
    )?;
    let x1918: BytePoly_1 = bigint_nondet_inv!(ctx, x1917, x3, 1);
    let x1919: BytePoly_2 = bigint_mul!(x1917, x1918, 2);
    let x1920: BytePoly_3 = bigint_nondet_quot!(ctx, x1919, x3, 3);
    let x1921: BytePoly_1 = bigint_nondet_rem!(ctx, x1919, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1920, x3, 4), x1921, 4), x1919, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1921, x5, 1), 34, 1)?;
    let x1922: BytePoly_2 = bigint_mul!(x1914, x1918, 2);
    let x1923: BytePoly_3 = bigint_nondet_quot!(ctx, x1922, x3, 3);
    let x1924: BytePoly_1 = bigint_nondet_rem!(ctx, x1922, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1923, x3, 4), x1924, 4), x1922, 4),
        24387,
        2,
    )?;
    let x1925: BytePoly_2 = bigint_mul!(x1924, x1870, 2);
    let x1926: BytePoly_3 = bigint_nondet_quot!(ctx, x1925, x3, 3);
    let x1927: BytePoly_1 = bigint_nondet_rem!(ctx, x1925, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1926, x3, 4), x1927, 4), x1925, 4),
        24387,
        2,
    )?;
    let x1928: BytePoly_1 = bigint_add!(bigint_sub!(x1876, x1927, 1), x3, 1);
    let x1929: BytePoly_1 = bigint_nondet_quot!(ctx, x1928, x3, 1);
    let x1930: BytePoly_1 = bigint_nondet_rem!(ctx, x1928, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1929, x3, 2), x1930, 2), x1928, 2),
        8131,
        2,
    )?;
    let x1931: BytePoly_2 = bigint_mul!(x1924, x1924, 2);
    let x1932: BytePoly_3 = bigint_nondet_quot!(ctx, x1931, x3, 3);
    let x1933: BytePoly_1 = bigint_nondet_rem!(ctx, x1931, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1932, x3, 4), x1933, 4), x1931, 4),
        24387,
        2,
    )?;
    let x1934: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1933, x1870, 1), x3, 1), x1870, 1),
        x3,
        1
    );
    let x1935: BytePoly_1 = bigint_nondet_quot!(ctx, x1934, x3, 1);
    let x1936: BytePoly_1 = bigint_nondet_rem!(ctx, x1934, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1935, x3, 2), x1936, 2), x1934, 2),
        8131,
        2,
    )?;
    let x1937: BytePoly_2 = bigint_mul!(x1924, x1936, 2);
    let x1938: BytePoly_3 = bigint_nondet_quot!(ctx, x1937, x3, 3);
    let x1939: BytePoly_1 = bigint_nondet_rem!(ctx, x1937, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1938, x3, 4), x1939, 4), x1937, 4),
        24387,
        2,
    )?;
    let x1940: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1939, x1930, 1), 1), x3, 1);
    let x1941: BytePoly_1 = bigint_nondet_quot!(ctx, x1940, x3, 1);
    let x1942: BytePoly_1 = bigint_nondet_rem!(ctx, x1940, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1941, x3, 2), x1942, 2), x1940, 2),
        8131,
        2,
    )?;
    let x1943: BytePoly_1 = bigint_nondet_rem!(ctx, x1878, x4, 1);
    let x1944: BytePoly_1 = bigint_nondet_quot!(ctx, x1878, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1944, x4, 2), x1943, 2), x1878, 2),
        8131,
        2,
    )?;
    let x1945: BytePoly_1 = bigint_sub!(x5, x1943, 1);
    eqz(ctx, &bigint_mul!(x1943, x1945, 2), 8131, 2)?;
    let x1946: BytePoly_1 = bigint_add!(bigint_sub!(x1936, x1906, 1), x3, 1);
    let x1947: BytePoly_1 = bigint_nondet_inv!(ctx, x1946, x3, 1);
    let x1948: BytePoly_2 = bigint_mul!(x1946, x1947, 2);
    let x1949: BytePoly_3 = bigint_nondet_quot!(ctx, x1948, x3, 3);
    let x1950: BytePoly_1 = bigint_nondet_rem!(ctx, x1948, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1949, x3, 4), x1950, 4), x1948, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1950, x1, 1), 34, 1)?;
    let x1951: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x1942, x1908, 1), x3, 1), x1947, 2);
    let x1952: BytePoly_3 = bigint_nondet_quot!(ctx, x1951, x3, 3);
    let x1953: BytePoly_1 = bigint_nondet_rem!(ctx, x1951, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1952, x3, 4), x1953, 4), x1951, 4),
        24387,
        2,
    )?;
    let x1954: BytePoly_2 = bigint_mul!(x1953, x1906, 2);
    let x1955: BytePoly_3 = bigint_nondet_quot!(ctx, x1954, x3, 3);
    let x1956: BytePoly_1 = bigint_nondet_rem!(ctx, x1954, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1955, x3, 4), x1956, 4), x1954, 4),
        24387,
        2,
    )?;
    let x1957: BytePoly_1 = bigint_add!(bigint_sub!(x1908, x1956, 1), x3, 1);
    let x1958: BytePoly_1 = bigint_nondet_quot!(ctx, x1957, x3, 1);
    let x1959: BytePoly_1 = bigint_nondet_rem!(ctx, x1957, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1958, x3, 2), x1959, 2), x1957, 2),
        8131,
        2,
    )?;
    let x1960: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1953, x1953, 2), x1906, 2), x3, 2),
            x1936,
            2
        ),
        x3,
        2
    );
    let x1961: BytePoly_3 = bigint_nondet_quot!(ctx, x1960, x3, 3);
    let x1962: BytePoly_1 = bigint_nondet_rem!(ctx, x1960, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1961, x3, 4), x1962, 4), x1960, 4),
        24387,
        2,
    )?;
    let x1963: BytePoly_2 = bigint_mul!(x1953, x1962, 2);
    let x1964: BytePoly_3 = bigint_nondet_quot!(ctx, x1963, x3, 3);
    let x1965: BytePoly_1 = bigint_nondet_rem!(ctx, x1963, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1964, x3, 4), x1965, 4), x1963, 4),
        24387,
        2,
    )?;
    let x1966: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x1965, x1959, 1), 1), x3, 1);
    let x1967: BytePoly_1 = bigint_nondet_quot!(ctx, x1966, x3, 1);
    let x1968: BytePoly_1 = bigint_nondet_rem!(ctx, x1966, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1967, x3, 2), x1968, 2), x1966, 2),
        8131,
        2,
    )?;
    let x1969: BytePoly_2 = bigint_add!(
        bigint_mul!(x1962, x1943, 2),
        bigint_mul!(x1906, x1945, 2),
        2
    );
    let x1970: BytePoly_2 = bigint_add!(
        bigint_mul!(x1968, x1943, 2),
        bigint_mul!(x1908, x1945, 2),
        2
    );
    let x1971: BytePoly_3 = bigint_nondet_quot!(ctx, x1969, x3, 3);
    let x1972: BytePoly_1 = bigint_nondet_rem!(ctx, x1969, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1971, x3, 4), x1972, 4), x1969, 4),
        24387,
        2,
    )?;
    let x1973: BytePoly_3 = bigint_nondet_quot!(ctx, x1970, x3, 3);
    let x1974: BytePoly_1 = bigint_nondet_rem!(ctx, x1970, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1973, x3, 4), x1974, 4), x1970, 4),
        24387,
        2,
    )?;
    let x1975: BytePoly_2 = bigint_mul!(x1936, x1936, 2);
    let x1976: BytePoly_3 = bigint_nondet_quot!(ctx, x1975, x3, 3);
    let x1977: BytePoly_1 = bigint_nondet_rem!(ctx, x1975, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1976, x3, 4), x1977, 4), x1975, 4),
        24387,
        2,
    )?;
    let x1978: BytePoly_2 = bigint_add!(bigint_mul!(x1977, x0, 2), x2, 2);
    let x1979: BytePoly_3 = bigint_nondet_quot!(ctx, x1978, x3, 3);
    let x1980: BytePoly_1 = bigint_nondet_rem!(ctx, x1978, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1979, x3, 4), x1980, 4), x1978, 4),
        24387,
        2,
    )?;
    let x1981: BytePoly_1 = bigint_add!(x1942, x1942, 1);
    let x1982: BytePoly_1 = bigint_nondet_quot!(ctx, x1981, x3, 1);
    let x1983: BytePoly_1 = bigint_nondet_rem!(ctx, x1981, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1982, x3, 2), x1983, 2), x1981, 2),
        8131,
        2,
    )?;
    let x1984: BytePoly_1 = bigint_nondet_inv!(ctx, x1983, x3, 1);
    let x1985: BytePoly_2 = bigint_mul!(x1983, x1984, 2);
    let x1986: BytePoly_3 = bigint_nondet_quot!(ctx, x1985, x3, 3);
    let x1987: BytePoly_1 = bigint_nondet_rem!(ctx, x1985, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1986, x3, 4), x1987, 4), x1985, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x1987, x5, 1), 34, 1)?;
    let x1988: BytePoly_2 = bigint_mul!(x1980, x1984, 2);
    let x1989: BytePoly_3 = bigint_nondet_quot!(ctx, x1988, x3, 3);
    let x1990: BytePoly_1 = bigint_nondet_rem!(ctx, x1988, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1989, x3, 4), x1990, 4), x1988, 4),
        24387,
        2,
    )?;
    let x1991: BytePoly_2 = bigint_mul!(x1990, x1936, 2);
    let x1992: BytePoly_3 = bigint_nondet_quot!(ctx, x1991, x3, 3);
    let x1993: BytePoly_1 = bigint_nondet_rem!(ctx, x1991, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1992, x3, 4), x1993, 4), x1991, 4),
        24387,
        2,
    )?;
    let x1994: BytePoly_1 = bigint_add!(bigint_sub!(x1942, x1993, 1), x3, 1);
    let x1995: BytePoly_1 = bigint_nondet_quot!(ctx, x1994, x3, 1);
    let x1996: BytePoly_1 = bigint_nondet_rem!(ctx, x1994, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1995, x3, 2), x1996, 2), x1994, 2),
        8131,
        2,
    )?;
    let x1997: BytePoly_2 = bigint_mul!(x1990, x1990, 2);
    let x1998: BytePoly_3 = bigint_nondet_quot!(ctx, x1997, x3, 3);
    let x1999: BytePoly_1 = bigint_nondet_rem!(ctx, x1997, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1998, x3, 4), x1999, 4), x1997, 4),
        24387,
        2,
    )?;
    let x2000: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1999, x1936, 1), x3, 1), x1936, 1),
        x3,
        1
    );
    let x2001: BytePoly_1 = bigint_nondet_quot!(ctx, x2000, x3, 1);
    let x2002: BytePoly_1 = bigint_nondet_rem!(ctx, x2000, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2001, x3, 2), x2002, 2), x2000, 2),
        8131,
        2,
    )?;
    let x2003: BytePoly_2 = bigint_mul!(x1990, x2002, 2);
    let x2004: BytePoly_3 = bigint_nondet_quot!(ctx, x2003, x3, 3);
    let x2005: BytePoly_1 = bigint_nondet_rem!(ctx, x2003, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2004, x3, 4), x2005, 4), x2003, 4),
        24387,
        2,
    )?;
    let x2006: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x2005, x1996, 1), 1), x3, 1);
    let x2007: BytePoly_1 = bigint_nondet_quot!(ctx, x2006, x3, 1);
    let x2008: BytePoly_1 = bigint_nondet_rem!(ctx, x2006, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2007, x3, 2), x2008, 2), x2006, 2),
        8131,
        2,
    )?;
    let x2009: BytePoly_1 = bigint_nondet_rem!(ctx, x1944, x4, 1);
    let x2010: BytePoly_1 = bigint_nondet_quot!(ctx, x1944, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2010, x4, 2), x2009, 2), x1944, 2),
        8131,
        2,
    )?;
    let x2011: BytePoly_1 = bigint_sub!(x5, x2009, 1);
    eqz(ctx, &bigint_mul!(x2009, x2011, 2), 8131, 2)?;
    let x2012: BytePoly_1 = bigint_add!(bigint_sub!(x2002, x1972, 1), x3, 1);
    let x2013: BytePoly_1 = bigint_nondet_inv!(ctx, x2012, x3, 1);
    let x2014: BytePoly_2 = bigint_mul!(x2012, x2013, 2);
    let x2015: BytePoly_3 = bigint_nondet_quot!(ctx, x2014, x3, 3);
    let x2016: BytePoly_1 = bigint_nondet_rem!(ctx, x2014, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2015, x3, 4), x2016, 4), x2014, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2016, x1, 1), 34, 1)?;
    let x2017: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2008, x1974, 1), x3, 1), x2013, 2);
    let x2018: BytePoly_3 = bigint_nondet_quot!(ctx, x2017, x3, 3);
    let x2019: BytePoly_1 = bigint_nondet_rem!(ctx, x2017, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2018, x3, 4), x2019, 4), x2017, 4),
        24387,
        2,
    )?;
    let x2020: BytePoly_2 = bigint_mul!(x2019, x1972, 2);
    let x2021: BytePoly_3 = bigint_nondet_quot!(ctx, x2020, x3, 3);
    let x2022: BytePoly_1 = bigint_nondet_rem!(ctx, x2020, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2021, x3, 4), x2022, 4), x2020, 4),
        24387,
        2,
    )?;
    let x2023: BytePoly_1 = bigint_add!(bigint_sub!(x1974, x2022, 1), x3, 1);
    let x2024: BytePoly_1 = bigint_nondet_quot!(ctx, x2023, x3, 1);
    let x2025: BytePoly_1 = bigint_nondet_rem!(ctx, x2023, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2024, x3, 2), x2025, 2), x2023, 2),
        8131,
        2,
    )?;
    let x2026: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2019, x2019, 2), x1972, 2), x3, 2),
            x2002,
            2
        ),
        x3,
        2
    );
    let x2027: BytePoly_3 = bigint_nondet_quot!(ctx, x2026, x3, 3);
    let x2028: BytePoly_1 = bigint_nondet_rem!(ctx, x2026, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2027, x3, 4), x2028, 4), x2026, 4),
        24387,
        2,
    )?;
    let x2029: BytePoly_2 = bigint_mul!(x2019, x2028, 2);
    let x2030: BytePoly_3 = bigint_nondet_quot!(ctx, x2029, x3, 3);
    let x2031: BytePoly_1 = bigint_nondet_rem!(ctx, x2029, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2030, x3, 4), x2031, 4), x2029, 4),
        24387,
        2,
    )?;
    let x2032: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x2031, x2025, 1), 1), x3, 1);
    let x2033: BytePoly_1 = bigint_nondet_quot!(ctx, x2032, x3, 1);
    let x2034: BytePoly_1 = bigint_nondet_rem!(ctx, x2032, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2033, x3, 2), x2034, 2), x2032, 2),
        8131,
        2,
    )?;
    let x2035: BytePoly_2 = bigint_add!(
        bigint_mul!(x2028, x2009, 2),
        bigint_mul!(x1972, x2011, 2),
        2
    );
    let x2036: BytePoly_2 = bigint_add!(
        bigint_mul!(x2034, x2009, 2),
        bigint_mul!(x1974, x2011, 2),
        2
    );
    let x2037: BytePoly_3 = bigint_nondet_quot!(ctx, x2035, x3, 3);
    let x2038: BytePoly_1 = bigint_nondet_rem!(ctx, x2035, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2037, x3, 4), x2038, 4), x2035, 4),
        24387,
        2,
    )?;
    let x2039: BytePoly_3 = bigint_nondet_quot!(ctx, x2036, x3, 3);
    let x2040: BytePoly_1 = bigint_nondet_rem!(ctx, x2036, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2039, x3, 4), x2040, 4), x2036, 4),
        24387,
        2,
    )?;
    let x2041: BytePoly_2 = bigint_mul!(x2002, x2002, 2);
    let x2042: BytePoly_3 = bigint_nondet_quot!(ctx, x2041, x3, 3);
    let x2043: BytePoly_1 = bigint_nondet_rem!(ctx, x2041, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2042, x3, 4), x2043, 4), x2041, 4),
        24387,
        2,
    )?;
    let x2044: BytePoly_2 = bigint_add!(bigint_mul!(x2043, x0, 2), x2, 2);
    let x2045: BytePoly_3 = bigint_nondet_quot!(ctx, x2044, x3, 3);
    let x2046: BytePoly_1 = bigint_nondet_rem!(ctx, x2044, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2045, x3, 4), x2046, 4), x2044, 4),
        24387,
        2,
    )?;
    let x2047: BytePoly_1 = bigint_add!(x2008, x2008, 1);
    let x2048: BytePoly_1 = bigint_nondet_quot!(ctx, x2047, x3, 1);
    let x2049: BytePoly_1 = bigint_nondet_rem!(ctx, x2047, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2048, x3, 2), x2049, 2), x2047, 2),
        8131,
        2,
    )?;
    let x2050: BytePoly_1 = bigint_nondet_inv!(ctx, x2049, x3, 1);
    let x2051: BytePoly_2 = bigint_mul!(x2049, x2050, 2);
    let x2052: BytePoly_3 = bigint_nondet_quot!(ctx, x2051, x3, 3);
    let x2053: BytePoly_1 = bigint_nondet_rem!(ctx, x2051, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2052, x3, 4), x2053, 4), x2051, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2053, x5, 1), 34, 1)?;
    let x2054: BytePoly_2 = bigint_mul!(x2046, x2050, 2);
    let x2055: BytePoly_3 = bigint_nondet_quot!(ctx, x2054, x3, 3);
    let x2056: BytePoly_1 = bigint_nondet_rem!(ctx, x2054, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2055, x3, 4), x2056, 4), x2054, 4),
        24387,
        2,
    )?;
    let x2057: BytePoly_2 = bigint_mul!(x2056, x2002, 2);
    let x2058: BytePoly_3 = bigint_nondet_quot!(ctx, x2057, x3, 3);
    let x2059: BytePoly_1 = bigint_nondet_rem!(ctx, x2057, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2058, x3, 4), x2059, 4), x2057, 4),
        24387,
        2,
    )?;
    let x2060: BytePoly_1 = bigint_add!(bigint_sub!(x2008, x2059, 1), x3, 1);
    let x2061: BytePoly_1 = bigint_nondet_quot!(ctx, x2060, x3, 1);
    let x2062: BytePoly_1 = bigint_nondet_rem!(ctx, x2060, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2061, x3, 2), x2062, 2), x2060, 2),
        8131,
        2,
    )?;
    let x2063: BytePoly_2 = bigint_mul!(x2056, x2056, 2);
    let x2064: BytePoly_3 = bigint_nondet_quot!(ctx, x2063, x3, 3);
    let x2065: BytePoly_1 = bigint_nondet_rem!(ctx, x2063, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2064, x3, 4), x2065, 4), x2063, 4),
        24387,
        2,
    )?;
    let x2066: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2065, x2002, 1), x3, 1), x2002, 1),
        x3,
        1
    );
    let x2067: BytePoly_1 = bigint_nondet_quot!(ctx, x2066, x3, 1);
    let x2068: BytePoly_1 = bigint_nondet_rem!(ctx, x2066, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2067, x3, 2), x2068, 2), x2066, 2),
        8131,
        2,
    )?;
    let x2069: BytePoly_2 = bigint_mul!(x2056, x2068, 2);
    let x2070: BytePoly_3 = bigint_nondet_quot!(ctx, x2069, x3, 3);
    let x2071: BytePoly_1 = bigint_nondet_rem!(ctx, x2069, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2070, x3, 4), x2071, 4), x2069, 4),
        24387,
        2,
    )?;
    let x2072: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x2071, x2062, 1), 1), x3, 1);
    let x2073: BytePoly_1 = bigint_nondet_quot!(ctx, x2072, x3, 1);
    let x2074: BytePoly_1 = bigint_nondet_rem!(ctx, x2072, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2073, x3, 2), x2074, 2), x2072, 2),
        8131,
        2,
    )?;
    let x2075: BytePoly_1 = bigint_nondet_rem!(ctx, x2010, x4, 1);
    let x2076: BytePoly_1 = bigint_nondet_quot!(ctx, x2010, x4, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2076, x4, 2), x2075, 2), x2010, 2),
        8131,
        2,
    )?;
    let x2077: BytePoly_1 = bigint_sub!(x5, x2075, 1);
    eqz(ctx, &bigint_mul!(x2075, x2077, 2), 8131, 2)?;
    let x2078: BytePoly_1 = bigint_add!(bigint_sub!(x2068, x2038, 1), x3, 1);
    let x2079: BytePoly_1 = bigint_nondet_inv!(ctx, x2078, x3, 1);
    let x2080: BytePoly_2 = bigint_mul!(x2078, x2079, 2);
    let x2081: BytePoly_3 = bigint_nondet_quot!(ctx, x2080, x3, 3);
    let x2082: BytePoly_1 = bigint_nondet_rem!(ctx, x2080, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2081, x3, 4), x2082, 4), x2080, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2082, x1, 1), 34, 1)?;
    let x2083: BytePoly_2 = bigint_mul!(bigint_add!(bigint_sub!(x2074, x2040, 1), x3, 1), x2079, 2);
    let x2084: BytePoly_3 = bigint_nondet_quot!(ctx, x2083, x3, 3);
    let x2085: BytePoly_1 = bigint_nondet_rem!(ctx, x2083, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2084, x3, 4), x2085, 4), x2083, 4),
        24387,
        2,
    )?;
    let x2086: BytePoly_2 = bigint_mul!(x2085, x2038, 2);
    let x2087: BytePoly_3 = bigint_nondet_quot!(ctx, x2086, x3, 3);
    let x2088: BytePoly_1 = bigint_nondet_rem!(ctx, x2086, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2087, x3, 4), x2088, 4), x2086, 4),
        24387,
        2,
    )?;
    let x2089: BytePoly_1 = bigint_add!(bigint_sub!(x2040, x2088, 1), x3, 1);
    let x2090: BytePoly_1 = bigint_nondet_quot!(ctx, x2089, x3, 1);
    let x2091: BytePoly_1 = bigint_nondet_rem!(ctx, x2089, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2090, x3, 2), x2091, 2), x2089, 2),
        8131,
        2,
    )?;
    let x2092: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2085, x2085, 2), x2038, 2), x3, 2),
            x2068,
            2
        ),
        x3,
        2
    );
    let x2093: BytePoly_3 = bigint_nondet_quot!(ctx, x2092, x3, 3);
    let x2094: BytePoly_1 = bigint_nondet_rem!(ctx, x2092, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2093, x3, 4), x2094, 4), x2092, 4),
        24387,
        2,
    )?;
    let x2095: BytePoly_2 = bigint_mul!(x2085, x2094, 2);
    let x2096: BytePoly_3 = bigint_nondet_quot!(ctx, x2095, x3, 3);
    let x2097: BytePoly_1 = bigint_nondet_rem!(ctx, x2095, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2096, x3, 4), x2097, 4), x2095, 4),
        24387,
        2,
    )?;
    let x2098: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x2097, x2091, 1), 1), x3, 1);
    let x2099: BytePoly_1 = bigint_nondet_quot!(ctx, x2098, x3, 1);
    let x2100: BytePoly_1 = bigint_nondet_rem!(ctx, x2098, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2099, x3, 2), x2100, 2), x2098, 2),
        8131,
        2,
    )?;
    let x2101: BytePoly_2 = bigint_add!(
        bigint_mul!(x2094, x2075, 2),
        bigint_mul!(x2038, x2077, 2),
        2
    );
    let x2102: BytePoly_2 = bigint_add!(
        bigint_mul!(x2100, x2075, 2),
        bigint_mul!(x2040, x2077, 2),
        2
    );
    let x2103: BytePoly_3 = bigint_nondet_quot!(ctx, x2101, x3, 3);
    let x2104: BytePoly_1 = bigint_nondet_rem!(ctx, x2101, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2103, x3, 4), x2104, 4), x2101, 4),
        24387,
        2,
    )?;
    let x2105: BytePoly_3 = bigint_nondet_quot!(ctx, x2102, x3, 3);
    let x2106: BytePoly_1 = bigint_nondet_rem!(ctx, x2102, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2105, x3, 4), x2106, 4), x2102, 4),
        24387,
        2,
    )?;
    let x2107: BytePoly_2 = bigint_mul!(x2068, x2068, 2);
    let x2108: BytePoly_3 = bigint_nondet_quot!(ctx, x2107, x3, 3);
    let x2109: BytePoly_1 = bigint_nondet_rem!(ctx, x2107, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2108, x3, 4), x2109, 4), x2107, 4),
        24387,
        2,
    )?;
    let x2110: BytePoly_2 = bigint_add!(bigint_mul!(x2109, x0, 2), x2, 2);
    let x2111: BytePoly_3 = bigint_nondet_quot!(ctx, x2110, x3, 3);
    let x2112: BytePoly_1 = bigint_nondet_rem!(ctx, x2110, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2111, x3, 4), x2112, 4), x2110, 4),
        24387,
        2,
    )?;
    let x2113: BytePoly_1 = bigint_add!(x2074, x2074, 1);
    let x2114: BytePoly_1 = bigint_nondet_quot!(ctx, x2113, x3, 1);
    let x2115: BytePoly_1 = bigint_nondet_rem!(ctx, x2113, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2114, x3, 2), x2115, 2), x2113, 2),
        8131,
        2,
    )?;
    let x2116: BytePoly_1 = bigint_nondet_inv!(ctx, x2115, x3, 1);
    let x2117: BytePoly_2 = bigint_mul!(x2115, x2116, 2);
    let x2118: BytePoly_3 = bigint_nondet_quot!(ctx, x2117, x3, 3);
    let x2119: BytePoly_1 = bigint_nondet_rem!(ctx, x2117, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2118, x3, 4), x2119, 4), x2117, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2119, x5, 1), 34, 1)?;
    let x2120: BytePoly_2 = bigint_mul!(x2112, x2116, 2);
    let x2121: BytePoly_3 = bigint_nondet_quot!(ctx, x2120, x3, 3);
    let x2122: BytePoly_1 = bigint_nondet_rem!(ctx, x2120, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2121, x3, 4), x2122, 4), x2120, 4),
        24387,
        2,
    )?;
    let x2123: BytePoly_2 = bigint_mul!(x2122, x2068, 2);
    let x2124: BytePoly_3 = bigint_nondet_quot!(ctx, x2123, x3, 3);
    let x2125: BytePoly_1 = bigint_nondet_rem!(ctx, x2123, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2124, x3, 4), x2125, 4), x2123, 4),
        24387,
        2,
    )?;
    let x2126: BytePoly_1 = bigint_add!(bigint_sub!(x2074, x2125, 1), x3, 1);
    let x2127: BytePoly_1 = bigint_nondet_quot!(ctx, x2126, x3, 1);
    let x2128: BytePoly_1 = bigint_nondet_rem!(ctx, x2126, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2127, x3, 2), x2128, 2), x2126, 2),
        8131,
        2,
    )?;
    let x2129: BytePoly_2 = bigint_mul!(x2122, x2122, 2);
    let x2130: BytePoly_3 = bigint_nondet_quot!(ctx, x2129, x3, 3);
    let x2131: BytePoly_1 = bigint_nondet_rem!(ctx, x2129, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2130, x3, 4), x2131, 4), x2129, 4),
        24387,
        2,
    )?;
    let x2132: BytePoly_1 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x2131, x2068, 1), x3, 1), x2068, 1),
        x3,
        1
    );
    let x2133: BytePoly_1 = bigint_nondet_quot!(ctx, x2132, x3, 1);
    let x2134: BytePoly_1 = bigint_nondet_rem!(ctx, x2132, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2133, x3, 2), x2134, 2), x2132, 2),
        8131,
        2,
    )?;
    let x2135: BytePoly_2 = bigint_mul!(x2122, x2134, 2);
    let x2136: BytePoly_3 = bigint_nondet_quot!(ctx, x2135, x3, 3);
    let x2137: BytePoly_1 = bigint_nondet_rem!(ctx, x2135, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2136, x3, 4), x2137, 4), x2135, 4),
        24387,
        2,
    )?;
    let x2138: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x2137, x2128, 1), 1), x3, 1);
    let x2139: BytePoly_1 = bigint_nondet_quot!(ctx, x2138, x3, 1);
    let x2140: BytePoly_1 = bigint_nondet_rem!(ctx, x2138, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2139, x3, 2), x2140, 2), x2138, 2),
        8131,
        2,
    )?;
    let x2141: BytePoly_1 = bigint_add!(bigint_sub!(x9, x2104, 1), x3, 1);
    let x2142: BytePoly_1 = bigint_nondet_inv!(ctx, x2141, x3, 1);
    let x2143: BytePoly_2 = bigint_mul!(x2141, x2142, 2);
    let x2144: BytePoly_3 = bigint_nondet_quot!(ctx, x2143, x3, 3);
    let x2145: BytePoly_1 = bigint_nondet_rem!(ctx, x2143, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2144, x3, 4), x2145, 4), x2143, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2145, x1, 1), 34, 1)?;
    let x2146: BytePoly_2 = bigint_mul!(
        bigint_add!(bigint_sub!(bigint_sub!(x3, x10, 1), x2106, 1), x3, 1),
        x2142,
        2
    );
    let x2147: BytePoly_3 = bigint_nondet_quot!(ctx, x2146, x3, 3);
    let x2148: BytePoly_1 = bigint_nondet_rem!(ctx, x2146, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2147, x3, 4), x2148, 4), x2146, 4),
        24387,
        2,
    )?;
    let x2149: BytePoly_2 = bigint_mul!(x2148, x2104, 2);
    let x2150: BytePoly_3 = bigint_nondet_quot!(ctx, x2149, x3, 3);
    let x2151: BytePoly_1 = bigint_nondet_rem!(ctx, x2149, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2150, x3, 4), x2151, 4), x2149, 4),
        24387,
        2,
    )?;
    let x2152: BytePoly_1 = bigint_add!(bigint_sub!(x2106, x2151, 1), x3, 1);
    let x2153: BytePoly_1 = bigint_nondet_quot!(ctx, x2152, x3, 1);
    let x2154: BytePoly_1 = bigint_nondet_rem!(ctx, x2152, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2153, x3, 2), x2154, 2), x2152, 2),
        8131,
        2,
    )?;
    let x2155: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x2148, x2148, 2), x2104, 2), x3, 2),
            x9,
            2
        ),
        x3,
        2
    );
    let x2156: BytePoly_3 = bigint_nondet_quot!(ctx, x2155, x3, 3);
    let x2157: BytePoly_1 = bigint_nondet_rem!(ctx, x2155, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2156, x3, 4), x2157, 4), x2155, 4),
        24387,
        2,
    )?;
    let x2158: BytePoly_2 = bigint_mul!(x2148, x2157, 2);
    let x2159: BytePoly_3 = bigint_nondet_quot!(ctx, x2158, x3, 3);
    let x2160: BytePoly_1 = bigint_nondet_rem!(ctx, x2158, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2159, x3, 4), x2160, 4), x2158, 4),
        24387,
        2,
    )?;
    let x2161: BytePoly_1 = bigint_add!(bigint_sub!(x3, bigint_add!(x2160, x2154, 1), 1), x3, 1);
    let x2162: BytePoly_1 = bigint_nondet_quot!(ctx, x2161, x3, 1);
    let x2163: BytePoly_1 = bigint_nondet_rem!(ctx, x2161, x3, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x2162, x3, 2), x2163, 2), x2161, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x2157, x12, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x2163, x13, 1), 34, 1)?;
    return Ok(());
}
pub fn ec_aff_mul_test_256(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 3);
    let x1: BytePoly_1 = bigint_const!(ctx, 1);
    let x2: BytePoly_32 = bigint_const!(
        ctx, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0
    );
    let x3: BytePoly_32 = bigint_const!(
        ctx, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0
    );
    let x4: BytePoly_32 = bigint_const!(
        ctx, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0
    );
    let x5: BytePoly_1 = bigint_const!(ctx, 2);
    let x6: BytePoly_1 = bigint_const!(ctx, 1);
    let x7: BytePoly_32 = bigint_def!(ctx, 32, 0, 1);
    let x8: BytePoly_32 = bigint_def!(ctx, 32, 1, 1);
    let x9: BytePoly_32 = bigint_def!(ctx, 32, 2, 1);
    let x10: BytePoly_32 = bigint_def!(ctx, 32, 3, 1);
    let x11: BytePoly_32 = bigint_def!(ctx, 32, 4, 1);
    let x12: BytePoly_32 = bigint_def!(ctx, 32, 5, 1);
    let x13: BytePoly_32 = bigint_def!(ctx, 32, 6, 1);
    let x14: BytePoly_32 = bigint_def!(ctx, 32, 7, 1);
    eqz(ctx, &bigint_sub!(x7, x7, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x8, x8, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x9, x9, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x10, x10, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x11, x11, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x12, x12, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x13, x13, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x14, x14, 32), 34, 1)?;
    let x15: BytePoly_64 = bigint_mul!(x11, x11, 64);
    let x16: BytePoly_66 = bigint_nondet_quot!(ctx, x15, x4, 66);
    let x17: BytePoly_32 = bigint_nondet_rem!(ctx, x15, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x16, x4, 98), x17, 98), x15, 98),
        536459,
        4,
    )?;
    let x18: BytePoly_64 = bigint_mul!(x10, x10, 64);
    let x19: BytePoly_66 = bigint_nondet_quot!(ctx, x18, x4, 66);
    let x20: BytePoly_32 = bigint_nondet_rem!(ctx, x18, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x19, x4, 98), x20, 98), x18, 98),
        536459,
        4,
    )?;
    let x21: BytePoly_64 = bigint_mul!(x10, x20, 64);
    let x22: BytePoly_66 = bigint_nondet_quot!(ctx, x21, x4, 66);
    let x23: BytePoly_32 = bigint_nondet_rem!(ctx, x21, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x22, x4, 98), x23, 98), x21, 98),
        536459,
        4,
    )?;
    let x24: BytePoly_64 = bigint_mul!(x10, x3, 64);
    let x25: BytePoly_66 = bigint_nondet_quot!(ctx, x24, x4, 66);
    let x26: BytePoly_32 = bigint_nondet_rem!(ctx, x24, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x25, x4, 98), x26, 98), x24, 98),
        536459,
        4,
    )?;
    let x27: BytePoly_32 = bigint_add!(bigint_add!(x23, x26, 32), x2, 32);
    let x28: BytePoly_32 = bigint_nondet_quot!(ctx, x27, x4, 32);
    let x29: BytePoly_32 = bigint_nondet_rem!(ctx, x27, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x28, x4, 64), x29, 64), x27, 64),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x17, x29, 32), 34, 1)?;
    let x30: BytePoly_1 = bigint_nondet_rem!(ctx, x9, x5, 1);
    let x31: BytePoly_32 = bigint_nondet_quot!(ctx, x9, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x31, x5, 33), x30, 33), x9, 33),
        260103,
        4,
    )?;
    let x32: BytePoly_1 = bigint_sub!(x6, x30, 1);
    eqz(ctx, &bigint_mul!(x30, x32, 2), 8131, 2)?;
    let x33: BytePoly_32 = bigint_add!(bigint_sub!(x7, x10, 32), x4, 32);
    let x34: BytePoly_32 = bigint_nondet_inv!(ctx, x33, x4, 32);
    let x35: BytePoly_64 = bigint_mul!(x33, x34, 64);
    let x36: BytePoly_66 = bigint_nondet_quot!(ctx, x35, x4, 66);
    let x37: BytePoly_32 = bigint_nondet_rem!(ctx, x35, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x36, x4, 98), x37, 98), x35, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x37, x1, 32), 34, 1)?;
    let x38: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x8, x11, 32), x4, 32), x34, 64);
    let x39: BytePoly_66 = bigint_nondet_quot!(ctx, x38, x4, 66);
    let x40: BytePoly_32 = bigint_nondet_rem!(ctx, x38, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x39, x4, 98), x40, 98), x38, 98),
        536459,
        4,
    )?;
    let x41: BytePoly_64 = bigint_mul!(x40, x10, 64);
    let x42: BytePoly_66 = bigint_nondet_quot!(ctx, x41, x4, 66);
    let x43: BytePoly_32 = bigint_nondet_rem!(ctx, x41, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x42, x4, 98), x43, 98), x41, 98),
        536459,
        4,
    )?;
    let x44: BytePoly_32 = bigint_add!(bigint_sub!(x11, x43, 32), x4, 32);
    let x45: BytePoly_32 = bigint_nondet_quot!(ctx, x44, x4, 32);
    let x46: BytePoly_32 = bigint_nondet_rem!(ctx, x44, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x45, x4, 64), x46, 64), x44, 64),
        260103,
        4,
    )?;
    let x47: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x40, x40, 64), x10, 64), x4, 64),
            x7,
            64
        ),
        x4,
        64
    );
    let x48: BytePoly_66 = bigint_nondet_quot!(ctx, x47, x4, 66);
    let x49: BytePoly_32 = bigint_nondet_rem!(ctx, x47, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x48, x4, 98), x49, 98), x47, 98),
        536459,
        4,
    )?;
    let x50: BytePoly_64 = bigint_mul!(x40, x49, 64);
    let x51: BytePoly_66 = bigint_nondet_quot!(ctx, x50, x4, 66);
    let x52: BytePoly_32 = bigint_nondet_rem!(ctx, x50, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x51, x4, 98), x52, 98), x50, 98),
        536459,
        4,
    )?;
    let x53: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x52, x46, 32), 32), x4, 32);
    let x54: BytePoly_32 = bigint_nondet_quot!(ctx, x53, x4, 32);
    let x55: BytePoly_32 = bigint_nondet_rem!(ctx, x53, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x54, x4, 64), x55, 64), x53, 64),
        260103,
        4,
    )?;
    let x56: BytePoly_33 = bigint_add!(bigint_mul!(x49, x30, 33), bigint_mul!(x10, x32, 33), 33);
    let x57: BytePoly_33 = bigint_add!(bigint_mul!(x55, x30, 33), bigint_mul!(x11, x32, 33), 33);
    let x58: BytePoly_35 = bigint_nondet_quot!(ctx, x56, x4, 35);
    let x59: BytePoly_32 = bigint_nondet_rem!(ctx, x56, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x58, x4, 67), x59, 67), x56, 67),
        284487,
        4,
    )?;
    let x60: BytePoly_35 = bigint_nondet_quot!(ctx, x57, x4, 35);
    let x61: BytePoly_32 = bigint_nondet_rem!(ctx, x57, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x60, x4, 67), x61, 67), x57, 67),
        284487,
        4,
    )?;
    let x62: BytePoly_64 = bigint_mul!(x7, x7, 64);
    let x63: BytePoly_66 = bigint_nondet_quot!(ctx, x62, x4, 66);
    let x64: BytePoly_32 = bigint_nondet_rem!(ctx, x62, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x63, x4, 98), x64, 98), x62, 98),
        536459,
        4,
    )?;
    let x65: BytePoly_33 = bigint_add!(bigint_mul!(x64, x0, 33), x3, 33);
    let x66: BytePoly_35 = bigint_nondet_quot!(ctx, x65, x4, 35);
    let x67: BytePoly_32 = bigint_nondet_rem!(ctx, x65, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x66, x4, 67), x67, 67), x65, 67),
        284487,
        4,
    )?;
    let x68: BytePoly_32 = bigint_add!(x8, x8, 32);
    let x69: BytePoly_32 = bigint_nondet_quot!(ctx, x68, x4, 32);
    let x70: BytePoly_32 = bigint_nondet_rem!(ctx, x68, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x69, x4, 64), x70, 64), x68, 64),
        260103,
        4,
    )?;
    let x71: BytePoly_32 = bigint_nondet_inv!(ctx, x70, x4, 32);
    let x72: BytePoly_64 = bigint_mul!(x70, x71, 64);
    let x73: BytePoly_66 = bigint_nondet_quot!(ctx, x72, x4, 66);
    let x74: BytePoly_32 = bigint_nondet_rem!(ctx, x72, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x73, x4, 98), x74, 98), x72, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x74, x6, 32), 34, 1)?;
    let x75: BytePoly_64 = bigint_mul!(x67, x71, 64);
    let x76: BytePoly_66 = bigint_nondet_quot!(ctx, x75, x4, 66);
    let x77: BytePoly_32 = bigint_nondet_rem!(ctx, x75, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x76, x4, 98), x77, 98), x75, 98),
        536459,
        4,
    )?;
    let x78: BytePoly_64 = bigint_mul!(x77, x7, 64);
    let x79: BytePoly_66 = bigint_nondet_quot!(ctx, x78, x4, 66);
    let x80: BytePoly_32 = bigint_nondet_rem!(ctx, x78, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x79, x4, 98), x80, 98), x78, 98),
        536459,
        4,
    )?;
    let x81: BytePoly_32 = bigint_add!(bigint_sub!(x8, x80, 32), x4, 32);
    let x82: BytePoly_32 = bigint_nondet_quot!(ctx, x81, x4, 32);
    let x83: BytePoly_32 = bigint_nondet_rem!(ctx, x81, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x82, x4, 64), x83, 64), x81, 64),
        260103,
        4,
    )?;
    let x84: BytePoly_64 = bigint_mul!(x77, x77, 64);
    let x85: BytePoly_66 = bigint_nondet_quot!(ctx, x84, x4, 66);
    let x86: BytePoly_32 = bigint_nondet_rem!(ctx, x84, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x85, x4, 98), x86, 98), x84, 98),
        536459,
        4,
    )?;
    let x87: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x86, x7, 32), x4, 32), x7, 32),
        x4,
        32
    );
    let x88: BytePoly_32 = bigint_nondet_quot!(ctx, x87, x4, 32);
    let x89: BytePoly_32 = bigint_nondet_rem!(ctx, x87, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x88, x4, 64), x89, 64), x87, 64),
        260103,
        4,
    )?;
    let x90: BytePoly_64 = bigint_mul!(x77, x89, 64);
    let x91: BytePoly_66 = bigint_nondet_quot!(ctx, x90, x4, 66);
    let x92: BytePoly_32 = bigint_nondet_rem!(ctx, x90, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x91, x4, 98), x92, 98), x90, 98),
        536459,
        4,
    )?;
    let x93: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x92, x83, 32), 32), x4, 32);
    let x94: BytePoly_32 = bigint_nondet_quot!(ctx, x93, x4, 32);
    let x95: BytePoly_32 = bigint_nondet_rem!(ctx, x93, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x94, x4, 64), x95, 64), x93, 64),
        260103,
        4,
    )?;
    let x96: BytePoly_1 = bigint_nondet_rem!(ctx, x31, x5, 1);
    let x97: BytePoly_32 = bigint_nondet_quot!(ctx, x31, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x97, x5, 33), x96, 33), x31, 33),
        260103,
        4,
    )?;
    let x98: BytePoly_1 = bigint_sub!(x6, x96, 1);
    eqz(ctx, &bigint_mul!(x96, x98, 2), 8131, 2)?;
    let x99: BytePoly_32 = bigint_add!(bigint_sub!(x89, x59, 32), x4, 32);
    let x100: BytePoly_32 = bigint_nondet_inv!(ctx, x99, x4, 32);
    let x101: BytePoly_64 = bigint_mul!(x99, x100, 64);
    let x102: BytePoly_66 = bigint_nondet_quot!(ctx, x101, x4, 66);
    let x103: BytePoly_32 = bigint_nondet_rem!(ctx, x101, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x102, x4, 98), x103, 98), x101, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x103, x1, 32), 34, 1)?;
    let x104: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x95, x61, 32), x4, 32), x100, 64);
    let x105: BytePoly_66 = bigint_nondet_quot!(ctx, x104, x4, 66);
    let x106: BytePoly_32 = bigint_nondet_rem!(ctx, x104, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x105, x4, 98), x106, 98), x104, 98),
        536459,
        4,
    )?;
    let x107: BytePoly_64 = bigint_mul!(x106, x59, 64);
    let x108: BytePoly_66 = bigint_nondet_quot!(ctx, x107, x4, 66);
    let x109: BytePoly_32 = bigint_nondet_rem!(ctx, x107, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x108, x4, 98), x109, 98), x107, 98),
        536459,
        4,
    )?;
    let x110: BytePoly_32 = bigint_add!(bigint_sub!(x61, x109, 32), x4, 32);
    let x111: BytePoly_32 = bigint_nondet_quot!(ctx, x110, x4, 32);
    let x112: BytePoly_32 = bigint_nondet_rem!(ctx, x110, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x111, x4, 64), x112, 64), x110, 64),
        260103,
        4,
    )?;
    let x113: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x106, x106, 64), x59, 64), x4, 64),
            x89,
            64
        ),
        x4,
        64
    );
    let x114: BytePoly_66 = bigint_nondet_quot!(ctx, x113, x4, 66);
    let x115: BytePoly_32 = bigint_nondet_rem!(ctx, x113, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x114, x4, 98), x115, 98), x113, 98),
        536459,
        4,
    )?;
    let x116: BytePoly_64 = bigint_mul!(x106, x115, 64);
    let x117: BytePoly_66 = bigint_nondet_quot!(ctx, x116, x4, 66);
    let x118: BytePoly_32 = bigint_nondet_rem!(ctx, x116, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x117, x4, 98), x118, 98), x116, 98),
        536459,
        4,
    )?;
    let x119: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x118, x112, 32), 32), x4, 32);
    let x120: BytePoly_32 = bigint_nondet_quot!(ctx, x119, x4, 32);
    let x121: BytePoly_32 = bigint_nondet_rem!(ctx, x119, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x120, x4, 64), x121, 64), x119, 64),
        260103,
        4,
    )?;
    let x122: BytePoly_33 = bigint_add!(bigint_mul!(x115, x96, 33), bigint_mul!(x59, x98, 33), 33);
    let x123: BytePoly_33 = bigint_add!(bigint_mul!(x121, x96, 33), bigint_mul!(x61, x98, 33), 33);
    let x124: BytePoly_35 = bigint_nondet_quot!(ctx, x122, x4, 35);
    let x125: BytePoly_32 = bigint_nondet_rem!(ctx, x122, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x124, x4, 67), x125, 67), x122, 67),
        284487,
        4,
    )?;
    let x126: BytePoly_35 = bigint_nondet_quot!(ctx, x123, x4, 35);
    let x127: BytePoly_32 = bigint_nondet_rem!(ctx, x123, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x126, x4, 67), x127, 67), x123, 67),
        284487,
        4,
    )?;
    let x128: BytePoly_64 = bigint_mul!(x89, x89, 64);
    let x129: BytePoly_66 = bigint_nondet_quot!(ctx, x128, x4, 66);
    let x130: BytePoly_32 = bigint_nondet_rem!(ctx, x128, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x129, x4, 98), x130, 98), x128, 98),
        536459,
        4,
    )?;
    let x131: BytePoly_33 = bigint_add!(bigint_mul!(x130, x0, 33), x3, 33);
    let x132: BytePoly_35 = bigint_nondet_quot!(ctx, x131, x4, 35);
    let x133: BytePoly_32 = bigint_nondet_rem!(ctx, x131, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x132, x4, 67), x133, 67), x131, 67),
        284487,
        4,
    )?;
    let x134: BytePoly_32 = bigint_add!(x95, x95, 32);
    let x135: BytePoly_32 = bigint_nondet_quot!(ctx, x134, x4, 32);
    let x136: BytePoly_32 = bigint_nondet_rem!(ctx, x134, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x135, x4, 64), x136, 64), x134, 64),
        260103,
        4,
    )?;
    let x137: BytePoly_32 = bigint_nondet_inv!(ctx, x136, x4, 32);
    let x138: BytePoly_64 = bigint_mul!(x136, x137, 64);
    let x139: BytePoly_66 = bigint_nondet_quot!(ctx, x138, x4, 66);
    let x140: BytePoly_32 = bigint_nondet_rem!(ctx, x138, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x139, x4, 98), x140, 98), x138, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x140, x6, 32), 34, 1)?;
    let x141: BytePoly_64 = bigint_mul!(x133, x137, 64);
    let x142: BytePoly_66 = bigint_nondet_quot!(ctx, x141, x4, 66);
    let x143: BytePoly_32 = bigint_nondet_rem!(ctx, x141, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x142, x4, 98), x143, 98), x141, 98),
        536459,
        4,
    )?;
    let x144: BytePoly_64 = bigint_mul!(x143, x89, 64);
    let x145: BytePoly_66 = bigint_nondet_quot!(ctx, x144, x4, 66);
    let x146: BytePoly_32 = bigint_nondet_rem!(ctx, x144, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x145, x4, 98), x146, 98), x144, 98),
        536459,
        4,
    )?;
    let x147: BytePoly_32 = bigint_add!(bigint_sub!(x95, x146, 32), x4, 32);
    let x148: BytePoly_32 = bigint_nondet_quot!(ctx, x147, x4, 32);
    let x149: BytePoly_32 = bigint_nondet_rem!(ctx, x147, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x148, x4, 64), x149, 64), x147, 64),
        260103,
        4,
    )?;
    let x150: BytePoly_64 = bigint_mul!(x143, x143, 64);
    let x151: BytePoly_66 = bigint_nondet_quot!(ctx, x150, x4, 66);
    let x152: BytePoly_32 = bigint_nondet_rem!(ctx, x150, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x151, x4, 98), x152, 98), x150, 98),
        536459,
        4,
    )?;
    let x153: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x152, x89, 32), x4, 32), x89, 32),
        x4,
        32
    );
    let x154: BytePoly_32 = bigint_nondet_quot!(ctx, x153, x4, 32);
    let x155: BytePoly_32 = bigint_nondet_rem!(ctx, x153, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x154, x4, 64), x155, 64), x153, 64),
        260103,
        4,
    )?;
    let x156: BytePoly_64 = bigint_mul!(x143, x155, 64);
    let x157: BytePoly_66 = bigint_nondet_quot!(ctx, x156, x4, 66);
    let x158: BytePoly_32 = bigint_nondet_rem!(ctx, x156, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x157, x4, 98), x158, 98), x156, 98),
        536459,
        4,
    )?;
    let x159: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x158, x149, 32), 32), x4, 32);
    let x160: BytePoly_32 = bigint_nondet_quot!(ctx, x159, x4, 32);
    let x161: BytePoly_32 = bigint_nondet_rem!(ctx, x159, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x160, x4, 64), x161, 64), x159, 64),
        260103,
        4,
    )?;
    let x162: BytePoly_1 = bigint_nondet_rem!(ctx, x97, x5, 1);
    let x163: BytePoly_32 = bigint_nondet_quot!(ctx, x97, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x163, x5, 33), x162, 33), x97, 33),
        260103,
        4,
    )?;
    let x164: BytePoly_1 = bigint_sub!(x6, x162, 1);
    eqz(ctx, &bigint_mul!(x162, x164, 2), 8131, 2)?;
    let x165: BytePoly_32 = bigint_add!(bigint_sub!(x155, x125, 32), x4, 32);
    let x166: BytePoly_32 = bigint_nondet_inv!(ctx, x165, x4, 32);
    let x167: BytePoly_64 = bigint_mul!(x165, x166, 64);
    let x168: BytePoly_66 = bigint_nondet_quot!(ctx, x167, x4, 66);
    let x169: BytePoly_32 = bigint_nondet_rem!(ctx, x167, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x168, x4, 98), x169, 98), x167, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x169, x1, 32), 34, 1)?;
    let x170: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x161, x127, 32), x4, 32), x166, 64);
    let x171: BytePoly_66 = bigint_nondet_quot!(ctx, x170, x4, 66);
    let x172: BytePoly_32 = bigint_nondet_rem!(ctx, x170, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x171, x4, 98), x172, 98), x170, 98),
        536459,
        4,
    )?;
    let x173: BytePoly_64 = bigint_mul!(x172, x125, 64);
    let x174: BytePoly_66 = bigint_nondet_quot!(ctx, x173, x4, 66);
    let x175: BytePoly_32 = bigint_nondet_rem!(ctx, x173, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x174, x4, 98), x175, 98), x173, 98),
        536459,
        4,
    )?;
    let x176: BytePoly_32 = bigint_add!(bigint_sub!(x127, x175, 32), x4, 32);
    let x177: BytePoly_32 = bigint_nondet_quot!(ctx, x176, x4, 32);
    let x178: BytePoly_32 = bigint_nondet_rem!(ctx, x176, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x177, x4, 64), x178, 64), x176, 64),
        260103,
        4,
    )?;
    let x179: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x172, x172, 64), x125, 64), x4, 64),
            x155,
            64
        ),
        x4,
        64
    );
    let x180: BytePoly_66 = bigint_nondet_quot!(ctx, x179, x4, 66);
    let x181: BytePoly_32 = bigint_nondet_rem!(ctx, x179, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x180, x4, 98), x181, 98), x179, 98),
        536459,
        4,
    )?;
    let x182: BytePoly_64 = bigint_mul!(x172, x181, 64);
    let x183: BytePoly_66 = bigint_nondet_quot!(ctx, x182, x4, 66);
    let x184: BytePoly_32 = bigint_nondet_rem!(ctx, x182, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x183, x4, 98), x184, 98), x182, 98),
        536459,
        4,
    )?;
    let x185: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x184, x178, 32), 32), x4, 32);
    let x186: BytePoly_32 = bigint_nondet_quot!(ctx, x185, x4, 32);
    let x187: BytePoly_32 = bigint_nondet_rem!(ctx, x185, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x186, x4, 64), x187, 64), x185, 64),
        260103,
        4,
    )?;
    let x188: BytePoly_33 =
        bigint_add!(bigint_mul!(x181, x162, 33), bigint_mul!(x125, x164, 33), 33);
    let x189: BytePoly_33 =
        bigint_add!(bigint_mul!(x187, x162, 33), bigint_mul!(x127, x164, 33), 33);
    let x190: BytePoly_35 = bigint_nondet_quot!(ctx, x188, x4, 35);
    let x191: BytePoly_32 = bigint_nondet_rem!(ctx, x188, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x190, x4, 67), x191, 67), x188, 67),
        284487,
        4,
    )?;
    let x192: BytePoly_35 = bigint_nondet_quot!(ctx, x189, x4, 35);
    let x193: BytePoly_32 = bigint_nondet_rem!(ctx, x189, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x192, x4, 67), x193, 67), x189, 67),
        284487,
        4,
    )?;
    let x194: BytePoly_64 = bigint_mul!(x155, x155, 64);
    let x195: BytePoly_66 = bigint_nondet_quot!(ctx, x194, x4, 66);
    let x196: BytePoly_32 = bigint_nondet_rem!(ctx, x194, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x195, x4, 98), x196, 98), x194, 98),
        536459,
        4,
    )?;
    let x197: BytePoly_33 = bigint_add!(bigint_mul!(x196, x0, 33), x3, 33);
    let x198: BytePoly_35 = bigint_nondet_quot!(ctx, x197, x4, 35);
    let x199: BytePoly_32 = bigint_nondet_rem!(ctx, x197, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x198, x4, 67), x199, 67), x197, 67),
        284487,
        4,
    )?;
    let x200: BytePoly_32 = bigint_add!(x161, x161, 32);
    let x201: BytePoly_32 = bigint_nondet_quot!(ctx, x200, x4, 32);
    let x202: BytePoly_32 = bigint_nondet_rem!(ctx, x200, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x201, x4, 64), x202, 64), x200, 64),
        260103,
        4,
    )?;
    let x203: BytePoly_32 = bigint_nondet_inv!(ctx, x202, x4, 32);
    let x204: BytePoly_64 = bigint_mul!(x202, x203, 64);
    let x205: BytePoly_66 = bigint_nondet_quot!(ctx, x204, x4, 66);
    let x206: BytePoly_32 = bigint_nondet_rem!(ctx, x204, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x205, x4, 98), x206, 98), x204, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x206, x6, 32), 34, 1)?;
    let x207: BytePoly_64 = bigint_mul!(x199, x203, 64);
    let x208: BytePoly_66 = bigint_nondet_quot!(ctx, x207, x4, 66);
    let x209: BytePoly_32 = bigint_nondet_rem!(ctx, x207, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x208, x4, 98), x209, 98), x207, 98),
        536459,
        4,
    )?;
    let x210: BytePoly_64 = bigint_mul!(x209, x155, 64);
    let x211: BytePoly_66 = bigint_nondet_quot!(ctx, x210, x4, 66);
    let x212: BytePoly_32 = bigint_nondet_rem!(ctx, x210, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x211, x4, 98), x212, 98), x210, 98),
        536459,
        4,
    )?;
    let x213: BytePoly_32 = bigint_add!(bigint_sub!(x161, x212, 32), x4, 32);
    let x214: BytePoly_32 = bigint_nondet_quot!(ctx, x213, x4, 32);
    let x215: BytePoly_32 = bigint_nondet_rem!(ctx, x213, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x214, x4, 64), x215, 64), x213, 64),
        260103,
        4,
    )?;
    let x216: BytePoly_64 = bigint_mul!(x209, x209, 64);
    let x217: BytePoly_66 = bigint_nondet_quot!(ctx, x216, x4, 66);
    let x218: BytePoly_32 = bigint_nondet_rem!(ctx, x216, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x217, x4, 98), x218, 98), x216, 98),
        536459,
        4,
    )?;
    let x219: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x218, x155, 32), x4, 32), x155, 32),
        x4,
        32
    );
    let x220: BytePoly_32 = bigint_nondet_quot!(ctx, x219, x4, 32);
    let x221: BytePoly_32 = bigint_nondet_rem!(ctx, x219, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x220, x4, 64), x221, 64), x219, 64),
        260103,
        4,
    )?;
    let x222: BytePoly_64 = bigint_mul!(x209, x221, 64);
    let x223: BytePoly_66 = bigint_nondet_quot!(ctx, x222, x4, 66);
    let x224: BytePoly_32 = bigint_nondet_rem!(ctx, x222, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x223, x4, 98), x224, 98), x222, 98),
        536459,
        4,
    )?;
    let x225: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x224, x215, 32), 32), x4, 32);
    let x226: BytePoly_32 = bigint_nondet_quot!(ctx, x225, x4, 32);
    let x227: BytePoly_32 = bigint_nondet_rem!(ctx, x225, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x226, x4, 64), x227, 64), x225, 64),
        260103,
        4,
    )?;
    let x228: BytePoly_1 = bigint_nondet_rem!(ctx, x163, x5, 1);
    let x229: BytePoly_32 = bigint_nondet_quot!(ctx, x163, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x229, x5, 33), x228, 33), x163, 33),
        260103,
        4,
    )?;
    let x230: BytePoly_1 = bigint_sub!(x6, x228, 1);
    eqz(ctx, &bigint_mul!(x228, x230, 2), 8131, 2)?;
    let x231: BytePoly_32 = bigint_add!(bigint_sub!(x221, x191, 32), x4, 32);
    let x232: BytePoly_32 = bigint_nondet_inv!(ctx, x231, x4, 32);
    let x233: BytePoly_64 = bigint_mul!(x231, x232, 64);
    let x234: BytePoly_66 = bigint_nondet_quot!(ctx, x233, x4, 66);
    let x235: BytePoly_32 = bigint_nondet_rem!(ctx, x233, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x234, x4, 98), x235, 98), x233, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x235, x1, 32), 34, 1)?;
    let x236: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x227, x193, 32), x4, 32), x232, 64);
    let x237: BytePoly_66 = bigint_nondet_quot!(ctx, x236, x4, 66);
    let x238: BytePoly_32 = bigint_nondet_rem!(ctx, x236, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x237, x4, 98), x238, 98), x236, 98),
        536459,
        4,
    )?;
    let x239: BytePoly_64 = bigint_mul!(x238, x191, 64);
    let x240: BytePoly_66 = bigint_nondet_quot!(ctx, x239, x4, 66);
    let x241: BytePoly_32 = bigint_nondet_rem!(ctx, x239, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x240, x4, 98), x241, 98), x239, 98),
        536459,
        4,
    )?;
    let x242: BytePoly_32 = bigint_add!(bigint_sub!(x193, x241, 32), x4, 32);
    let x243: BytePoly_32 = bigint_nondet_quot!(ctx, x242, x4, 32);
    let x244: BytePoly_32 = bigint_nondet_rem!(ctx, x242, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x243, x4, 64), x244, 64), x242, 64),
        260103,
        4,
    )?;
    let x245: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x238, x238, 64), x191, 64), x4, 64),
            x221,
            64
        ),
        x4,
        64
    );
    let x246: BytePoly_66 = bigint_nondet_quot!(ctx, x245, x4, 66);
    let x247: BytePoly_32 = bigint_nondet_rem!(ctx, x245, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x246, x4, 98), x247, 98), x245, 98),
        536459,
        4,
    )?;
    let x248: BytePoly_64 = bigint_mul!(x238, x247, 64);
    let x249: BytePoly_66 = bigint_nondet_quot!(ctx, x248, x4, 66);
    let x250: BytePoly_32 = bigint_nondet_rem!(ctx, x248, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x249, x4, 98), x250, 98), x248, 98),
        536459,
        4,
    )?;
    let x251: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x250, x244, 32), 32), x4, 32);
    let x252: BytePoly_32 = bigint_nondet_quot!(ctx, x251, x4, 32);
    let x253: BytePoly_32 = bigint_nondet_rem!(ctx, x251, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x252, x4, 64), x253, 64), x251, 64),
        260103,
        4,
    )?;
    let x254: BytePoly_33 =
        bigint_add!(bigint_mul!(x247, x228, 33), bigint_mul!(x191, x230, 33), 33);
    let x255: BytePoly_33 =
        bigint_add!(bigint_mul!(x253, x228, 33), bigint_mul!(x193, x230, 33), 33);
    let x256: BytePoly_35 = bigint_nondet_quot!(ctx, x254, x4, 35);
    let x257: BytePoly_32 = bigint_nondet_rem!(ctx, x254, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x256, x4, 67), x257, 67), x254, 67),
        284487,
        4,
    )?;
    let x258: BytePoly_35 = bigint_nondet_quot!(ctx, x255, x4, 35);
    let x259: BytePoly_32 = bigint_nondet_rem!(ctx, x255, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x258, x4, 67), x259, 67), x255, 67),
        284487,
        4,
    )?;
    let x260: BytePoly_64 = bigint_mul!(x221, x221, 64);
    let x261: BytePoly_66 = bigint_nondet_quot!(ctx, x260, x4, 66);
    let x262: BytePoly_32 = bigint_nondet_rem!(ctx, x260, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x261, x4, 98), x262, 98), x260, 98),
        536459,
        4,
    )?;
    let x263: BytePoly_33 = bigint_add!(bigint_mul!(x262, x0, 33), x3, 33);
    let x264: BytePoly_35 = bigint_nondet_quot!(ctx, x263, x4, 35);
    let x265: BytePoly_32 = bigint_nondet_rem!(ctx, x263, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x264, x4, 67), x265, 67), x263, 67),
        284487,
        4,
    )?;
    let x266: BytePoly_32 = bigint_add!(x227, x227, 32);
    let x267: BytePoly_32 = bigint_nondet_quot!(ctx, x266, x4, 32);
    let x268: BytePoly_32 = bigint_nondet_rem!(ctx, x266, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x267, x4, 64), x268, 64), x266, 64),
        260103,
        4,
    )?;
    let x269: BytePoly_32 = bigint_nondet_inv!(ctx, x268, x4, 32);
    let x270: BytePoly_64 = bigint_mul!(x268, x269, 64);
    let x271: BytePoly_66 = bigint_nondet_quot!(ctx, x270, x4, 66);
    let x272: BytePoly_32 = bigint_nondet_rem!(ctx, x270, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x271, x4, 98), x272, 98), x270, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x272, x6, 32), 34, 1)?;
    let x273: BytePoly_64 = bigint_mul!(x265, x269, 64);
    let x274: BytePoly_66 = bigint_nondet_quot!(ctx, x273, x4, 66);
    let x275: BytePoly_32 = bigint_nondet_rem!(ctx, x273, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x274, x4, 98), x275, 98), x273, 98),
        536459,
        4,
    )?;
    let x276: BytePoly_64 = bigint_mul!(x275, x221, 64);
    let x277: BytePoly_66 = bigint_nondet_quot!(ctx, x276, x4, 66);
    let x278: BytePoly_32 = bigint_nondet_rem!(ctx, x276, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x277, x4, 98), x278, 98), x276, 98),
        536459,
        4,
    )?;
    let x279: BytePoly_32 = bigint_add!(bigint_sub!(x227, x278, 32), x4, 32);
    let x280: BytePoly_32 = bigint_nondet_quot!(ctx, x279, x4, 32);
    let x281: BytePoly_32 = bigint_nondet_rem!(ctx, x279, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x280, x4, 64), x281, 64), x279, 64),
        260103,
        4,
    )?;
    let x282: BytePoly_64 = bigint_mul!(x275, x275, 64);
    let x283: BytePoly_66 = bigint_nondet_quot!(ctx, x282, x4, 66);
    let x284: BytePoly_32 = bigint_nondet_rem!(ctx, x282, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x283, x4, 98), x284, 98), x282, 98),
        536459,
        4,
    )?;
    let x285: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x284, x221, 32), x4, 32), x221, 32),
        x4,
        32
    );
    let x286: BytePoly_32 = bigint_nondet_quot!(ctx, x285, x4, 32);
    let x287: BytePoly_32 = bigint_nondet_rem!(ctx, x285, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x286, x4, 64), x287, 64), x285, 64),
        260103,
        4,
    )?;
    let x288: BytePoly_64 = bigint_mul!(x275, x287, 64);
    let x289: BytePoly_66 = bigint_nondet_quot!(ctx, x288, x4, 66);
    let x290: BytePoly_32 = bigint_nondet_rem!(ctx, x288, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x289, x4, 98), x290, 98), x288, 98),
        536459,
        4,
    )?;
    let x291: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x290, x281, 32), 32), x4, 32);
    let x292: BytePoly_32 = bigint_nondet_quot!(ctx, x291, x4, 32);
    let x293: BytePoly_32 = bigint_nondet_rem!(ctx, x291, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x292, x4, 64), x293, 64), x291, 64),
        260103,
        4,
    )?;
    let x294: BytePoly_1 = bigint_nondet_rem!(ctx, x229, x5, 1);
    let x295: BytePoly_32 = bigint_nondet_quot!(ctx, x229, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x295, x5, 33), x294, 33), x229, 33),
        260103,
        4,
    )?;
    let x296: BytePoly_1 = bigint_sub!(x6, x294, 1);
    eqz(ctx, &bigint_mul!(x294, x296, 2), 8131, 2)?;
    let x297: BytePoly_32 = bigint_add!(bigint_sub!(x287, x257, 32), x4, 32);
    let x298: BytePoly_32 = bigint_nondet_inv!(ctx, x297, x4, 32);
    let x299: BytePoly_64 = bigint_mul!(x297, x298, 64);
    let x300: BytePoly_66 = bigint_nondet_quot!(ctx, x299, x4, 66);
    let x301: BytePoly_32 = bigint_nondet_rem!(ctx, x299, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x300, x4, 98), x301, 98), x299, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x301, x1, 32), 34, 1)?;
    let x302: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x293, x259, 32), x4, 32), x298, 64);
    let x303: BytePoly_66 = bigint_nondet_quot!(ctx, x302, x4, 66);
    let x304: BytePoly_32 = bigint_nondet_rem!(ctx, x302, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x303, x4, 98), x304, 98), x302, 98),
        536459,
        4,
    )?;
    let x305: BytePoly_64 = bigint_mul!(x304, x257, 64);
    let x306: BytePoly_66 = bigint_nondet_quot!(ctx, x305, x4, 66);
    let x307: BytePoly_32 = bigint_nondet_rem!(ctx, x305, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x306, x4, 98), x307, 98), x305, 98),
        536459,
        4,
    )?;
    let x308: BytePoly_32 = bigint_add!(bigint_sub!(x259, x307, 32), x4, 32);
    let x309: BytePoly_32 = bigint_nondet_quot!(ctx, x308, x4, 32);
    let x310: BytePoly_32 = bigint_nondet_rem!(ctx, x308, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x309, x4, 64), x310, 64), x308, 64),
        260103,
        4,
    )?;
    let x311: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x304, x304, 64), x257, 64), x4, 64),
            x287,
            64
        ),
        x4,
        64
    );
    let x312: BytePoly_66 = bigint_nondet_quot!(ctx, x311, x4, 66);
    let x313: BytePoly_32 = bigint_nondet_rem!(ctx, x311, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x312, x4, 98), x313, 98), x311, 98),
        536459,
        4,
    )?;
    let x314: BytePoly_64 = bigint_mul!(x304, x313, 64);
    let x315: BytePoly_66 = bigint_nondet_quot!(ctx, x314, x4, 66);
    let x316: BytePoly_32 = bigint_nondet_rem!(ctx, x314, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x315, x4, 98), x316, 98), x314, 98),
        536459,
        4,
    )?;
    let x317: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x316, x310, 32), 32), x4, 32);
    let x318: BytePoly_32 = bigint_nondet_quot!(ctx, x317, x4, 32);
    let x319: BytePoly_32 = bigint_nondet_rem!(ctx, x317, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x318, x4, 64), x319, 64), x317, 64),
        260103,
        4,
    )?;
    let x320: BytePoly_33 =
        bigint_add!(bigint_mul!(x313, x294, 33), bigint_mul!(x257, x296, 33), 33);
    let x321: BytePoly_33 =
        bigint_add!(bigint_mul!(x319, x294, 33), bigint_mul!(x259, x296, 33), 33);
    let x322: BytePoly_35 = bigint_nondet_quot!(ctx, x320, x4, 35);
    let x323: BytePoly_32 = bigint_nondet_rem!(ctx, x320, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x322, x4, 67), x323, 67), x320, 67),
        284487,
        4,
    )?;
    let x324: BytePoly_35 = bigint_nondet_quot!(ctx, x321, x4, 35);
    let x325: BytePoly_32 = bigint_nondet_rem!(ctx, x321, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x324, x4, 67), x325, 67), x321, 67),
        284487,
        4,
    )?;
    let x326: BytePoly_64 = bigint_mul!(x287, x287, 64);
    let x327: BytePoly_66 = bigint_nondet_quot!(ctx, x326, x4, 66);
    let x328: BytePoly_32 = bigint_nondet_rem!(ctx, x326, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x327, x4, 98), x328, 98), x326, 98),
        536459,
        4,
    )?;
    let x329: BytePoly_33 = bigint_add!(bigint_mul!(x328, x0, 33), x3, 33);
    let x330: BytePoly_35 = bigint_nondet_quot!(ctx, x329, x4, 35);
    let x331: BytePoly_32 = bigint_nondet_rem!(ctx, x329, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x330, x4, 67), x331, 67), x329, 67),
        284487,
        4,
    )?;
    let x332: BytePoly_32 = bigint_add!(x293, x293, 32);
    let x333: BytePoly_32 = bigint_nondet_quot!(ctx, x332, x4, 32);
    let x334: BytePoly_32 = bigint_nondet_rem!(ctx, x332, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x333, x4, 64), x334, 64), x332, 64),
        260103,
        4,
    )?;
    let x335: BytePoly_32 = bigint_nondet_inv!(ctx, x334, x4, 32);
    let x336: BytePoly_64 = bigint_mul!(x334, x335, 64);
    let x337: BytePoly_66 = bigint_nondet_quot!(ctx, x336, x4, 66);
    let x338: BytePoly_32 = bigint_nondet_rem!(ctx, x336, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x337, x4, 98), x338, 98), x336, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x338, x6, 32), 34, 1)?;
    let x339: BytePoly_64 = bigint_mul!(x331, x335, 64);
    let x340: BytePoly_66 = bigint_nondet_quot!(ctx, x339, x4, 66);
    let x341: BytePoly_32 = bigint_nondet_rem!(ctx, x339, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x340, x4, 98), x341, 98), x339, 98),
        536459,
        4,
    )?;
    let x342: BytePoly_64 = bigint_mul!(x341, x287, 64);
    let x343: BytePoly_66 = bigint_nondet_quot!(ctx, x342, x4, 66);
    let x344: BytePoly_32 = bigint_nondet_rem!(ctx, x342, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x343, x4, 98), x344, 98), x342, 98),
        536459,
        4,
    )?;
    let x345: BytePoly_32 = bigint_add!(bigint_sub!(x293, x344, 32), x4, 32);
    let x346: BytePoly_32 = bigint_nondet_quot!(ctx, x345, x4, 32);
    let x347: BytePoly_32 = bigint_nondet_rem!(ctx, x345, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x346, x4, 64), x347, 64), x345, 64),
        260103,
        4,
    )?;
    let x348: BytePoly_64 = bigint_mul!(x341, x341, 64);
    let x349: BytePoly_66 = bigint_nondet_quot!(ctx, x348, x4, 66);
    let x350: BytePoly_32 = bigint_nondet_rem!(ctx, x348, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x349, x4, 98), x350, 98), x348, 98),
        536459,
        4,
    )?;
    let x351: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x350, x287, 32), x4, 32), x287, 32),
        x4,
        32
    );
    let x352: BytePoly_32 = bigint_nondet_quot!(ctx, x351, x4, 32);
    let x353: BytePoly_32 = bigint_nondet_rem!(ctx, x351, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x352, x4, 64), x353, 64), x351, 64),
        260103,
        4,
    )?;
    let x354: BytePoly_64 = bigint_mul!(x341, x353, 64);
    let x355: BytePoly_66 = bigint_nondet_quot!(ctx, x354, x4, 66);
    let x356: BytePoly_32 = bigint_nondet_rem!(ctx, x354, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x355, x4, 98), x356, 98), x354, 98),
        536459,
        4,
    )?;
    let x357: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x356, x347, 32), 32), x4, 32);
    let x358: BytePoly_32 = bigint_nondet_quot!(ctx, x357, x4, 32);
    let x359: BytePoly_32 = bigint_nondet_rem!(ctx, x357, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x358, x4, 64), x359, 64), x357, 64),
        260103,
        4,
    )?;
    let x360: BytePoly_1 = bigint_nondet_rem!(ctx, x295, x5, 1);
    let x361: BytePoly_32 = bigint_nondet_quot!(ctx, x295, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x361, x5, 33), x360, 33), x295, 33),
        260103,
        4,
    )?;
    let x362: BytePoly_1 = bigint_sub!(x6, x360, 1);
    eqz(ctx, &bigint_mul!(x360, x362, 2), 8131, 2)?;
    let x363: BytePoly_32 = bigint_add!(bigint_sub!(x353, x323, 32), x4, 32);
    let x364: BytePoly_32 = bigint_nondet_inv!(ctx, x363, x4, 32);
    let x365: BytePoly_64 = bigint_mul!(x363, x364, 64);
    let x366: BytePoly_66 = bigint_nondet_quot!(ctx, x365, x4, 66);
    let x367: BytePoly_32 = bigint_nondet_rem!(ctx, x365, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x366, x4, 98), x367, 98), x365, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x367, x1, 32), 34, 1)?;
    let x368: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x359, x325, 32), x4, 32), x364, 64);
    let x369: BytePoly_66 = bigint_nondet_quot!(ctx, x368, x4, 66);
    let x370: BytePoly_32 = bigint_nondet_rem!(ctx, x368, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x369, x4, 98), x370, 98), x368, 98),
        536459,
        4,
    )?;
    let x371: BytePoly_64 = bigint_mul!(x370, x323, 64);
    let x372: BytePoly_66 = bigint_nondet_quot!(ctx, x371, x4, 66);
    let x373: BytePoly_32 = bigint_nondet_rem!(ctx, x371, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x372, x4, 98), x373, 98), x371, 98),
        536459,
        4,
    )?;
    let x374: BytePoly_32 = bigint_add!(bigint_sub!(x325, x373, 32), x4, 32);
    let x375: BytePoly_32 = bigint_nondet_quot!(ctx, x374, x4, 32);
    let x376: BytePoly_32 = bigint_nondet_rem!(ctx, x374, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x375, x4, 64), x376, 64), x374, 64),
        260103,
        4,
    )?;
    let x377: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x370, x370, 64), x323, 64), x4, 64),
            x353,
            64
        ),
        x4,
        64
    );
    let x378: BytePoly_66 = bigint_nondet_quot!(ctx, x377, x4, 66);
    let x379: BytePoly_32 = bigint_nondet_rem!(ctx, x377, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x378, x4, 98), x379, 98), x377, 98),
        536459,
        4,
    )?;
    let x380: BytePoly_64 = bigint_mul!(x370, x379, 64);
    let x381: BytePoly_66 = bigint_nondet_quot!(ctx, x380, x4, 66);
    let x382: BytePoly_32 = bigint_nondet_rem!(ctx, x380, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x381, x4, 98), x382, 98), x380, 98),
        536459,
        4,
    )?;
    let x383: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x382, x376, 32), 32), x4, 32);
    let x384: BytePoly_32 = bigint_nondet_quot!(ctx, x383, x4, 32);
    let x385: BytePoly_32 = bigint_nondet_rem!(ctx, x383, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x384, x4, 64), x385, 64), x383, 64),
        260103,
        4,
    )?;
    let x386: BytePoly_33 =
        bigint_add!(bigint_mul!(x379, x360, 33), bigint_mul!(x323, x362, 33), 33);
    let x387: BytePoly_33 =
        bigint_add!(bigint_mul!(x385, x360, 33), bigint_mul!(x325, x362, 33), 33);
    let x388: BytePoly_35 = bigint_nondet_quot!(ctx, x386, x4, 35);
    let x389: BytePoly_32 = bigint_nondet_rem!(ctx, x386, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x388, x4, 67), x389, 67), x386, 67),
        284487,
        4,
    )?;
    let x390: BytePoly_35 = bigint_nondet_quot!(ctx, x387, x4, 35);
    let x391: BytePoly_32 = bigint_nondet_rem!(ctx, x387, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x390, x4, 67), x391, 67), x387, 67),
        284487,
        4,
    )?;
    let x392: BytePoly_64 = bigint_mul!(x353, x353, 64);
    let x393: BytePoly_66 = bigint_nondet_quot!(ctx, x392, x4, 66);
    let x394: BytePoly_32 = bigint_nondet_rem!(ctx, x392, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x393, x4, 98), x394, 98), x392, 98),
        536459,
        4,
    )?;
    let x395: BytePoly_33 = bigint_add!(bigint_mul!(x394, x0, 33), x3, 33);
    let x396: BytePoly_35 = bigint_nondet_quot!(ctx, x395, x4, 35);
    let x397: BytePoly_32 = bigint_nondet_rem!(ctx, x395, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x396, x4, 67), x397, 67), x395, 67),
        284487,
        4,
    )?;
    let x398: BytePoly_32 = bigint_add!(x359, x359, 32);
    let x399: BytePoly_32 = bigint_nondet_quot!(ctx, x398, x4, 32);
    let x400: BytePoly_32 = bigint_nondet_rem!(ctx, x398, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x399, x4, 64), x400, 64), x398, 64),
        260103,
        4,
    )?;
    let x401: BytePoly_32 = bigint_nondet_inv!(ctx, x400, x4, 32);
    let x402: BytePoly_64 = bigint_mul!(x400, x401, 64);
    let x403: BytePoly_66 = bigint_nondet_quot!(ctx, x402, x4, 66);
    let x404: BytePoly_32 = bigint_nondet_rem!(ctx, x402, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x403, x4, 98), x404, 98), x402, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x404, x6, 32), 34, 1)?;
    let x405: BytePoly_64 = bigint_mul!(x397, x401, 64);
    let x406: BytePoly_66 = bigint_nondet_quot!(ctx, x405, x4, 66);
    let x407: BytePoly_32 = bigint_nondet_rem!(ctx, x405, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x406, x4, 98), x407, 98), x405, 98),
        536459,
        4,
    )?;
    let x408: BytePoly_64 = bigint_mul!(x407, x353, 64);
    let x409: BytePoly_66 = bigint_nondet_quot!(ctx, x408, x4, 66);
    let x410: BytePoly_32 = bigint_nondet_rem!(ctx, x408, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x409, x4, 98), x410, 98), x408, 98),
        536459,
        4,
    )?;
    let x411: BytePoly_32 = bigint_add!(bigint_sub!(x359, x410, 32), x4, 32);
    let x412: BytePoly_32 = bigint_nondet_quot!(ctx, x411, x4, 32);
    let x413: BytePoly_32 = bigint_nondet_rem!(ctx, x411, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x412, x4, 64), x413, 64), x411, 64),
        260103,
        4,
    )?;
    let x414: BytePoly_64 = bigint_mul!(x407, x407, 64);
    let x415: BytePoly_66 = bigint_nondet_quot!(ctx, x414, x4, 66);
    let x416: BytePoly_32 = bigint_nondet_rem!(ctx, x414, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x415, x4, 98), x416, 98), x414, 98),
        536459,
        4,
    )?;
    let x417: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x416, x353, 32), x4, 32), x353, 32),
        x4,
        32
    );
    let x418: BytePoly_32 = bigint_nondet_quot!(ctx, x417, x4, 32);
    let x419: BytePoly_32 = bigint_nondet_rem!(ctx, x417, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x418, x4, 64), x419, 64), x417, 64),
        260103,
        4,
    )?;
    let x420: BytePoly_64 = bigint_mul!(x407, x419, 64);
    let x421: BytePoly_66 = bigint_nondet_quot!(ctx, x420, x4, 66);
    let x422: BytePoly_32 = bigint_nondet_rem!(ctx, x420, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x421, x4, 98), x422, 98), x420, 98),
        536459,
        4,
    )?;
    let x423: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x422, x413, 32), 32), x4, 32);
    let x424: BytePoly_32 = bigint_nondet_quot!(ctx, x423, x4, 32);
    let x425: BytePoly_32 = bigint_nondet_rem!(ctx, x423, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x424, x4, 64), x425, 64), x423, 64),
        260103,
        4,
    )?;
    let x426: BytePoly_1 = bigint_nondet_rem!(ctx, x361, x5, 1);
    let x427: BytePoly_32 = bigint_nondet_quot!(ctx, x361, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x427, x5, 33), x426, 33), x361, 33),
        260103,
        4,
    )?;
    let x428: BytePoly_1 = bigint_sub!(x6, x426, 1);
    eqz(ctx, &bigint_mul!(x426, x428, 2), 8131, 2)?;
    let x429: BytePoly_32 = bigint_add!(bigint_sub!(x419, x389, 32), x4, 32);
    let x430: BytePoly_32 = bigint_nondet_inv!(ctx, x429, x4, 32);
    let x431: BytePoly_64 = bigint_mul!(x429, x430, 64);
    let x432: BytePoly_66 = bigint_nondet_quot!(ctx, x431, x4, 66);
    let x433: BytePoly_32 = bigint_nondet_rem!(ctx, x431, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x432, x4, 98), x433, 98), x431, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x433, x1, 32), 34, 1)?;
    let x434: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x425, x391, 32), x4, 32), x430, 64);
    let x435: BytePoly_66 = bigint_nondet_quot!(ctx, x434, x4, 66);
    let x436: BytePoly_32 = bigint_nondet_rem!(ctx, x434, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x435, x4, 98), x436, 98), x434, 98),
        536459,
        4,
    )?;
    let x437: BytePoly_64 = bigint_mul!(x436, x389, 64);
    let x438: BytePoly_66 = bigint_nondet_quot!(ctx, x437, x4, 66);
    let x439: BytePoly_32 = bigint_nondet_rem!(ctx, x437, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x438, x4, 98), x439, 98), x437, 98),
        536459,
        4,
    )?;
    let x440: BytePoly_32 = bigint_add!(bigint_sub!(x391, x439, 32), x4, 32);
    let x441: BytePoly_32 = bigint_nondet_quot!(ctx, x440, x4, 32);
    let x442: BytePoly_32 = bigint_nondet_rem!(ctx, x440, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x441, x4, 64), x442, 64), x440, 64),
        260103,
        4,
    )?;
    let x443: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x436, x436, 64), x389, 64), x4, 64),
            x419,
            64
        ),
        x4,
        64
    );
    let x444: BytePoly_66 = bigint_nondet_quot!(ctx, x443, x4, 66);
    let x445: BytePoly_32 = bigint_nondet_rem!(ctx, x443, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x444, x4, 98), x445, 98), x443, 98),
        536459,
        4,
    )?;
    let x446: BytePoly_64 = bigint_mul!(x436, x445, 64);
    let x447: BytePoly_66 = bigint_nondet_quot!(ctx, x446, x4, 66);
    let x448: BytePoly_32 = bigint_nondet_rem!(ctx, x446, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x447, x4, 98), x448, 98), x446, 98),
        536459,
        4,
    )?;
    let x449: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x448, x442, 32), 32), x4, 32);
    let x450: BytePoly_32 = bigint_nondet_quot!(ctx, x449, x4, 32);
    let x451: BytePoly_32 = bigint_nondet_rem!(ctx, x449, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x450, x4, 64), x451, 64), x449, 64),
        260103,
        4,
    )?;
    let x452: BytePoly_33 =
        bigint_add!(bigint_mul!(x445, x426, 33), bigint_mul!(x389, x428, 33), 33);
    let x453: BytePoly_33 =
        bigint_add!(bigint_mul!(x451, x426, 33), bigint_mul!(x391, x428, 33), 33);
    let x454: BytePoly_35 = bigint_nondet_quot!(ctx, x452, x4, 35);
    let x455: BytePoly_32 = bigint_nondet_rem!(ctx, x452, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x454, x4, 67), x455, 67), x452, 67),
        284487,
        4,
    )?;
    let x456: BytePoly_35 = bigint_nondet_quot!(ctx, x453, x4, 35);
    let x457: BytePoly_32 = bigint_nondet_rem!(ctx, x453, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x456, x4, 67), x457, 67), x453, 67),
        284487,
        4,
    )?;
    let x458: BytePoly_64 = bigint_mul!(x419, x419, 64);
    let x459: BytePoly_66 = bigint_nondet_quot!(ctx, x458, x4, 66);
    let x460: BytePoly_32 = bigint_nondet_rem!(ctx, x458, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x459, x4, 98), x460, 98), x458, 98),
        536459,
        4,
    )?;
    let x461: BytePoly_33 = bigint_add!(bigint_mul!(x460, x0, 33), x3, 33);
    let x462: BytePoly_35 = bigint_nondet_quot!(ctx, x461, x4, 35);
    let x463: BytePoly_32 = bigint_nondet_rem!(ctx, x461, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x462, x4, 67), x463, 67), x461, 67),
        284487,
        4,
    )?;
    let x464: BytePoly_32 = bigint_add!(x425, x425, 32);
    let x465: BytePoly_32 = bigint_nondet_quot!(ctx, x464, x4, 32);
    let x466: BytePoly_32 = bigint_nondet_rem!(ctx, x464, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x465, x4, 64), x466, 64), x464, 64),
        260103,
        4,
    )?;
    let x467: BytePoly_32 = bigint_nondet_inv!(ctx, x466, x4, 32);
    let x468: BytePoly_64 = bigint_mul!(x466, x467, 64);
    let x469: BytePoly_66 = bigint_nondet_quot!(ctx, x468, x4, 66);
    let x470: BytePoly_32 = bigint_nondet_rem!(ctx, x468, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x469, x4, 98), x470, 98), x468, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x470, x6, 32), 34, 1)?;
    let x471: BytePoly_64 = bigint_mul!(x463, x467, 64);
    let x472: BytePoly_66 = bigint_nondet_quot!(ctx, x471, x4, 66);
    let x473: BytePoly_32 = bigint_nondet_rem!(ctx, x471, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x472, x4, 98), x473, 98), x471, 98),
        536459,
        4,
    )?;
    let x474: BytePoly_64 = bigint_mul!(x473, x419, 64);
    let x475: BytePoly_66 = bigint_nondet_quot!(ctx, x474, x4, 66);
    let x476: BytePoly_32 = bigint_nondet_rem!(ctx, x474, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x475, x4, 98), x476, 98), x474, 98),
        536459,
        4,
    )?;
    let x477: BytePoly_32 = bigint_add!(bigint_sub!(x425, x476, 32), x4, 32);
    let x478: BytePoly_32 = bigint_nondet_quot!(ctx, x477, x4, 32);
    let x479: BytePoly_32 = bigint_nondet_rem!(ctx, x477, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x478, x4, 64), x479, 64), x477, 64),
        260103,
        4,
    )?;
    let x480: BytePoly_64 = bigint_mul!(x473, x473, 64);
    let x481: BytePoly_66 = bigint_nondet_quot!(ctx, x480, x4, 66);
    let x482: BytePoly_32 = bigint_nondet_rem!(ctx, x480, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x481, x4, 98), x482, 98), x480, 98),
        536459,
        4,
    )?;
    let x483: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x482, x419, 32), x4, 32), x419, 32),
        x4,
        32
    );
    let x484: BytePoly_32 = bigint_nondet_quot!(ctx, x483, x4, 32);
    let x485: BytePoly_32 = bigint_nondet_rem!(ctx, x483, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x484, x4, 64), x485, 64), x483, 64),
        260103,
        4,
    )?;
    let x486: BytePoly_64 = bigint_mul!(x473, x485, 64);
    let x487: BytePoly_66 = bigint_nondet_quot!(ctx, x486, x4, 66);
    let x488: BytePoly_32 = bigint_nondet_rem!(ctx, x486, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x487, x4, 98), x488, 98), x486, 98),
        536459,
        4,
    )?;
    let x489: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x488, x479, 32), 32), x4, 32);
    let x490: BytePoly_32 = bigint_nondet_quot!(ctx, x489, x4, 32);
    let x491: BytePoly_32 = bigint_nondet_rem!(ctx, x489, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x490, x4, 64), x491, 64), x489, 64),
        260103,
        4,
    )?;
    let x492: BytePoly_1 = bigint_nondet_rem!(ctx, x427, x5, 1);
    let x493: BytePoly_32 = bigint_nondet_quot!(ctx, x427, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x493, x5, 33), x492, 33), x427, 33),
        260103,
        4,
    )?;
    let x494: BytePoly_1 = bigint_sub!(x6, x492, 1);
    eqz(ctx, &bigint_mul!(x492, x494, 2), 8131, 2)?;
    let x495: BytePoly_32 = bigint_add!(bigint_sub!(x485, x455, 32), x4, 32);
    let x496: BytePoly_32 = bigint_nondet_inv!(ctx, x495, x4, 32);
    let x497: BytePoly_64 = bigint_mul!(x495, x496, 64);
    let x498: BytePoly_66 = bigint_nondet_quot!(ctx, x497, x4, 66);
    let x499: BytePoly_32 = bigint_nondet_rem!(ctx, x497, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x498, x4, 98), x499, 98), x497, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x499, x1, 32), 34, 1)?;
    let x500: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x491, x457, 32), x4, 32), x496, 64);
    let x501: BytePoly_66 = bigint_nondet_quot!(ctx, x500, x4, 66);
    let x502: BytePoly_32 = bigint_nondet_rem!(ctx, x500, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x501, x4, 98), x502, 98), x500, 98),
        536459,
        4,
    )?;
    let x503: BytePoly_64 = bigint_mul!(x502, x455, 64);
    let x504: BytePoly_66 = bigint_nondet_quot!(ctx, x503, x4, 66);
    let x505: BytePoly_32 = bigint_nondet_rem!(ctx, x503, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x504, x4, 98), x505, 98), x503, 98),
        536459,
        4,
    )?;
    let x506: BytePoly_32 = bigint_add!(bigint_sub!(x457, x505, 32), x4, 32);
    let x507: BytePoly_32 = bigint_nondet_quot!(ctx, x506, x4, 32);
    let x508: BytePoly_32 = bigint_nondet_rem!(ctx, x506, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x507, x4, 64), x508, 64), x506, 64),
        260103,
        4,
    )?;
    let x509: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x502, x502, 64), x455, 64), x4, 64),
            x485,
            64
        ),
        x4,
        64
    );
    let x510: BytePoly_66 = bigint_nondet_quot!(ctx, x509, x4, 66);
    let x511: BytePoly_32 = bigint_nondet_rem!(ctx, x509, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x510, x4, 98), x511, 98), x509, 98),
        536459,
        4,
    )?;
    let x512: BytePoly_64 = bigint_mul!(x502, x511, 64);
    let x513: BytePoly_66 = bigint_nondet_quot!(ctx, x512, x4, 66);
    let x514: BytePoly_32 = bigint_nondet_rem!(ctx, x512, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x513, x4, 98), x514, 98), x512, 98),
        536459,
        4,
    )?;
    let x515: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x514, x508, 32), 32), x4, 32);
    let x516: BytePoly_32 = bigint_nondet_quot!(ctx, x515, x4, 32);
    let x517: BytePoly_32 = bigint_nondet_rem!(ctx, x515, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x516, x4, 64), x517, 64), x515, 64),
        260103,
        4,
    )?;
    let x518: BytePoly_33 =
        bigint_add!(bigint_mul!(x511, x492, 33), bigint_mul!(x455, x494, 33), 33);
    let x519: BytePoly_33 =
        bigint_add!(bigint_mul!(x517, x492, 33), bigint_mul!(x457, x494, 33), 33);
    let x520: BytePoly_35 = bigint_nondet_quot!(ctx, x518, x4, 35);
    let x521: BytePoly_32 = bigint_nondet_rem!(ctx, x518, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x520, x4, 67), x521, 67), x518, 67),
        284487,
        4,
    )?;
    let x522: BytePoly_35 = bigint_nondet_quot!(ctx, x519, x4, 35);
    let x523: BytePoly_32 = bigint_nondet_rem!(ctx, x519, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x522, x4, 67), x523, 67), x519, 67),
        284487,
        4,
    )?;
    let x524: BytePoly_64 = bigint_mul!(x485, x485, 64);
    let x525: BytePoly_66 = bigint_nondet_quot!(ctx, x524, x4, 66);
    let x526: BytePoly_32 = bigint_nondet_rem!(ctx, x524, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x525, x4, 98), x526, 98), x524, 98),
        536459,
        4,
    )?;
    let x527: BytePoly_33 = bigint_add!(bigint_mul!(x526, x0, 33), x3, 33);
    let x528: BytePoly_35 = bigint_nondet_quot!(ctx, x527, x4, 35);
    let x529: BytePoly_32 = bigint_nondet_rem!(ctx, x527, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x528, x4, 67), x529, 67), x527, 67),
        284487,
        4,
    )?;
    let x530: BytePoly_32 = bigint_add!(x491, x491, 32);
    let x531: BytePoly_32 = bigint_nondet_quot!(ctx, x530, x4, 32);
    let x532: BytePoly_32 = bigint_nondet_rem!(ctx, x530, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x531, x4, 64), x532, 64), x530, 64),
        260103,
        4,
    )?;
    let x533: BytePoly_32 = bigint_nondet_inv!(ctx, x532, x4, 32);
    let x534: BytePoly_64 = bigint_mul!(x532, x533, 64);
    let x535: BytePoly_66 = bigint_nondet_quot!(ctx, x534, x4, 66);
    let x536: BytePoly_32 = bigint_nondet_rem!(ctx, x534, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x535, x4, 98), x536, 98), x534, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x536, x6, 32), 34, 1)?;
    let x537: BytePoly_64 = bigint_mul!(x529, x533, 64);
    let x538: BytePoly_66 = bigint_nondet_quot!(ctx, x537, x4, 66);
    let x539: BytePoly_32 = bigint_nondet_rem!(ctx, x537, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x538, x4, 98), x539, 98), x537, 98),
        536459,
        4,
    )?;
    let x540: BytePoly_64 = bigint_mul!(x539, x485, 64);
    let x541: BytePoly_66 = bigint_nondet_quot!(ctx, x540, x4, 66);
    let x542: BytePoly_32 = bigint_nondet_rem!(ctx, x540, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x541, x4, 98), x542, 98), x540, 98),
        536459,
        4,
    )?;
    let x543: BytePoly_32 = bigint_add!(bigint_sub!(x491, x542, 32), x4, 32);
    let x544: BytePoly_32 = bigint_nondet_quot!(ctx, x543, x4, 32);
    let x545: BytePoly_32 = bigint_nondet_rem!(ctx, x543, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x544, x4, 64), x545, 64), x543, 64),
        260103,
        4,
    )?;
    let x546: BytePoly_64 = bigint_mul!(x539, x539, 64);
    let x547: BytePoly_66 = bigint_nondet_quot!(ctx, x546, x4, 66);
    let x548: BytePoly_32 = bigint_nondet_rem!(ctx, x546, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x547, x4, 98), x548, 98), x546, 98),
        536459,
        4,
    )?;
    let x549: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x548, x485, 32), x4, 32), x485, 32),
        x4,
        32
    );
    let x550: BytePoly_32 = bigint_nondet_quot!(ctx, x549, x4, 32);
    let x551: BytePoly_32 = bigint_nondet_rem!(ctx, x549, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x550, x4, 64), x551, 64), x549, 64),
        260103,
        4,
    )?;
    let x552: BytePoly_64 = bigint_mul!(x539, x551, 64);
    let x553: BytePoly_66 = bigint_nondet_quot!(ctx, x552, x4, 66);
    let x554: BytePoly_32 = bigint_nondet_rem!(ctx, x552, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x553, x4, 98), x554, 98), x552, 98),
        536459,
        4,
    )?;
    let x555: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x554, x545, 32), 32), x4, 32);
    let x556: BytePoly_32 = bigint_nondet_quot!(ctx, x555, x4, 32);
    let x557: BytePoly_32 = bigint_nondet_rem!(ctx, x555, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x556, x4, 64), x557, 64), x555, 64),
        260103,
        4,
    )?;
    let x558: BytePoly_1 = bigint_nondet_rem!(ctx, x493, x5, 1);
    let x559: BytePoly_32 = bigint_nondet_quot!(ctx, x493, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x559, x5, 33), x558, 33), x493, 33),
        260103,
        4,
    )?;
    let x560: BytePoly_1 = bigint_sub!(x6, x558, 1);
    eqz(ctx, &bigint_mul!(x558, x560, 2), 8131, 2)?;
    let x561: BytePoly_32 = bigint_add!(bigint_sub!(x551, x521, 32), x4, 32);
    let x562: BytePoly_32 = bigint_nondet_inv!(ctx, x561, x4, 32);
    let x563: BytePoly_64 = bigint_mul!(x561, x562, 64);
    let x564: BytePoly_66 = bigint_nondet_quot!(ctx, x563, x4, 66);
    let x565: BytePoly_32 = bigint_nondet_rem!(ctx, x563, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x564, x4, 98), x565, 98), x563, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x565, x1, 32), 34, 1)?;
    let x566: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x557, x523, 32), x4, 32), x562, 64);
    let x567: BytePoly_66 = bigint_nondet_quot!(ctx, x566, x4, 66);
    let x568: BytePoly_32 = bigint_nondet_rem!(ctx, x566, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x567, x4, 98), x568, 98), x566, 98),
        536459,
        4,
    )?;
    let x569: BytePoly_64 = bigint_mul!(x568, x521, 64);
    let x570: BytePoly_66 = bigint_nondet_quot!(ctx, x569, x4, 66);
    let x571: BytePoly_32 = bigint_nondet_rem!(ctx, x569, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x570, x4, 98), x571, 98), x569, 98),
        536459,
        4,
    )?;
    let x572: BytePoly_32 = bigint_add!(bigint_sub!(x523, x571, 32), x4, 32);
    let x573: BytePoly_32 = bigint_nondet_quot!(ctx, x572, x4, 32);
    let x574: BytePoly_32 = bigint_nondet_rem!(ctx, x572, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x573, x4, 64), x574, 64), x572, 64),
        260103,
        4,
    )?;
    let x575: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x568, x568, 64), x521, 64), x4, 64),
            x551,
            64
        ),
        x4,
        64
    );
    let x576: BytePoly_66 = bigint_nondet_quot!(ctx, x575, x4, 66);
    let x577: BytePoly_32 = bigint_nondet_rem!(ctx, x575, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x576, x4, 98), x577, 98), x575, 98),
        536459,
        4,
    )?;
    let x578: BytePoly_64 = bigint_mul!(x568, x577, 64);
    let x579: BytePoly_66 = bigint_nondet_quot!(ctx, x578, x4, 66);
    let x580: BytePoly_32 = bigint_nondet_rem!(ctx, x578, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x579, x4, 98), x580, 98), x578, 98),
        536459,
        4,
    )?;
    let x581: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x580, x574, 32), 32), x4, 32);
    let x582: BytePoly_32 = bigint_nondet_quot!(ctx, x581, x4, 32);
    let x583: BytePoly_32 = bigint_nondet_rem!(ctx, x581, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x582, x4, 64), x583, 64), x581, 64),
        260103,
        4,
    )?;
    let x584: BytePoly_33 =
        bigint_add!(bigint_mul!(x577, x558, 33), bigint_mul!(x521, x560, 33), 33);
    let x585: BytePoly_33 =
        bigint_add!(bigint_mul!(x583, x558, 33), bigint_mul!(x523, x560, 33), 33);
    let x586: BytePoly_35 = bigint_nondet_quot!(ctx, x584, x4, 35);
    let x587: BytePoly_32 = bigint_nondet_rem!(ctx, x584, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x586, x4, 67), x587, 67), x584, 67),
        284487,
        4,
    )?;
    let x588: BytePoly_35 = bigint_nondet_quot!(ctx, x585, x4, 35);
    let x589: BytePoly_32 = bigint_nondet_rem!(ctx, x585, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x588, x4, 67), x589, 67), x585, 67),
        284487,
        4,
    )?;
    let x590: BytePoly_64 = bigint_mul!(x551, x551, 64);
    let x591: BytePoly_66 = bigint_nondet_quot!(ctx, x590, x4, 66);
    let x592: BytePoly_32 = bigint_nondet_rem!(ctx, x590, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x591, x4, 98), x592, 98), x590, 98),
        536459,
        4,
    )?;
    let x593: BytePoly_33 = bigint_add!(bigint_mul!(x592, x0, 33), x3, 33);
    let x594: BytePoly_35 = bigint_nondet_quot!(ctx, x593, x4, 35);
    let x595: BytePoly_32 = bigint_nondet_rem!(ctx, x593, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x594, x4, 67), x595, 67), x593, 67),
        284487,
        4,
    )?;
    let x596: BytePoly_32 = bigint_add!(x557, x557, 32);
    let x597: BytePoly_32 = bigint_nondet_quot!(ctx, x596, x4, 32);
    let x598: BytePoly_32 = bigint_nondet_rem!(ctx, x596, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x597, x4, 64), x598, 64), x596, 64),
        260103,
        4,
    )?;
    let x599: BytePoly_32 = bigint_nondet_inv!(ctx, x598, x4, 32);
    let x600: BytePoly_64 = bigint_mul!(x598, x599, 64);
    let x601: BytePoly_66 = bigint_nondet_quot!(ctx, x600, x4, 66);
    let x602: BytePoly_32 = bigint_nondet_rem!(ctx, x600, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x601, x4, 98), x602, 98), x600, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x602, x6, 32), 34, 1)?;
    let x603: BytePoly_64 = bigint_mul!(x595, x599, 64);
    let x604: BytePoly_66 = bigint_nondet_quot!(ctx, x603, x4, 66);
    let x605: BytePoly_32 = bigint_nondet_rem!(ctx, x603, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x604, x4, 98), x605, 98), x603, 98),
        536459,
        4,
    )?;
    let x606: BytePoly_64 = bigint_mul!(x605, x551, 64);
    let x607: BytePoly_66 = bigint_nondet_quot!(ctx, x606, x4, 66);
    let x608: BytePoly_32 = bigint_nondet_rem!(ctx, x606, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x607, x4, 98), x608, 98), x606, 98),
        536459,
        4,
    )?;
    let x609: BytePoly_32 = bigint_add!(bigint_sub!(x557, x608, 32), x4, 32);
    let x610: BytePoly_32 = bigint_nondet_quot!(ctx, x609, x4, 32);
    let x611: BytePoly_32 = bigint_nondet_rem!(ctx, x609, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x610, x4, 64), x611, 64), x609, 64),
        260103,
        4,
    )?;
    let x612: BytePoly_64 = bigint_mul!(x605, x605, 64);
    let x613: BytePoly_66 = bigint_nondet_quot!(ctx, x612, x4, 66);
    let x614: BytePoly_32 = bigint_nondet_rem!(ctx, x612, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x613, x4, 98), x614, 98), x612, 98),
        536459,
        4,
    )?;
    let x615: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x614, x551, 32), x4, 32), x551, 32),
        x4,
        32
    );
    let x616: BytePoly_32 = bigint_nondet_quot!(ctx, x615, x4, 32);
    let x617: BytePoly_32 = bigint_nondet_rem!(ctx, x615, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x616, x4, 64), x617, 64), x615, 64),
        260103,
        4,
    )?;
    let x618: BytePoly_64 = bigint_mul!(x605, x617, 64);
    let x619: BytePoly_66 = bigint_nondet_quot!(ctx, x618, x4, 66);
    let x620: BytePoly_32 = bigint_nondet_rem!(ctx, x618, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x619, x4, 98), x620, 98), x618, 98),
        536459,
        4,
    )?;
    let x621: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x620, x611, 32), 32), x4, 32);
    let x622: BytePoly_32 = bigint_nondet_quot!(ctx, x621, x4, 32);
    let x623: BytePoly_32 = bigint_nondet_rem!(ctx, x621, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x622, x4, 64), x623, 64), x621, 64),
        260103,
        4,
    )?;
    let x624: BytePoly_1 = bigint_nondet_rem!(ctx, x559, x5, 1);
    let x625: BytePoly_32 = bigint_nondet_quot!(ctx, x559, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x625, x5, 33), x624, 33), x559, 33),
        260103,
        4,
    )?;
    let x626: BytePoly_1 = bigint_sub!(x6, x624, 1);
    eqz(ctx, &bigint_mul!(x624, x626, 2), 8131, 2)?;
    let x627: BytePoly_32 = bigint_add!(bigint_sub!(x617, x587, 32), x4, 32);
    let x628: BytePoly_32 = bigint_nondet_inv!(ctx, x627, x4, 32);
    let x629: BytePoly_64 = bigint_mul!(x627, x628, 64);
    let x630: BytePoly_66 = bigint_nondet_quot!(ctx, x629, x4, 66);
    let x631: BytePoly_32 = bigint_nondet_rem!(ctx, x629, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x630, x4, 98), x631, 98), x629, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x631, x1, 32), 34, 1)?;
    let x632: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x623, x589, 32), x4, 32), x628, 64);
    let x633: BytePoly_66 = bigint_nondet_quot!(ctx, x632, x4, 66);
    let x634: BytePoly_32 = bigint_nondet_rem!(ctx, x632, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x633, x4, 98), x634, 98), x632, 98),
        536459,
        4,
    )?;
    let x635: BytePoly_64 = bigint_mul!(x634, x587, 64);
    let x636: BytePoly_66 = bigint_nondet_quot!(ctx, x635, x4, 66);
    let x637: BytePoly_32 = bigint_nondet_rem!(ctx, x635, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x636, x4, 98), x637, 98), x635, 98),
        536459,
        4,
    )?;
    let x638: BytePoly_32 = bigint_add!(bigint_sub!(x589, x637, 32), x4, 32);
    let x639: BytePoly_32 = bigint_nondet_quot!(ctx, x638, x4, 32);
    let x640: BytePoly_32 = bigint_nondet_rem!(ctx, x638, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x639, x4, 64), x640, 64), x638, 64),
        260103,
        4,
    )?;
    let x641: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x634, x634, 64), x587, 64), x4, 64),
            x617,
            64
        ),
        x4,
        64
    );
    let x642: BytePoly_66 = bigint_nondet_quot!(ctx, x641, x4, 66);
    let x643: BytePoly_32 = bigint_nondet_rem!(ctx, x641, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x642, x4, 98), x643, 98), x641, 98),
        536459,
        4,
    )?;
    let x644: BytePoly_64 = bigint_mul!(x634, x643, 64);
    let x645: BytePoly_66 = bigint_nondet_quot!(ctx, x644, x4, 66);
    let x646: BytePoly_32 = bigint_nondet_rem!(ctx, x644, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x645, x4, 98), x646, 98), x644, 98),
        536459,
        4,
    )?;
    let x647: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x646, x640, 32), 32), x4, 32);
    let x648: BytePoly_32 = bigint_nondet_quot!(ctx, x647, x4, 32);
    let x649: BytePoly_32 = bigint_nondet_rem!(ctx, x647, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x648, x4, 64), x649, 64), x647, 64),
        260103,
        4,
    )?;
    let x650: BytePoly_33 =
        bigint_add!(bigint_mul!(x643, x624, 33), bigint_mul!(x587, x626, 33), 33);
    let x651: BytePoly_33 =
        bigint_add!(bigint_mul!(x649, x624, 33), bigint_mul!(x589, x626, 33), 33);
    let x652: BytePoly_35 = bigint_nondet_quot!(ctx, x650, x4, 35);
    let x653: BytePoly_32 = bigint_nondet_rem!(ctx, x650, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x652, x4, 67), x653, 67), x650, 67),
        284487,
        4,
    )?;
    let x654: BytePoly_35 = bigint_nondet_quot!(ctx, x651, x4, 35);
    let x655: BytePoly_32 = bigint_nondet_rem!(ctx, x651, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x654, x4, 67), x655, 67), x651, 67),
        284487,
        4,
    )?;
    let x656: BytePoly_64 = bigint_mul!(x617, x617, 64);
    let x657: BytePoly_66 = bigint_nondet_quot!(ctx, x656, x4, 66);
    let x658: BytePoly_32 = bigint_nondet_rem!(ctx, x656, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x657, x4, 98), x658, 98), x656, 98),
        536459,
        4,
    )?;
    let x659: BytePoly_33 = bigint_add!(bigint_mul!(x658, x0, 33), x3, 33);
    let x660: BytePoly_35 = bigint_nondet_quot!(ctx, x659, x4, 35);
    let x661: BytePoly_32 = bigint_nondet_rem!(ctx, x659, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x660, x4, 67), x661, 67), x659, 67),
        284487,
        4,
    )?;
    let x662: BytePoly_32 = bigint_add!(x623, x623, 32);
    let x663: BytePoly_32 = bigint_nondet_quot!(ctx, x662, x4, 32);
    let x664: BytePoly_32 = bigint_nondet_rem!(ctx, x662, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x663, x4, 64), x664, 64), x662, 64),
        260103,
        4,
    )?;
    let x665: BytePoly_32 = bigint_nondet_inv!(ctx, x664, x4, 32);
    let x666: BytePoly_64 = bigint_mul!(x664, x665, 64);
    let x667: BytePoly_66 = bigint_nondet_quot!(ctx, x666, x4, 66);
    let x668: BytePoly_32 = bigint_nondet_rem!(ctx, x666, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x667, x4, 98), x668, 98), x666, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x668, x6, 32), 34, 1)?;
    let x669: BytePoly_64 = bigint_mul!(x661, x665, 64);
    let x670: BytePoly_66 = bigint_nondet_quot!(ctx, x669, x4, 66);
    let x671: BytePoly_32 = bigint_nondet_rem!(ctx, x669, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x670, x4, 98), x671, 98), x669, 98),
        536459,
        4,
    )?;
    let x672: BytePoly_64 = bigint_mul!(x671, x617, 64);
    let x673: BytePoly_66 = bigint_nondet_quot!(ctx, x672, x4, 66);
    let x674: BytePoly_32 = bigint_nondet_rem!(ctx, x672, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x673, x4, 98), x674, 98), x672, 98),
        536459,
        4,
    )?;
    let x675: BytePoly_32 = bigint_add!(bigint_sub!(x623, x674, 32), x4, 32);
    let x676: BytePoly_32 = bigint_nondet_quot!(ctx, x675, x4, 32);
    let x677: BytePoly_32 = bigint_nondet_rem!(ctx, x675, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x676, x4, 64), x677, 64), x675, 64),
        260103,
        4,
    )?;
    let x678: BytePoly_64 = bigint_mul!(x671, x671, 64);
    let x679: BytePoly_66 = bigint_nondet_quot!(ctx, x678, x4, 66);
    let x680: BytePoly_32 = bigint_nondet_rem!(ctx, x678, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x679, x4, 98), x680, 98), x678, 98),
        536459,
        4,
    )?;
    let x681: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x680, x617, 32), x4, 32), x617, 32),
        x4,
        32
    );
    let x682: BytePoly_32 = bigint_nondet_quot!(ctx, x681, x4, 32);
    let x683: BytePoly_32 = bigint_nondet_rem!(ctx, x681, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x682, x4, 64), x683, 64), x681, 64),
        260103,
        4,
    )?;
    let x684: BytePoly_64 = bigint_mul!(x671, x683, 64);
    let x685: BytePoly_66 = bigint_nondet_quot!(ctx, x684, x4, 66);
    let x686: BytePoly_32 = bigint_nondet_rem!(ctx, x684, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x685, x4, 98), x686, 98), x684, 98),
        536459,
        4,
    )?;
    let x687: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x686, x677, 32), 32), x4, 32);
    let x688: BytePoly_32 = bigint_nondet_quot!(ctx, x687, x4, 32);
    let x689: BytePoly_32 = bigint_nondet_rem!(ctx, x687, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x688, x4, 64), x689, 64), x687, 64),
        260103,
        4,
    )?;
    let x690: BytePoly_1 = bigint_nondet_rem!(ctx, x625, x5, 1);
    let x691: BytePoly_32 = bigint_nondet_quot!(ctx, x625, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x691, x5, 33), x690, 33), x625, 33),
        260103,
        4,
    )?;
    let x692: BytePoly_1 = bigint_sub!(x6, x690, 1);
    eqz(ctx, &bigint_mul!(x690, x692, 2), 8131, 2)?;
    let x693: BytePoly_32 = bigint_add!(bigint_sub!(x683, x653, 32), x4, 32);
    let x694: BytePoly_32 = bigint_nondet_inv!(ctx, x693, x4, 32);
    let x695: BytePoly_64 = bigint_mul!(x693, x694, 64);
    let x696: BytePoly_66 = bigint_nondet_quot!(ctx, x695, x4, 66);
    let x697: BytePoly_32 = bigint_nondet_rem!(ctx, x695, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x696, x4, 98), x697, 98), x695, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x697, x1, 32), 34, 1)?;
    let x698: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x689, x655, 32), x4, 32), x694, 64);
    let x699: BytePoly_66 = bigint_nondet_quot!(ctx, x698, x4, 66);
    let x700: BytePoly_32 = bigint_nondet_rem!(ctx, x698, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x699, x4, 98), x700, 98), x698, 98),
        536459,
        4,
    )?;
    let x701: BytePoly_64 = bigint_mul!(x700, x653, 64);
    let x702: BytePoly_66 = bigint_nondet_quot!(ctx, x701, x4, 66);
    let x703: BytePoly_32 = bigint_nondet_rem!(ctx, x701, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x702, x4, 98), x703, 98), x701, 98),
        536459,
        4,
    )?;
    let x704: BytePoly_32 = bigint_add!(bigint_sub!(x655, x703, 32), x4, 32);
    let x705: BytePoly_32 = bigint_nondet_quot!(ctx, x704, x4, 32);
    let x706: BytePoly_32 = bigint_nondet_rem!(ctx, x704, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x705, x4, 64), x706, 64), x704, 64),
        260103,
        4,
    )?;
    let x707: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x700, x700, 64), x653, 64), x4, 64),
            x683,
            64
        ),
        x4,
        64
    );
    let x708: BytePoly_66 = bigint_nondet_quot!(ctx, x707, x4, 66);
    let x709: BytePoly_32 = bigint_nondet_rem!(ctx, x707, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x708, x4, 98), x709, 98), x707, 98),
        536459,
        4,
    )?;
    let x710: BytePoly_64 = bigint_mul!(x700, x709, 64);
    let x711: BytePoly_66 = bigint_nondet_quot!(ctx, x710, x4, 66);
    let x712: BytePoly_32 = bigint_nondet_rem!(ctx, x710, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x711, x4, 98), x712, 98), x710, 98),
        536459,
        4,
    )?;
    let x713: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x712, x706, 32), 32), x4, 32);
    let x714: BytePoly_32 = bigint_nondet_quot!(ctx, x713, x4, 32);
    let x715: BytePoly_32 = bigint_nondet_rem!(ctx, x713, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x714, x4, 64), x715, 64), x713, 64),
        260103,
        4,
    )?;
    let x716: BytePoly_33 =
        bigint_add!(bigint_mul!(x709, x690, 33), bigint_mul!(x653, x692, 33), 33);
    let x717: BytePoly_33 =
        bigint_add!(bigint_mul!(x715, x690, 33), bigint_mul!(x655, x692, 33), 33);
    let x718: BytePoly_35 = bigint_nondet_quot!(ctx, x716, x4, 35);
    let x719: BytePoly_32 = bigint_nondet_rem!(ctx, x716, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x718, x4, 67), x719, 67), x716, 67),
        284487,
        4,
    )?;
    let x720: BytePoly_35 = bigint_nondet_quot!(ctx, x717, x4, 35);
    let x721: BytePoly_32 = bigint_nondet_rem!(ctx, x717, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x720, x4, 67), x721, 67), x717, 67),
        284487,
        4,
    )?;
    let x722: BytePoly_64 = bigint_mul!(x683, x683, 64);
    let x723: BytePoly_66 = bigint_nondet_quot!(ctx, x722, x4, 66);
    let x724: BytePoly_32 = bigint_nondet_rem!(ctx, x722, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x723, x4, 98), x724, 98), x722, 98),
        536459,
        4,
    )?;
    let x725: BytePoly_33 = bigint_add!(bigint_mul!(x724, x0, 33), x3, 33);
    let x726: BytePoly_35 = bigint_nondet_quot!(ctx, x725, x4, 35);
    let x727: BytePoly_32 = bigint_nondet_rem!(ctx, x725, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x726, x4, 67), x727, 67), x725, 67),
        284487,
        4,
    )?;
    let x728: BytePoly_32 = bigint_add!(x689, x689, 32);
    let x729: BytePoly_32 = bigint_nondet_quot!(ctx, x728, x4, 32);
    let x730: BytePoly_32 = bigint_nondet_rem!(ctx, x728, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x729, x4, 64), x730, 64), x728, 64),
        260103,
        4,
    )?;
    let x731: BytePoly_32 = bigint_nondet_inv!(ctx, x730, x4, 32);
    let x732: BytePoly_64 = bigint_mul!(x730, x731, 64);
    let x733: BytePoly_66 = bigint_nondet_quot!(ctx, x732, x4, 66);
    let x734: BytePoly_32 = bigint_nondet_rem!(ctx, x732, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x733, x4, 98), x734, 98), x732, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x734, x6, 32), 34, 1)?;
    let x735: BytePoly_64 = bigint_mul!(x727, x731, 64);
    let x736: BytePoly_66 = bigint_nondet_quot!(ctx, x735, x4, 66);
    let x737: BytePoly_32 = bigint_nondet_rem!(ctx, x735, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x736, x4, 98), x737, 98), x735, 98),
        536459,
        4,
    )?;
    let x738: BytePoly_64 = bigint_mul!(x737, x683, 64);
    let x739: BytePoly_66 = bigint_nondet_quot!(ctx, x738, x4, 66);
    let x740: BytePoly_32 = bigint_nondet_rem!(ctx, x738, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x739, x4, 98), x740, 98), x738, 98),
        536459,
        4,
    )?;
    let x741: BytePoly_32 = bigint_add!(bigint_sub!(x689, x740, 32), x4, 32);
    let x742: BytePoly_32 = bigint_nondet_quot!(ctx, x741, x4, 32);
    let x743: BytePoly_32 = bigint_nondet_rem!(ctx, x741, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x742, x4, 64), x743, 64), x741, 64),
        260103,
        4,
    )?;
    let x744: BytePoly_64 = bigint_mul!(x737, x737, 64);
    let x745: BytePoly_66 = bigint_nondet_quot!(ctx, x744, x4, 66);
    let x746: BytePoly_32 = bigint_nondet_rem!(ctx, x744, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x745, x4, 98), x746, 98), x744, 98),
        536459,
        4,
    )?;
    let x747: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x746, x683, 32), x4, 32), x683, 32),
        x4,
        32
    );
    let x748: BytePoly_32 = bigint_nondet_quot!(ctx, x747, x4, 32);
    let x749: BytePoly_32 = bigint_nondet_rem!(ctx, x747, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x748, x4, 64), x749, 64), x747, 64),
        260103,
        4,
    )?;
    let x750: BytePoly_64 = bigint_mul!(x737, x749, 64);
    let x751: BytePoly_66 = bigint_nondet_quot!(ctx, x750, x4, 66);
    let x752: BytePoly_32 = bigint_nondet_rem!(ctx, x750, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x751, x4, 98), x752, 98), x750, 98),
        536459,
        4,
    )?;
    let x753: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x752, x743, 32), 32), x4, 32);
    let x754: BytePoly_32 = bigint_nondet_quot!(ctx, x753, x4, 32);
    let x755: BytePoly_32 = bigint_nondet_rem!(ctx, x753, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x754, x4, 64), x755, 64), x753, 64),
        260103,
        4,
    )?;
    let x756: BytePoly_1 = bigint_nondet_rem!(ctx, x691, x5, 1);
    let x757: BytePoly_32 = bigint_nondet_quot!(ctx, x691, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x757, x5, 33), x756, 33), x691, 33),
        260103,
        4,
    )?;
    let x758: BytePoly_1 = bigint_sub!(x6, x756, 1);
    eqz(ctx, &bigint_mul!(x756, x758, 2), 8131, 2)?;
    let x759: BytePoly_32 = bigint_add!(bigint_sub!(x749, x719, 32), x4, 32);
    let x760: BytePoly_32 = bigint_nondet_inv!(ctx, x759, x4, 32);
    let x761: BytePoly_64 = bigint_mul!(x759, x760, 64);
    let x762: BytePoly_66 = bigint_nondet_quot!(ctx, x761, x4, 66);
    let x763: BytePoly_32 = bigint_nondet_rem!(ctx, x761, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x762, x4, 98), x763, 98), x761, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x763, x1, 32), 34, 1)?;
    let x764: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x755, x721, 32), x4, 32), x760, 64);
    let x765: BytePoly_66 = bigint_nondet_quot!(ctx, x764, x4, 66);
    let x766: BytePoly_32 = bigint_nondet_rem!(ctx, x764, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x765, x4, 98), x766, 98), x764, 98),
        536459,
        4,
    )?;
    let x767: BytePoly_64 = bigint_mul!(x766, x719, 64);
    let x768: BytePoly_66 = bigint_nondet_quot!(ctx, x767, x4, 66);
    let x769: BytePoly_32 = bigint_nondet_rem!(ctx, x767, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x768, x4, 98), x769, 98), x767, 98),
        536459,
        4,
    )?;
    let x770: BytePoly_32 = bigint_add!(bigint_sub!(x721, x769, 32), x4, 32);
    let x771: BytePoly_32 = bigint_nondet_quot!(ctx, x770, x4, 32);
    let x772: BytePoly_32 = bigint_nondet_rem!(ctx, x770, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x771, x4, 64), x772, 64), x770, 64),
        260103,
        4,
    )?;
    let x773: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x766, x766, 64), x719, 64), x4, 64),
            x749,
            64
        ),
        x4,
        64
    );
    let x774: BytePoly_66 = bigint_nondet_quot!(ctx, x773, x4, 66);
    let x775: BytePoly_32 = bigint_nondet_rem!(ctx, x773, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x774, x4, 98), x775, 98), x773, 98),
        536459,
        4,
    )?;
    let x776: BytePoly_64 = bigint_mul!(x766, x775, 64);
    let x777: BytePoly_66 = bigint_nondet_quot!(ctx, x776, x4, 66);
    let x778: BytePoly_32 = bigint_nondet_rem!(ctx, x776, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x777, x4, 98), x778, 98), x776, 98),
        536459,
        4,
    )?;
    let x779: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x778, x772, 32), 32), x4, 32);
    let x780: BytePoly_32 = bigint_nondet_quot!(ctx, x779, x4, 32);
    let x781: BytePoly_32 = bigint_nondet_rem!(ctx, x779, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x780, x4, 64), x781, 64), x779, 64),
        260103,
        4,
    )?;
    let x782: BytePoly_33 =
        bigint_add!(bigint_mul!(x775, x756, 33), bigint_mul!(x719, x758, 33), 33);
    let x783: BytePoly_33 =
        bigint_add!(bigint_mul!(x781, x756, 33), bigint_mul!(x721, x758, 33), 33);
    let x784: BytePoly_35 = bigint_nondet_quot!(ctx, x782, x4, 35);
    let x785: BytePoly_32 = bigint_nondet_rem!(ctx, x782, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x784, x4, 67), x785, 67), x782, 67),
        284487,
        4,
    )?;
    let x786: BytePoly_35 = bigint_nondet_quot!(ctx, x783, x4, 35);
    let x787: BytePoly_32 = bigint_nondet_rem!(ctx, x783, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x786, x4, 67), x787, 67), x783, 67),
        284487,
        4,
    )?;
    let x788: BytePoly_64 = bigint_mul!(x749, x749, 64);
    let x789: BytePoly_66 = bigint_nondet_quot!(ctx, x788, x4, 66);
    let x790: BytePoly_32 = bigint_nondet_rem!(ctx, x788, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x789, x4, 98), x790, 98), x788, 98),
        536459,
        4,
    )?;
    let x791: BytePoly_33 = bigint_add!(bigint_mul!(x790, x0, 33), x3, 33);
    let x792: BytePoly_35 = bigint_nondet_quot!(ctx, x791, x4, 35);
    let x793: BytePoly_32 = bigint_nondet_rem!(ctx, x791, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x792, x4, 67), x793, 67), x791, 67),
        284487,
        4,
    )?;
    let x794: BytePoly_32 = bigint_add!(x755, x755, 32);
    let x795: BytePoly_32 = bigint_nondet_quot!(ctx, x794, x4, 32);
    let x796: BytePoly_32 = bigint_nondet_rem!(ctx, x794, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x795, x4, 64), x796, 64), x794, 64),
        260103,
        4,
    )?;
    let x797: BytePoly_32 = bigint_nondet_inv!(ctx, x796, x4, 32);
    let x798: BytePoly_64 = bigint_mul!(x796, x797, 64);
    let x799: BytePoly_66 = bigint_nondet_quot!(ctx, x798, x4, 66);
    let x800: BytePoly_32 = bigint_nondet_rem!(ctx, x798, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x799, x4, 98), x800, 98), x798, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x800, x6, 32), 34, 1)?;
    let x801: BytePoly_64 = bigint_mul!(x793, x797, 64);
    let x802: BytePoly_66 = bigint_nondet_quot!(ctx, x801, x4, 66);
    let x803: BytePoly_32 = bigint_nondet_rem!(ctx, x801, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x802, x4, 98), x803, 98), x801, 98),
        536459,
        4,
    )?;
    let x804: BytePoly_64 = bigint_mul!(x803, x749, 64);
    let x805: BytePoly_66 = bigint_nondet_quot!(ctx, x804, x4, 66);
    let x806: BytePoly_32 = bigint_nondet_rem!(ctx, x804, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x805, x4, 98), x806, 98), x804, 98),
        536459,
        4,
    )?;
    let x807: BytePoly_32 = bigint_add!(bigint_sub!(x755, x806, 32), x4, 32);
    let x808: BytePoly_32 = bigint_nondet_quot!(ctx, x807, x4, 32);
    let x809: BytePoly_32 = bigint_nondet_rem!(ctx, x807, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x808, x4, 64), x809, 64), x807, 64),
        260103,
        4,
    )?;
    let x810: BytePoly_64 = bigint_mul!(x803, x803, 64);
    let x811: BytePoly_66 = bigint_nondet_quot!(ctx, x810, x4, 66);
    let x812: BytePoly_32 = bigint_nondet_rem!(ctx, x810, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x811, x4, 98), x812, 98), x810, 98),
        536459,
        4,
    )?;
    let x813: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x812, x749, 32), x4, 32), x749, 32),
        x4,
        32
    );
    let x814: BytePoly_32 = bigint_nondet_quot!(ctx, x813, x4, 32);
    let x815: BytePoly_32 = bigint_nondet_rem!(ctx, x813, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x814, x4, 64), x815, 64), x813, 64),
        260103,
        4,
    )?;
    let x816: BytePoly_64 = bigint_mul!(x803, x815, 64);
    let x817: BytePoly_66 = bigint_nondet_quot!(ctx, x816, x4, 66);
    let x818: BytePoly_32 = bigint_nondet_rem!(ctx, x816, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x817, x4, 98), x818, 98), x816, 98),
        536459,
        4,
    )?;
    let x819: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x818, x809, 32), 32), x4, 32);
    let x820: BytePoly_32 = bigint_nondet_quot!(ctx, x819, x4, 32);
    let x821: BytePoly_32 = bigint_nondet_rem!(ctx, x819, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x820, x4, 64), x821, 64), x819, 64),
        260103,
        4,
    )?;
    let x822: BytePoly_1 = bigint_nondet_rem!(ctx, x757, x5, 1);
    let x823: BytePoly_32 = bigint_nondet_quot!(ctx, x757, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x823, x5, 33), x822, 33), x757, 33),
        260103,
        4,
    )?;
    let x824: BytePoly_1 = bigint_sub!(x6, x822, 1);
    eqz(ctx, &bigint_mul!(x822, x824, 2), 8131, 2)?;
    let x825: BytePoly_32 = bigint_add!(bigint_sub!(x815, x785, 32), x4, 32);
    let x826: BytePoly_32 = bigint_nondet_inv!(ctx, x825, x4, 32);
    let x827: BytePoly_64 = bigint_mul!(x825, x826, 64);
    let x828: BytePoly_66 = bigint_nondet_quot!(ctx, x827, x4, 66);
    let x829: BytePoly_32 = bigint_nondet_rem!(ctx, x827, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x828, x4, 98), x829, 98), x827, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x829, x1, 32), 34, 1)?;
    let x830: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x821, x787, 32), x4, 32), x826, 64);
    let x831: BytePoly_66 = bigint_nondet_quot!(ctx, x830, x4, 66);
    let x832: BytePoly_32 = bigint_nondet_rem!(ctx, x830, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x831, x4, 98), x832, 98), x830, 98),
        536459,
        4,
    )?;
    let x833: BytePoly_64 = bigint_mul!(x832, x785, 64);
    let x834: BytePoly_66 = bigint_nondet_quot!(ctx, x833, x4, 66);
    let x835: BytePoly_32 = bigint_nondet_rem!(ctx, x833, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x834, x4, 98), x835, 98), x833, 98),
        536459,
        4,
    )?;
    let x836: BytePoly_32 = bigint_add!(bigint_sub!(x787, x835, 32), x4, 32);
    let x837: BytePoly_32 = bigint_nondet_quot!(ctx, x836, x4, 32);
    let x838: BytePoly_32 = bigint_nondet_rem!(ctx, x836, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x837, x4, 64), x838, 64), x836, 64),
        260103,
        4,
    )?;
    let x839: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x832, x832, 64), x785, 64), x4, 64),
            x815,
            64
        ),
        x4,
        64
    );
    let x840: BytePoly_66 = bigint_nondet_quot!(ctx, x839, x4, 66);
    let x841: BytePoly_32 = bigint_nondet_rem!(ctx, x839, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x840, x4, 98), x841, 98), x839, 98),
        536459,
        4,
    )?;
    let x842: BytePoly_64 = bigint_mul!(x832, x841, 64);
    let x843: BytePoly_66 = bigint_nondet_quot!(ctx, x842, x4, 66);
    let x844: BytePoly_32 = bigint_nondet_rem!(ctx, x842, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x843, x4, 98), x844, 98), x842, 98),
        536459,
        4,
    )?;
    let x845: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x844, x838, 32), 32), x4, 32);
    let x846: BytePoly_32 = bigint_nondet_quot!(ctx, x845, x4, 32);
    let x847: BytePoly_32 = bigint_nondet_rem!(ctx, x845, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x846, x4, 64), x847, 64), x845, 64),
        260103,
        4,
    )?;
    let x848: BytePoly_33 =
        bigint_add!(bigint_mul!(x841, x822, 33), bigint_mul!(x785, x824, 33), 33);
    let x849: BytePoly_33 =
        bigint_add!(bigint_mul!(x847, x822, 33), bigint_mul!(x787, x824, 33), 33);
    let x850: BytePoly_35 = bigint_nondet_quot!(ctx, x848, x4, 35);
    let x851: BytePoly_32 = bigint_nondet_rem!(ctx, x848, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x850, x4, 67), x851, 67), x848, 67),
        284487,
        4,
    )?;
    let x852: BytePoly_35 = bigint_nondet_quot!(ctx, x849, x4, 35);
    let x853: BytePoly_32 = bigint_nondet_rem!(ctx, x849, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x852, x4, 67), x853, 67), x849, 67),
        284487,
        4,
    )?;
    let x854: BytePoly_64 = bigint_mul!(x815, x815, 64);
    let x855: BytePoly_66 = bigint_nondet_quot!(ctx, x854, x4, 66);
    let x856: BytePoly_32 = bigint_nondet_rem!(ctx, x854, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x855, x4, 98), x856, 98), x854, 98),
        536459,
        4,
    )?;
    let x857: BytePoly_33 = bigint_add!(bigint_mul!(x856, x0, 33), x3, 33);
    let x858: BytePoly_35 = bigint_nondet_quot!(ctx, x857, x4, 35);
    let x859: BytePoly_32 = bigint_nondet_rem!(ctx, x857, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x858, x4, 67), x859, 67), x857, 67),
        284487,
        4,
    )?;
    let x860: BytePoly_32 = bigint_add!(x821, x821, 32);
    let x861: BytePoly_32 = bigint_nondet_quot!(ctx, x860, x4, 32);
    let x862: BytePoly_32 = bigint_nondet_rem!(ctx, x860, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x861, x4, 64), x862, 64), x860, 64),
        260103,
        4,
    )?;
    let x863: BytePoly_32 = bigint_nondet_inv!(ctx, x862, x4, 32);
    let x864: BytePoly_64 = bigint_mul!(x862, x863, 64);
    let x865: BytePoly_66 = bigint_nondet_quot!(ctx, x864, x4, 66);
    let x866: BytePoly_32 = bigint_nondet_rem!(ctx, x864, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x865, x4, 98), x866, 98), x864, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x866, x6, 32), 34, 1)?;
    let x867: BytePoly_64 = bigint_mul!(x859, x863, 64);
    let x868: BytePoly_66 = bigint_nondet_quot!(ctx, x867, x4, 66);
    let x869: BytePoly_32 = bigint_nondet_rem!(ctx, x867, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x868, x4, 98), x869, 98), x867, 98),
        536459,
        4,
    )?;
    let x870: BytePoly_64 = bigint_mul!(x869, x815, 64);
    let x871: BytePoly_66 = bigint_nondet_quot!(ctx, x870, x4, 66);
    let x872: BytePoly_32 = bigint_nondet_rem!(ctx, x870, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x871, x4, 98), x872, 98), x870, 98),
        536459,
        4,
    )?;
    let x873: BytePoly_32 = bigint_add!(bigint_sub!(x821, x872, 32), x4, 32);
    let x874: BytePoly_32 = bigint_nondet_quot!(ctx, x873, x4, 32);
    let x875: BytePoly_32 = bigint_nondet_rem!(ctx, x873, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x874, x4, 64), x875, 64), x873, 64),
        260103,
        4,
    )?;
    let x876: BytePoly_64 = bigint_mul!(x869, x869, 64);
    let x877: BytePoly_66 = bigint_nondet_quot!(ctx, x876, x4, 66);
    let x878: BytePoly_32 = bigint_nondet_rem!(ctx, x876, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x877, x4, 98), x878, 98), x876, 98),
        536459,
        4,
    )?;
    let x879: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x878, x815, 32), x4, 32), x815, 32),
        x4,
        32
    );
    let x880: BytePoly_32 = bigint_nondet_quot!(ctx, x879, x4, 32);
    let x881: BytePoly_32 = bigint_nondet_rem!(ctx, x879, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x880, x4, 64), x881, 64), x879, 64),
        260103,
        4,
    )?;
    let x882: BytePoly_64 = bigint_mul!(x869, x881, 64);
    let x883: BytePoly_66 = bigint_nondet_quot!(ctx, x882, x4, 66);
    let x884: BytePoly_32 = bigint_nondet_rem!(ctx, x882, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x883, x4, 98), x884, 98), x882, 98),
        536459,
        4,
    )?;
    let x885: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x884, x875, 32), 32), x4, 32);
    let x886: BytePoly_32 = bigint_nondet_quot!(ctx, x885, x4, 32);
    let x887: BytePoly_32 = bigint_nondet_rem!(ctx, x885, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x886, x4, 64), x887, 64), x885, 64),
        260103,
        4,
    )?;
    let x888: BytePoly_1 = bigint_nondet_rem!(ctx, x823, x5, 1);
    let x889: BytePoly_32 = bigint_nondet_quot!(ctx, x823, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x889, x5, 33), x888, 33), x823, 33),
        260103,
        4,
    )?;
    let x890: BytePoly_1 = bigint_sub!(x6, x888, 1);
    eqz(ctx, &bigint_mul!(x888, x890, 2), 8131, 2)?;
    let x891: BytePoly_32 = bigint_add!(bigint_sub!(x881, x851, 32), x4, 32);
    let x892: BytePoly_32 = bigint_nondet_inv!(ctx, x891, x4, 32);
    let x893: BytePoly_64 = bigint_mul!(x891, x892, 64);
    let x894: BytePoly_66 = bigint_nondet_quot!(ctx, x893, x4, 66);
    let x895: BytePoly_32 = bigint_nondet_rem!(ctx, x893, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x894, x4, 98), x895, 98), x893, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x895, x1, 32), 34, 1)?;
    let x896: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x887, x853, 32), x4, 32), x892, 64);
    let x897: BytePoly_66 = bigint_nondet_quot!(ctx, x896, x4, 66);
    let x898: BytePoly_32 = bigint_nondet_rem!(ctx, x896, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x897, x4, 98), x898, 98), x896, 98),
        536459,
        4,
    )?;
    let x899: BytePoly_64 = bigint_mul!(x898, x851, 64);
    let x900: BytePoly_66 = bigint_nondet_quot!(ctx, x899, x4, 66);
    let x901: BytePoly_32 = bigint_nondet_rem!(ctx, x899, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x900, x4, 98), x901, 98), x899, 98),
        536459,
        4,
    )?;
    let x902: BytePoly_32 = bigint_add!(bigint_sub!(x853, x901, 32), x4, 32);
    let x903: BytePoly_32 = bigint_nondet_quot!(ctx, x902, x4, 32);
    let x904: BytePoly_32 = bigint_nondet_rem!(ctx, x902, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x903, x4, 64), x904, 64), x902, 64),
        260103,
        4,
    )?;
    let x905: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x898, x898, 64), x851, 64), x4, 64),
            x881,
            64
        ),
        x4,
        64
    );
    let x906: BytePoly_66 = bigint_nondet_quot!(ctx, x905, x4, 66);
    let x907: BytePoly_32 = bigint_nondet_rem!(ctx, x905, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x906, x4, 98), x907, 98), x905, 98),
        536459,
        4,
    )?;
    let x908: BytePoly_64 = bigint_mul!(x898, x907, 64);
    let x909: BytePoly_66 = bigint_nondet_quot!(ctx, x908, x4, 66);
    let x910: BytePoly_32 = bigint_nondet_rem!(ctx, x908, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x909, x4, 98), x910, 98), x908, 98),
        536459,
        4,
    )?;
    let x911: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x910, x904, 32), 32), x4, 32);
    let x912: BytePoly_32 = bigint_nondet_quot!(ctx, x911, x4, 32);
    let x913: BytePoly_32 = bigint_nondet_rem!(ctx, x911, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x912, x4, 64), x913, 64), x911, 64),
        260103,
        4,
    )?;
    let x914: BytePoly_33 =
        bigint_add!(bigint_mul!(x907, x888, 33), bigint_mul!(x851, x890, 33), 33);
    let x915: BytePoly_33 =
        bigint_add!(bigint_mul!(x913, x888, 33), bigint_mul!(x853, x890, 33), 33);
    let x916: BytePoly_35 = bigint_nondet_quot!(ctx, x914, x4, 35);
    let x917: BytePoly_32 = bigint_nondet_rem!(ctx, x914, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x916, x4, 67), x917, 67), x914, 67),
        284487,
        4,
    )?;
    let x918: BytePoly_35 = bigint_nondet_quot!(ctx, x915, x4, 35);
    let x919: BytePoly_32 = bigint_nondet_rem!(ctx, x915, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x918, x4, 67), x919, 67), x915, 67),
        284487,
        4,
    )?;
    let x920: BytePoly_64 = bigint_mul!(x881, x881, 64);
    let x921: BytePoly_66 = bigint_nondet_quot!(ctx, x920, x4, 66);
    let x922: BytePoly_32 = bigint_nondet_rem!(ctx, x920, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x921, x4, 98), x922, 98), x920, 98),
        536459,
        4,
    )?;
    let x923: BytePoly_33 = bigint_add!(bigint_mul!(x922, x0, 33), x3, 33);
    let x924: BytePoly_35 = bigint_nondet_quot!(ctx, x923, x4, 35);
    let x925: BytePoly_32 = bigint_nondet_rem!(ctx, x923, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x924, x4, 67), x925, 67), x923, 67),
        284487,
        4,
    )?;
    let x926: BytePoly_32 = bigint_add!(x887, x887, 32);
    let x927: BytePoly_32 = bigint_nondet_quot!(ctx, x926, x4, 32);
    let x928: BytePoly_32 = bigint_nondet_rem!(ctx, x926, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x927, x4, 64), x928, 64), x926, 64),
        260103,
        4,
    )?;
    let x929: BytePoly_32 = bigint_nondet_inv!(ctx, x928, x4, 32);
    let x930: BytePoly_64 = bigint_mul!(x928, x929, 64);
    let x931: BytePoly_66 = bigint_nondet_quot!(ctx, x930, x4, 66);
    let x932: BytePoly_32 = bigint_nondet_rem!(ctx, x930, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x931, x4, 98), x932, 98), x930, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x932, x6, 32), 34, 1)?;
    let x933: BytePoly_64 = bigint_mul!(x925, x929, 64);
    let x934: BytePoly_66 = bigint_nondet_quot!(ctx, x933, x4, 66);
    let x935: BytePoly_32 = bigint_nondet_rem!(ctx, x933, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x934, x4, 98), x935, 98), x933, 98),
        536459,
        4,
    )?;
    let x936: BytePoly_64 = bigint_mul!(x935, x881, 64);
    let x937: BytePoly_66 = bigint_nondet_quot!(ctx, x936, x4, 66);
    let x938: BytePoly_32 = bigint_nondet_rem!(ctx, x936, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x937, x4, 98), x938, 98), x936, 98),
        536459,
        4,
    )?;
    let x939: BytePoly_32 = bigint_add!(bigint_sub!(x887, x938, 32), x4, 32);
    let x940: BytePoly_32 = bigint_nondet_quot!(ctx, x939, x4, 32);
    let x941: BytePoly_32 = bigint_nondet_rem!(ctx, x939, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x940, x4, 64), x941, 64), x939, 64),
        260103,
        4,
    )?;
    let x942: BytePoly_64 = bigint_mul!(x935, x935, 64);
    let x943: BytePoly_66 = bigint_nondet_quot!(ctx, x942, x4, 66);
    let x944: BytePoly_32 = bigint_nondet_rem!(ctx, x942, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x943, x4, 98), x944, 98), x942, 98),
        536459,
        4,
    )?;
    let x945: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x944, x881, 32), x4, 32), x881, 32),
        x4,
        32
    );
    let x946: BytePoly_32 = bigint_nondet_quot!(ctx, x945, x4, 32);
    let x947: BytePoly_32 = bigint_nondet_rem!(ctx, x945, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x946, x4, 64), x947, 64), x945, 64),
        260103,
        4,
    )?;
    let x948: BytePoly_64 = bigint_mul!(x935, x947, 64);
    let x949: BytePoly_66 = bigint_nondet_quot!(ctx, x948, x4, 66);
    let x950: BytePoly_32 = bigint_nondet_rem!(ctx, x948, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x949, x4, 98), x950, 98), x948, 98),
        536459,
        4,
    )?;
    let x951: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x950, x941, 32), 32), x4, 32);
    let x952: BytePoly_32 = bigint_nondet_quot!(ctx, x951, x4, 32);
    let x953: BytePoly_32 = bigint_nondet_rem!(ctx, x951, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x952, x4, 64), x953, 64), x951, 64),
        260103,
        4,
    )?;
    let x954: BytePoly_1 = bigint_nondet_rem!(ctx, x889, x5, 1);
    let x955: BytePoly_32 = bigint_nondet_quot!(ctx, x889, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x955, x5, 33), x954, 33), x889, 33),
        260103,
        4,
    )?;
    let x956: BytePoly_1 = bigint_sub!(x6, x954, 1);
    eqz(ctx, &bigint_mul!(x954, x956, 2), 8131, 2)?;
    let x957: BytePoly_32 = bigint_add!(bigint_sub!(x947, x917, 32), x4, 32);
    let x958: BytePoly_32 = bigint_nondet_inv!(ctx, x957, x4, 32);
    let x959: BytePoly_64 = bigint_mul!(x957, x958, 64);
    let x960: BytePoly_66 = bigint_nondet_quot!(ctx, x959, x4, 66);
    let x961: BytePoly_32 = bigint_nondet_rem!(ctx, x959, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x960, x4, 98), x961, 98), x959, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x961, x1, 32), 34, 1)?;
    let x962: BytePoly_64 = bigint_mul!(bigint_add!(bigint_sub!(x953, x919, 32), x4, 32), x958, 64);
    let x963: BytePoly_66 = bigint_nondet_quot!(ctx, x962, x4, 66);
    let x964: BytePoly_32 = bigint_nondet_rem!(ctx, x962, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x963, x4, 98), x964, 98), x962, 98),
        536459,
        4,
    )?;
    let x965: BytePoly_64 = bigint_mul!(x964, x917, 64);
    let x966: BytePoly_66 = bigint_nondet_quot!(ctx, x965, x4, 66);
    let x967: BytePoly_32 = bigint_nondet_rem!(ctx, x965, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x966, x4, 98), x967, 98), x965, 98),
        536459,
        4,
    )?;
    let x968: BytePoly_32 = bigint_add!(bigint_sub!(x919, x967, 32), x4, 32);
    let x969: BytePoly_32 = bigint_nondet_quot!(ctx, x968, x4, 32);
    let x970: BytePoly_32 = bigint_nondet_rem!(ctx, x968, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x969, x4, 64), x970, 64), x968, 64),
        260103,
        4,
    )?;
    let x971: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x964, x964, 64), x917, 64), x4, 64),
            x947,
            64
        ),
        x4,
        64
    );
    let x972: BytePoly_66 = bigint_nondet_quot!(ctx, x971, x4, 66);
    let x973: BytePoly_32 = bigint_nondet_rem!(ctx, x971, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x972, x4, 98), x973, 98), x971, 98),
        536459,
        4,
    )?;
    let x974: BytePoly_64 = bigint_mul!(x964, x973, 64);
    let x975: BytePoly_66 = bigint_nondet_quot!(ctx, x974, x4, 66);
    let x976: BytePoly_32 = bigint_nondet_rem!(ctx, x974, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x975, x4, 98), x976, 98), x974, 98),
        536459,
        4,
    )?;
    let x977: BytePoly_32 = bigint_add!(bigint_sub!(x4, bigint_add!(x976, x970, 32), 32), x4, 32);
    let x978: BytePoly_32 = bigint_nondet_quot!(ctx, x977, x4, 32);
    let x979: BytePoly_32 = bigint_nondet_rem!(ctx, x977, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x978, x4, 64), x979, 64), x977, 64),
        260103,
        4,
    )?;
    let x980: BytePoly_33 =
        bigint_add!(bigint_mul!(x973, x954, 33), bigint_mul!(x917, x956, 33), 33);
    let x981: BytePoly_33 =
        bigint_add!(bigint_mul!(x979, x954, 33), bigint_mul!(x919, x956, 33), 33);
    let x982: BytePoly_35 = bigint_nondet_quot!(ctx, x980, x4, 35);
    let x983: BytePoly_32 = bigint_nondet_rem!(ctx, x980, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x982, x4, 67), x983, 67), x980, 67),
        284487,
        4,
    )?;
    let x984: BytePoly_35 = bigint_nondet_quot!(ctx, x981, x4, 35);
    let x985: BytePoly_32 = bigint_nondet_rem!(ctx, x981, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x984, x4, 67), x985, 67), x981, 67),
        284487,
        4,
    )?;
    let x986: BytePoly_64 = bigint_mul!(x947, x947, 64);
    let x987: BytePoly_66 = bigint_nondet_quot!(ctx, x986, x4, 66);
    let x988: BytePoly_32 = bigint_nondet_rem!(ctx, x986, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x987, x4, 98), x988, 98), x986, 98),
        536459,
        4,
    )?;
    let x989: BytePoly_33 = bigint_add!(bigint_mul!(x988, x0, 33), x3, 33);
    let x990: BytePoly_35 = bigint_nondet_quot!(ctx, x989, x4, 35);
    let x991: BytePoly_32 = bigint_nondet_rem!(ctx, x989, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x990, x4, 67), x991, 67), x989, 67),
        284487,
        4,
    )?;
    let x992: BytePoly_32 = bigint_add!(x953, x953, 32);
    let x993: BytePoly_32 = bigint_nondet_quot!(ctx, x992, x4, 32);
    let x994: BytePoly_32 = bigint_nondet_rem!(ctx, x992, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x993, x4, 64), x994, 64), x992, 64),
        260103,
        4,
    )?;
    let x995: BytePoly_32 = bigint_nondet_inv!(ctx, x994, x4, 32);
    let x996: BytePoly_64 = bigint_mul!(x994, x995, 64);
    let x997: BytePoly_66 = bigint_nondet_quot!(ctx, x996, x4, 66);
    let x998: BytePoly_32 = bigint_nondet_rem!(ctx, x996, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x997, x4, 98), x998, 98), x996, 98),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x998, x6, 32), 34, 1)?;
    let x999: BytePoly_64 = bigint_mul!(x991, x995, 64);
    let x1000: BytePoly_66 = bigint_nondet_quot!(ctx, x999, x4, 66);
    let x1001: BytePoly_32 = bigint_nondet_rem!(ctx, x999, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1000, x4, 98), x1001, 98), x999, 98),
        536459,
        4,
    )?;
    let x1002: BytePoly_64 = bigint_mul!(x1001, x947, 64);
    let x1003: BytePoly_66 = bigint_nondet_quot!(ctx, x1002, x4, 66);
    let x1004: BytePoly_32 = bigint_nondet_rem!(ctx, x1002, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1003, x4, 98), x1004, 98),
            x1002,
            98
        ),
        536459,
        4,
    )?;
    let x1005: BytePoly_32 = bigint_add!(bigint_sub!(x953, x1004, 32), x4, 32);
    let x1006: BytePoly_32 = bigint_nondet_quot!(ctx, x1005, x4, 32);
    let x1007: BytePoly_32 = bigint_nondet_rem!(ctx, x1005, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1006, x4, 64), x1007, 64),
            x1005,
            64
        ),
        260103,
        4,
    )?;
    let x1008: BytePoly_64 = bigint_mul!(x1001, x1001, 64);
    let x1009: BytePoly_66 = bigint_nondet_quot!(ctx, x1008, x4, 66);
    let x1010: BytePoly_32 = bigint_nondet_rem!(ctx, x1008, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1009, x4, 98), x1010, 98),
            x1008,
            98
        ),
        536459,
        4,
    )?;
    let x1011: BytePoly_32 = bigint_add!(
        bigint_sub!(bigint_add!(bigint_sub!(x1010, x947, 32), x4, 32), x947, 32),
        x4,
        32
    );
    let x1012: BytePoly_32 = bigint_nondet_quot!(ctx, x1011, x4, 32);
    let x1013: BytePoly_32 = bigint_nondet_rem!(ctx, x1011, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1012, x4, 64), x1013, 64),
            x1011,
            64
        ),
        260103,
        4,
    )?;
    let x1014: BytePoly_64 = bigint_mul!(x1001, x1013, 64);
    let x1015: BytePoly_66 = bigint_nondet_quot!(ctx, x1014, x4, 66);
    let x1016: BytePoly_32 = bigint_nondet_rem!(ctx, x1014, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1015, x4, 98), x1016, 98),
            x1014,
            98
        ),
        536459,
        4,
    )?;
    let x1017: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1016, x1007, 32), 32), x4, 32);
    let x1018: BytePoly_32 = bigint_nondet_quot!(ctx, x1017, x4, 32);
    let x1019: BytePoly_32 = bigint_nondet_rem!(ctx, x1017, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1018, x4, 64), x1019, 64),
            x1017,
            64
        ),
        260103,
        4,
    )?;
    let x1020: BytePoly_1 = bigint_nondet_rem!(ctx, x955, x5, 1);
    let x1021: BytePoly_32 = bigint_nondet_quot!(ctx, x955, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x1021, x5, 33), x1020, 33), x955, 33),
        260103,
        4,
    )?;
    let x1022: BytePoly_1 = bigint_sub!(x6, x1020, 1);
    eqz(ctx, &bigint_mul!(x1020, x1022, 2), 8131, 2)?;
    let x1023: BytePoly_32 = bigint_add!(bigint_sub!(x1013, x983, 32), x4, 32);
    let x1024: BytePoly_32 = bigint_nondet_inv!(ctx, x1023, x4, 32);
    let x1025: BytePoly_64 = bigint_mul!(x1023, x1024, 64);
    let x1026: BytePoly_66 = bigint_nondet_quot!(ctx, x1025, x4, 66);
    let x1027: BytePoly_32 = bigint_nondet_rem!(ctx, x1025, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1026, x4, 98), x1027, 98),
            x1025,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1027, x1, 32), 34, 1)?;
    let x1028: BytePoly_64 =
        bigint_mul!(bigint_add!(bigint_sub!(x1019, x985, 32), x4, 32), x1024, 64);
    let x1029: BytePoly_66 = bigint_nondet_quot!(ctx, x1028, x4, 66);
    let x1030: BytePoly_32 = bigint_nondet_rem!(ctx, x1028, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1029, x4, 98), x1030, 98),
            x1028,
            98
        ),
        536459,
        4,
    )?;
    let x1031: BytePoly_64 = bigint_mul!(x1030, x983, 64);
    let x1032: BytePoly_66 = bigint_nondet_quot!(ctx, x1031, x4, 66);
    let x1033: BytePoly_32 = bigint_nondet_rem!(ctx, x1031, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1032, x4, 98), x1033, 98),
            x1031,
            98
        ),
        536459,
        4,
    )?;
    let x1034: BytePoly_32 = bigint_add!(bigint_sub!(x985, x1033, 32), x4, 32);
    let x1035: BytePoly_32 = bigint_nondet_quot!(ctx, x1034, x4, 32);
    let x1036: BytePoly_32 = bigint_nondet_rem!(ctx, x1034, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1035, x4, 64), x1036, 64),
            x1034,
            64
        ),
        260103,
        4,
    )?;
    let x1037: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x1030, x1030, 64), x983, 64), x4, 64),
            x1013,
            64
        ),
        x4,
        64
    );
    let x1038: BytePoly_66 = bigint_nondet_quot!(ctx, x1037, x4, 66);
    let x1039: BytePoly_32 = bigint_nondet_rem!(ctx, x1037, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1038, x4, 98), x1039, 98),
            x1037,
            98
        ),
        536459,
        4,
    )?;
    let x1040: BytePoly_64 = bigint_mul!(x1030, x1039, 64);
    let x1041: BytePoly_66 = bigint_nondet_quot!(ctx, x1040, x4, 66);
    let x1042: BytePoly_32 = bigint_nondet_rem!(ctx, x1040, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1041, x4, 98), x1042, 98),
            x1040,
            98
        ),
        536459,
        4,
    )?;
    let x1043: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1042, x1036, 32), 32), x4, 32);
    let x1044: BytePoly_32 = bigint_nondet_quot!(ctx, x1043, x4, 32);
    let x1045: BytePoly_32 = bigint_nondet_rem!(ctx, x1043, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1044, x4, 64), x1045, 64),
            x1043,
            64
        ),
        260103,
        4,
    )?;
    let x1046: BytePoly_33 = bigint_add!(
        bigint_mul!(x1039, x1020, 33),
        bigint_mul!(x983, x1022, 33),
        33
    );
    let x1047: BytePoly_33 = bigint_add!(
        bigint_mul!(x1045, x1020, 33),
        bigint_mul!(x985, x1022, 33),
        33
    );
    let x1048: BytePoly_35 = bigint_nondet_quot!(ctx, x1046, x4, 35);
    let x1049: BytePoly_32 = bigint_nondet_rem!(ctx, x1046, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1048, x4, 67), x1049, 67),
            x1046,
            67
        ),
        284487,
        4,
    )?;
    let x1050: BytePoly_35 = bigint_nondet_quot!(ctx, x1047, x4, 35);
    let x1051: BytePoly_32 = bigint_nondet_rem!(ctx, x1047, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1050, x4, 67), x1051, 67),
            x1047,
            67
        ),
        284487,
        4,
    )?;
    let x1052: BytePoly_64 = bigint_mul!(x1013, x1013, 64);
    let x1053: BytePoly_66 = bigint_nondet_quot!(ctx, x1052, x4, 66);
    let x1054: BytePoly_32 = bigint_nondet_rem!(ctx, x1052, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1053, x4, 98), x1054, 98),
            x1052,
            98
        ),
        536459,
        4,
    )?;
    let x1055: BytePoly_33 = bigint_add!(bigint_mul!(x1054, x0, 33), x3, 33);
    let x1056: BytePoly_35 = bigint_nondet_quot!(ctx, x1055, x4, 35);
    let x1057: BytePoly_32 = bigint_nondet_rem!(ctx, x1055, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1056, x4, 67), x1057, 67),
            x1055,
            67
        ),
        284487,
        4,
    )?;
    let x1058: BytePoly_32 = bigint_add!(x1019, x1019, 32);
    let x1059: BytePoly_32 = bigint_nondet_quot!(ctx, x1058, x4, 32);
    let x1060: BytePoly_32 = bigint_nondet_rem!(ctx, x1058, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1059, x4, 64), x1060, 64),
            x1058,
            64
        ),
        260103,
        4,
    )?;
    let x1061: BytePoly_32 = bigint_nondet_inv!(ctx, x1060, x4, 32);
    let x1062: BytePoly_64 = bigint_mul!(x1060, x1061, 64);
    let x1063: BytePoly_66 = bigint_nondet_quot!(ctx, x1062, x4, 66);
    let x1064: BytePoly_32 = bigint_nondet_rem!(ctx, x1062, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1063, x4, 98), x1064, 98),
            x1062,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1064, x6, 32), 34, 1)?;
    let x1065: BytePoly_64 = bigint_mul!(x1057, x1061, 64);
    let x1066: BytePoly_66 = bigint_nondet_quot!(ctx, x1065, x4, 66);
    let x1067: BytePoly_32 = bigint_nondet_rem!(ctx, x1065, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1066, x4, 98), x1067, 98),
            x1065,
            98
        ),
        536459,
        4,
    )?;
    let x1068: BytePoly_64 = bigint_mul!(x1067, x1013, 64);
    let x1069: BytePoly_66 = bigint_nondet_quot!(ctx, x1068, x4, 66);
    let x1070: BytePoly_32 = bigint_nondet_rem!(ctx, x1068, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1069, x4, 98), x1070, 98),
            x1068,
            98
        ),
        536459,
        4,
    )?;
    let x1071: BytePoly_32 = bigint_add!(bigint_sub!(x1019, x1070, 32), x4, 32);
    let x1072: BytePoly_32 = bigint_nondet_quot!(ctx, x1071, x4, 32);
    let x1073: BytePoly_32 = bigint_nondet_rem!(ctx, x1071, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1072, x4, 64), x1073, 64),
            x1071,
            64
        ),
        260103,
        4,
    )?;
    let x1074: BytePoly_64 = bigint_mul!(x1067, x1067, 64);
    let x1075: BytePoly_66 = bigint_nondet_quot!(ctx, x1074, x4, 66);
    let x1076: BytePoly_32 = bigint_nondet_rem!(ctx, x1074, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1075, x4, 98), x1076, 98),
            x1074,
            98
        ),
        536459,
        4,
    )?;
    let x1077: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1076, x1013, 32), x4, 32),
            x1013,
            32
        ),
        x4,
        32
    );
    let x1078: BytePoly_32 = bigint_nondet_quot!(ctx, x1077, x4, 32);
    let x1079: BytePoly_32 = bigint_nondet_rem!(ctx, x1077, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1078, x4, 64), x1079, 64),
            x1077,
            64
        ),
        260103,
        4,
    )?;
    let x1080: BytePoly_64 = bigint_mul!(x1067, x1079, 64);
    let x1081: BytePoly_66 = bigint_nondet_quot!(ctx, x1080, x4, 66);
    let x1082: BytePoly_32 = bigint_nondet_rem!(ctx, x1080, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1081, x4, 98), x1082, 98),
            x1080,
            98
        ),
        536459,
        4,
    )?;
    let x1083: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1082, x1073, 32), 32), x4, 32);
    let x1084: BytePoly_32 = bigint_nondet_quot!(ctx, x1083, x4, 32);
    let x1085: BytePoly_32 = bigint_nondet_rem!(ctx, x1083, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1084, x4, 64), x1085, 64),
            x1083,
            64
        ),
        260103,
        4,
    )?;
    let x1086: BytePoly_1 = bigint_nondet_rem!(ctx, x1021, x5, 1);
    let x1087: BytePoly_32 = bigint_nondet_quot!(ctx, x1021, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1087, x5, 33), x1086, 33),
            x1021,
            33
        ),
        260103,
        4,
    )?;
    let x1088: BytePoly_1 = bigint_sub!(x6, x1086, 1);
    eqz(ctx, &bigint_mul!(x1086, x1088, 2), 8131, 2)?;
    let x1089: BytePoly_32 = bigint_add!(bigint_sub!(x1079, x1049, 32), x4, 32);
    let x1090: BytePoly_32 = bigint_nondet_inv!(ctx, x1089, x4, 32);
    let x1091: BytePoly_64 = bigint_mul!(x1089, x1090, 64);
    let x1092: BytePoly_66 = bigint_nondet_quot!(ctx, x1091, x4, 66);
    let x1093: BytePoly_32 = bigint_nondet_rem!(ctx, x1091, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1092, x4, 98), x1093, 98),
            x1091,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1093, x1, 32), 34, 1)?;
    let x1094: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1085, x1051, 32), x4, 32),
        x1090,
        64
    );
    let x1095: BytePoly_66 = bigint_nondet_quot!(ctx, x1094, x4, 66);
    let x1096: BytePoly_32 = bigint_nondet_rem!(ctx, x1094, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1095, x4, 98), x1096, 98),
            x1094,
            98
        ),
        536459,
        4,
    )?;
    let x1097: BytePoly_64 = bigint_mul!(x1096, x1049, 64);
    let x1098: BytePoly_66 = bigint_nondet_quot!(ctx, x1097, x4, 66);
    let x1099: BytePoly_32 = bigint_nondet_rem!(ctx, x1097, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1098, x4, 98), x1099, 98),
            x1097,
            98
        ),
        536459,
        4,
    )?;
    let x1100: BytePoly_32 = bigint_add!(bigint_sub!(x1051, x1099, 32), x4, 32);
    let x1101: BytePoly_32 = bigint_nondet_quot!(ctx, x1100, x4, 32);
    let x1102: BytePoly_32 = bigint_nondet_rem!(ctx, x1100, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1101, x4, 64), x1102, 64),
            x1100,
            64
        ),
        260103,
        4,
    )?;
    let x1103: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1096, x1096, 64), x1049, 64),
                x4,
                64
            ),
            x1079,
            64
        ),
        x4,
        64
    );
    let x1104: BytePoly_66 = bigint_nondet_quot!(ctx, x1103, x4, 66);
    let x1105: BytePoly_32 = bigint_nondet_rem!(ctx, x1103, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1104, x4, 98), x1105, 98),
            x1103,
            98
        ),
        536459,
        4,
    )?;
    let x1106: BytePoly_64 = bigint_mul!(x1096, x1105, 64);
    let x1107: BytePoly_66 = bigint_nondet_quot!(ctx, x1106, x4, 66);
    let x1108: BytePoly_32 = bigint_nondet_rem!(ctx, x1106, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1107, x4, 98), x1108, 98),
            x1106,
            98
        ),
        536459,
        4,
    )?;
    let x1109: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1108, x1102, 32), 32), x4, 32);
    let x1110: BytePoly_32 = bigint_nondet_quot!(ctx, x1109, x4, 32);
    let x1111: BytePoly_32 = bigint_nondet_rem!(ctx, x1109, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1110, x4, 64), x1111, 64),
            x1109,
            64
        ),
        260103,
        4,
    )?;
    let x1112: BytePoly_33 = bigint_add!(
        bigint_mul!(x1105, x1086, 33),
        bigint_mul!(x1049, x1088, 33),
        33
    );
    let x1113: BytePoly_33 = bigint_add!(
        bigint_mul!(x1111, x1086, 33),
        bigint_mul!(x1051, x1088, 33),
        33
    );
    let x1114: BytePoly_35 = bigint_nondet_quot!(ctx, x1112, x4, 35);
    let x1115: BytePoly_32 = bigint_nondet_rem!(ctx, x1112, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1114, x4, 67), x1115, 67),
            x1112,
            67
        ),
        284487,
        4,
    )?;
    let x1116: BytePoly_35 = bigint_nondet_quot!(ctx, x1113, x4, 35);
    let x1117: BytePoly_32 = bigint_nondet_rem!(ctx, x1113, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1116, x4, 67), x1117, 67),
            x1113,
            67
        ),
        284487,
        4,
    )?;
    let x1118: BytePoly_64 = bigint_mul!(x1079, x1079, 64);
    let x1119: BytePoly_66 = bigint_nondet_quot!(ctx, x1118, x4, 66);
    let x1120: BytePoly_32 = bigint_nondet_rem!(ctx, x1118, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1119, x4, 98), x1120, 98),
            x1118,
            98
        ),
        536459,
        4,
    )?;
    let x1121: BytePoly_33 = bigint_add!(bigint_mul!(x1120, x0, 33), x3, 33);
    let x1122: BytePoly_35 = bigint_nondet_quot!(ctx, x1121, x4, 35);
    let x1123: BytePoly_32 = bigint_nondet_rem!(ctx, x1121, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1122, x4, 67), x1123, 67),
            x1121,
            67
        ),
        284487,
        4,
    )?;
    let x1124: BytePoly_32 = bigint_add!(x1085, x1085, 32);
    let x1125: BytePoly_32 = bigint_nondet_quot!(ctx, x1124, x4, 32);
    let x1126: BytePoly_32 = bigint_nondet_rem!(ctx, x1124, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1125, x4, 64), x1126, 64),
            x1124,
            64
        ),
        260103,
        4,
    )?;
    let x1127: BytePoly_32 = bigint_nondet_inv!(ctx, x1126, x4, 32);
    let x1128: BytePoly_64 = bigint_mul!(x1126, x1127, 64);
    let x1129: BytePoly_66 = bigint_nondet_quot!(ctx, x1128, x4, 66);
    let x1130: BytePoly_32 = bigint_nondet_rem!(ctx, x1128, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1129, x4, 98), x1130, 98),
            x1128,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1130, x6, 32), 34, 1)?;
    let x1131: BytePoly_64 = bigint_mul!(x1123, x1127, 64);
    let x1132: BytePoly_66 = bigint_nondet_quot!(ctx, x1131, x4, 66);
    let x1133: BytePoly_32 = bigint_nondet_rem!(ctx, x1131, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1132, x4, 98), x1133, 98),
            x1131,
            98
        ),
        536459,
        4,
    )?;
    let x1134: BytePoly_64 = bigint_mul!(x1133, x1079, 64);
    let x1135: BytePoly_66 = bigint_nondet_quot!(ctx, x1134, x4, 66);
    let x1136: BytePoly_32 = bigint_nondet_rem!(ctx, x1134, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1135, x4, 98), x1136, 98),
            x1134,
            98
        ),
        536459,
        4,
    )?;
    let x1137: BytePoly_32 = bigint_add!(bigint_sub!(x1085, x1136, 32), x4, 32);
    let x1138: BytePoly_32 = bigint_nondet_quot!(ctx, x1137, x4, 32);
    let x1139: BytePoly_32 = bigint_nondet_rem!(ctx, x1137, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1138, x4, 64), x1139, 64),
            x1137,
            64
        ),
        260103,
        4,
    )?;
    let x1140: BytePoly_64 = bigint_mul!(x1133, x1133, 64);
    let x1141: BytePoly_66 = bigint_nondet_quot!(ctx, x1140, x4, 66);
    let x1142: BytePoly_32 = bigint_nondet_rem!(ctx, x1140, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1141, x4, 98), x1142, 98),
            x1140,
            98
        ),
        536459,
        4,
    )?;
    let x1143: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1142, x1079, 32), x4, 32),
            x1079,
            32
        ),
        x4,
        32
    );
    let x1144: BytePoly_32 = bigint_nondet_quot!(ctx, x1143, x4, 32);
    let x1145: BytePoly_32 = bigint_nondet_rem!(ctx, x1143, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1144, x4, 64), x1145, 64),
            x1143,
            64
        ),
        260103,
        4,
    )?;
    let x1146: BytePoly_64 = bigint_mul!(x1133, x1145, 64);
    let x1147: BytePoly_66 = bigint_nondet_quot!(ctx, x1146, x4, 66);
    let x1148: BytePoly_32 = bigint_nondet_rem!(ctx, x1146, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1147, x4, 98), x1148, 98),
            x1146,
            98
        ),
        536459,
        4,
    )?;
    let x1149: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1148, x1139, 32), 32), x4, 32);
    let x1150: BytePoly_32 = bigint_nondet_quot!(ctx, x1149, x4, 32);
    let x1151: BytePoly_32 = bigint_nondet_rem!(ctx, x1149, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1150, x4, 64), x1151, 64),
            x1149,
            64
        ),
        260103,
        4,
    )?;
    let x1152: BytePoly_1 = bigint_nondet_rem!(ctx, x1087, x5, 1);
    let x1153: BytePoly_32 = bigint_nondet_quot!(ctx, x1087, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1153, x5, 33), x1152, 33),
            x1087,
            33
        ),
        260103,
        4,
    )?;
    let x1154: BytePoly_1 = bigint_sub!(x6, x1152, 1);
    eqz(ctx, &bigint_mul!(x1152, x1154, 2), 8131, 2)?;
    let x1155: BytePoly_32 = bigint_add!(bigint_sub!(x1145, x1115, 32), x4, 32);
    let x1156: BytePoly_32 = bigint_nondet_inv!(ctx, x1155, x4, 32);
    let x1157: BytePoly_64 = bigint_mul!(x1155, x1156, 64);
    let x1158: BytePoly_66 = bigint_nondet_quot!(ctx, x1157, x4, 66);
    let x1159: BytePoly_32 = bigint_nondet_rem!(ctx, x1157, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1158, x4, 98), x1159, 98),
            x1157,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1159, x1, 32), 34, 1)?;
    let x1160: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1151, x1117, 32), x4, 32),
        x1156,
        64
    );
    let x1161: BytePoly_66 = bigint_nondet_quot!(ctx, x1160, x4, 66);
    let x1162: BytePoly_32 = bigint_nondet_rem!(ctx, x1160, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1161, x4, 98), x1162, 98),
            x1160,
            98
        ),
        536459,
        4,
    )?;
    let x1163: BytePoly_64 = bigint_mul!(x1162, x1115, 64);
    let x1164: BytePoly_66 = bigint_nondet_quot!(ctx, x1163, x4, 66);
    let x1165: BytePoly_32 = bigint_nondet_rem!(ctx, x1163, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1164, x4, 98), x1165, 98),
            x1163,
            98
        ),
        536459,
        4,
    )?;
    let x1166: BytePoly_32 = bigint_add!(bigint_sub!(x1117, x1165, 32), x4, 32);
    let x1167: BytePoly_32 = bigint_nondet_quot!(ctx, x1166, x4, 32);
    let x1168: BytePoly_32 = bigint_nondet_rem!(ctx, x1166, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1167, x4, 64), x1168, 64),
            x1166,
            64
        ),
        260103,
        4,
    )?;
    let x1169: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1162, x1162, 64), x1115, 64),
                x4,
                64
            ),
            x1145,
            64
        ),
        x4,
        64
    );
    let x1170: BytePoly_66 = bigint_nondet_quot!(ctx, x1169, x4, 66);
    let x1171: BytePoly_32 = bigint_nondet_rem!(ctx, x1169, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1170, x4, 98), x1171, 98),
            x1169,
            98
        ),
        536459,
        4,
    )?;
    let x1172: BytePoly_64 = bigint_mul!(x1162, x1171, 64);
    let x1173: BytePoly_66 = bigint_nondet_quot!(ctx, x1172, x4, 66);
    let x1174: BytePoly_32 = bigint_nondet_rem!(ctx, x1172, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1173, x4, 98), x1174, 98),
            x1172,
            98
        ),
        536459,
        4,
    )?;
    let x1175: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1174, x1168, 32), 32), x4, 32);
    let x1176: BytePoly_32 = bigint_nondet_quot!(ctx, x1175, x4, 32);
    let x1177: BytePoly_32 = bigint_nondet_rem!(ctx, x1175, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1176, x4, 64), x1177, 64),
            x1175,
            64
        ),
        260103,
        4,
    )?;
    let x1178: BytePoly_33 = bigint_add!(
        bigint_mul!(x1171, x1152, 33),
        bigint_mul!(x1115, x1154, 33),
        33
    );
    let x1179: BytePoly_33 = bigint_add!(
        bigint_mul!(x1177, x1152, 33),
        bigint_mul!(x1117, x1154, 33),
        33
    );
    let x1180: BytePoly_35 = bigint_nondet_quot!(ctx, x1178, x4, 35);
    let x1181: BytePoly_32 = bigint_nondet_rem!(ctx, x1178, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1180, x4, 67), x1181, 67),
            x1178,
            67
        ),
        284487,
        4,
    )?;
    let x1182: BytePoly_35 = bigint_nondet_quot!(ctx, x1179, x4, 35);
    let x1183: BytePoly_32 = bigint_nondet_rem!(ctx, x1179, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1182, x4, 67), x1183, 67),
            x1179,
            67
        ),
        284487,
        4,
    )?;
    let x1184: BytePoly_64 = bigint_mul!(x1145, x1145, 64);
    let x1185: BytePoly_66 = bigint_nondet_quot!(ctx, x1184, x4, 66);
    let x1186: BytePoly_32 = bigint_nondet_rem!(ctx, x1184, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1185, x4, 98), x1186, 98),
            x1184,
            98
        ),
        536459,
        4,
    )?;
    let x1187: BytePoly_33 = bigint_add!(bigint_mul!(x1186, x0, 33), x3, 33);
    let x1188: BytePoly_35 = bigint_nondet_quot!(ctx, x1187, x4, 35);
    let x1189: BytePoly_32 = bigint_nondet_rem!(ctx, x1187, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1188, x4, 67), x1189, 67),
            x1187,
            67
        ),
        284487,
        4,
    )?;
    let x1190: BytePoly_32 = bigint_add!(x1151, x1151, 32);
    let x1191: BytePoly_32 = bigint_nondet_quot!(ctx, x1190, x4, 32);
    let x1192: BytePoly_32 = bigint_nondet_rem!(ctx, x1190, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1191, x4, 64), x1192, 64),
            x1190,
            64
        ),
        260103,
        4,
    )?;
    let x1193: BytePoly_32 = bigint_nondet_inv!(ctx, x1192, x4, 32);
    let x1194: BytePoly_64 = bigint_mul!(x1192, x1193, 64);
    let x1195: BytePoly_66 = bigint_nondet_quot!(ctx, x1194, x4, 66);
    let x1196: BytePoly_32 = bigint_nondet_rem!(ctx, x1194, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1195, x4, 98), x1196, 98),
            x1194,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1196, x6, 32), 34, 1)?;
    let x1197: BytePoly_64 = bigint_mul!(x1189, x1193, 64);
    let x1198: BytePoly_66 = bigint_nondet_quot!(ctx, x1197, x4, 66);
    let x1199: BytePoly_32 = bigint_nondet_rem!(ctx, x1197, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1198, x4, 98), x1199, 98),
            x1197,
            98
        ),
        536459,
        4,
    )?;
    let x1200: BytePoly_64 = bigint_mul!(x1199, x1145, 64);
    let x1201: BytePoly_66 = bigint_nondet_quot!(ctx, x1200, x4, 66);
    let x1202: BytePoly_32 = bigint_nondet_rem!(ctx, x1200, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1201, x4, 98), x1202, 98),
            x1200,
            98
        ),
        536459,
        4,
    )?;
    let x1203: BytePoly_32 = bigint_add!(bigint_sub!(x1151, x1202, 32), x4, 32);
    let x1204: BytePoly_32 = bigint_nondet_quot!(ctx, x1203, x4, 32);
    let x1205: BytePoly_32 = bigint_nondet_rem!(ctx, x1203, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1204, x4, 64), x1205, 64),
            x1203,
            64
        ),
        260103,
        4,
    )?;
    let x1206: BytePoly_64 = bigint_mul!(x1199, x1199, 64);
    let x1207: BytePoly_66 = bigint_nondet_quot!(ctx, x1206, x4, 66);
    let x1208: BytePoly_32 = bigint_nondet_rem!(ctx, x1206, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1207, x4, 98), x1208, 98),
            x1206,
            98
        ),
        536459,
        4,
    )?;
    let x1209: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1208, x1145, 32), x4, 32),
            x1145,
            32
        ),
        x4,
        32
    );
    let x1210: BytePoly_32 = bigint_nondet_quot!(ctx, x1209, x4, 32);
    let x1211: BytePoly_32 = bigint_nondet_rem!(ctx, x1209, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1210, x4, 64), x1211, 64),
            x1209,
            64
        ),
        260103,
        4,
    )?;
    let x1212: BytePoly_64 = bigint_mul!(x1199, x1211, 64);
    let x1213: BytePoly_66 = bigint_nondet_quot!(ctx, x1212, x4, 66);
    let x1214: BytePoly_32 = bigint_nondet_rem!(ctx, x1212, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1213, x4, 98), x1214, 98),
            x1212,
            98
        ),
        536459,
        4,
    )?;
    let x1215: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1214, x1205, 32), 32), x4, 32);
    let x1216: BytePoly_32 = bigint_nondet_quot!(ctx, x1215, x4, 32);
    let x1217: BytePoly_32 = bigint_nondet_rem!(ctx, x1215, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1216, x4, 64), x1217, 64),
            x1215,
            64
        ),
        260103,
        4,
    )?;
    let x1218: BytePoly_1 = bigint_nondet_rem!(ctx, x1153, x5, 1);
    let x1219: BytePoly_32 = bigint_nondet_quot!(ctx, x1153, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1219, x5, 33), x1218, 33),
            x1153,
            33
        ),
        260103,
        4,
    )?;
    let x1220: BytePoly_1 = bigint_sub!(x6, x1218, 1);
    eqz(ctx, &bigint_mul!(x1218, x1220, 2), 8131, 2)?;
    let x1221: BytePoly_32 = bigint_add!(bigint_sub!(x1211, x1181, 32), x4, 32);
    let x1222: BytePoly_32 = bigint_nondet_inv!(ctx, x1221, x4, 32);
    let x1223: BytePoly_64 = bigint_mul!(x1221, x1222, 64);
    let x1224: BytePoly_66 = bigint_nondet_quot!(ctx, x1223, x4, 66);
    let x1225: BytePoly_32 = bigint_nondet_rem!(ctx, x1223, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1224, x4, 98), x1225, 98),
            x1223,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1225, x1, 32), 34, 1)?;
    let x1226: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1217, x1183, 32), x4, 32),
        x1222,
        64
    );
    let x1227: BytePoly_66 = bigint_nondet_quot!(ctx, x1226, x4, 66);
    let x1228: BytePoly_32 = bigint_nondet_rem!(ctx, x1226, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1227, x4, 98), x1228, 98),
            x1226,
            98
        ),
        536459,
        4,
    )?;
    let x1229: BytePoly_64 = bigint_mul!(x1228, x1181, 64);
    let x1230: BytePoly_66 = bigint_nondet_quot!(ctx, x1229, x4, 66);
    let x1231: BytePoly_32 = bigint_nondet_rem!(ctx, x1229, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1230, x4, 98), x1231, 98),
            x1229,
            98
        ),
        536459,
        4,
    )?;
    let x1232: BytePoly_32 = bigint_add!(bigint_sub!(x1183, x1231, 32), x4, 32);
    let x1233: BytePoly_32 = bigint_nondet_quot!(ctx, x1232, x4, 32);
    let x1234: BytePoly_32 = bigint_nondet_rem!(ctx, x1232, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1233, x4, 64), x1234, 64),
            x1232,
            64
        ),
        260103,
        4,
    )?;
    let x1235: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1228, x1228, 64), x1181, 64),
                x4,
                64
            ),
            x1211,
            64
        ),
        x4,
        64
    );
    let x1236: BytePoly_66 = bigint_nondet_quot!(ctx, x1235, x4, 66);
    let x1237: BytePoly_32 = bigint_nondet_rem!(ctx, x1235, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1236, x4, 98), x1237, 98),
            x1235,
            98
        ),
        536459,
        4,
    )?;
    let x1238: BytePoly_64 = bigint_mul!(x1228, x1237, 64);
    let x1239: BytePoly_66 = bigint_nondet_quot!(ctx, x1238, x4, 66);
    let x1240: BytePoly_32 = bigint_nondet_rem!(ctx, x1238, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1239, x4, 98), x1240, 98),
            x1238,
            98
        ),
        536459,
        4,
    )?;
    let x1241: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1240, x1234, 32), 32), x4, 32);
    let x1242: BytePoly_32 = bigint_nondet_quot!(ctx, x1241, x4, 32);
    let x1243: BytePoly_32 = bigint_nondet_rem!(ctx, x1241, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1242, x4, 64), x1243, 64),
            x1241,
            64
        ),
        260103,
        4,
    )?;
    let x1244: BytePoly_33 = bigint_add!(
        bigint_mul!(x1237, x1218, 33),
        bigint_mul!(x1181, x1220, 33),
        33
    );
    let x1245: BytePoly_33 = bigint_add!(
        bigint_mul!(x1243, x1218, 33),
        bigint_mul!(x1183, x1220, 33),
        33
    );
    let x1246: BytePoly_35 = bigint_nondet_quot!(ctx, x1244, x4, 35);
    let x1247: BytePoly_32 = bigint_nondet_rem!(ctx, x1244, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1246, x4, 67), x1247, 67),
            x1244,
            67
        ),
        284487,
        4,
    )?;
    let x1248: BytePoly_35 = bigint_nondet_quot!(ctx, x1245, x4, 35);
    let x1249: BytePoly_32 = bigint_nondet_rem!(ctx, x1245, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1248, x4, 67), x1249, 67),
            x1245,
            67
        ),
        284487,
        4,
    )?;
    let x1250: BytePoly_64 = bigint_mul!(x1211, x1211, 64);
    let x1251: BytePoly_66 = bigint_nondet_quot!(ctx, x1250, x4, 66);
    let x1252: BytePoly_32 = bigint_nondet_rem!(ctx, x1250, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1251, x4, 98), x1252, 98),
            x1250,
            98
        ),
        536459,
        4,
    )?;
    let x1253: BytePoly_33 = bigint_add!(bigint_mul!(x1252, x0, 33), x3, 33);
    let x1254: BytePoly_35 = bigint_nondet_quot!(ctx, x1253, x4, 35);
    let x1255: BytePoly_32 = bigint_nondet_rem!(ctx, x1253, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1254, x4, 67), x1255, 67),
            x1253,
            67
        ),
        284487,
        4,
    )?;
    let x1256: BytePoly_32 = bigint_add!(x1217, x1217, 32);
    let x1257: BytePoly_32 = bigint_nondet_quot!(ctx, x1256, x4, 32);
    let x1258: BytePoly_32 = bigint_nondet_rem!(ctx, x1256, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1257, x4, 64), x1258, 64),
            x1256,
            64
        ),
        260103,
        4,
    )?;
    let x1259: BytePoly_32 = bigint_nondet_inv!(ctx, x1258, x4, 32);
    let x1260: BytePoly_64 = bigint_mul!(x1258, x1259, 64);
    let x1261: BytePoly_66 = bigint_nondet_quot!(ctx, x1260, x4, 66);
    let x1262: BytePoly_32 = bigint_nondet_rem!(ctx, x1260, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1261, x4, 98), x1262, 98),
            x1260,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1262, x6, 32), 34, 1)?;
    let x1263: BytePoly_64 = bigint_mul!(x1255, x1259, 64);
    let x1264: BytePoly_66 = bigint_nondet_quot!(ctx, x1263, x4, 66);
    let x1265: BytePoly_32 = bigint_nondet_rem!(ctx, x1263, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1264, x4, 98), x1265, 98),
            x1263,
            98
        ),
        536459,
        4,
    )?;
    let x1266: BytePoly_64 = bigint_mul!(x1265, x1211, 64);
    let x1267: BytePoly_66 = bigint_nondet_quot!(ctx, x1266, x4, 66);
    let x1268: BytePoly_32 = bigint_nondet_rem!(ctx, x1266, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1267, x4, 98), x1268, 98),
            x1266,
            98
        ),
        536459,
        4,
    )?;
    let x1269: BytePoly_32 = bigint_add!(bigint_sub!(x1217, x1268, 32), x4, 32);
    let x1270: BytePoly_32 = bigint_nondet_quot!(ctx, x1269, x4, 32);
    let x1271: BytePoly_32 = bigint_nondet_rem!(ctx, x1269, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1270, x4, 64), x1271, 64),
            x1269,
            64
        ),
        260103,
        4,
    )?;
    let x1272: BytePoly_64 = bigint_mul!(x1265, x1265, 64);
    let x1273: BytePoly_66 = bigint_nondet_quot!(ctx, x1272, x4, 66);
    let x1274: BytePoly_32 = bigint_nondet_rem!(ctx, x1272, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1273, x4, 98), x1274, 98),
            x1272,
            98
        ),
        536459,
        4,
    )?;
    let x1275: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1274, x1211, 32), x4, 32),
            x1211,
            32
        ),
        x4,
        32
    );
    let x1276: BytePoly_32 = bigint_nondet_quot!(ctx, x1275, x4, 32);
    let x1277: BytePoly_32 = bigint_nondet_rem!(ctx, x1275, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1276, x4, 64), x1277, 64),
            x1275,
            64
        ),
        260103,
        4,
    )?;
    let x1278: BytePoly_64 = bigint_mul!(x1265, x1277, 64);
    let x1279: BytePoly_66 = bigint_nondet_quot!(ctx, x1278, x4, 66);
    let x1280: BytePoly_32 = bigint_nondet_rem!(ctx, x1278, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1279, x4, 98), x1280, 98),
            x1278,
            98
        ),
        536459,
        4,
    )?;
    let x1281: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1280, x1271, 32), 32), x4, 32);
    let x1282: BytePoly_32 = bigint_nondet_quot!(ctx, x1281, x4, 32);
    let x1283: BytePoly_32 = bigint_nondet_rem!(ctx, x1281, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1282, x4, 64), x1283, 64),
            x1281,
            64
        ),
        260103,
        4,
    )?;
    let x1284: BytePoly_1 = bigint_nondet_rem!(ctx, x1219, x5, 1);
    let x1285: BytePoly_32 = bigint_nondet_quot!(ctx, x1219, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1285, x5, 33), x1284, 33),
            x1219,
            33
        ),
        260103,
        4,
    )?;
    let x1286: BytePoly_1 = bigint_sub!(x6, x1284, 1);
    eqz(ctx, &bigint_mul!(x1284, x1286, 2), 8131, 2)?;
    let x1287: BytePoly_32 = bigint_add!(bigint_sub!(x1277, x1247, 32), x4, 32);
    let x1288: BytePoly_32 = bigint_nondet_inv!(ctx, x1287, x4, 32);
    let x1289: BytePoly_64 = bigint_mul!(x1287, x1288, 64);
    let x1290: BytePoly_66 = bigint_nondet_quot!(ctx, x1289, x4, 66);
    let x1291: BytePoly_32 = bigint_nondet_rem!(ctx, x1289, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1290, x4, 98), x1291, 98),
            x1289,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1291, x1, 32), 34, 1)?;
    let x1292: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1283, x1249, 32), x4, 32),
        x1288,
        64
    );
    let x1293: BytePoly_66 = bigint_nondet_quot!(ctx, x1292, x4, 66);
    let x1294: BytePoly_32 = bigint_nondet_rem!(ctx, x1292, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1293, x4, 98), x1294, 98),
            x1292,
            98
        ),
        536459,
        4,
    )?;
    let x1295: BytePoly_64 = bigint_mul!(x1294, x1247, 64);
    let x1296: BytePoly_66 = bigint_nondet_quot!(ctx, x1295, x4, 66);
    let x1297: BytePoly_32 = bigint_nondet_rem!(ctx, x1295, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1296, x4, 98), x1297, 98),
            x1295,
            98
        ),
        536459,
        4,
    )?;
    let x1298: BytePoly_32 = bigint_add!(bigint_sub!(x1249, x1297, 32), x4, 32);
    let x1299: BytePoly_32 = bigint_nondet_quot!(ctx, x1298, x4, 32);
    let x1300: BytePoly_32 = bigint_nondet_rem!(ctx, x1298, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1299, x4, 64), x1300, 64),
            x1298,
            64
        ),
        260103,
        4,
    )?;
    let x1301: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1294, x1294, 64), x1247, 64),
                x4,
                64
            ),
            x1277,
            64
        ),
        x4,
        64
    );
    let x1302: BytePoly_66 = bigint_nondet_quot!(ctx, x1301, x4, 66);
    let x1303: BytePoly_32 = bigint_nondet_rem!(ctx, x1301, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1302, x4, 98), x1303, 98),
            x1301,
            98
        ),
        536459,
        4,
    )?;
    let x1304: BytePoly_64 = bigint_mul!(x1294, x1303, 64);
    let x1305: BytePoly_66 = bigint_nondet_quot!(ctx, x1304, x4, 66);
    let x1306: BytePoly_32 = bigint_nondet_rem!(ctx, x1304, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1305, x4, 98), x1306, 98),
            x1304,
            98
        ),
        536459,
        4,
    )?;
    let x1307: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1306, x1300, 32), 32), x4, 32);
    let x1308: BytePoly_32 = bigint_nondet_quot!(ctx, x1307, x4, 32);
    let x1309: BytePoly_32 = bigint_nondet_rem!(ctx, x1307, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1308, x4, 64), x1309, 64),
            x1307,
            64
        ),
        260103,
        4,
    )?;
    let x1310: BytePoly_33 = bigint_add!(
        bigint_mul!(x1303, x1284, 33),
        bigint_mul!(x1247, x1286, 33),
        33
    );
    let x1311: BytePoly_33 = bigint_add!(
        bigint_mul!(x1309, x1284, 33),
        bigint_mul!(x1249, x1286, 33),
        33
    );
    let x1312: BytePoly_35 = bigint_nondet_quot!(ctx, x1310, x4, 35);
    let x1313: BytePoly_32 = bigint_nondet_rem!(ctx, x1310, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1312, x4, 67), x1313, 67),
            x1310,
            67
        ),
        284487,
        4,
    )?;
    let x1314: BytePoly_35 = bigint_nondet_quot!(ctx, x1311, x4, 35);
    let x1315: BytePoly_32 = bigint_nondet_rem!(ctx, x1311, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1314, x4, 67), x1315, 67),
            x1311,
            67
        ),
        284487,
        4,
    )?;
    let x1316: BytePoly_64 = bigint_mul!(x1277, x1277, 64);
    let x1317: BytePoly_66 = bigint_nondet_quot!(ctx, x1316, x4, 66);
    let x1318: BytePoly_32 = bigint_nondet_rem!(ctx, x1316, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1317, x4, 98), x1318, 98),
            x1316,
            98
        ),
        536459,
        4,
    )?;
    let x1319: BytePoly_33 = bigint_add!(bigint_mul!(x1318, x0, 33), x3, 33);
    let x1320: BytePoly_35 = bigint_nondet_quot!(ctx, x1319, x4, 35);
    let x1321: BytePoly_32 = bigint_nondet_rem!(ctx, x1319, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1320, x4, 67), x1321, 67),
            x1319,
            67
        ),
        284487,
        4,
    )?;
    let x1322: BytePoly_32 = bigint_add!(x1283, x1283, 32);
    let x1323: BytePoly_32 = bigint_nondet_quot!(ctx, x1322, x4, 32);
    let x1324: BytePoly_32 = bigint_nondet_rem!(ctx, x1322, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1323, x4, 64), x1324, 64),
            x1322,
            64
        ),
        260103,
        4,
    )?;
    let x1325: BytePoly_32 = bigint_nondet_inv!(ctx, x1324, x4, 32);
    let x1326: BytePoly_64 = bigint_mul!(x1324, x1325, 64);
    let x1327: BytePoly_66 = bigint_nondet_quot!(ctx, x1326, x4, 66);
    let x1328: BytePoly_32 = bigint_nondet_rem!(ctx, x1326, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1327, x4, 98), x1328, 98),
            x1326,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1328, x6, 32), 34, 1)?;
    let x1329: BytePoly_64 = bigint_mul!(x1321, x1325, 64);
    let x1330: BytePoly_66 = bigint_nondet_quot!(ctx, x1329, x4, 66);
    let x1331: BytePoly_32 = bigint_nondet_rem!(ctx, x1329, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1330, x4, 98), x1331, 98),
            x1329,
            98
        ),
        536459,
        4,
    )?;
    let x1332: BytePoly_64 = bigint_mul!(x1331, x1277, 64);
    let x1333: BytePoly_66 = bigint_nondet_quot!(ctx, x1332, x4, 66);
    let x1334: BytePoly_32 = bigint_nondet_rem!(ctx, x1332, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1333, x4, 98), x1334, 98),
            x1332,
            98
        ),
        536459,
        4,
    )?;
    let x1335: BytePoly_32 = bigint_add!(bigint_sub!(x1283, x1334, 32), x4, 32);
    let x1336: BytePoly_32 = bigint_nondet_quot!(ctx, x1335, x4, 32);
    let x1337: BytePoly_32 = bigint_nondet_rem!(ctx, x1335, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1336, x4, 64), x1337, 64),
            x1335,
            64
        ),
        260103,
        4,
    )?;
    let x1338: BytePoly_64 = bigint_mul!(x1331, x1331, 64);
    let x1339: BytePoly_66 = bigint_nondet_quot!(ctx, x1338, x4, 66);
    let x1340: BytePoly_32 = bigint_nondet_rem!(ctx, x1338, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1339, x4, 98), x1340, 98),
            x1338,
            98
        ),
        536459,
        4,
    )?;
    let x1341: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1340, x1277, 32), x4, 32),
            x1277,
            32
        ),
        x4,
        32
    );
    let x1342: BytePoly_32 = bigint_nondet_quot!(ctx, x1341, x4, 32);
    let x1343: BytePoly_32 = bigint_nondet_rem!(ctx, x1341, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1342, x4, 64), x1343, 64),
            x1341,
            64
        ),
        260103,
        4,
    )?;
    let x1344: BytePoly_64 = bigint_mul!(x1331, x1343, 64);
    let x1345: BytePoly_66 = bigint_nondet_quot!(ctx, x1344, x4, 66);
    let x1346: BytePoly_32 = bigint_nondet_rem!(ctx, x1344, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1345, x4, 98), x1346, 98),
            x1344,
            98
        ),
        536459,
        4,
    )?;
    let x1347: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1346, x1337, 32), 32), x4, 32);
    let x1348: BytePoly_32 = bigint_nondet_quot!(ctx, x1347, x4, 32);
    let x1349: BytePoly_32 = bigint_nondet_rem!(ctx, x1347, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1348, x4, 64), x1349, 64),
            x1347,
            64
        ),
        260103,
        4,
    )?;
    let x1350: BytePoly_1 = bigint_nondet_rem!(ctx, x1285, x5, 1);
    let x1351: BytePoly_32 = bigint_nondet_quot!(ctx, x1285, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1351, x5, 33), x1350, 33),
            x1285,
            33
        ),
        260103,
        4,
    )?;
    let x1352: BytePoly_1 = bigint_sub!(x6, x1350, 1);
    eqz(ctx, &bigint_mul!(x1350, x1352, 2), 8131, 2)?;
    let x1353: BytePoly_32 = bigint_add!(bigint_sub!(x1343, x1313, 32), x4, 32);
    let x1354: BytePoly_32 = bigint_nondet_inv!(ctx, x1353, x4, 32);
    let x1355: BytePoly_64 = bigint_mul!(x1353, x1354, 64);
    let x1356: BytePoly_66 = bigint_nondet_quot!(ctx, x1355, x4, 66);
    let x1357: BytePoly_32 = bigint_nondet_rem!(ctx, x1355, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1356, x4, 98), x1357, 98),
            x1355,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1357, x1, 32), 34, 1)?;
    let x1358: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1349, x1315, 32), x4, 32),
        x1354,
        64
    );
    let x1359: BytePoly_66 = bigint_nondet_quot!(ctx, x1358, x4, 66);
    let x1360: BytePoly_32 = bigint_nondet_rem!(ctx, x1358, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1359, x4, 98), x1360, 98),
            x1358,
            98
        ),
        536459,
        4,
    )?;
    let x1361: BytePoly_64 = bigint_mul!(x1360, x1313, 64);
    let x1362: BytePoly_66 = bigint_nondet_quot!(ctx, x1361, x4, 66);
    let x1363: BytePoly_32 = bigint_nondet_rem!(ctx, x1361, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1362, x4, 98), x1363, 98),
            x1361,
            98
        ),
        536459,
        4,
    )?;
    let x1364: BytePoly_32 = bigint_add!(bigint_sub!(x1315, x1363, 32), x4, 32);
    let x1365: BytePoly_32 = bigint_nondet_quot!(ctx, x1364, x4, 32);
    let x1366: BytePoly_32 = bigint_nondet_rem!(ctx, x1364, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1365, x4, 64), x1366, 64),
            x1364,
            64
        ),
        260103,
        4,
    )?;
    let x1367: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1360, x1360, 64), x1313, 64),
                x4,
                64
            ),
            x1343,
            64
        ),
        x4,
        64
    );
    let x1368: BytePoly_66 = bigint_nondet_quot!(ctx, x1367, x4, 66);
    let x1369: BytePoly_32 = bigint_nondet_rem!(ctx, x1367, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1368, x4, 98), x1369, 98),
            x1367,
            98
        ),
        536459,
        4,
    )?;
    let x1370: BytePoly_64 = bigint_mul!(x1360, x1369, 64);
    let x1371: BytePoly_66 = bigint_nondet_quot!(ctx, x1370, x4, 66);
    let x1372: BytePoly_32 = bigint_nondet_rem!(ctx, x1370, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1371, x4, 98), x1372, 98),
            x1370,
            98
        ),
        536459,
        4,
    )?;
    let x1373: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1372, x1366, 32), 32), x4, 32);
    let x1374: BytePoly_32 = bigint_nondet_quot!(ctx, x1373, x4, 32);
    let x1375: BytePoly_32 = bigint_nondet_rem!(ctx, x1373, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1374, x4, 64), x1375, 64),
            x1373,
            64
        ),
        260103,
        4,
    )?;
    let x1376: BytePoly_33 = bigint_add!(
        bigint_mul!(x1369, x1350, 33),
        bigint_mul!(x1313, x1352, 33),
        33
    );
    let x1377: BytePoly_33 = bigint_add!(
        bigint_mul!(x1375, x1350, 33),
        bigint_mul!(x1315, x1352, 33),
        33
    );
    let x1378: BytePoly_35 = bigint_nondet_quot!(ctx, x1376, x4, 35);
    let x1379: BytePoly_32 = bigint_nondet_rem!(ctx, x1376, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1378, x4, 67), x1379, 67),
            x1376,
            67
        ),
        284487,
        4,
    )?;
    let x1380: BytePoly_35 = bigint_nondet_quot!(ctx, x1377, x4, 35);
    let x1381: BytePoly_32 = bigint_nondet_rem!(ctx, x1377, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1380, x4, 67), x1381, 67),
            x1377,
            67
        ),
        284487,
        4,
    )?;
    let x1382: BytePoly_64 = bigint_mul!(x1343, x1343, 64);
    let x1383: BytePoly_66 = bigint_nondet_quot!(ctx, x1382, x4, 66);
    let x1384: BytePoly_32 = bigint_nondet_rem!(ctx, x1382, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1383, x4, 98), x1384, 98),
            x1382,
            98
        ),
        536459,
        4,
    )?;
    let x1385: BytePoly_33 = bigint_add!(bigint_mul!(x1384, x0, 33), x3, 33);
    let x1386: BytePoly_35 = bigint_nondet_quot!(ctx, x1385, x4, 35);
    let x1387: BytePoly_32 = bigint_nondet_rem!(ctx, x1385, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1386, x4, 67), x1387, 67),
            x1385,
            67
        ),
        284487,
        4,
    )?;
    let x1388: BytePoly_32 = bigint_add!(x1349, x1349, 32);
    let x1389: BytePoly_32 = bigint_nondet_quot!(ctx, x1388, x4, 32);
    let x1390: BytePoly_32 = bigint_nondet_rem!(ctx, x1388, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1389, x4, 64), x1390, 64),
            x1388,
            64
        ),
        260103,
        4,
    )?;
    let x1391: BytePoly_32 = bigint_nondet_inv!(ctx, x1390, x4, 32);
    let x1392: BytePoly_64 = bigint_mul!(x1390, x1391, 64);
    let x1393: BytePoly_66 = bigint_nondet_quot!(ctx, x1392, x4, 66);
    let x1394: BytePoly_32 = bigint_nondet_rem!(ctx, x1392, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1393, x4, 98), x1394, 98),
            x1392,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1394, x6, 32), 34, 1)?;
    let x1395: BytePoly_64 = bigint_mul!(x1387, x1391, 64);
    let x1396: BytePoly_66 = bigint_nondet_quot!(ctx, x1395, x4, 66);
    let x1397: BytePoly_32 = bigint_nondet_rem!(ctx, x1395, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1396, x4, 98), x1397, 98),
            x1395,
            98
        ),
        536459,
        4,
    )?;
    let x1398: BytePoly_64 = bigint_mul!(x1397, x1343, 64);
    let x1399: BytePoly_66 = bigint_nondet_quot!(ctx, x1398, x4, 66);
    let x1400: BytePoly_32 = bigint_nondet_rem!(ctx, x1398, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1399, x4, 98), x1400, 98),
            x1398,
            98
        ),
        536459,
        4,
    )?;
    let x1401: BytePoly_32 = bigint_add!(bigint_sub!(x1349, x1400, 32), x4, 32);
    let x1402: BytePoly_32 = bigint_nondet_quot!(ctx, x1401, x4, 32);
    let x1403: BytePoly_32 = bigint_nondet_rem!(ctx, x1401, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1402, x4, 64), x1403, 64),
            x1401,
            64
        ),
        260103,
        4,
    )?;
    let x1404: BytePoly_64 = bigint_mul!(x1397, x1397, 64);
    let x1405: BytePoly_66 = bigint_nondet_quot!(ctx, x1404, x4, 66);
    let x1406: BytePoly_32 = bigint_nondet_rem!(ctx, x1404, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1405, x4, 98), x1406, 98),
            x1404,
            98
        ),
        536459,
        4,
    )?;
    let x1407: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1406, x1343, 32), x4, 32),
            x1343,
            32
        ),
        x4,
        32
    );
    let x1408: BytePoly_32 = bigint_nondet_quot!(ctx, x1407, x4, 32);
    let x1409: BytePoly_32 = bigint_nondet_rem!(ctx, x1407, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1408, x4, 64), x1409, 64),
            x1407,
            64
        ),
        260103,
        4,
    )?;
    let x1410: BytePoly_64 = bigint_mul!(x1397, x1409, 64);
    let x1411: BytePoly_66 = bigint_nondet_quot!(ctx, x1410, x4, 66);
    let x1412: BytePoly_32 = bigint_nondet_rem!(ctx, x1410, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1411, x4, 98), x1412, 98),
            x1410,
            98
        ),
        536459,
        4,
    )?;
    let x1413: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1412, x1403, 32), 32), x4, 32);
    let x1414: BytePoly_32 = bigint_nondet_quot!(ctx, x1413, x4, 32);
    let x1415: BytePoly_32 = bigint_nondet_rem!(ctx, x1413, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1414, x4, 64), x1415, 64),
            x1413,
            64
        ),
        260103,
        4,
    )?;
    let x1416: BytePoly_1 = bigint_nondet_rem!(ctx, x1351, x5, 1);
    let x1417: BytePoly_32 = bigint_nondet_quot!(ctx, x1351, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1417, x5, 33), x1416, 33),
            x1351,
            33
        ),
        260103,
        4,
    )?;
    let x1418: BytePoly_1 = bigint_sub!(x6, x1416, 1);
    eqz(ctx, &bigint_mul!(x1416, x1418, 2), 8131, 2)?;
    let x1419: BytePoly_32 = bigint_add!(bigint_sub!(x1409, x1379, 32), x4, 32);
    let x1420: BytePoly_32 = bigint_nondet_inv!(ctx, x1419, x4, 32);
    let x1421: BytePoly_64 = bigint_mul!(x1419, x1420, 64);
    let x1422: BytePoly_66 = bigint_nondet_quot!(ctx, x1421, x4, 66);
    let x1423: BytePoly_32 = bigint_nondet_rem!(ctx, x1421, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1422, x4, 98), x1423, 98),
            x1421,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1423, x1, 32), 34, 1)?;
    let x1424: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1415, x1381, 32), x4, 32),
        x1420,
        64
    );
    let x1425: BytePoly_66 = bigint_nondet_quot!(ctx, x1424, x4, 66);
    let x1426: BytePoly_32 = bigint_nondet_rem!(ctx, x1424, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1425, x4, 98), x1426, 98),
            x1424,
            98
        ),
        536459,
        4,
    )?;
    let x1427: BytePoly_64 = bigint_mul!(x1426, x1379, 64);
    let x1428: BytePoly_66 = bigint_nondet_quot!(ctx, x1427, x4, 66);
    let x1429: BytePoly_32 = bigint_nondet_rem!(ctx, x1427, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1428, x4, 98), x1429, 98),
            x1427,
            98
        ),
        536459,
        4,
    )?;
    let x1430: BytePoly_32 = bigint_add!(bigint_sub!(x1381, x1429, 32), x4, 32);
    let x1431: BytePoly_32 = bigint_nondet_quot!(ctx, x1430, x4, 32);
    let x1432: BytePoly_32 = bigint_nondet_rem!(ctx, x1430, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1431, x4, 64), x1432, 64),
            x1430,
            64
        ),
        260103,
        4,
    )?;
    let x1433: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1426, x1426, 64), x1379, 64),
                x4,
                64
            ),
            x1409,
            64
        ),
        x4,
        64
    );
    let x1434: BytePoly_66 = bigint_nondet_quot!(ctx, x1433, x4, 66);
    let x1435: BytePoly_32 = bigint_nondet_rem!(ctx, x1433, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1434, x4, 98), x1435, 98),
            x1433,
            98
        ),
        536459,
        4,
    )?;
    let x1436: BytePoly_64 = bigint_mul!(x1426, x1435, 64);
    let x1437: BytePoly_66 = bigint_nondet_quot!(ctx, x1436, x4, 66);
    let x1438: BytePoly_32 = bigint_nondet_rem!(ctx, x1436, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1437, x4, 98), x1438, 98),
            x1436,
            98
        ),
        536459,
        4,
    )?;
    let x1439: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1438, x1432, 32), 32), x4, 32);
    let x1440: BytePoly_32 = bigint_nondet_quot!(ctx, x1439, x4, 32);
    let x1441: BytePoly_32 = bigint_nondet_rem!(ctx, x1439, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1440, x4, 64), x1441, 64),
            x1439,
            64
        ),
        260103,
        4,
    )?;
    let x1442: BytePoly_33 = bigint_add!(
        bigint_mul!(x1435, x1416, 33),
        bigint_mul!(x1379, x1418, 33),
        33
    );
    let x1443: BytePoly_33 = bigint_add!(
        bigint_mul!(x1441, x1416, 33),
        bigint_mul!(x1381, x1418, 33),
        33
    );
    let x1444: BytePoly_35 = bigint_nondet_quot!(ctx, x1442, x4, 35);
    let x1445: BytePoly_32 = bigint_nondet_rem!(ctx, x1442, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1444, x4, 67), x1445, 67),
            x1442,
            67
        ),
        284487,
        4,
    )?;
    let x1446: BytePoly_35 = bigint_nondet_quot!(ctx, x1443, x4, 35);
    let x1447: BytePoly_32 = bigint_nondet_rem!(ctx, x1443, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1446, x4, 67), x1447, 67),
            x1443,
            67
        ),
        284487,
        4,
    )?;
    let x1448: BytePoly_64 = bigint_mul!(x1409, x1409, 64);
    let x1449: BytePoly_66 = bigint_nondet_quot!(ctx, x1448, x4, 66);
    let x1450: BytePoly_32 = bigint_nondet_rem!(ctx, x1448, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1449, x4, 98), x1450, 98),
            x1448,
            98
        ),
        536459,
        4,
    )?;
    let x1451: BytePoly_33 = bigint_add!(bigint_mul!(x1450, x0, 33), x3, 33);
    let x1452: BytePoly_35 = bigint_nondet_quot!(ctx, x1451, x4, 35);
    let x1453: BytePoly_32 = bigint_nondet_rem!(ctx, x1451, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1452, x4, 67), x1453, 67),
            x1451,
            67
        ),
        284487,
        4,
    )?;
    let x1454: BytePoly_32 = bigint_add!(x1415, x1415, 32);
    let x1455: BytePoly_32 = bigint_nondet_quot!(ctx, x1454, x4, 32);
    let x1456: BytePoly_32 = bigint_nondet_rem!(ctx, x1454, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1455, x4, 64), x1456, 64),
            x1454,
            64
        ),
        260103,
        4,
    )?;
    let x1457: BytePoly_32 = bigint_nondet_inv!(ctx, x1456, x4, 32);
    let x1458: BytePoly_64 = bigint_mul!(x1456, x1457, 64);
    let x1459: BytePoly_66 = bigint_nondet_quot!(ctx, x1458, x4, 66);
    let x1460: BytePoly_32 = bigint_nondet_rem!(ctx, x1458, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1459, x4, 98), x1460, 98),
            x1458,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1460, x6, 32), 34, 1)?;
    let x1461: BytePoly_64 = bigint_mul!(x1453, x1457, 64);
    let x1462: BytePoly_66 = bigint_nondet_quot!(ctx, x1461, x4, 66);
    let x1463: BytePoly_32 = bigint_nondet_rem!(ctx, x1461, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1462, x4, 98), x1463, 98),
            x1461,
            98
        ),
        536459,
        4,
    )?;
    let x1464: BytePoly_64 = bigint_mul!(x1463, x1409, 64);
    let x1465: BytePoly_66 = bigint_nondet_quot!(ctx, x1464, x4, 66);
    let x1466: BytePoly_32 = bigint_nondet_rem!(ctx, x1464, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1465, x4, 98), x1466, 98),
            x1464,
            98
        ),
        536459,
        4,
    )?;
    let x1467: BytePoly_32 = bigint_add!(bigint_sub!(x1415, x1466, 32), x4, 32);
    let x1468: BytePoly_32 = bigint_nondet_quot!(ctx, x1467, x4, 32);
    let x1469: BytePoly_32 = bigint_nondet_rem!(ctx, x1467, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1468, x4, 64), x1469, 64),
            x1467,
            64
        ),
        260103,
        4,
    )?;
    let x1470: BytePoly_64 = bigint_mul!(x1463, x1463, 64);
    let x1471: BytePoly_66 = bigint_nondet_quot!(ctx, x1470, x4, 66);
    let x1472: BytePoly_32 = bigint_nondet_rem!(ctx, x1470, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1471, x4, 98), x1472, 98),
            x1470,
            98
        ),
        536459,
        4,
    )?;
    let x1473: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1472, x1409, 32), x4, 32),
            x1409,
            32
        ),
        x4,
        32
    );
    let x1474: BytePoly_32 = bigint_nondet_quot!(ctx, x1473, x4, 32);
    let x1475: BytePoly_32 = bigint_nondet_rem!(ctx, x1473, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1474, x4, 64), x1475, 64),
            x1473,
            64
        ),
        260103,
        4,
    )?;
    let x1476: BytePoly_64 = bigint_mul!(x1463, x1475, 64);
    let x1477: BytePoly_66 = bigint_nondet_quot!(ctx, x1476, x4, 66);
    let x1478: BytePoly_32 = bigint_nondet_rem!(ctx, x1476, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1477, x4, 98), x1478, 98),
            x1476,
            98
        ),
        536459,
        4,
    )?;
    let x1479: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1478, x1469, 32), 32), x4, 32);
    let x1480: BytePoly_32 = bigint_nondet_quot!(ctx, x1479, x4, 32);
    let x1481: BytePoly_32 = bigint_nondet_rem!(ctx, x1479, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1480, x4, 64), x1481, 64),
            x1479,
            64
        ),
        260103,
        4,
    )?;
    let x1482: BytePoly_1 = bigint_nondet_rem!(ctx, x1417, x5, 1);
    let x1483: BytePoly_32 = bigint_nondet_quot!(ctx, x1417, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1483, x5, 33), x1482, 33),
            x1417,
            33
        ),
        260103,
        4,
    )?;
    let x1484: BytePoly_1 = bigint_sub!(x6, x1482, 1);
    eqz(ctx, &bigint_mul!(x1482, x1484, 2), 8131, 2)?;
    let x1485: BytePoly_32 = bigint_add!(bigint_sub!(x1475, x1445, 32), x4, 32);
    let x1486: BytePoly_32 = bigint_nondet_inv!(ctx, x1485, x4, 32);
    let x1487: BytePoly_64 = bigint_mul!(x1485, x1486, 64);
    let x1488: BytePoly_66 = bigint_nondet_quot!(ctx, x1487, x4, 66);
    let x1489: BytePoly_32 = bigint_nondet_rem!(ctx, x1487, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1488, x4, 98), x1489, 98),
            x1487,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1489, x1, 32), 34, 1)?;
    let x1490: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1481, x1447, 32), x4, 32),
        x1486,
        64
    );
    let x1491: BytePoly_66 = bigint_nondet_quot!(ctx, x1490, x4, 66);
    let x1492: BytePoly_32 = bigint_nondet_rem!(ctx, x1490, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1491, x4, 98), x1492, 98),
            x1490,
            98
        ),
        536459,
        4,
    )?;
    let x1493: BytePoly_64 = bigint_mul!(x1492, x1445, 64);
    let x1494: BytePoly_66 = bigint_nondet_quot!(ctx, x1493, x4, 66);
    let x1495: BytePoly_32 = bigint_nondet_rem!(ctx, x1493, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1494, x4, 98), x1495, 98),
            x1493,
            98
        ),
        536459,
        4,
    )?;
    let x1496: BytePoly_32 = bigint_add!(bigint_sub!(x1447, x1495, 32), x4, 32);
    let x1497: BytePoly_32 = bigint_nondet_quot!(ctx, x1496, x4, 32);
    let x1498: BytePoly_32 = bigint_nondet_rem!(ctx, x1496, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1497, x4, 64), x1498, 64),
            x1496,
            64
        ),
        260103,
        4,
    )?;
    let x1499: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1492, x1492, 64), x1445, 64),
                x4,
                64
            ),
            x1475,
            64
        ),
        x4,
        64
    );
    let x1500: BytePoly_66 = bigint_nondet_quot!(ctx, x1499, x4, 66);
    let x1501: BytePoly_32 = bigint_nondet_rem!(ctx, x1499, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1500, x4, 98), x1501, 98),
            x1499,
            98
        ),
        536459,
        4,
    )?;
    let x1502: BytePoly_64 = bigint_mul!(x1492, x1501, 64);
    let x1503: BytePoly_66 = bigint_nondet_quot!(ctx, x1502, x4, 66);
    let x1504: BytePoly_32 = bigint_nondet_rem!(ctx, x1502, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1503, x4, 98), x1504, 98),
            x1502,
            98
        ),
        536459,
        4,
    )?;
    let x1505: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1504, x1498, 32), 32), x4, 32);
    let x1506: BytePoly_32 = bigint_nondet_quot!(ctx, x1505, x4, 32);
    let x1507: BytePoly_32 = bigint_nondet_rem!(ctx, x1505, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1506, x4, 64), x1507, 64),
            x1505,
            64
        ),
        260103,
        4,
    )?;
    let x1508: BytePoly_33 = bigint_add!(
        bigint_mul!(x1501, x1482, 33),
        bigint_mul!(x1445, x1484, 33),
        33
    );
    let x1509: BytePoly_33 = bigint_add!(
        bigint_mul!(x1507, x1482, 33),
        bigint_mul!(x1447, x1484, 33),
        33
    );
    let x1510: BytePoly_35 = bigint_nondet_quot!(ctx, x1508, x4, 35);
    let x1511: BytePoly_32 = bigint_nondet_rem!(ctx, x1508, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1510, x4, 67), x1511, 67),
            x1508,
            67
        ),
        284487,
        4,
    )?;
    let x1512: BytePoly_35 = bigint_nondet_quot!(ctx, x1509, x4, 35);
    let x1513: BytePoly_32 = bigint_nondet_rem!(ctx, x1509, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1512, x4, 67), x1513, 67),
            x1509,
            67
        ),
        284487,
        4,
    )?;
    let x1514: BytePoly_64 = bigint_mul!(x1475, x1475, 64);
    let x1515: BytePoly_66 = bigint_nondet_quot!(ctx, x1514, x4, 66);
    let x1516: BytePoly_32 = bigint_nondet_rem!(ctx, x1514, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1515, x4, 98), x1516, 98),
            x1514,
            98
        ),
        536459,
        4,
    )?;
    let x1517: BytePoly_33 = bigint_add!(bigint_mul!(x1516, x0, 33), x3, 33);
    let x1518: BytePoly_35 = bigint_nondet_quot!(ctx, x1517, x4, 35);
    let x1519: BytePoly_32 = bigint_nondet_rem!(ctx, x1517, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1518, x4, 67), x1519, 67),
            x1517,
            67
        ),
        284487,
        4,
    )?;
    let x1520: BytePoly_32 = bigint_add!(x1481, x1481, 32);
    let x1521: BytePoly_32 = bigint_nondet_quot!(ctx, x1520, x4, 32);
    let x1522: BytePoly_32 = bigint_nondet_rem!(ctx, x1520, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1521, x4, 64), x1522, 64),
            x1520,
            64
        ),
        260103,
        4,
    )?;
    let x1523: BytePoly_32 = bigint_nondet_inv!(ctx, x1522, x4, 32);
    let x1524: BytePoly_64 = bigint_mul!(x1522, x1523, 64);
    let x1525: BytePoly_66 = bigint_nondet_quot!(ctx, x1524, x4, 66);
    let x1526: BytePoly_32 = bigint_nondet_rem!(ctx, x1524, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1525, x4, 98), x1526, 98),
            x1524,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1526, x6, 32), 34, 1)?;
    let x1527: BytePoly_64 = bigint_mul!(x1519, x1523, 64);
    let x1528: BytePoly_66 = bigint_nondet_quot!(ctx, x1527, x4, 66);
    let x1529: BytePoly_32 = bigint_nondet_rem!(ctx, x1527, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1528, x4, 98), x1529, 98),
            x1527,
            98
        ),
        536459,
        4,
    )?;
    let x1530: BytePoly_64 = bigint_mul!(x1529, x1475, 64);
    let x1531: BytePoly_66 = bigint_nondet_quot!(ctx, x1530, x4, 66);
    let x1532: BytePoly_32 = bigint_nondet_rem!(ctx, x1530, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1531, x4, 98), x1532, 98),
            x1530,
            98
        ),
        536459,
        4,
    )?;
    let x1533: BytePoly_32 = bigint_add!(bigint_sub!(x1481, x1532, 32), x4, 32);
    let x1534: BytePoly_32 = bigint_nondet_quot!(ctx, x1533, x4, 32);
    let x1535: BytePoly_32 = bigint_nondet_rem!(ctx, x1533, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1534, x4, 64), x1535, 64),
            x1533,
            64
        ),
        260103,
        4,
    )?;
    let x1536: BytePoly_64 = bigint_mul!(x1529, x1529, 64);
    let x1537: BytePoly_66 = bigint_nondet_quot!(ctx, x1536, x4, 66);
    let x1538: BytePoly_32 = bigint_nondet_rem!(ctx, x1536, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1537, x4, 98), x1538, 98),
            x1536,
            98
        ),
        536459,
        4,
    )?;
    let x1539: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1538, x1475, 32), x4, 32),
            x1475,
            32
        ),
        x4,
        32
    );
    let x1540: BytePoly_32 = bigint_nondet_quot!(ctx, x1539, x4, 32);
    let x1541: BytePoly_32 = bigint_nondet_rem!(ctx, x1539, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1540, x4, 64), x1541, 64),
            x1539,
            64
        ),
        260103,
        4,
    )?;
    let x1542: BytePoly_64 = bigint_mul!(x1529, x1541, 64);
    let x1543: BytePoly_66 = bigint_nondet_quot!(ctx, x1542, x4, 66);
    let x1544: BytePoly_32 = bigint_nondet_rem!(ctx, x1542, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1543, x4, 98), x1544, 98),
            x1542,
            98
        ),
        536459,
        4,
    )?;
    let x1545: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1544, x1535, 32), 32), x4, 32);
    let x1546: BytePoly_32 = bigint_nondet_quot!(ctx, x1545, x4, 32);
    let x1547: BytePoly_32 = bigint_nondet_rem!(ctx, x1545, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1546, x4, 64), x1547, 64),
            x1545,
            64
        ),
        260103,
        4,
    )?;
    let x1548: BytePoly_1 = bigint_nondet_rem!(ctx, x1483, x5, 1);
    let x1549: BytePoly_32 = bigint_nondet_quot!(ctx, x1483, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1549, x5, 33), x1548, 33),
            x1483,
            33
        ),
        260103,
        4,
    )?;
    let x1550: BytePoly_1 = bigint_sub!(x6, x1548, 1);
    eqz(ctx, &bigint_mul!(x1548, x1550, 2), 8131, 2)?;
    let x1551: BytePoly_32 = bigint_add!(bigint_sub!(x1541, x1511, 32), x4, 32);
    let x1552: BytePoly_32 = bigint_nondet_inv!(ctx, x1551, x4, 32);
    let x1553: BytePoly_64 = bigint_mul!(x1551, x1552, 64);
    let x1554: BytePoly_66 = bigint_nondet_quot!(ctx, x1553, x4, 66);
    let x1555: BytePoly_32 = bigint_nondet_rem!(ctx, x1553, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1554, x4, 98), x1555, 98),
            x1553,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1555, x1, 32), 34, 1)?;
    let x1556: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1547, x1513, 32), x4, 32),
        x1552,
        64
    );
    let x1557: BytePoly_66 = bigint_nondet_quot!(ctx, x1556, x4, 66);
    let x1558: BytePoly_32 = bigint_nondet_rem!(ctx, x1556, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1557, x4, 98), x1558, 98),
            x1556,
            98
        ),
        536459,
        4,
    )?;
    let x1559: BytePoly_64 = bigint_mul!(x1558, x1511, 64);
    let x1560: BytePoly_66 = bigint_nondet_quot!(ctx, x1559, x4, 66);
    let x1561: BytePoly_32 = bigint_nondet_rem!(ctx, x1559, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1560, x4, 98), x1561, 98),
            x1559,
            98
        ),
        536459,
        4,
    )?;
    let x1562: BytePoly_32 = bigint_add!(bigint_sub!(x1513, x1561, 32), x4, 32);
    let x1563: BytePoly_32 = bigint_nondet_quot!(ctx, x1562, x4, 32);
    let x1564: BytePoly_32 = bigint_nondet_rem!(ctx, x1562, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1563, x4, 64), x1564, 64),
            x1562,
            64
        ),
        260103,
        4,
    )?;
    let x1565: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1558, x1558, 64), x1511, 64),
                x4,
                64
            ),
            x1541,
            64
        ),
        x4,
        64
    );
    let x1566: BytePoly_66 = bigint_nondet_quot!(ctx, x1565, x4, 66);
    let x1567: BytePoly_32 = bigint_nondet_rem!(ctx, x1565, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1566, x4, 98), x1567, 98),
            x1565,
            98
        ),
        536459,
        4,
    )?;
    let x1568: BytePoly_64 = bigint_mul!(x1558, x1567, 64);
    let x1569: BytePoly_66 = bigint_nondet_quot!(ctx, x1568, x4, 66);
    let x1570: BytePoly_32 = bigint_nondet_rem!(ctx, x1568, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1569, x4, 98), x1570, 98),
            x1568,
            98
        ),
        536459,
        4,
    )?;
    let x1571: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1570, x1564, 32), 32), x4, 32);
    let x1572: BytePoly_32 = bigint_nondet_quot!(ctx, x1571, x4, 32);
    let x1573: BytePoly_32 = bigint_nondet_rem!(ctx, x1571, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1572, x4, 64), x1573, 64),
            x1571,
            64
        ),
        260103,
        4,
    )?;
    let x1574: BytePoly_33 = bigint_add!(
        bigint_mul!(x1567, x1548, 33),
        bigint_mul!(x1511, x1550, 33),
        33
    );
    let x1575: BytePoly_33 = bigint_add!(
        bigint_mul!(x1573, x1548, 33),
        bigint_mul!(x1513, x1550, 33),
        33
    );
    let x1576: BytePoly_35 = bigint_nondet_quot!(ctx, x1574, x4, 35);
    let x1577: BytePoly_32 = bigint_nondet_rem!(ctx, x1574, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1576, x4, 67), x1577, 67),
            x1574,
            67
        ),
        284487,
        4,
    )?;
    let x1578: BytePoly_35 = bigint_nondet_quot!(ctx, x1575, x4, 35);
    let x1579: BytePoly_32 = bigint_nondet_rem!(ctx, x1575, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1578, x4, 67), x1579, 67),
            x1575,
            67
        ),
        284487,
        4,
    )?;
    let x1580: BytePoly_64 = bigint_mul!(x1541, x1541, 64);
    let x1581: BytePoly_66 = bigint_nondet_quot!(ctx, x1580, x4, 66);
    let x1582: BytePoly_32 = bigint_nondet_rem!(ctx, x1580, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1581, x4, 98), x1582, 98),
            x1580,
            98
        ),
        536459,
        4,
    )?;
    let x1583: BytePoly_33 = bigint_add!(bigint_mul!(x1582, x0, 33), x3, 33);
    let x1584: BytePoly_35 = bigint_nondet_quot!(ctx, x1583, x4, 35);
    let x1585: BytePoly_32 = bigint_nondet_rem!(ctx, x1583, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1584, x4, 67), x1585, 67),
            x1583,
            67
        ),
        284487,
        4,
    )?;
    let x1586: BytePoly_32 = bigint_add!(x1547, x1547, 32);
    let x1587: BytePoly_32 = bigint_nondet_quot!(ctx, x1586, x4, 32);
    let x1588: BytePoly_32 = bigint_nondet_rem!(ctx, x1586, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1587, x4, 64), x1588, 64),
            x1586,
            64
        ),
        260103,
        4,
    )?;
    let x1589: BytePoly_32 = bigint_nondet_inv!(ctx, x1588, x4, 32);
    let x1590: BytePoly_64 = bigint_mul!(x1588, x1589, 64);
    let x1591: BytePoly_66 = bigint_nondet_quot!(ctx, x1590, x4, 66);
    let x1592: BytePoly_32 = bigint_nondet_rem!(ctx, x1590, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1591, x4, 98), x1592, 98),
            x1590,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1592, x6, 32), 34, 1)?;
    let x1593: BytePoly_64 = bigint_mul!(x1585, x1589, 64);
    let x1594: BytePoly_66 = bigint_nondet_quot!(ctx, x1593, x4, 66);
    let x1595: BytePoly_32 = bigint_nondet_rem!(ctx, x1593, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1594, x4, 98), x1595, 98),
            x1593,
            98
        ),
        536459,
        4,
    )?;
    let x1596: BytePoly_64 = bigint_mul!(x1595, x1541, 64);
    let x1597: BytePoly_66 = bigint_nondet_quot!(ctx, x1596, x4, 66);
    let x1598: BytePoly_32 = bigint_nondet_rem!(ctx, x1596, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1597, x4, 98), x1598, 98),
            x1596,
            98
        ),
        536459,
        4,
    )?;
    let x1599: BytePoly_32 = bigint_add!(bigint_sub!(x1547, x1598, 32), x4, 32);
    let x1600: BytePoly_32 = bigint_nondet_quot!(ctx, x1599, x4, 32);
    let x1601: BytePoly_32 = bigint_nondet_rem!(ctx, x1599, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1600, x4, 64), x1601, 64),
            x1599,
            64
        ),
        260103,
        4,
    )?;
    let x1602: BytePoly_64 = bigint_mul!(x1595, x1595, 64);
    let x1603: BytePoly_66 = bigint_nondet_quot!(ctx, x1602, x4, 66);
    let x1604: BytePoly_32 = bigint_nondet_rem!(ctx, x1602, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1603, x4, 98), x1604, 98),
            x1602,
            98
        ),
        536459,
        4,
    )?;
    let x1605: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1604, x1541, 32), x4, 32),
            x1541,
            32
        ),
        x4,
        32
    );
    let x1606: BytePoly_32 = bigint_nondet_quot!(ctx, x1605, x4, 32);
    let x1607: BytePoly_32 = bigint_nondet_rem!(ctx, x1605, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1606, x4, 64), x1607, 64),
            x1605,
            64
        ),
        260103,
        4,
    )?;
    let x1608: BytePoly_64 = bigint_mul!(x1595, x1607, 64);
    let x1609: BytePoly_66 = bigint_nondet_quot!(ctx, x1608, x4, 66);
    let x1610: BytePoly_32 = bigint_nondet_rem!(ctx, x1608, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1609, x4, 98), x1610, 98),
            x1608,
            98
        ),
        536459,
        4,
    )?;
    let x1611: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1610, x1601, 32), 32), x4, 32);
    let x1612: BytePoly_32 = bigint_nondet_quot!(ctx, x1611, x4, 32);
    let x1613: BytePoly_32 = bigint_nondet_rem!(ctx, x1611, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1612, x4, 64), x1613, 64),
            x1611,
            64
        ),
        260103,
        4,
    )?;
    let x1614: BytePoly_1 = bigint_nondet_rem!(ctx, x1549, x5, 1);
    let x1615: BytePoly_32 = bigint_nondet_quot!(ctx, x1549, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1615, x5, 33), x1614, 33),
            x1549,
            33
        ),
        260103,
        4,
    )?;
    let x1616: BytePoly_1 = bigint_sub!(x6, x1614, 1);
    eqz(ctx, &bigint_mul!(x1614, x1616, 2), 8131, 2)?;
    let x1617: BytePoly_32 = bigint_add!(bigint_sub!(x1607, x1577, 32), x4, 32);
    let x1618: BytePoly_32 = bigint_nondet_inv!(ctx, x1617, x4, 32);
    let x1619: BytePoly_64 = bigint_mul!(x1617, x1618, 64);
    let x1620: BytePoly_66 = bigint_nondet_quot!(ctx, x1619, x4, 66);
    let x1621: BytePoly_32 = bigint_nondet_rem!(ctx, x1619, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1620, x4, 98), x1621, 98),
            x1619,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1621, x1, 32), 34, 1)?;
    let x1622: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1613, x1579, 32), x4, 32),
        x1618,
        64
    );
    let x1623: BytePoly_66 = bigint_nondet_quot!(ctx, x1622, x4, 66);
    let x1624: BytePoly_32 = bigint_nondet_rem!(ctx, x1622, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1623, x4, 98), x1624, 98),
            x1622,
            98
        ),
        536459,
        4,
    )?;
    let x1625: BytePoly_64 = bigint_mul!(x1624, x1577, 64);
    let x1626: BytePoly_66 = bigint_nondet_quot!(ctx, x1625, x4, 66);
    let x1627: BytePoly_32 = bigint_nondet_rem!(ctx, x1625, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1626, x4, 98), x1627, 98),
            x1625,
            98
        ),
        536459,
        4,
    )?;
    let x1628: BytePoly_32 = bigint_add!(bigint_sub!(x1579, x1627, 32), x4, 32);
    let x1629: BytePoly_32 = bigint_nondet_quot!(ctx, x1628, x4, 32);
    let x1630: BytePoly_32 = bigint_nondet_rem!(ctx, x1628, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1629, x4, 64), x1630, 64),
            x1628,
            64
        ),
        260103,
        4,
    )?;
    let x1631: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1624, x1624, 64), x1577, 64),
                x4,
                64
            ),
            x1607,
            64
        ),
        x4,
        64
    );
    let x1632: BytePoly_66 = bigint_nondet_quot!(ctx, x1631, x4, 66);
    let x1633: BytePoly_32 = bigint_nondet_rem!(ctx, x1631, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1632, x4, 98), x1633, 98),
            x1631,
            98
        ),
        536459,
        4,
    )?;
    let x1634: BytePoly_64 = bigint_mul!(x1624, x1633, 64);
    let x1635: BytePoly_66 = bigint_nondet_quot!(ctx, x1634, x4, 66);
    let x1636: BytePoly_32 = bigint_nondet_rem!(ctx, x1634, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1635, x4, 98), x1636, 98),
            x1634,
            98
        ),
        536459,
        4,
    )?;
    let x1637: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1636, x1630, 32), 32), x4, 32);
    let x1638: BytePoly_32 = bigint_nondet_quot!(ctx, x1637, x4, 32);
    let x1639: BytePoly_32 = bigint_nondet_rem!(ctx, x1637, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1638, x4, 64), x1639, 64),
            x1637,
            64
        ),
        260103,
        4,
    )?;
    let x1640: BytePoly_33 = bigint_add!(
        bigint_mul!(x1633, x1614, 33),
        bigint_mul!(x1577, x1616, 33),
        33
    );
    let x1641: BytePoly_33 = bigint_add!(
        bigint_mul!(x1639, x1614, 33),
        bigint_mul!(x1579, x1616, 33),
        33
    );
    let x1642: BytePoly_35 = bigint_nondet_quot!(ctx, x1640, x4, 35);
    let x1643: BytePoly_32 = bigint_nondet_rem!(ctx, x1640, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1642, x4, 67), x1643, 67),
            x1640,
            67
        ),
        284487,
        4,
    )?;
    let x1644: BytePoly_35 = bigint_nondet_quot!(ctx, x1641, x4, 35);
    let x1645: BytePoly_32 = bigint_nondet_rem!(ctx, x1641, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1644, x4, 67), x1645, 67),
            x1641,
            67
        ),
        284487,
        4,
    )?;
    let x1646: BytePoly_64 = bigint_mul!(x1607, x1607, 64);
    let x1647: BytePoly_66 = bigint_nondet_quot!(ctx, x1646, x4, 66);
    let x1648: BytePoly_32 = bigint_nondet_rem!(ctx, x1646, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1647, x4, 98), x1648, 98),
            x1646,
            98
        ),
        536459,
        4,
    )?;
    let x1649: BytePoly_33 = bigint_add!(bigint_mul!(x1648, x0, 33), x3, 33);
    let x1650: BytePoly_35 = bigint_nondet_quot!(ctx, x1649, x4, 35);
    let x1651: BytePoly_32 = bigint_nondet_rem!(ctx, x1649, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1650, x4, 67), x1651, 67),
            x1649,
            67
        ),
        284487,
        4,
    )?;
    let x1652: BytePoly_32 = bigint_add!(x1613, x1613, 32);
    let x1653: BytePoly_32 = bigint_nondet_quot!(ctx, x1652, x4, 32);
    let x1654: BytePoly_32 = bigint_nondet_rem!(ctx, x1652, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1653, x4, 64), x1654, 64),
            x1652,
            64
        ),
        260103,
        4,
    )?;
    let x1655: BytePoly_32 = bigint_nondet_inv!(ctx, x1654, x4, 32);
    let x1656: BytePoly_64 = bigint_mul!(x1654, x1655, 64);
    let x1657: BytePoly_66 = bigint_nondet_quot!(ctx, x1656, x4, 66);
    let x1658: BytePoly_32 = bigint_nondet_rem!(ctx, x1656, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1657, x4, 98), x1658, 98),
            x1656,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1658, x6, 32), 34, 1)?;
    let x1659: BytePoly_64 = bigint_mul!(x1651, x1655, 64);
    let x1660: BytePoly_66 = bigint_nondet_quot!(ctx, x1659, x4, 66);
    let x1661: BytePoly_32 = bigint_nondet_rem!(ctx, x1659, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1660, x4, 98), x1661, 98),
            x1659,
            98
        ),
        536459,
        4,
    )?;
    let x1662: BytePoly_64 = bigint_mul!(x1661, x1607, 64);
    let x1663: BytePoly_66 = bigint_nondet_quot!(ctx, x1662, x4, 66);
    let x1664: BytePoly_32 = bigint_nondet_rem!(ctx, x1662, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1663, x4, 98), x1664, 98),
            x1662,
            98
        ),
        536459,
        4,
    )?;
    let x1665: BytePoly_32 = bigint_add!(bigint_sub!(x1613, x1664, 32), x4, 32);
    let x1666: BytePoly_32 = bigint_nondet_quot!(ctx, x1665, x4, 32);
    let x1667: BytePoly_32 = bigint_nondet_rem!(ctx, x1665, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1666, x4, 64), x1667, 64),
            x1665,
            64
        ),
        260103,
        4,
    )?;
    let x1668: BytePoly_64 = bigint_mul!(x1661, x1661, 64);
    let x1669: BytePoly_66 = bigint_nondet_quot!(ctx, x1668, x4, 66);
    let x1670: BytePoly_32 = bigint_nondet_rem!(ctx, x1668, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1669, x4, 98), x1670, 98),
            x1668,
            98
        ),
        536459,
        4,
    )?;
    let x1671: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1670, x1607, 32), x4, 32),
            x1607,
            32
        ),
        x4,
        32
    );
    let x1672: BytePoly_32 = bigint_nondet_quot!(ctx, x1671, x4, 32);
    let x1673: BytePoly_32 = bigint_nondet_rem!(ctx, x1671, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1672, x4, 64), x1673, 64),
            x1671,
            64
        ),
        260103,
        4,
    )?;
    let x1674: BytePoly_64 = bigint_mul!(x1661, x1673, 64);
    let x1675: BytePoly_66 = bigint_nondet_quot!(ctx, x1674, x4, 66);
    let x1676: BytePoly_32 = bigint_nondet_rem!(ctx, x1674, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1675, x4, 98), x1676, 98),
            x1674,
            98
        ),
        536459,
        4,
    )?;
    let x1677: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1676, x1667, 32), 32), x4, 32);
    let x1678: BytePoly_32 = bigint_nondet_quot!(ctx, x1677, x4, 32);
    let x1679: BytePoly_32 = bigint_nondet_rem!(ctx, x1677, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1678, x4, 64), x1679, 64),
            x1677,
            64
        ),
        260103,
        4,
    )?;
    let x1680: BytePoly_1 = bigint_nondet_rem!(ctx, x1615, x5, 1);
    let x1681: BytePoly_32 = bigint_nondet_quot!(ctx, x1615, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1681, x5, 33), x1680, 33),
            x1615,
            33
        ),
        260103,
        4,
    )?;
    let x1682: BytePoly_1 = bigint_sub!(x6, x1680, 1);
    eqz(ctx, &bigint_mul!(x1680, x1682, 2), 8131, 2)?;
    let x1683: BytePoly_32 = bigint_add!(bigint_sub!(x1673, x1643, 32), x4, 32);
    let x1684: BytePoly_32 = bigint_nondet_inv!(ctx, x1683, x4, 32);
    let x1685: BytePoly_64 = bigint_mul!(x1683, x1684, 64);
    let x1686: BytePoly_66 = bigint_nondet_quot!(ctx, x1685, x4, 66);
    let x1687: BytePoly_32 = bigint_nondet_rem!(ctx, x1685, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1686, x4, 98), x1687, 98),
            x1685,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1687, x1, 32), 34, 1)?;
    let x1688: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1679, x1645, 32), x4, 32),
        x1684,
        64
    );
    let x1689: BytePoly_66 = bigint_nondet_quot!(ctx, x1688, x4, 66);
    let x1690: BytePoly_32 = bigint_nondet_rem!(ctx, x1688, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1689, x4, 98), x1690, 98),
            x1688,
            98
        ),
        536459,
        4,
    )?;
    let x1691: BytePoly_64 = bigint_mul!(x1690, x1643, 64);
    let x1692: BytePoly_66 = bigint_nondet_quot!(ctx, x1691, x4, 66);
    let x1693: BytePoly_32 = bigint_nondet_rem!(ctx, x1691, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1692, x4, 98), x1693, 98),
            x1691,
            98
        ),
        536459,
        4,
    )?;
    let x1694: BytePoly_32 = bigint_add!(bigint_sub!(x1645, x1693, 32), x4, 32);
    let x1695: BytePoly_32 = bigint_nondet_quot!(ctx, x1694, x4, 32);
    let x1696: BytePoly_32 = bigint_nondet_rem!(ctx, x1694, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1695, x4, 64), x1696, 64),
            x1694,
            64
        ),
        260103,
        4,
    )?;
    let x1697: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1690, x1690, 64), x1643, 64),
                x4,
                64
            ),
            x1673,
            64
        ),
        x4,
        64
    );
    let x1698: BytePoly_66 = bigint_nondet_quot!(ctx, x1697, x4, 66);
    let x1699: BytePoly_32 = bigint_nondet_rem!(ctx, x1697, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1698, x4, 98), x1699, 98),
            x1697,
            98
        ),
        536459,
        4,
    )?;
    let x1700: BytePoly_64 = bigint_mul!(x1690, x1699, 64);
    let x1701: BytePoly_66 = bigint_nondet_quot!(ctx, x1700, x4, 66);
    let x1702: BytePoly_32 = bigint_nondet_rem!(ctx, x1700, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1701, x4, 98), x1702, 98),
            x1700,
            98
        ),
        536459,
        4,
    )?;
    let x1703: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1702, x1696, 32), 32), x4, 32);
    let x1704: BytePoly_32 = bigint_nondet_quot!(ctx, x1703, x4, 32);
    let x1705: BytePoly_32 = bigint_nondet_rem!(ctx, x1703, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1704, x4, 64), x1705, 64),
            x1703,
            64
        ),
        260103,
        4,
    )?;
    let x1706: BytePoly_33 = bigint_add!(
        bigint_mul!(x1699, x1680, 33),
        bigint_mul!(x1643, x1682, 33),
        33
    );
    let x1707: BytePoly_33 = bigint_add!(
        bigint_mul!(x1705, x1680, 33),
        bigint_mul!(x1645, x1682, 33),
        33
    );
    let x1708: BytePoly_35 = bigint_nondet_quot!(ctx, x1706, x4, 35);
    let x1709: BytePoly_32 = bigint_nondet_rem!(ctx, x1706, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1708, x4, 67), x1709, 67),
            x1706,
            67
        ),
        284487,
        4,
    )?;
    let x1710: BytePoly_35 = bigint_nondet_quot!(ctx, x1707, x4, 35);
    let x1711: BytePoly_32 = bigint_nondet_rem!(ctx, x1707, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1710, x4, 67), x1711, 67),
            x1707,
            67
        ),
        284487,
        4,
    )?;
    let x1712: BytePoly_64 = bigint_mul!(x1673, x1673, 64);
    let x1713: BytePoly_66 = bigint_nondet_quot!(ctx, x1712, x4, 66);
    let x1714: BytePoly_32 = bigint_nondet_rem!(ctx, x1712, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1713, x4, 98), x1714, 98),
            x1712,
            98
        ),
        536459,
        4,
    )?;
    let x1715: BytePoly_33 = bigint_add!(bigint_mul!(x1714, x0, 33), x3, 33);
    let x1716: BytePoly_35 = bigint_nondet_quot!(ctx, x1715, x4, 35);
    let x1717: BytePoly_32 = bigint_nondet_rem!(ctx, x1715, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1716, x4, 67), x1717, 67),
            x1715,
            67
        ),
        284487,
        4,
    )?;
    let x1718: BytePoly_32 = bigint_add!(x1679, x1679, 32);
    let x1719: BytePoly_32 = bigint_nondet_quot!(ctx, x1718, x4, 32);
    let x1720: BytePoly_32 = bigint_nondet_rem!(ctx, x1718, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1719, x4, 64), x1720, 64),
            x1718,
            64
        ),
        260103,
        4,
    )?;
    let x1721: BytePoly_32 = bigint_nondet_inv!(ctx, x1720, x4, 32);
    let x1722: BytePoly_64 = bigint_mul!(x1720, x1721, 64);
    let x1723: BytePoly_66 = bigint_nondet_quot!(ctx, x1722, x4, 66);
    let x1724: BytePoly_32 = bigint_nondet_rem!(ctx, x1722, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1723, x4, 98), x1724, 98),
            x1722,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1724, x6, 32), 34, 1)?;
    let x1725: BytePoly_64 = bigint_mul!(x1717, x1721, 64);
    let x1726: BytePoly_66 = bigint_nondet_quot!(ctx, x1725, x4, 66);
    let x1727: BytePoly_32 = bigint_nondet_rem!(ctx, x1725, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1726, x4, 98), x1727, 98),
            x1725,
            98
        ),
        536459,
        4,
    )?;
    let x1728: BytePoly_64 = bigint_mul!(x1727, x1673, 64);
    let x1729: BytePoly_66 = bigint_nondet_quot!(ctx, x1728, x4, 66);
    let x1730: BytePoly_32 = bigint_nondet_rem!(ctx, x1728, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1729, x4, 98), x1730, 98),
            x1728,
            98
        ),
        536459,
        4,
    )?;
    let x1731: BytePoly_32 = bigint_add!(bigint_sub!(x1679, x1730, 32), x4, 32);
    let x1732: BytePoly_32 = bigint_nondet_quot!(ctx, x1731, x4, 32);
    let x1733: BytePoly_32 = bigint_nondet_rem!(ctx, x1731, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1732, x4, 64), x1733, 64),
            x1731,
            64
        ),
        260103,
        4,
    )?;
    let x1734: BytePoly_64 = bigint_mul!(x1727, x1727, 64);
    let x1735: BytePoly_66 = bigint_nondet_quot!(ctx, x1734, x4, 66);
    let x1736: BytePoly_32 = bigint_nondet_rem!(ctx, x1734, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1735, x4, 98), x1736, 98),
            x1734,
            98
        ),
        536459,
        4,
    )?;
    let x1737: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1736, x1673, 32), x4, 32),
            x1673,
            32
        ),
        x4,
        32
    );
    let x1738: BytePoly_32 = bigint_nondet_quot!(ctx, x1737, x4, 32);
    let x1739: BytePoly_32 = bigint_nondet_rem!(ctx, x1737, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1738, x4, 64), x1739, 64),
            x1737,
            64
        ),
        260103,
        4,
    )?;
    let x1740: BytePoly_64 = bigint_mul!(x1727, x1739, 64);
    let x1741: BytePoly_66 = bigint_nondet_quot!(ctx, x1740, x4, 66);
    let x1742: BytePoly_32 = bigint_nondet_rem!(ctx, x1740, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1741, x4, 98), x1742, 98),
            x1740,
            98
        ),
        536459,
        4,
    )?;
    let x1743: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1742, x1733, 32), 32), x4, 32);
    let x1744: BytePoly_32 = bigint_nondet_quot!(ctx, x1743, x4, 32);
    let x1745: BytePoly_32 = bigint_nondet_rem!(ctx, x1743, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1744, x4, 64), x1745, 64),
            x1743,
            64
        ),
        260103,
        4,
    )?;
    let x1746: BytePoly_1 = bigint_nondet_rem!(ctx, x1681, x5, 1);
    let x1747: BytePoly_32 = bigint_nondet_quot!(ctx, x1681, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1747, x5, 33), x1746, 33),
            x1681,
            33
        ),
        260103,
        4,
    )?;
    let x1748: BytePoly_1 = bigint_sub!(x6, x1746, 1);
    eqz(ctx, &bigint_mul!(x1746, x1748, 2), 8131, 2)?;
    let x1749: BytePoly_32 = bigint_add!(bigint_sub!(x1739, x1709, 32), x4, 32);
    let x1750: BytePoly_32 = bigint_nondet_inv!(ctx, x1749, x4, 32);
    let x1751: BytePoly_64 = bigint_mul!(x1749, x1750, 64);
    let x1752: BytePoly_66 = bigint_nondet_quot!(ctx, x1751, x4, 66);
    let x1753: BytePoly_32 = bigint_nondet_rem!(ctx, x1751, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1752, x4, 98), x1753, 98),
            x1751,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1753, x1, 32), 34, 1)?;
    let x1754: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1745, x1711, 32), x4, 32),
        x1750,
        64
    );
    let x1755: BytePoly_66 = bigint_nondet_quot!(ctx, x1754, x4, 66);
    let x1756: BytePoly_32 = bigint_nondet_rem!(ctx, x1754, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1755, x4, 98), x1756, 98),
            x1754,
            98
        ),
        536459,
        4,
    )?;
    let x1757: BytePoly_64 = bigint_mul!(x1756, x1709, 64);
    let x1758: BytePoly_66 = bigint_nondet_quot!(ctx, x1757, x4, 66);
    let x1759: BytePoly_32 = bigint_nondet_rem!(ctx, x1757, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1758, x4, 98), x1759, 98),
            x1757,
            98
        ),
        536459,
        4,
    )?;
    let x1760: BytePoly_32 = bigint_add!(bigint_sub!(x1711, x1759, 32), x4, 32);
    let x1761: BytePoly_32 = bigint_nondet_quot!(ctx, x1760, x4, 32);
    let x1762: BytePoly_32 = bigint_nondet_rem!(ctx, x1760, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1761, x4, 64), x1762, 64),
            x1760,
            64
        ),
        260103,
        4,
    )?;
    let x1763: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1756, x1756, 64), x1709, 64),
                x4,
                64
            ),
            x1739,
            64
        ),
        x4,
        64
    );
    let x1764: BytePoly_66 = bigint_nondet_quot!(ctx, x1763, x4, 66);
    let x1765: BytePoly_32 = bigint_nondet_rem!(ctx, x1763, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1764, x4, 98), x1765, 98),
            x1763,
            98
        ),
        536459,
        4,
    )?;
    let x1766: BytePoly_64 = bigint_mul!(x1756, x1765, 64);
    let x1767: BytePoly_66 = bigint_nondet_quot!(ctx, x1766, x4, 66);
    let x1768: BytePoly_32 = bigint_nondet_rem!(ctx, x1766, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1767, x4, 98), x1768, 98),
            x1766,
            98
        ),
        536459,
        4,
    )?;
    let x1769: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1768, x1762, 32), 32), x4, 32);
    let x1770: BytePoly_32 = bigint_nondet_quot!(ctx, x1769, x4, 32);
    let x1771: BytePoly_32 = bigint_nondet_rem!(ctx, x1769, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1770, x4, 64), x1771, 64),
            x1769,
            64
        ),
        260103,
        4,
    )?;
    let x1772: BytePoly_33 = bigint_add!(
        bigint_mul!(x1765, x1746, 33),
        bigint_mul!(x1709, x1748, 33),
        33
    );
    let x1773: BytePoly_33 = bigint_add!(
        bigint_mul!(x1771, x1746, 33),
        bigint_mul!(x1711, x1748, 33),
        33
    );
    let x1774: BytePoly_35 = bigint_nondet_quot!(ctx, x1772, x4, 35);
    let x1775: BytePoly_32 = bigint_nondet_rem!(ctx, x1772, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1774, x4, 67), x1775, 67),
            x1772,
            67
        ),
        284487,
        4,
    )?;
    let x1776: BytePoly_35 = bigint_nondet_quot!(ctx, x1773, x4, 35);
    let x1777: BytePoly_32 = bigint_nondet_rem!(ctx, x1773, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1776, x4, 67), x1777, 67),
            x1773,
            67
        ),
        284487,
        4,
    )?;
    let x1778: BytePoly_64 = bigint_mul!(x1739, x1739, 64);
    let x1779: BytePoly_66 = bigint_nondet_quot!(ctx, x1778, x4, 66);
    let x1780: BytePoly_32 = bigint_nondet_rem!(ctx, x1778, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1779, x4, 98), x1780, 98),
            x1778,
            98
        ),
        536459,
        4,
    )?;
    let x1781: BytePoly_33 = bigint_add!(bigint_mul!(x1780, x0, 33), x3, 33);
    let x1782: BytePoly_35 = bigint_nondet_quot!(ctx, x1781, x4, 35);
    let x1783: BytePoly_32 = bigint_nondet_rem!(ctx, x1781, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1782, x4, 67), x1783, 67),
            x1781,
            67
        ),
        284487,
        4,
    )?;
    let x1784: BytePoly_32 = bigint_add!(x1745, x1745, 32);
    let x1785: BytePoly_32 = bigint_nondet_quot!(ctx, x1784, x4, 32);
    let x1786: BytePoly_32 = bigint_nondet_rem!(ctx, x1784, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1785, x4, 64), x1786, 64),
            x1784,
            64
        ),
        260103,
        4,
    )?;
    let x1787: BytePoly_32 = bigint_nondet_inv!(ctx, x1786, x4, 32);
    let x1788: BytePoly_64 = bigint_mul!(x1786, x1787, 64);
    let x1789: BytePoly_66 = bigint_nondet_quot!(ctx, x1788, x4, 66);
    let x1790: BytePoly_32 = bigint_nondet_rem!(ctx, x1788, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1789, x4, 98), x1790, 98),
            x1788,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1790, x6, 32), 34, 1)?;
    let x1791: BytePoly_64 = bigint_mul!(x1783, x1787, 64);
    let x1792: BytePoly_66 = bigint_nondet_quot!(ctx, x1791, x4, 66);
    let x1793: BytePoly_32 = bigint_nondet_rem!(ctx, x1791, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1792, x4, 98), x1793, 98),
            x1791,
            98
        ),
        536459,
        4,
    )?;
    let x1794: BytePoly_64 = bigint_mul!(x1793, x1739, 64);
    let x1795: BytePoly_66 = bigint_nondet_quot!(ctx, x1794, x4, 66);
    let x1796: BytePoly_32 = bigint_nondet_rem!(ctx, x1794, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1795, x4, 98), x1796, 98),
            x1794,
            98
        ),
        536459,
        4,
    )?;
    let x1797: BytePoly_32 = bigint_add!(bigint_sub!(x1745, x1796, 32), x4, 32);
    let x1798: BytePoly_32 = bigint_nondet_quot!(ctx, x1797, x4, 32);
    let x1799: BytePoly_32 = bigint_nondet_rem!(ctx, x1797, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1798, x4, 64), x1799, 64),
            x1797,
            64
        ),
        260103,
        4,
    )?;
    let x1800: BytePoly_64 = bigint_mul!(x1793, x1793, 64);
    let x1801: BytePoly_66 = bigint_nondet_quot!(ctx, x1800, x4, 66);
    let x1802: BytePoly_32 = bigint_nondet_rem!(ctx, x1800, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1801, x4, 98), x1802, 98),
            x1800,
            98
        ),
        536459,
        4,
    )?;
    let x1803: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1802, x1739, 32), x4, 32),
            x1739,
            32
        ),
        x4,
        32
    );
    let x1804: BytePoly_32 = bigint_nondet_quot!(ctx, x1803, x4, 32);
    let x1805: BytePoly_32 = bigint_nondet_rem!(ctx, x1803, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1804, x4, 64), x1805, 64),
            x1803,
            64
        ),
        260103,
        4,
    )?;
    let x1806: BytePoly_64 = bigint_mul!(x1793, x1805, 64);
    let x1807: BytePoly_66 = bigint_nondet_quot!(ctx, x1806, x4, 66);
    let x1808: BytePoly_32 = bigint_nondet_rem!(ctx, x1806, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1807, x4, 98), x1808, 98),
            x1806,
            98
        ),
        536459,
        4,
    )?;
    let x1809: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1808, x1799, 32), 32), x4, 32);
    let x1810: BytePoly_32 = bigint_nondet_quot!(ctx, x1809, x4, 32);
    let x1811: BytePoly_32 = bigint_nondet_rem!(ctx, x1809, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1810, x4, 64), x1811, 64),
            x1809,
            64
        ),
        260103,
        4,
    )?;
    let x1812: BytePoly_1 = bigint_nondet_rem!(ctx, x1747, x5, 1);
    let x1813: BytePoly_32 = bigint_nondet_quot!(ctx, x1747, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1813, x5, 33), x1812, 33),
            x1747,
            33
        ),
        260103,
        4,
    )?;
    let x1814: BytePoly_1 = bigint_sub!(x6, x1812, 1);
    eqz(ctx, &bigint_mul!(x1812, x1814, 2), 8131, 2)?;
    let x1815: BytePoly_32 = bigint_add!(bigint_sub!(x1805, x1775, 32), x4, 32);
    let x1816: BytePoly_32 = bigint_nondet_inv!(ctx, x1815, x4, 32);
    let x1817: BytePoly_64 = bigint_mul!(x1815, x1816, 64);
    let x1818: BytePoly_66 = bigint_nondet_quot!(ctx, x1817, x4, 66);
    let x1819: BytePoly_32 = bigint_nondet_rem!(ctx, x1817, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1818, x4, 98), x1819, 98),
            x1817,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1819, x1, 32), 34, 1)?;
    let x1820: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1811, x1777, 32), x4, 32),
        x1816,
        64
    );
    let x1821: BytePoly_66 = bigint_nondet_quot!(ctx, x1820, x4, 66);
    let x1822: BytePoly_32 = bigint_nondet_rem!(ctx, x1820, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1821, x4, 98), x1822, 98),
            x1820,
            98
        ),
        536459,
        4,
    )?;
    let x1823: BytePoly_64 = bigint_mul!(x1822, x1775, 64);
    let x1824: BytePoly_66 = bigint_nondet_quot!(ctx, x1823, x4, 66);
    let x1825: BytePoly_32 = bigint_nondet_rem!(ctx, x1823, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1824, x4, 98), x1825, 98),
            x1823,
            98
        ),
        536459,
        4,
    )?;
    let x1826: BytePoly_32 = bigint_add!(bigint_sub!(x1777, x1825, 32), x4, 32);
    let x1827: BytePoly_32 = bigint_nondet_quot!(ctx, x1826, x4, 32);
    let x1828: BytePoly_32 = bigint_nondet_rem!(ctx, x1826, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1827, x4, 64), x1828, 64),
            x1826,
            64
        ),
        260103,
        4,
    )?;
    let x1829: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1822, x1822, 64), x1775, 64),
                x4,
                64
            ),
            x1805,
            64
        ),
        x4,
        64
    );
    let x1830: BytePoly_66 = bigint_nondet_quot!(ctx, x1829, x4, 66);
    let x1831: BytePoly_32 = bigint_nondet_rem!(ctx, x1829, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1830, x4, 98), x1831, 98),
            x1829,
            98
        ),
        536459,
        4,
    )?;
    let x1832: BytePoly_64 = bigint_mul!(x1822, x1831, 64);
    let x1833: BytePoly_66 = bigint_nondet_quot!(ctx, x1832, x4, 66);
    let x1834: BytePoly_32 = bigint_nondet_rem!(ctx, x1832, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1833, x4, 98), x1834, 98),
            x1832,
            98
        ),
        536459,
        4,
    )?;
    let x1835: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1834, x1828, 32), 32), x4, 32);
    let x1836: BytePoly_32 = bigint_nondet_quot!(ctx, x1835, x4, 32);
    let x1837: BytePoly_32 = bigint_nondet_rem!(ctx, x1835, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1836, x4, 64), x1837, 64),
            x1835,
            64
        ),
        260103,
        4,
    )?;
    let x1838: BytePoly_33 = bigint_add!(
        bigint_mul!(x1831, x1812, 33),
        bigint_mul!(x1775, x1814, 33),
        33
    );
    let x1839: BytePoly_33 = bigint_add!(
        bigint_mul!(x1837, x1812, 33),
        bigint_mul!(x1777, x1814, 33),
        33
    );
    let x1840: BytePoly_35 = bigint_nondet_quot!(ctx, x1838, x4, 35);
    let x1841: BytePoly_32 = bigint_nondet_rem!(ctx, x1838, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1840, x4, 67), x1841, 67),
            x1838,
            67
        ),
        284487,
        4,
    )?;
    let x1842: BytePoly_35 = bigint_nondet_quot!(ctx, x1839, x4, 35);
    let x1843: BytePoly_32 = bigint_nondet_rem!(ctx, x1839, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1842, x4, 67), x1843, 67),
            x1839,
            67
        ),
        284487,
        4,
    )?;
    let x1844: BytePoly_64 = bigint_mul!(x1805, x1805, 64);
    let x1845: BytePoly_66 = bigint_nondet_quot!(ctx, x1844, x4, 66);
    let x1846: BytePoly_32 = bigint_nondet_rem!(ctx, x1844, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1845, x4, 98), x1846, 98),
            x1844,
            98
        ),
        536459,
        4,
    )?;
    let x1847: BytePoly_33 = bigint_add!(bigint_mul!(x1846, x0, 33), x3, 33);
    let x1848: BytePoly_35 = bigint_nondet_quot!(ctx, x1847, x4, 35);
    let x1849: BytePoly_32 = bigint_nondet_rem!(ctx, x1847, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1848, x4, 67), x1849, 67),
            x1847,
            67
        ),
        284487,
        4,
    )?;
    let x1850: BytePoly_32 = bigint_add!(x1811, x1811, 32);
    let x1851: BytePoly_32 = bigint_nondet_quot!(ctx, x1850, x4, 32);
    let x1852: BytePoly_32 = bigint_nondet_rem!(ctx, x1850, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1851, x4, 64), x1852, 64),
            x1850,
            64
        ),
        260103,
        4,
    )?;
    let x1853: BytePoly_32 = bigint_nondet_inv!(ctx, x1852, x4, 32);
    let x1854: BytePoly_64 = bigint_mul!(x1852, x1853, 64);
    let x1855: BytePoly_66 = bigint_nondet_quot!(ctx, x1854, x4, 66);
    let x1856: BytePoly_32 = bigint_nondet_rem!(ctx, x1854, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1855, x4, 98), x1856, 98),
            x1854,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1856, x6, 32), 34, 1)?;
    let x1857: BytePoly_64 = bigint_mul!(x1849, x1853, 64);
    let x1858: BytePoly_66 = bigint_nondet_quot!(ctx, x1857, x4, 66);
    let x1859: BytePoly_32 = bigint_nondet_rem!(ctx, x1857, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1858, x4, 98), x1859, 98),
            x1857,
            98
        ),
        536459,
        4,
    )?;
    let x1860: BytePoly_64 = bigint_mul!(x1859, x1805, 64);
    let x1861: BytePoly_66 = bigint_nondet_quot!(ctx, x1860, x4, 66);
    let x1862: BytePoly_32 = bigint_nondet_rem!(ctx, x1860, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1861, x4, 98), x1862, 98),
            x1860,
            98
        ),
        536459,
        4,
    )?;
    let x1863: BytePoly_32 = bigint_add!(bigint_sub!(x1811, x1862, 32), x4, 32);
    let x1864: BytePoly_32 = bigint_nondet_quot!(ctx, x1863, x4, 32);
    let x1865: BytePoly_32 = bigint_nondet_rem!(ctx, x1863, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1864, x4, 64), x1865, 64),
            x1863,
            64
        ),
        260103,
        4,
    )?;
    let x1866: BytePoly_64 = bigint_mul!(x1859, x1859, 64);
    let x1867: BytePoly_66 = bigint_nondet_quot!(ctx, x1866, x4, 66);
    let x1868: BytePoly_32 = bigint_nondet_rem!(ctx, x1866, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1867, x4, 98), x1868, 98),
            x1866,
            98
        ),
        536459,
        4,
    )?;
    let x1869: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1868, x1805, 32), x4, 32),
            x1805,
            32
        ),
        x4,
        32
    );
    let x1870: BytePoly_32 = bigint_nondet_quot!(ctx, x1869, x4, 32);
    let x1871: BytePoly_32 = bigint_nondet_rem!(ctx, x1869, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1870, x4, 64), x1871, 64),
            x1869,
            64
        ),
        260103,
        4,
    )?;
    let x1872: BytePoly_64 = bigint_mul!(x1859, x1871, 64);
    let x1873: BytePoly_66 = bigint_nondet_quot!(ctx, x1872, x4, 66);
    let x1874: BytePoly_32 = bigint_nondet_rem!(ctx, x1872, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1873, x4, 98), x1874, 98),
            x1872,
            98
        ),
        536459,
        4,
    )?;
    let x1875: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1874, x1865, 32), 32), x4, 32);
    let x1876: BytePoly_32 = bigint_nondet_quot!(ctx, x1875, x4, 32);
    let x1877: BytePoly_32 = bigint_nondet_rem!(ctx, x1875, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1876, x4, 64), x1877, 64),
            x1875,
            64
        ),
        260103,
        4,
    )?;
    let x1878: BytePoly_1 = bigint_nondet_rem!(ctx, x1813, x5, 1);
    let x1879: BytePoly_32 = bigint_nondet_quot!(ctx, x1813, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1879, x5, 33), x1878, 33),
            x1813,
            33
        ),
        260103,
        4,
    )?;
    let x1880: BytePoly_1 = bigint_sub!(x6, x1878, 1);
    eqz(ctx, &bigint_mul!(x1878, x1880, 2), 8131, 2)?;
    let x1881: BytePoly_32 = bigint_add!(bigint_sub!(x1871, x1841, 32), x4, 32);
    let x1882: BytePoly_32 = bigint_nondet_inv!(ctx, x1881, x4, 32);
    let x1883: BytePoly_64 = bigint_mul!(x1881, x1882, 64);
    let x1884: BytePoly_66 = bigint_nondet_quot!(ctx, x1883, x4, 66);
    let x1885: BytePoly_32 = bigint_nondet_rem!(ctx, x1883, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1884, x4, 98), x1885, 98),
            x1883,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1885, x1, 32), 34, 1)?;
    let x1886: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1877, x1843, 32), x4, 32),
        x1882,
        64
    );
    let x1887: BytePoly_66 = bigint_nondet_quot!(ctx, x1886, x4, 66);
    let x1888: BytePoly_32 = bigint_nondet_rem!(ctx, x1886, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1887, x4, 98), x1888, 98),
            x1886,
            98
        ),
        536459,
        4,
    )?;
    let x1889: BytePoly_64 = bigint_mul!(x1888, x1841, 64);
    let x1890: BytePoly_66 = bigint_nondet_quot!(ctx, x1889, x4, 66);
    let x1891: BytePoly_32 = bigint_nondet_rem!(ctx, x1889, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1890, x4, 98), x1891, 98),
            x1889,
            98
        ),
        536459,
        4,
    )?;
    let x1892: BytePoly_32 = bigint_add!(bigint_sub!(x1843, x1891, 32), x4, 32);
    let x1893: BytePoly_32 = bigint_nondet_quot!(ctx, x1892, x4, 32);
    let x1894: BytePoly_32 = bigint_nondet_rem!(ctx, x1892, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1893, x4, 64), x1894, 64),
            x1892,
            64
        ),
        260103,
        4,
    )?;
    let x1895: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1888, x1888, 64), x1841, 64),
                x4,
                64
            ),
            x1871,
            64
        ),
        x4,
        64
    );
    let x1896: BytePoly_66 = bigint_nondet_quot!(ctx, x1895, x4, 66);
    let x1897: BytePoly_32 = bigint_nondet_rem!(ctx, x1895, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1896, x4, 98), x1897, 98),
            x1895,
            98
        ),
        536459,
        4,
    )?;
    let x1898: BytePoly_64 = bigint_mul!(x1888, x1897, 64);
    let x1899: BytePoly_66 = bigint_nondet_quot!(ctx, x1898, x4, 66);
    let x1900: BytePoly_32 = bigint_nondet_rem!(ctx, x1898, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1899, x4, 98), x1900, 98),
            x1898,
            98
        ),
        536459,
        4,
    )?;
    let x1901: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1900, x1894, 32), 32), x4, 32);
    let x1902: BytePoly_32 = bigint_nondet_quot!(ctx, x1901, x4, 32);
    let x1903: BytePoly_32 = bigint_nondet_rem!(ctx, x1901, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1902, x4, 64), x1903, 64),
            x1901,
            64
        ),
        260103,
        4,
    )?;
    let x1904: BytePoly_33 = bigint_add!(
        bigint_mul!(x1897, x1878, 33),
        bigint_mul!(x1841, x1880, 33),
        33
    );
    let x1905: BytePoly_33 = bigint_add!(
        bigint_mul!(x1903, x1878, 33),
        bigint_mul!(x1843, x1880, 33),
        33
    );
    let x1906: BytePoly_35 = bigint_nondet_quot!(ctx, x1904, x4, 35);
    let x1907: BytePoly_32 = bigint_nondet_rem!(ctx, x1904, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1906, x4, 67), x1907, 67),
            x1904,
            67
        ),
        284487,
        4,
    )?;
    let x1908: BytePoly_35 = bigint_nondet_quot!(ctx, x1905, x4, 35);
    let x1909: BytePoly_32 = bigint_nondet_rem!(ctx, x1905, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1908, x4, 67), x1909, 67),
            x1905,
            67
        ),
        284487,
        4,
    )?;
    let x1910: BytePoly_64 = bigint_mul!(x1871, x1871, 64);
    let x1911: BytePoly_66 = bigint_nondet_quot!(ctx, x1910, x4, 66);
    let x1912: BytePoly_32 = bigint_nondet_rem!(ctx, x1910, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1911, x4, 98), x1912, 98),
            x1910,
            98
        ),
        536459,
        4,
    )?;
    let x1913: BytePoly_33 = bigint_add!(bigint_mul!(x1912, x0, 33), x3, 33);
    let x1914: BytePoly_35 = bigint_nondet_quot!(ctx, x1913, x4, 35);
    let x1915: BytePoly_32 = bigint_nondet_rem!(ctx, x1913, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1914, x4, 67), x1915, 67),
            x1913,
            67
        ),
        284487,
        4,
    )?;
    let x1916: BytePoly_32 = bigint_add!(x1877, x1877, 32);
    let x1917: BytePoly_32 = bigint_nondet_quot!(ctx, x1916, x4, 32);
    let x1918: BytePoly_32 = bigint_nondet_rem!(ctx, x1916, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1917, x4, 64), x1918, 64),
            x1916,
            64
        ),
        260103,
        4,
    )?;
    let x1919: BytePoly_32 = bigint_nondet_inv!(ctx, x1918, x4, 32);
    let x1920: BytePoly_64 = bigint_mul!(x1918, x1919, 64);
    let x1921: BytePoly_66 = bigint_nondet_quot!(ctx, x1920, x4, 66);
    let x1922: BytePoly_32 = bigint_nondet_rem!(ctx, x1920, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1921, x4, 98), x1922, 98),
            x1920,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1922, x6, 32), 34, 1)?;
    let x1923: BytePoly_64 = bigint_mul!(x1915, x1919, 64);
    let x1924: BytePoly_66 = bigint_nondet_quot!(ctx, x1923, x4, 66);
    let x1925: BytePoly_32 = bigint_nondet_rem!(ctx, x1923, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1924, x4, 98), x1925, 98),
            x1923,
            98
        ),
        536459,
        4,
    )?;
    let x1926: BytePoly_64 = bigint_mul!(x1925, x1871, 64);
    let x1927: BytePoly_66 = bigint_nondet_quot!(ctx, x1926, x4, 66);
    let x1928: BytePoly_32 = bigint_nondet_rem!(ctx, x1926, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1927, x4, 98), x1928, 98),
            x1926,
            98
        ),
        536459,
        4,
    )?;
    let x1929: BytePoly_32 = bigint_add!(bigint_sub!(x1877, x1928, 32), x4, 32);
    let x1930: BytePoly_32 = bigint_nondet_quot!(ctx, x1929, x4, 32);
    let x1931: BytePoly_32 = bigint_nondet_rem!(ctx, x1929, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1930, x4, 64), x1931, 64),
            x1929,
            64
        ),
        260103,
        4,
    )?;
    let x1932: BytePoly_64 = bigint_mul!(x1925, x1925, 64);
    let x1933: BytePoly_66 = bigint_nondet_quot!(ctx, x1932, x4, 66);
    let x1934: BytePoly_32 = bigint_nondet_rem!(ctx, x1932, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1933, x4, 98), x1934, 98),
            x1932,
            98
        ),
        536459,
        4,
    )?;
    let x1935: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x1934, x1871, 32), x4, 32),
            x1871,
            32
        ),
        x4,
        32
    );
    let x1936: BytePoly_32 = bigint_nondet_quot!(ctx, x1935, x4, 32);
    let x1937: BytePoly_32 = bigint_nondet_rem!(ctx, x1935, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1936, x4, 64), x1937, 64),
            x1935,
            64
        ),
        260103,
        4,
    )?;
    let x1938: BytePoly_64 = bigint_mul!(x1925, x1937, 64);
    let x1939: BytePoly_66 = bigint_nondet_quot!(ctx, x1938, x4, 66);
    let x1940: BytePoly_32 = bigint_nondet_rem!(ctx, x1938, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1939, x4, 98), x1940, 98),
            x1938,
            98
        ),
        536459,
        4,
    )?;
    let x1941: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1940, x1931, 32), 32), x4, 32);
    let x1942: BytePoly_32 = bigint_nondet_quot!(ctx, x1941, x4, 32);
    let x1943: BytePoly_32 = bigint_nondet_rem!(ctx, x1941, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1942, x4, 64), x1943, 64),
            x1941,
            64
        ),
        260103,
        4,
    )?;
    let x1944: BytePoly_1 = bigint_nondet_rem!(ctx, x1879, x5, 1);
    let x1945: BytePoly_32 = bigint_nondet_quot!(ctx, x1879, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1945, x5, 33), x1944, 33),
            x1879,
            33
        ),
        260103,
        4,
    )?;
    let x1946: BytePoly_1 = bigint_sub!(x6, x1944, 1);
    eqz(ctx, &bigint_mul!(x1944, x1946, 2), 8131, 2)?;
    let x1947: BytePoly_32 = bigint_add!(bigint_sub!(x1937, x1907, 32), x4, 32);
    let x1948: BytePoly_32 = bigint_nondet_inv!(ctx, x1947, x4, 32);
    let x1949: BytePoly_64 = bigint_mul!(x1947, x1948, 64);
    let x1950: BytePoly_66 = bigint_nondet_quot!(ctx, x1949, x4, 66);
    let x1951: BytePoly_32 = bigint_nondet_rem!(ctx, x1949, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1950, x4, 98), x1951, 98),
            x1949,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1951, x1, 32), 34, 1)?;
    let x1952: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x1943, x1909, 32), x4, 32),
        x1948,
        64
    );
    let x1953: BytePoly_66 = bigint_nondet_quot!(ctx, x1952, x4, 66);
    let x1954: BytePoly_32 = bigint_nondet_rem!(ctx, x1952, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1953, x4, 98), x1954, 98),
            x1952,
            98
        ),
        536459,
        4,
    )?;
    let x1955: BytePoly_64 = bigint_mul!(x1954, x1907, 64);
    let x1956: BytePoly_66 = bigint_nondet_quot!(ctx, x1955, x4, 66);
    let x1957: BytePoly_32 = bigint_nondet_rem!(ctx, x1955, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1956, x4, 98), x1957, 98),
            x1955,
            98
        ),
        536459,
        4,
    )?;
    let x1958: BytePoly_32 = bigint_add!(bigint_sub!(x1909, x1957, 32), x4, 32);
    let x1959: BytePoly_32 = bigint_nondet_quot!(ctx, x1958, x4, 32);
    let x1960: BytePoly_32 = bigint_nondet_rem!(ctx, x1958, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1959, x4, 64), x1960, 64),
            x1958,
            64
        ),
        260103,
        4,
    )?;
    let x1961: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x1954, x1954, 64), x1907, 64),
                x4,
                64
            ),
            x1937,
            64
        ),
        x4,
        64
    );
    let x1962: BytePoly_66 = bigint_nondet_quot!(ctx, x1961, x4, 66);
    let x1963: BytePoly_32 = bigint_nondet_rem!(ctx, x1961, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1962, x4, 98), x1963, 98),
            x1961,
            98
        ),
        536459,
        4,
    )?;
    let x1964: BytePoly_64 = bigint_mul!(x1954, x1963, 64);
    let x1965: BytePoly_66 = bigint_nondet_quot!(ctx, x1964, x4, 66);
    let x1966: BytePoly_32 = bigint_nondet_rem!(ctx, x1964, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1965, x4, 98), x1966, 98),
            x1964,
            98
        ),
        536459,
        4,
    )?;
    let x1967: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x1966, x1960, 32), 32), x4, 32);
    let x1968: BytePoly_32 = bigint_nondet_quot!(ctx, x1967, x4, 32);
    let x1969: BytePoly_32 = bigint_nondet_rem!(ctx, x1967, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1968, x4, 64), x1969, 64),
            x1967,
            64
        ),
        260103,
        4,
    )?;
    let x1970: BytePoly_33 = bigint_add!(
        bigint_mul!(x1963, x1944, 33),
        bigint_mul!(x1907, x1946, 33),
        33
    );
    let x1971: BytePoly_33 = bigint_add!(
        bigint_mul!(x1969, x1944, 33),
        bigint_mul!(x1909, x1946, 33),
        33
    );
    let x1972: BytePoly_35 = bigint_nondet_quot!(ctx, x1970, x4, 35);
    let x1973: BytePoly_32 = bigint_nondet_rem!(ctx, x1970, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1972, x4, 67), x1973, 67),
            x1970,
            67
        ),
        284487,
        4,
    )?;
    let x1974: BytePoly_35 = bigint_nondet_quot!(ctx, x1971, x4, 35);
    let x1975: BytePoly_32 = bigint_nondet_rem!(ctx, x1971, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1974, x4, 67), x1975, 67),
            x1971,
            67
        ),
        284487,
        4,
    )?;
    let x1976: BytePoly_64 = bigint_mul!(x1937, x1937, 64);
    let x1977: BytePoly_66 = bigint_nondet_quot!(ctx, x1976, x4, 66);
    let x1978: BytePoly_32 = bigint_nondet_rem!(ctx, x1976, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1977, x4, 98), x1978, 98),
            x1976,
            98
        ),
        536459,
        4,
    )?;
    let x1979: BytePoly_33 = bigint_add!(bigint_mul!(x1978, x0, 33), x3, 33);
    let x1980: BytePoly_35 = bigint_nondet_quot!(ctx, x1979, x4, 35);
    let x1981: BytePoly_32 = bigint_nondet_rem!(ctx, x1979, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1980, x4, 67), x1981, 67),
            x1979,
            67
        ),
        284487,
        4,
    )?;
    let x1982: BytePoly_32 = bigint_add!(x1943, x1943, 32);
    let x1983: BytePoly_32 = bigint_nondet_quot!(ctx, x1982, x4, 32);
    let x1984: BytePoly_32 = bigint_nondet_rem!(ctx, x1982, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1983, x4, 64), x1984, 64),
            x1982,
            64
        ),
        260103,
        4,
    )?;
    let x1985: BytePoly_32 = bigint_nondet_inv!(ctx, x1984, x4, 32);
    let x1986: BytePoly_64 = bigint_mul!(x1984, x1985, 64);
    let x1987: BytePoly_66 = bigint_nondet_quot!(ctx, x1986, x4, 66);
    let x1988: BytePoly_32 = bigint_nondet_rem!(ctx, x1986, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1987, x4, 98), x1988, 98),
            x1986,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x1988, x6, 32), 34, 1)?;
    let x1989: BytePoly_64 = bigint_mul!(x1981, x1985, 64);
    let x1990: BytePoly_66 = bigint_nondet_quot!(ctx, x1989, x4, 66);
    let x1991: BytePoly_32 = bigint_nondet_rem!(ctx, x1989, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1990, x4, 98), x1991, 98),
            x1989,
            98
        ),
        536459,
        4,
    )?;
    let x1992: BytePoly_64 = bigint_mul!(x1991, x1937, 64);
    let x1993: BytePoly_66 = bigint_nondet_quot!(ctx, x1992, x4, 66);
    let x1994: BytePoly_32 = bigint_nondet_rem!(ctx, x1992, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1993, x4, 98), x1994, 98),
            x1992,
            98
        ),
        536459,
        4,
    )?;
    let x1995: BytePoly_32 = bigint_add!(bigint_sub!(x1943, x1994, 32), x4, 32);
    let x1996: BytePoly_32 = bigint_nondet_quot!(ctx, x1995, x4, 32);
    let x1997: BytePoly_32 = bigint_nondet_rem!(ctx, x1995, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1996, x4, 64), x1997, 64),
            x1995,
            64
        ),
        260103,
        4,
    )?;
    let x1998: BytePoly_64 = bigint_mul!(x1991, x1991, 64);
    let x1999: BytePoly_66 = bigint_nondet_quot!(ctx, x1998, x4, 66);
    let x2000: BytePoly_32 = bigint_nondet_rem!(ctx, x1998, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x1999, x4, 98), x2000, 98),
            x1998,
            98
        ),
        536459,
        4,
    )?;
    let x2001: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2000, x1937, 32), x4, 32),
            x1937,
            32
        ),
        x4,
        32
    );
    let x2002: BytePoly_32 = bigint_nondet_quot!(ctx, x2001, x4, 32);
    let x2003: BytePoly_32 = bigint_nondet_rem!(ctx, x2001, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2002, x4, 64), x2003, 64),
            x2001,
            64
        ),
        260103,
        4,
    )?;
    let x2004: BytePoly_64 = bigint_mul!(x1991, x2003, 64);
    let x2005: BytePoly_66 = bigint_nondet_quot!(ctx, x2004, x4, 66);
    let x2006: BytePoly_32 = bigint_nondet_rem!(ctx, x2004, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2005, x4, 98), x2006, 98),
            x2004,
            98
        ),
        536459,
        4,
    )?;
    let x2007: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x2006, x1997, 32), 32), x4, 32);
    let x2008: BytePoly_32 = bigint_nondet_quot!(ctx, x2007, x4, 32);
    let x2009: BytePoly_32 = bigint_nondet_rem!(ctx, x2007, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2008, x4, 64), x2009, 64),
            x2007,
            64
        ),
        260103,
        4,
    )?;
    let x2010: BytePoly_1 = bigint_nondet_rem!(ctx, x1945, x5, 1);
    let x2011: BytePoly_32 = bigint_nondet_quot!(ctx, x1945, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2011, x5, 33), x2010, 33),
            x1945,
            33
        ),
        260103,
        4,
    )?;
    let x2012: BytePoly_1 = bigint_sub!(x6, x2010, 1);
    eqz(ctx, &bigint_mul!(x2010, x2012, 2), 8131, 2)?;
    let x2013: BytePoly_32 = bigint_add!(bigint_sub!(x2003, x1973, 32), x4, 32);
    let x2014: BytePoly_32 = bigint_nondet_inv!(ctx, x2013, x4, 32);
    let x2015: BytePoly_64 = bigint_mul!(x2013, x2014, 64);
    let x2016: BytePoly_66 = bigint_nondet_quot!(ctx, x2015, x4, 66);
    let x2017: BytePoly_32 = bigint_nondet_rem!(ctx, x2015, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2016, x4, 98), x2017, 98),
            x2015,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2017, x1, 32), 34, 1)?;
    let x2018: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2009, x1975, 32), x4, 32),
        x2014,
        64
    );
    let x2019: BytePoly_66 = bigint_nondet_quot!(ctx, x2018, x4, 66);
    let x2020: BytePoly_32 = bigint_nondet_rem!(ctx, x2018, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2019, x4, 98), x2020, 98),
            x2018,
            98
        ),
        536459,
        4,
    )?;
    let x2021: BytePoly_64 = bigint_mul!(x2020, x1973, 64);
    let x2022: BytePoly_66 = bigint_nondet_quot!(ctx, x2021, x4, 66);
    let x2023: BytePoly_32 = bigint_nondet_rem!(ctx, x2021, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2022, x4, 98), x2023, 98),
            x2021,
            98
        ),
        536459,
        4,
    )?;
    let x2024: BytePoly_32 = bigint_add!(bigint_sub!(x1975, x2023, 32), x4, 32);
    let x2025: BytePoly_32 = bigint_nondet_quot!(ctx, x2024, x4, 32);
    let x2026: BytePoly_32 = bigint_nondet_rem!(ctx, x2024, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2025, x4, 64), x2026, 64),
            x2024,
            64
        ),
        260103,
        4,
    )?;
    let x2027: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2020, x2020, 64), x1973, 64),
                x4,
                64
            ),
            x2003,
            64
        ),
        x4,
        64
    );
    let x2028: BytePoly_66 = bigint_nondet_quot!(ctx, x2027, x4, 66);
    let x2029: BytePoly_32 = bigint_nondet_rem!(ctx, x2027, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2028, x4, 98), x2029, 98),
            x2027,
            98
        ),
        536459,
        4,
    )?;
    let x2030: BytePoly_64 = bigint_mul!(x2020, x2029, 64);
    let x2031: BytePoly_66 = bigint_nondet_quot!(ctx, x2030, x4, 66);
    let x2032: BytePoly_32 = bigint_nondet_rem!(ctx, x2030, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2031, x4, 98), x2032, 98),
            x2030,
            98
        ),
        536459,
        4,
    )?;
    let x2033: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x2032, x2026, 32), 32), x4, 32);
    let x2034: BytePoly_32 = bigint_nondet_quot!(ctx, x2033, x4, 32);
    let x2035: BytePoly_32 = bigint_nondet_rem!(ctx, x2033, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2034, x4, 64), x2035, 64),
            x2033,
            64
        ),
        260103,
        4,
    )?;
    let x2036: BytePoly_33 = bigint_add!(
        bigint_mul!(x2029, x2010, 33),
        bigint_mul!(x1973, x2012, 33),
        33
    );
    let x2037: BytePoly_33 = bigint_add!(
        bigint_mul!(x2035, x2010, 33),
        bigint_mul!(x1975, x2012, 33),
        33
    );
    let x2038: BytePoly_35 = bigint_nondet_quot!(ctx, x2036, x4, 35);
    let x2039: BytePoly_32 = bigint_nondet_rem!(ctx, x2036, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2038, x4, 67), x2039, 67),
            x2036,
            67
        ),
        284487,
        4,
    )?;
    let x2040: BytePoly_35 = bigint_nondet_quot!(ctx, x2037, x4, 35);
    let x2041: BytePoly_32 = bigint_nondet_rem!(ctx, x2037, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2040, x4, 67), x2041, 67),
            x2037,
            67
        ),
        284487,
        4,
    )?;
    let x2042: BytePoly_64 = bigint_mul!(x2003, x2003, 64);
    let x2043: BytePoly_66 = bigint_nondet_quot!(ctx, x2042, x4, 66);
    let x2044: BytePoly_32 = bigint_nondet_rem!(ctx, x2042, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2043, x4, 98), x2044, 98),
            x2042,
            98
        ),
        536459,
        4,
    )?;
    let x2045: BytePoly_33 = bigint_add!(bigint_mul!(x2044, x0, 33), x3, 33);
    let x2046: BytePoly_35 = bigint_nondet_quot!(ctx, x2045, x4, 35);
    let x2047: BytePoly_32 = bigint_nondet_rem!(ctx, x2045, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2046, x4, 67), x2047, 67),
            x2045,
            67
        ),
        284487,
        4,
    )?;
    let x2048: BytePoly_32 = bigint_add!(x2009, x2009, 32);
    let x2049: BytePoly_32 = bigint_nondet_quot!(ctx, x2048, x4, 32);
    let x2050: BytePoly_32 = bigint_nondet_rem!(ctx, x2048, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2049, x4, 64), x2050, 64),
            x2048,
            64
        ),
        260103,
        4,
    )?;
    let x2051: BytePoly_32 = bigint_nondet_inv!(ctx, x2050, x4, 32);
    let x2052: BytePoly_64 = bigint_mul!(x2050, x2051, 64);
    let x2053: BytePoly_66 = bigint_nondet_quot!(ctx, x2052, x4, 66);
    let x2054: BytePoly_32 = bigint_nondet_rem!(ctx, x2052, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2053, x4, 98), x2054, 98),
            x2052,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2054, x6, 32), 34, 1)?;
    let x2055: BytePoly_64 = bigint_mul!(x2047, x2051, 64);
    let x2056: BytePoly_66 = bigint_nondet_quot!(ctx, x2055, x4, 66);
    let x2057: BytePoly_32 = bigint_nondet_rem!(ctx, x2055, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2056, x4, 98), x2057, 98),
            x2055,
            98
        ),
        536459,
        4,
    )?;
    let x2058: BytePoly_64 = bigint_mul!(x2057, x2003, 64);
    let x2059: BytePoly_66 = bigint_nondet_quot!(ctx, x2058, x4, 66);
    let x2060: BytePoly_32 = bigint_nondet_rem!(ctx, x2058, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2059, x4, 98), x2060, 98),
            x2058,
            98
        ),
        536459,
        4,
    )?;
    let x2061: BytePoly_32 = bigint_add!(bigint_sub!(x2009, x2060, 32), x4, 32);
    let x2062: BytePoly_32 = bigint_nondet_quot!(ctx, x2061, x4, 32);
    let x2063: BytePoly_32 = bigint_nondet_rem!(ctx, x2061, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2062, x4, 64), x2063, 64),
            x2061,
            64
        ),
        260103,
        4,
    )?;
    let x2064: BytePoly_64 = bigint_mul!(x2057, x2057, 64);
    let x2065: BytePoly_66 = bigint_nondet_quot!(ctx, x2064, x4, 66);
    let x2066: BytePoly_32 = bigint_nondet_rem!(ctx, x2064, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2065, x4, 98), x2066, 98),
            x2064,
            98
        ),
        536459,
        4,
    )?;
    let x2067: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2066, x2003, 32), x4, 32),
            x2003,
            32
        ),
        x4,
        32
    );
    let x2068: BytePoly_32 = bigint_nondet_quot!(ctx, x2067, x4, 32);
    let x2069: BytePoly_32 = bigint_nondet_rem!(ctx, x2067, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2068, x4, 64), x2069, 64),
            x2067,
            64
        ),
        260103,
        4,
    )?;
    let x2070: BytePoly_64 = bigint_mul!(x2057, x2069, 64);
    let x2071: BytePoly_66 = bigint_nondet_quot!(ctx, x2070, x4, 66);
    let x2072: BytePoly_32 = bigint_nondet_rem!(ctx, x2070, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2071, x4, 98), x2072, 98),
            x2070,
            98
        ),
        536459,
        4,
    )?;
    let x2073: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x2072, x2063, 32), 32), x4, 32);
    let x2074: BytePoly_32 = bigint_nondet_quot!(ctx, x2073, x4, 32);
    let x2075: BytePoly_32 = bigint_nondet_rem!(ctx, x2073, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2074, x4, 64), x2075, 64),
            x2073,
            64
        ),
        260103,
        4,
    )?;
    let x2076: BytePoly_1 = bigint_nondet_rem!(ctx, x2011, x5, 1);
    let x2077: BytePoly_32 = bigint_nondet_quot!(ctx, x2011, x5, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2077, x5, 33), x2076, 33),
            x2011,
            33
        ),
        260103,
        4,
    )?;
    let x2078: BytePoly_1 = bigint_sub!(x6, x2076, 1);
    eqz(ctx, &bigint_mul!(x2076, x2078, 2), 8131, 2)?;
    let x2079: BytePoly_32 = bigint_add!(bigint_sub!(x2069, x2039, 32), x4, 32);
    let x2080: BytePoly_32 = bigint_nondet_inv!(ctx, x2079, x4, 32);
    let x2081: BytePoly_64 = bigint_mul!(x2079, x2080, 64);
    let x2082: BytePoly_66 = bigint_nondet_quot!(ctx, x2081, x4, 66);
    let x2083: BytePoly_32 = bigint_nondet_rem!(ctx, x2081, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2082, x4, 98), x2083, 98),
            x2081,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2083, x1, 32), 34, 1)?;
    let x2084: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(x2075, x2041, 32), x4, 32),
        x2080,
        64
    );
    let x2085: BytePoly_66 = bigint_nondet_quot!(ctx, x2084, x4, 66);
    let x2086: BytePoly_32 = bigint_nondet_rem!(ctx, x2084, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2085, x4, 98), x2086, 98),
            x2084,
            98
        ),
        536459,
        4,
    )?;
    let x2087: BytePoly_64 = bigint_mul!(x2086, x2039, 64);
    let x2088: BytePoly_66 = bigint_nondet_quot!(ctx, x2087, x4, 66);
    let x2089: BytePoly_32 = bigint_nondet_rem!(ctx, x2087, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2088, x4, 98), x2089, 98),
            x2087,
            98
        ),
        536459,
        4,
    )?;
    let x2090: BytePoly_32 = bigint_add!(bigint_sub!(x2041, x2089, 32), x4, 32);
    let x2091: BytePoly_32 = bigint_nondet_quot!(ctx, x2090, x4, 32);
    let x2092: BytePoly_32 = bigint_nondet_rem!(ctx, x2090, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2091, x4, 64), x2092, 64),
            x2090,
            64
        ),
        260103,
        4,
    )?;
    let x2093: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2086, x2086, 64), x2039, 64),
                x4,
                64
            ),
            x2069,
            64
        ),
        x4,
        64
    );
    let x2094: BytePoly_66 = bigint_nondet_quot!(ctx, x2093, x4, 66);
    let x2095: BytePoly_32 = bigint_nondet_rem!(ctx, x2093, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2094, x4, 98), x2095, 98),
            x2093,
            98
        ),
        536459,
        4,
    )?;
    let x2096: BytePoly_64 = bigint_mul!(x2086, x2095, 64);
    let x2097: BytePoly_66 = bigint_nondet_quot!(ctx, x2096, x4, 66);
    let x2098: BytePoly_32 = bigint_nondet_rem!(ctx, x2096, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2097, x4, 98), x2098, 98),
            x2096,
            98
        ),
        536459,
        4,
    )?;
    let x2099: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x2098, x2092, 32), 32), x4, 32);
    let x2100: BytePoly_32 = bigint_nondet_quot!(ctx, x2099, x4, 32);
    let x2101: BytePoly_32 = bigint_nondet_rem!(ctx, x2099, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2100, x4, 64), x2101, 64),
            x2099,
            64
        ),
        260103,
        4,
    )?;
    let x2102: BytePoly_33 = bigint_add!(
        bigint_mul!(x2095, x2076, 33),
        bigint_mul!(x2039, x2078, 33),
        33
    );
    let x2103: BytePoly_33 = bigint_add!(
        bigint_mul!(x2101, x2076, 33),
        bigint_mul!(x2041, x2078, 33),
        33
    );
    let x2104: BytePoly_35 = bigint_nondet_quot!(ctx, x2102, x4, 35);
    let x2105: BytePoly_32 = bigint_nondet_rem!(ctx, x2102, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2104, x4, 67), x2105, 67),
            x2102,
            67
        ),
        284487,
        4,
    )?;
    let x2106: BytePoly_35 = bigint_nondet_quot!(ctx, x2103, x4, 35);
    let x2107: BytePoly_32 = bigint_nondet_rem!(ctx, x2103, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2106, x4, 67), x2107, 67),
            x2103,
            67
        ),
        284487,
        4,
    )?;
    let x2108: BytePoly_64 = bigint_mul!(x2069, x2069, 64);
    let x2109: BytePoly_66 = bigint_nondet_quot!(ctx, x2108, x4, 66);
    let x2110: BytePoly_32 = bigint_nondet_rem!(ctx, x2108, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2109, x4, 98), x2110, 98),
            x2108,
            98
        ),
        536459,
        4,
    )?;
    let x2111: BytePoly_33 = bigint_add!(bigint_mul!(x2110, x0, 33), x3, 33);
    let x2112: BytePoly_35 = bigint_nondet_quot!(ctx, x2111, x4, 35);
    let x2113: BytePoly_32 = bigint_nondet_rem!(ctx, x2111, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2112, x4, 67), x2113, 67),
            x2111,
            67
        ),
        284487,
        4,
    )?;
    let x2114: BytePoly_32 = bigint_add!(x2075, x2075, 32);
    let x2115: BytePoly_32 = bigint_nondet_quot!(ctx, x2114, x4, 32);
    let x2116: BytePoly_32 = bigint_nondet_rem!(ctx, x2114, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2115, x4, 64), x2116, 64),
            x2114,
            64
        ),
        260103,
        4,
    )?;
    let x2117: BytePoly_32 = bigint_nondet_inv!(ctx, x2116, x4, 32);
    let x2118: BytePoly_64 = bigint_mul!(x2116, x2117, 64);
    let x2119: BytePoly_66 = bigint_nondet_quot!(ctx, x2118, x4, 66);
    let x2120: BytePoly_32 = bigint_nondet_rem!(ctx, x2118, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2119, x4, 98), x2120, 98),
            x2118,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2120, x6, 32), 34, 1)?;
    let x2121: BytePoly_64 = bigint_mul!(x2113, x2117, 64);
    let x2122: BytePoly_66 = bigint_nondet_quot!(ctx, x2121, x4, 66);
    let x2123: BytePoly_32 = bigint_nondet_rem!(ctx, x2121, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2122, x4, 98), x2123, 98),
            x2121,
            98
        ),
        536459,
        4,
    )?;
    let x2124: BytePoly_64 = bigint_mul!(x2123, x2069, 64);
    let x2125: BytePoly_66 = bigint_nondet_quot!(ctx, x2124, x4, 66);
    let x2126: BytePoly_32 = bigint_nondet_rem!(ctx, x2124, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2125, x4, 98), x2126, 98),
            x2124,
            98
        ),
        536459,
        4,
    )?;
    let x2127: BytePoly_32 = bigint_add!(bigint_sub!(x2075, x2126, 32), x4, 32);
    let x2128: BytePoly_32 = bigint_nondet_quot!(ctx, x2127, x4, 32);
    let x2129: BytePoly_32 = bigint_nondet_rem!(ctx, x2127, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2128, x4, 64), x2129, 64),
            x2127,
            64
        ),
        260103,
        4,
    )?;
    let x2130: BytePoly_64 = bigint_mul!(x2123, x2123, 64);
    let x2131: BytePoly_66 = bigint_nondet_quot!(ctx, x2130, x4, 66);
    let x2132: BytePoly_32 = bigint_nondet_rem!(ctx, x2130, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2131, x4, 98), x2132, 98),
            x2130,
            98
        ),
        536459,
        4,
    )?;
    let x2133: BytePoly_32 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(x2132, x2069, 32), x4, 32),
            x2069,
            32
        ),
        x4,
        32
    );
    let x2134: BytePoly_32 = bigint_nondet_quot!(ctx, x2133, x4, 32);
    let x2135: BytePoly_32 = bigint_nondet_rem!(ctx, x2133, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2134, x4, 64), x2135, 64),
            x2133,
            64
        ),
        260103,
        4,
    )?;
    let x2136: BytePoly_64 = bigint_mul!(x2123, x2135, 64);
    let x2137: BytePoly_66 = bigint_nondet_quot!(ctx, x2136, x4, 66);
    let x2138: BytePoly_32 = bigint_nondet_rem!(ctx, x2136, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2137, x4, 98), x2138, 98),
            x2136,
            98
        ),
        536459,
        4,
    )?;
    let x2139: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x2138, x2129, 32), 32), x4, 32);
    let x2140: BytePoly_32 = bigint_nondet_quot!(ctx, x2139, x4, 32);
    let x2141: BytePoly_32 = bigint_nondet_rem!(ctx, x2139, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2140, x4, 64), x2141, 64),
            x2139,
            64
        ),
        260103,
        4,
    )?;
    let x2142: BytePoly_32 = bigint_add!(bigint_sub!(x10, x2105, 32), x4, 32);
    let x2143: BytePoly_32 = bigint_nondet_inv!(ctx, x2142, x4, 32);
    let x2144: BytePoly_64 = bigint_mul!(x2142, x2143, 64);
    let x2145: BytePoly_66 = bigint_nondet_quot!(ctx, x2144, x4, 66);
    let x2146: BytePoly_32 = bigint_nondet_rem!(ctx, x2144, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2145, x4, 98), x2146, 98),
            x2144,
            98
        ),
        536459,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2146, x1, 32), 34, 1)?;
    let x2147: BytePoly_64 = bigint_mul!(
        bigint_add!(bigint_sub!(bigint_sub!(x4, x11, 32), x2107, 32), x4, 32),
        x2143,
        64
    );
    let x2148: BytePoly_66 = bigint_nondet_quot!(ctx, x2147, x4, 66);
    let x2149: BytePoly_32 = bigint_nondet_rem!(ctx, x2147, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2148, x4, 98), x2149, 98),
            x2147,
            98
        ),
        536459,
        4,
    )?;
    let x2150: BytePoly_64 = bigint_mul!(x2149, x2105, 64);
    let x2151: BytePoly_66 = bigint_nondet_quot!(ctx, x2150, x4, 66);
    let x2152: BytePoly_32 = bigint_nondet_rem!(ctx, x2150, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2151, x4, 98), x2152, 98),
            x2150,
            98
        ),
        536459,
        4,
    )?;
    let x2153: BytePoly_32 = bigint_add!(bigint_sub!(x2107, x2152, 32), x4, 32);
    let x2154: BytePoly_32 = bigint_nondet_quot!(ctx, x2153, x4, 32);
    let x2155: BytePoly_32 = bigint_nondet_rem!(ctx, x2153, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2154, x4, 64), x2155, 64),
            x2153,
            64
        ),
        260103,
        4,
    )?;
    let x2156: BytePoly_64 = bigint_add!(
        bigint_sub!(
            bigint_add!(
                bigint_sub!(bigint_mul!(x2149, x2149, 64), x2105, 64),
                x4,
                64
            ),
            x10,
            64
        ),
        x4,
        64
    );
    let x2157: BytePoly_66 = bigint_nondet_quot!(ctx, x2156, x4, 66);
    let x2158: BytePoly_32 = bigint_nondet_rem!(ctx, x2156, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2157, x4, 98), x2158, 98),
            x2156,
            98
        ),
        536459,
        4,
    )?;
    let x2159: BytePoly_64 = bigint_mul!(x2149, x2158, 64);
    let x2160: BytePoly_66 = bigint_nondet_quot!(ctx, x2159, x4, 66);
    let x2161: BytePoly_32 = bigint_nondet_rem!(ctx, x2159, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2160, x4, 98), x2161, 98),
            x2159,
            98
        ),
        536459,
        4,
    )?;
    let x2162: BytePoly_32 =
        bigint_add!(bigint_sub!(x4, bigint_add!(x2161, x2155, 32), 32), x4, 32);
    let x2163: BytePoly_32 = bigint_nondet_quot!(ctx, x2162, x4, 32);
    let x2164: BytePoly_32 = bigint_nondet_rem!(ctx, x2162, x4, 32);
    eqz(
        ctx,
        &bigint_sub!(
            bigint_add!(bigint_mul!(x2163, x4, 64), x2164, 64),
            x2162,
            64
        ),
        260103,
        4,
    )?;
    eqz(ctx, &bigint_sub!(x2158, x13, 32), 34, 1)?;
    eqz(ctx, &bigint_sub!(x2164, x14, 32), 34, 1)?;
    return Ok(());
}
pub fn ec_aff_neg_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 11);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x3: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    let x4: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x5: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    eqz(ctx, &bigint_sub!(x1, x4, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(bigint_sub!(x0, x2, 1), x5, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x3, x3, 1), 34, 1)?;
    return Ok(());
}
pub fn ec_aff_sub_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_const!(ctx, 1);
    let x1: BytePoly_1 = bigint_const!(ctx, 11);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x3: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x4: BytePoly_2 = bigint_def!(ctx, 2, 2, 1);
    let x5: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x6: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    let x7: BytePoly_1 = bigint_def!(ctx, 1, 5, 1);
    let x8: BytePoly_1 = bigint_def!(ctx, 1, 6, 1);
    let x9: BytePoly_1 = bigint_add!(bigint_sub!(x5, x2, 1), x1, 1);
    let x10: BytePoly_1 = bigint_nondet_inv!(ctx, x9, x1, 1);
    let x11: BytePoly_2 = bigint_mul!(x9, x10, 2);
    let x12: BytePoly_3 = bigint_nondet_quot!(ctx, x11, x1, 3);
    let x13: BytePoly_1 = bigint_nondet_rem!(ctx, x11, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x12, x1, 4), x13, 4), x11, 4),
        24387,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x13, x0, 1), 34, 1)?;
    let x14: BytePoly_2 = bigint_mul!(
        bigint_add!(bigint_sub!(bigint_sub!(x1, x6, 1), x3, 1), x1, 1),
        x10,
        2
    );
    let x15: BytePoly_3 = bigint_nondet_quot!(ctx, x14, x1, 3);
    let x16: BytePoly_1 = bigint_nondet_rem!(ctx, x14, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x15, x1, 4), x16, 4), x14, 4),
        24387,
        2,
    )?;
    let x17: BytePoly_2 = bigint_mul!(x16, x2, 2);
    let x18: BytePoly_3 = bigint_nondet_quot!(ctx, x17, x1, 3);
    let x19: BytePoly_1 = bigint_nondet_rem!(ctx, x17, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x18, x1, 4), x19, 4), x17, 4),
        24387,
        2,
    )?;
    let x20: BytePoly_1 = bigint_add!(bigint_sub!(x3, x19, 1), x1, 1);
    let x21: BytePoly_1 = bigint_nondet_quot!(ctx, x20, x1, 1);
    let x22: BytePoly_1 = bigint_nondet_rem!(ctx, x20, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x21, x1, 2), x22, 2), x20, 2),
        8131,
        2,
    )?;
    let x23: BytePoly_2 = bigint_add!(
        bigint_sub!(
            bigint_add!(bigint_sub!(bigint_mul!(x16, x16, 2), x2, 2), x1, 2),
            x5,
            2
        ),
        x1,
        2
    );
    let x24: BytePoly_3 = bigint_nondet_quot!(ctx, x23, x1, 3);
    let x25: BytePoly_1 = bigint_nondet_rem!(ctx, x23, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x24, x1, 4), x25, 4), x23, 4),
        24387,
        2,
    )?;
    let x26: BytePoly_2 = bigint_mul!(x16, x25, 2);
    let x27: BytePoly_3 = bigint_nondet_quot!(ctx, x26, x1, 3);
    let x28: BytePoly_1 = bigint_nondet_rem!(ctx, x26, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x27, x1, 4), x28, 4), x26, 4),
        24387,
        2,
    )?;
    let x29: BytePoly_1 = bigint_add!(bigint_sub!(x1, bigint_add!(x28, x22, 1), 1), x1, 1);
    let x30: BytePoly_1 = bigint_nondet_quot!(ctx, x29, x1, 1);
    let x31: BytePoly_1 = bigint_nondet_rem!(ctx, x29, x1, 1);
    eqz(
        ctx,
        &bigint_sub!(bigint_add!(bigint_mul!(x30, x1, 2), x31, 2), x29, 2),
        8131,
        2,
    )?;
    eqz(ctx, &bigint_sub!(x25, x7, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x31, x8, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x4, x4, 2), 34, 1)?;
    return Ok(());
}
pub fn ec_pts_eq_test_8(ctx: &mut BigIntContext) -> Result<()> {
    let x0: BytePoly_1 = bigint_def!(ctx, 1, 0, 1);
    let x1: BytePoly_1 = bigint_def!(ctx, 1, 1, 1);
    let x2: BytePoly_1 = bigint_def!(ctx, 1, 2, 1);
    let x3: BytePoly_1 = bigint_def!(ctx, 1, 3, 1);
    let x4: BytePoly_1 = bigint_def!(ctx, 1, 4, 1);
    eqz(ctx, &bigint_sub!(x0, x3, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x1, x4, 1), 34, 1)?;
    eqz(ctx, &bigint_sub!(x2, x2, 1), 34, 1)?;
    return Ok(());
}
bigint_program_info! {rsa_256_x1, /*iters=*/1,
bigint_witness_info!(/*bits=*/256, /*label=*/0, /*public=*/ true, /*min_bits=*/255),
bigint_witness_info!(/*bits=*/256, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {rsa_256_x2, /*iters=*/2,
bigint_witness_info!(/*bits=*/256, /*label=*/0, /*public=*/ true, /*min_bits=*/255),
bigint_witness_info!(/*bits=*/256, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {rsa_3072_x15, /*iters=*/15,
bigint_witness_info!(/*bits=*/3072, /*label=*/0, /*public=*/ true, /*min_bits=*/3071),
bigint_witness_info!(/*bits=*/3072, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/3072, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {nondet_inv_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/7),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {const_add_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/17, /*label=*/1, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {const_add_alt_test_16, /*iters=*/1,
bigint_witness_info!(/*bits=*/16, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/17, /*label=*/1, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {const_mul_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/24, /*label=*/1, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {add_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {add_test_16, /*iters=*/1,
bigint_witness_info!(/*bits=*/16, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/16, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/17, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {add_test_128, /*iters=*/1,
bigint_witness_info!(/*bits=*/128, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/128, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/129, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {const_one_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {const_twobyte_test_16, /*iters=*/1,
bigint_witness_info!(/*bits=*/16, /*label=*/0, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {sub_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {sub_test_128, /*iters=*/1,
bigint_witness_info!(/*bits=*/128, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/128, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/128, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {mul_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/16, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {mul_test_128, /*iters=*/1,
bigint_witness_info!(/*bits=*/128, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/128, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {reduce_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {reduce_test_128, /*iters=*/1,
bigint_witness_info!(/*bits=*/128, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/128, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/128, /*label=*/2, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ecdsa_verify_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/5, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/6, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/7, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/8, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/9, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ecdsa_verify_256, /*iters=*/1,
bigint_witness_info!(/*bits=*/256, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/257, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/4, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/257, /*label=*/5, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/257, /*label=*/6, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/257, /*label=*/7, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/8, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/9, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_aff_add_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/5, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/6, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_aff_doub_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_aff_mul_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/5, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/6, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/7, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_aff_mul_test_256, /*iters=*/1,
bigint_witness_info!(/*bits=*/256, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/4, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/5, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/6, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/256, /*label=*/7, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_aff_neg_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_aff_sub_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/9, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/5, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/6, /*public=*/ true, /*min_bits=*/0)}
bigint_program_info! {ec_pts_eq_test_8, /*iters=*/1,
bigint_witness_info!(/*bits=*/8, /*label=*/0, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/1, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/2, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/3, /*public=*/ true, /*min_bits=*/0),
bigint_witness_info!(/*bits=*/8, /*label=*/4, /*public=*/ true, /*min_bits=*/0)}
bigint_program_list! {rsa_256_x1, rsa_256_x2, rsa_3072_x15, nondet_inv_test_8, const_add_test_8, const_add_alt_test_16, const_mul_test_8, add_test_8, add_test_16, add_test_128, const_one_test_8, const_twobyte_test_16, sub_test_8, sub_test_128, mul_test_8, mul_test_128, reduce_test_8, reduce_test_128, ecdsa_verify_8, ecdsa_verify_256, ec_aff_add_test_8, ec_aff_doub_test_8, ec_aff_mul_test_8, ec_aff_mul_test_256, ec_aff_neg_test_8, ec_aff_sub_test_8, ec_pts_eq_test_8}
